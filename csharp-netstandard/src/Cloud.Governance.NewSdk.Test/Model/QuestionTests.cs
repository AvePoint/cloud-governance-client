/* 
 * Cloud Governance Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Cloud.Governance.NewSdk.Api;
using Cloud.Governance.NewSdk.Model;
using Cloud.Governance.NewSdk.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Cloud.Governance.NewSdk.Test
{
    /// <summary>
    ///  Class for testing Question
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class QuestionTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for Question
        //private Question instance;

        public QuestionTests()
        {
            // TODO uncomment below to create an instance of Question
            //instance = new Question();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of Question
        /// </summary>
        [Fact]
        public void QuestionInstanceTest()
        {
            // TODO uncomment below to test "IsInstanceOfType" Question
            //Assert.IsInstanceOfType<Question> (instance, "variable 'instance' is a Question");
        }


        /// <summary>
        /// Test the property 'Id'
        /// </summary>
        [Fact]
        public void IdTest()
        {
            // TODO unit test for the property 'Id'
        }
        /// <summary>
        /// Test the property 'Type'
        /// </summary>
        [Fact]
        public void TypeTest()
        {
            // TODO unit test for the property 'Type'
        }
        /// <summary>
        /// Test the property 'Content'
        /// </summary>
        [Fact]
        public void ContentTest()
        {
            // TODO unit test for the property 'Content'
        }
        /// <summary>
        /// Test the property 'ContentHtml'
        /// </summary>
        [Fact]
        public void ContentHtmlTest()
        {
            // TODO unit test for the property 'ContentHtml'
        }
        /// <summary>
        /// Test the property 'Values'
        /// </summary>
        [Fact]
        public void ValuesTest()
        {
            // TODO unit test for the property 'Values'
        }
        /// <summary>
        /// Test the property 'DefaultValue'
        /// </summary>
        [Fact]
        public void DefaultValueTest()
        {
            // TODO unit test for the property 'DefaultValue'
        }
        /// <summary>
        /// Test the property 'TermSettings'
        /// </summary>
        [Fact]
        public void TermSettingsTest()
        {
            // TODO unit test for the property 'TermSettings'
        }
        /// <summary>
        /// Test the property 'IsMapToMetadata'
        /// </summary>
        [Fact]
        public void IsMapToMetadataTest()
        {
            // TODO unit test for the property 'IsMapToMetadata'
        }
        /// <summary>
        /// Test the property 'ReferenceMetadata'
        /// </summary>
        [Fact]
        public void ReferenceMetadataTest()
        {
            // TODO unit test for the property 'ReferenceMetadata'
        }
        /// <summary>
        /// Test the property 'ReferenceMetadataName'
        /// </summary>
        [Fact]
        public void ReferenceMetadataNameTest()
        {
            // TODO unit test for the property 'ReferenceMetadataName'
        }

    }

}
