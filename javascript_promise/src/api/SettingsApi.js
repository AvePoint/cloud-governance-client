/**
 * Cloud Governance Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.2.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApplicationSettings', 'model/CustomHelpLinkModel', 'model/InlineResponse200', 'model/NewsAndUpdatesModel', 'model/PermissionLevel', 'model/PersonalSettings', 'model/ResourceValue'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApplicationSettings'), require('../model/CustomHelpLinkModel'), require('../model/InlineResponse200'), require('../model/NewsAndUpdatesModel'), require('../model/PermissionLevel'), require('../model/PersonalSettings'), require('../model/ResourceValue'));
  } else {
    // Browser globals (root is window)
    if (!root.CgClient) {
      root.CgClient = {};
    }
    root.CgClient.SettingsApi = factory(root.CgClient.ApiClient, root.CgClient.ApplicationSettings, root.CgClient.CustomHelpLinkModel, root.CgClient.InlineResponse200, root.CgClient.NewsAndUpdatesModel, root.CgClient.PermissionLevel, root.CgClient.PersonalSettings, root.CgClient.ResourceValue);
  }
}(this, function(ApiClient, ApplicationSettings, CustomHelpLinkModel, InlineResponse200, NewsAndUpdatesModel, PermissionLevel, PersonalSettings, ResourceValue) {
  'use strict';

  /**
   * Settings service.
   * @module api/SettingsApi
   * @version 1.0
   */

  /**
   * Constructs a new SettingsApi. 
   * @alias module:api/SettingsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * edit my personal settings
     * @param {Object} opts Optional parameters
     * @param {module:model/PersonalSettings} opts.personalSettings 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.editMyPersonalSettingsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['personalSettings'];

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/settings/my', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * edit my personal settings
     * @param {Object} opts Optional parameters
     * @param {module:model/PersonalSettings} opts.personalSettings 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.editMyPersonalSettings = function(opts) {
      return this.editMyPersonalSettingsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get application settings
     * @param {Object} opts Optional parameters
     * @param {Number} opts.localeId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApplicationSettings} and HTTP response
     */
    this.getApplicationSettingsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
        'localeId': opts['localeId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ApplicationSettings;
      return this.apiClient.callApi(
        '/settings/app', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get application settings
     * @param {Object} opts Optional parameters
     * @param {Number} opts.localeId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApplicationSettings}
     */
    this.getApplicationSettings = function(opts) {
      return this.getApplicationSettingsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get group/teams dynamic membership rules
     * @param {String} tenantid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response
     */
    this.getDynamicMembershipRuleItemsWithHttpInfo = function(tenantid) {
      var postBody = null;
      // verify the required parameter 'tenantid' is set
      if (tenantid === undefined || tenantid === null) {
        throw new Error("Missing the required parameter 'tenantid' when calling getDynamicMembershipRuleItems");
      }

      var pathParams = {
        'tenantid': tenantid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = InlineResponse200;
      return this.apiClient.callApi(
        '/settings/office365/groups/dynamicmembershiprule/{tenantid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get group/teams dynamic membership rules
     * @param {String} tenantid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse200}
     */
    this.getDynamicMembershipRuleItems = function(tenantid) {
      return this.getDynamicMembershipRuleItemsWithHttpInfo(tenantid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get help link
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomHelpLinkModel} and HTTP response
     */
    this.getHelpLinkWithHttpInfo = function() {
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = CustomHelpLinkModel;
      return this.apiClient.callApi(
        '/settings/helplink', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get help link
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CustomHelpLinkModel}
     */
    this.getHelpLink = function() {
      return this.getHelpLinkWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get my personal settings
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PersonalSettings} and HTTP response
     */
    this.getMyPersonalSettingsWithHttpInfo = function() {
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = PersonalSettings;
      return this.apiClient.callApi(
        '/settings/my', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get my personal settings
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PersonalSettings}
     */
    this.getMyPersonalSettings = function() {
      return this.getMyPersonalSettingsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get news
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NewsAndUpdatesModel} and HTTP response
     */
    this.getNewsWithHttpInfo = function() {
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = NewsAndUpdatesModel;
      return this.apiClient.callApi(
        '/settings/news', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get news
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NewsAndUpdatesModel}
     */
    this.getNews = function() {
      return this.getNewsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get permission levels
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PermissionLevel>} and HTTP response
     */
    this.getPermissionLevelsWithHttpInfo = function() {
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = [PermissionLevel];
      return this.apiClient.callApi(
        '/settings/office365/permissionlevels', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get permission levels
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PermissionLevel>}
     */
    this.getPermissionLevels = function() {
      return this.getPermissionLevelsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get supported language
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ResourceValue>} and HTTP response
     */
    this.getSupportedLanguagesWithHttpInfo = function() {
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = [ResourceValue];
      return this.apiClient.callApi(
        '/settings/languages', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get supported language
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ResourceValue>}
     */
    this.getSupportedLanguages = function() {
      return this.getSupportedLanguagesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get timezones
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ResourceValue>} and HTTP response
     */
    this.getTimeZonesWithHttpInfo = function() {
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = [ResourceValue];
      return this.apiClient.callApi(
        '/settings/timezones', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get timezones
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ResourceValue>}
     */
    this.getTimeZones = function() {
      return this.getTimeZonesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
