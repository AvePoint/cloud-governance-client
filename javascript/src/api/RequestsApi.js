/**
 * Cloud Governance Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiRequest from '../model/ApiRequest';
import ArchiveGroupRequest from '../model/ArchiveGroupRequest';
import ArchiveSiteRequest from '../model/ArchiveSiteRequest';
import ArchiveWebLifecycleRequest from '../model/ArchiveWebLifecycleRequest';
import ChangeGroupPolicyRequest from '../model/ChangeGroupPolicyRequest';
import ChangeGroupQuotaRequest from '../model/ChangeGroupQuotaRequest';
import ChangeGroupSettingRequest from '../model/ChangeGroupSettingRequest';
import ChangeListSettingRequest from '../model/ChangeListSettingRequest';
import ChangePermissionRequest from '../model/ChangePermissionRequest';
import ChangeSiteContactRequest from '../model/ChangeSiteContactRequest';
import ChangeSitePolicyRequest from '../model/ChangeSitePolicyRequest';
import ChangeSiteQuotaRequest from '../model/ChangeSiteQuotaRequest';
import ChangeSiteSettingRequest from '../model/ChangeSiteSettingRequest';
import ChangeWebContactRequest from '../model/ChangeWebContactRequest';
import ChangeWebSettingRequest from '../model/ChangeWebSettingRequest';
import ClonePermissionRequest from '../model/ClonePermissionRequest';
import ContentMoveRequest from '../model/ContentMoveRequest';
import CreateGroupRequest from '../model/CreateGroupRequest';
import CreateListRequest from '../model/CreateListRequest';
import CreateSiteRequest from '../model/CreateSiteRequest';
import CreateWebRequest from '../model/CreateWebRequest';
import DeleteGroupRequest from '../model/DeleteGroupRequest';
import DeleteSiteRequest from '../model/DeleteSiteRequest';
import DeleteWebLifecycleRequest from '../model/DeleteWebLifecycleRequest';
import DistinctPageResult from '../model/DistinctPageResult';
import ExtendGroupRequest from '../model/ExtendGroupRequest';
import ExtendSiteRequest from '../model/ExtendSiteRequest';
import GrantPermissionRequest from '../model/GrantPermissionRequest';
import LockSiteRequest from '../model/LockSiteRequest';
import ManagePermissionRequest from '../model/ManagePermissionRequest';
import PermissionChangedActionItemPageResult from '../model/PermissionChangedActionItemPageResult';
import RequestListPageResult from '../model/RequestListPageResult';
import RestoreGroupRequest from '../model/RestoreGroupRequest';
import SecuritySearchResult from '../model/SecuritySearchResult';
import UnlockSiteRequest from '../model/UnlockSiteRequest';

/**
* Requests service.
* @module api/RequestsApi
* @version 1.0
*/
export default class RequestsApi {

    /**
    * Constructs a new RequestsApi. 
    * @alias module:api/RequestsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cancelRequest operation.
     * @callback module:api/RequestsApi~cancelRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * cancel request
     * @param {String} id 
     * @param {module:api/RequestsApi~cancelRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cancelRequest(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cancelRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/requests/{id}/cancel', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getArchiveGroupRequest operation.
     * @callback module:api/RequestsApi~getArchiveGroupRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArchiveGroupRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get archive group request
     * @param {String} id 
     * @param {module:api/RequestsApi~getArchiveGroupRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArchiveGroupRequest}
     */
    getArchiveGroupRequest(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getArchiveGroupRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ArchiveGroupRequest;
      return this.apiClient.callApi(
        '/requests/archivegroup/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getArchiveSiteRequest operation.
     * @callback module:api/RequestsApi~getArchiveSiteRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArchiveSiteRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get archive site request
     * @param {String} id 
     * @param {module:api/RequestsApi~getArchiveSiteRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArchiveSiteRequest}
     */
    getArchiveSiteRequest(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getArchiveSiteRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ArchiveSiteRequest;
      return this.apiClient.callApi(
        '/requests/archivesite/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getArchiveWebRequest operation.
     * @callback module:api/RequestsApi~getArchiveWebRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArchiveWebLifecycleRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get archive web request
     * @param {String} id 
     * @param {module:api/RequestsApi~getArchiveWebRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArchiveWebLifecycleRequest}
     */
    getArchiveWebRequest(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getArchiveWebRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ArchiveWebLifecycleRequest;
      return this.apiClient.callApi(
        '/requests/archiveweb/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChagneGroupPolicyRequest operation.
     * @callback module:api/RequestsApi~getChagneGroupPolicyRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChangeGroupPolicyRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get change group policy request
     * @param {String} id 
     * @param {module:api/RequestsApi~getChagneGroupPolicyRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChangeGroupPolicyRequest}
     */
    getChagneGroupPolicyRequest(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChagneGroupPolicyRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ChangeGroupPolicyRequest;
      return this.apiClient.callApi(
        '/requests/changegrouppolicy/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChangeGroupQuotaRequest operation.
     * @callback module:api/RequestsApi~getChangeGroupQuotaRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChangeGroupQuotaRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get change group quota request
     * @param {String} id 
     * @param {module:api/RequestsApi~getChangeGroupQuotaRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChangeGroupQuotaRequest}
     */
    getChangeGroupQuotaRequest(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChangeGroupQuotaRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ChangeGroupQuotaRequest;
      return this.apiClient.callApi(
        '/requests/changegroupquota/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChangeGroupSettingRequest operation.
     * @callback module:api/RequestsApi~getChangeGroupSettingRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChangeGroupSettingRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get change group settings request
     * @param {String} id 
     * @param {module:api/RequestsApi~getChangeGroupSettingRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChangeGroupSettingRequest}
     */
    getChangeGroupSettingRequest(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChangeGroupSettingRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ChangeGroupSettingRequest;
      return this.apiClient.callApi(
        '/requests/changegroup/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChangeListSettingRequest operation.
     * @callback module:api/RequestsApi~getChangeListSettingRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChangeListSettingRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get change list settings request
     * @param {String} id 
     * @param {module:api/RequestsApi~getChangeListSettingRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChangeListSettingRequest}
     */
    getChangeListSettingRequest(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChangeListSettingRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ChangeListSettingRequest;
      return this.apiClient.callApi(
        '/requests/changelistsetting/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChangePermissionRequest operation.
     * @callback module:api/RequestsApi~getChangePermissionRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChangePermissionRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get change permission request
     * @param {String} id 
     * @param {module:api/RequestsApi~getChangePermissionRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChangePermissionRequest}
     */
    getChangePermissionRequest(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChangePermissionRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ChangePermissionRequest;
      return this.apiClient.callApi(
        '/requests/changepermission/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChangeSiteContactRequest operation.
     * @callback module:api/RequestsApi~getChangeSiteContactRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChangeSiteContactRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get change site administrator or contact request
     * @param {String} id 
     * @param {module:api/RequestsApi~getChangeSiteContactRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChangeSiteContactRequest}
     */
    getChangeSiteContactRequest(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChangeSiteContactRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ChangeSiteContactRequest;
      return this.apiClient.callApi(
        '/requests/changesite/adminorcontact/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChangeSitePolicyRequest operation.
     * @callback module:api/RequestsApi~getChangeSitePolicyRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChangeSitePolicyRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get change site policy request
     * @param {String} id 
     * @param {module:api/RequestsApi~getChangeSitePolicyRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChangeSitePolicyRequest}
     */
    getChangeSitePolicyRequest(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChangeSitePolicyRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ChangeSitePolicyRequest;
      return this.apiClient.callApi(
        '/requests/changesitepolicy/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChangeSiteQuotaRequest operation.
     * @callback module:api/RequestsApi~getChangeSiteQuotaRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChangeSiteQuotaRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get change site quota request
     * @param {String} id 
     * @param {module:api/RequestsApi~getChangeSiteQuotaRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChangeSiteQuotaRequest}
     */
    getChangeSiteQuotaRequest(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChangeSiteQuotaRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ChangeSiteQuotaRequest;
      return this.apiClient.callApi(
        '/requests/changesitequota/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChangeSiteSettingRequest operation.
     * @callback module:api/RequestsApi~getChangeSiteSettingRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChangeSiteSettingRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get change site settings request
     * @param {String} id 
     * @param {module:api/RequestsApi~getChangeSiteSettingRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChangeSiteSettingRequest}
     */
    getChangeSiteSettingRequest(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChangeSiteSettingRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ChangeSiteSettingRequest;
      return this.apiClient.callApi(
        '/requests/changesite/setting/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChangeWebContactRequest operation.
     * @callback module:api/RequestsApi~getChangeWebContactRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChangeWebContactRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get change web contact request
     * @param {String} id 
     * @param {module:api/RequestsApi~getChangeWebContactRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChangeWebContactRequest}
     */
    getChangeWebContactRequest(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChangeWebContactRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ChangeWebContactRequest;
      return this.apiClient.callApi(
        '/requests/changewebcontact/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChangeWebSettingRequest operation.
     * @callback module:api/RequestsApi~getChangeWebSettingRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChangeWebSettingRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get change web settings request
     * @param {String} id 
     * @param {module:api/RequestsApi~getChangeWebSettingRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChangeWebSettingRequest}
     */
    getChangeWebSettingRequest(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChangeWebSettingRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ChangeWebSettingRequest;
      return this.apiClient.callApi(
        '/requests/changewebsettings/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChangedPermissionItems operation.
     * @callback module:api/RequestsApi~getChangedPermissionItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PermissionChangedActionItemPageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get changed permission items
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {Object} opts.body 
     * @param {module:api/RequestsApi~getChangedPermissionItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PermissionChangedActionItemPageResult}
     */
    getChangedPermissionItems(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChangedPermissionItems");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter': opts['filter'],
        'orderby': opts['orderby']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = PermissionChangedActionItemPageResult;
      return this.apiClient.callApi(
        '/requests/changepermission/{id}/result', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getClonePermissionRequest operation.
     * @callback module:api/RequestsApi~getClonePermissionRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClonePermissionRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get clone permission request
     * @param {String} id 
     * @param {module:api/RequestsApi~getClonePermissionRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClonePermissionRequest}
     */
    getClonePermissionRequest(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getClonePermissionRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ClonePermissionRequest;
      return this.apiClient.callApi(
        '/requests/clonepermission/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContentMoveRequest operation.
     * @callback module:api/RequestsApi~getContentMoveRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContentMoveRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get content move request
     * @param {String} id 
     * @param {module:api/RequestsApi~getContentMoveRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContentMoveRequest}
     */
    getContentMoveRequest(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getContentMoveRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ContentMoveRequest;
      return this.apiClient.callApi(
        '/requests/contentmove/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCreateGroupRequest operation.
     * @callback module:api/RequestsApi~getCreateGroupRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateGroupRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get create group request
     * @param {String} id 
     * @param {module:api/RequestsApi~getCreateGroupRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateGroupRequest}
     */
    getCreateGroupRequest(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCreateGroupRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = CreateGroupRequest;
      return this.apiClient.callApi(
        '/requests/creategroup/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCreateListRequest operation.
     * @callback module:api/RequestsApi~getCreateListRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateListRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get create list request
     * @param {String} id 
     * @param {module:api/RequestsApi~getCreateListRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateListRequest}
     */
    getCreateListRequest(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCreateListRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = CreateListRequest;
      return this.apiClient.callApi(
        '/requests/createlist/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCreateSiteRequest operation.
     * @callback module:api/RequestsApi~getCreateSiteRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSiteRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get create site request
     * @param {String} id 
     * @param {module:api/RequestsApi~getCreateSiteRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSiteRequest}
     */
    getCreateSiteRequest(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCreateSiteRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = CreateSiteRequest;
      return this.apiClient.callApi(
        '/requests/createsite/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCreateWebRequest operation.
     * @callback module:api/RequestsApi~getCreateWebRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateWebRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get create web request
     * @param {String} id 
     * @param {module:api/RequestsApi~getCreateWebRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateWebRequest}
     */
    getCreateWebRequest(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCreateWebRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = CreateWebRequest;
      return this.apiClient.callApi(
        '/requests/createweb/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomRequest operation.
     * @callback module:api/RequestsApi~getCustomRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get custom service request
     * @param {String} id 
     * @param {module:api/RequestsApi~getCustomRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiRequest}
     */
    getCustomRequest(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCustomRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ApiRequest;
      return this.apiClient.callApi(
        '/requests/custom/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeleteGroupRequest operation.
     * @callback module:api/RequestsApi~getDeleteGroupRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteGroupRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get delete group request
     * @param {String} id 
     * @param {module:api/RequestsApi~getDeleteGroupRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteGroupRequest}
     */
    getDeleteGroupRequest(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDeleteGroupRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = DeleteGroupRequest;
      return this.apiClient.callApi(
        '/requests/deletegroup/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeleteSiteRequest operation.
     * @callback module:api/RequestsApi~getDeleteSiteRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteSiteRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get delete site request
     * @param {String} id 
     * @param {module:api/RequestsApi~getDeleteSiteRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteSiteRequest}
     */
    getDeleteSiteRequest(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDeleteSiteRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = DeleteSiteRequest;
      return this.apiClient.callApi(
        '/requests/deletesite/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeleteWebRequest operation.
     * @callback module:api/RequestsApi~getDeleteWebRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteWebLifecycleRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get delete web request
     * @param {String} id 
     * @param {module:api/RequestsApi~getDeleteWebRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteWebLifecycleRequest}
     */
    getDeleteWebRequest(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDeleteWebRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = DeleteWebLifecycleRequest;
      return this.apiClient.callApi(
        '/requests/deleteweb/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExtendGroupRequest operation.
     * @callback module:api/RequestsApi~getExtendGroupRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExtendGroupRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get extend group request
     * @param {String} id 
     * @param {module:api/RequestsApi~getExtendGroupRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExtendGroupRequest}
     */
    getExtendGroupRequest(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getExtendGroupRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ExtendGroupRequest;
      return this.apiClient.callApi(
        '/requests/extendgroup/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExtendSiteRequest operation.
     * @callback module:api/RequestsApi~getExtendSiteRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExtendSiteRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get extend site request
     * @param {String} id 
     * @param {module:api/RequestsApi~getExtendSiteRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExtendSiteRequest}
     */
    getExtendSiteRequest(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getExtendSiteRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ExtendSiteRequest;
      return this.apiClient.callApi(
        '/requests/extendsite/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGrantPermissionRequest operation.
     * @callback module:api/RequestsApi~getGrantPermissionRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GrantPermissionRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get grant permission request
     * @param {String} id 
     * @param {module:api/RequestsApi~getGrantPermissionRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GrantPermissionRequest}
     */
    getGrantPermissionRequest(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGrantPermissionRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = GrantPermissionRequest;
      return this.apiClient.callApi(
        '/requests/grantpermission/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInheritedSitesForChangePermission operation.
     * @callback module:api/RequestsApi~getInheritedSitesForChangePermissionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SecuritySearchResult>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get inherited sites for change permissin request
     * @param {String} id 
     * @param {module:api/RequestsApi~getInheritedSitesForChangePermissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SecuritySearchResult>}
     */
    getInheritedSitesForChangePermission(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getInheritedSitesForChangePermission");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [SecuritySearchResult];
      return this.apiClient.callApi(
        '/requests/changepermission/{id}/inheritedsites', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLockSiteReuqest operation.
     * @callback module:api/RequestsApi~getLockSiteReuqestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LockSiteRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get lock site request
     * @param {String} id 
     * @param {module:api/RequestsApi~getLockSiteReuqestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LockSiteRequest}
     */
    getLockSiteReuqest(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getLockSiteReuqest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = LockSiteRequest;
      return this.apiClient.callApi(
        '/requests/locksite/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getManagePermissionRequest operation.
     * @callback module:api/RequestsApi~getManagePermissionRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagePermissionRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get manage permission request
     * @param {String} id 
     * @param {module:api/RequestsApi~getManagePermissionRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagePermissionRequest}
     */
    getManagePermissionRequest(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getManagePermissionRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ManagePermissionRequest;
      return this.apiClient.callApi(
        '/requests/managepermission/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMyRequestFilters operation.
     * @callback module:api/RequestsApi~getMyRequestFiltersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DistinctPageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get my requests filters
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, serviceId, serviceName, serviceType, ticketNumber, summary, status, processStatus, modified, submitStatus, assigned, serviceAdmin, enabledCopy
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> id, serviceId, serviceName, serviceType, ticketNumber, summary, status, processStatus, modified, submitStatus, assigned, serviceAdmin, enabledCopy
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @param {module:api/RequestsApi~getMyRequestFiltersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DistinctPageResult}
     */
    getMyRequestFilters(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'distinct': opts['distinct'],
        'top': opts['top'],
        'skip': opts['skip']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = DistinctPageResult;
      return this.apiClient.callApi(
        '/requests/my/filters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMyRequests operation.
     * @callback module:api/RequestsApi~getMyRequestsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RequestListPageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get my requests
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, serviceId, serviceName, serviceType, ticketNumber, summary, status, processStatus, modified, submitStatus, assigned, serviceAdmin, enabledCopy
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, serviceId, serviceName, serviceType, ticketNumber, summary, status, processStatus, modified, submitStatus, assigned, serviceAdmin, enabledCopy
     * @param {String} opts.search Search for summary
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @param {module:api/RequestsApi~getMyRequestsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RequestListPageResult}
     */
    getMyRequests(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'orderby': opts['orderby'],
        'search': opts['search'],
        'top': opts['top'],
        'skip': opts['skip']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = RequestListPageResult;
      return this.apiClient.callApi(
        '/requests/my', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRequestById operation.
     * @callback module:api/RequestsApi~getRequestByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get request by id
     * @param {String} id 
     * @param {module:api/RequestsApi~getRequestByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiRequest}
     */
    getRequestById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRequestById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ApiRequest;
      return this.apiClient.callApi(
        '/requests/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRestoreGroupRequest operation.
     * @callback module:api/RequestsApi~getRestoreGroupRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestoreGroupRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get restore group request
     * @param {String} id 
     * @param {module:api/RequestsApi~getRestoreGroupRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestoreGroupRequest}
     */
    getRestoreGroupRequest(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRestoreGroupRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = RestoreGroupRequest;
      return this.apiClient.callApi(
        '/requests/restoregroup/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUnlockSiteRequest operation.
     * @callback module:api/RequestsApi~getUnlockSiteRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnlockSiteRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get unlock site request
     * @param {String} id 
     * @param {module:api/RequestsApi~getUnlockSiteRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnlockSiteRequest}
     */
    getUnlockSiteRequest(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUnlockSiteRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = UnlockSiteRequest;
      return this.apiClient.callApi(
        '/requests/unlocksite/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitArchiveGroupRequest operation.
     * @callback module:api/RequestsApi~submitArchiveGroupRequestCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * submit archive group group request
     * @param {Object} opts Optional parameters
     * @param {module:model/ArchiveGroupRequest} opts.archiveGroupRequest 
     * @param {module:api/RequestsApi~submitArchiveGroupRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    submitArchiveGroupRequest(opts, callback) {
      opts = opts || {};
      let postBody = opts['archiveGroupRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/requests/archivegroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitArchiveSiteRequest operation.
     * @callback module:api/RequestsApi~submitArchiveSiteRequestCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * submit archive site request
     * @param {Object} opts Optional parameters
     * @param {module:model/ArchiveSiteRequest} opts.archiveSiteRequest 
     * @param {module:api/RequestsApi~submitArchiveSiteRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    submitArchiveSiteRequest(opts, callback) {
      opts = opts || {};
      let postBody = opts['archiveSiteRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/requests/archivesite', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitArchiveWebRequest operation.
     * @callback module:api/RequestsApi~submitArchiveWebRequestCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * submit archive web request
     * @param {Object} opts Optional parameters
     * @param {module:model/ArchiveWebLifecycleRequest} opts.archiveWebLifecycleRequest 
     * @param {module:api/RequestsApi~submitArchiveWebRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    submitArchiveWebRequest(opts, callback) {
      opts = opts || {};
      let postBody = opts['archiveWebLifecycleRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/requests/archiveweb', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitChangeGroupPolicyRequest operation.
     * @callback module:api/RequestsApi~submitChangeGroupPolicyRequestCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * submit change group policy request
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeGroupPolicyRequest} opts.changeGroupPolicyRequest 
     * @param {module:api/RequestsApi~submitChangeGroupPolicyRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    submitChangeGroupPolicyRequest(opts, callback) {
      opts = opts || {};
      let postBody = opts['changeGroupPolicyRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/requests/changegrouppolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitChangeGroupQuotaRequest operation.
     * @callback module:api/RequestsApi~submitChangeGroupQuotaRequestCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * submit change group quota request
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeGroupQuotaRequest} opts.changeGroupQuotaRequest 
     * @param {module:api/RequestsApi~submitChangeGroupQuotaRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    submitChangeGroupQuotaRequest(opts, callback) {
      opts = opts || {};
      let postBody = opts['changeGroupQuotaRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/requests/changegroupquota', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitChangeGroupSettingRequest operation.
     * @callback module:api/RequestsApi~submitChangeGroupSettingRequestCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * submit change group settings request
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeGroupSettingRequest} opts.changeGroupSettingRequest 
     * @param {module:api/RequestsApi~submitChangeGroupSettingRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    submitChangeGroupSettingRequest(opts, callback) {
      opts = opts || {};
      let postBody = opts['changeGroupSettingRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/requests/changegroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitChangeListSettingRequest operation.
     * @callback module:api/RequestsApi~submitChangeListSettingRequestCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * submit change list settings request
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeListSettingRequest} opts.changeListSettingRequest 
     * @param {module:api/RequestsApi~submitChangeListSettingRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    submitChangeListSettingRequest(opts, callback) {
      opts = opts || {};
      let postBody = opts['changeListSettingRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/requests/changelistsetting', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitChangePermissionRequest operation.
     * @callback module:api/RequestsApi~submitChangePermissionRequestCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * submit change permission request
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangePermissionRequest} opts.changePermissionRequest 
     * @param {module:api/RequestsApi~submitChangePermissionRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    submitChangePermissionRequest(opts, callback) {
      opts = opts || {};
      let postBody = opts['changePermissionRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/requests/changepermission', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitChangeSiteContactRequest operation.
     * @callback module:api/RequestsApi~submitChangeSiteContactRequestCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * submit change site administrator or contact request
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeSiteContactRequest} opts.changeSiteContactRequest 
     * @param {module:api/RequestsApi~submitChangeSiteContactRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    submitChangeSiteContactRequest(opts, callback) {
      opts = opts || {};
      let postBody = opts['changeSiteContactRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/requests/changesite/adminorcontact', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitChangeSitePolicyRequest operation.
     * @callback module:api/RequestsApi~submitChangeSitePolicyRequestCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * submit change site policy request
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeSitePolicyRequest} opts.changeSitePolicyRequest 
     * @param {module:api/RequestsApi~submitChangeSitePolicyRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    submitChangeSitePolicyRequest(opts, callback) {
      opts = opts || {};
      let postBody = opts['changeSitePolicyRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/requests/changesitepolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitChangeSiteQuotaRequest operation.
     * @callback module:api/RequestsApi~submitChangeSiteQuotaRequestCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * submit change site quota request
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeSiteQuotaRequest} opts.changeSiteQuotaRequest 
     * @param {module:api/RequestsApi~submitChangeSiteQuotaRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    submitChangeSiteQuotaRequest(opts, callback) {
      opts = opts || {};
      let postBody = opts['changeSiteQuotaRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/requests/changesitequota', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitChangeSiteSettingRequest operation.
     * @callback module:api/RequestsApi~submitChangeSiteSettingRequestCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * submit change site settings request
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeSiteSettingRequest} opts.changeSiteSettingRequest 
     * @param {module:api/RequestsApi~submitChangeSiteSettingRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    submitChangeSiteSettingRequest(opts, callback) {
      opts = opts || {};
      let postBody = opts['changeSiteSettingRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/requests/changesite/setting', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitChangeWebContactRequest operation.
     * @callback module:api/RequestsApi~submitChangeWebContactRequestCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * submit change web contact request
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeWebContactRequest} opts.changeWebContactRequest 
     * @param {module:api/RequestsApi~submitChangeWebContactRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    submitChangeWebContactRequest(opts, callback) {
      opts = opts || {};
      let postBody = opts['changeWebContactRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/requests/changewebcontact', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitChangeWebSettingRequest operation.
     * @callback module:api/RequestsApi~submitChangeWebSettingRequestCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * submit change web settings request
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeWebSettingRequest} opts.changeWebSettingRequest 
     * @param {module:api/RequestsApi~submitChangeWebSettingRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    submitChangeWebSettingRequest(opts, callback) {
      opts = opts || {};
      let postBody = opts['changeWebSettingRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/requests/changewebsettings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitClonePermissionRequest operation.
     * @callback module:api/RequestsApi~submitClonePermissionRequestCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get clone permission request
     * @param {Object} opts Optional parameters
     * @param {module:model/ClonePermissionRequest} opts.clonePermissionRequest 
     * @param {module:api/RequestsApi~submitClonePermissionRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    submitClonePermissionRequest(opts, callback) {
      opts = opts || {};
      let postBody = opts['clonePermissionRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/requests/clonepermission', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitContentMoveRequest operation.
     * @callback module:api/RequestsApi~submitContentMoveRequestCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * submit create content move request
     * @param {Object} opts Optional parameters
     * @param {module:model/ContentMoveRequest} opts.contentMoveRequest 
     * @param {module:api/RequestsApi~submitContentMoveRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    submitContentMoveRequest(opts, callback) {
      opts = opts || {};
      let postBody = opts['contentMoveRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/requests/contentmove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitCreateGroupRequest operation.
     * @callback module:api/RequestsApi~submitCreateGroupRequestCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * submit create group request
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateGroupRequest} opts.createGroupRequest 
     * @param {module:api/RequestsApi~submitCreateGroupRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    submitCreateGroupRequest(opts, callback) {
      opts = opts || {};
      let postBody = opts['createGroupRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/requests/creategroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitCreateListRequest operation.
     * @callback module:api/RequestsApi~submitCreateListRequestCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * submit create list request
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateListRequest} opts.createListRequest 
     * @param {module:api/RequestsApi~submitCreateListRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    submitCreateListRequest(opts, callback) {
      opts = opts || {};
      let postBody = opts['createListRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/requests/createlist', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitCreateSiteRequest operation.
     * @callback module:api/RequestsApi~submitCreateSiteRequestCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * submit create site request
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateSiteRequest} opts.createSiteRequest 
     * @param {module:api/RequestsApi~submitCreateSiteRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    submitCreateSiteRequest(opts, callback) {
      opts = opts || {};
      let postBody = opts['createSiteRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/requests/createsite', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitCreateWebRequest operation.
     * @callback module:api/RequestsApi~submitCreateWebRequestCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * submit create web request
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateWebRequest} opts.createWebRequest 
     * @param {module:api/RequestsApi~submitCreateWebRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    submitCreateWebRequest(opts, callback) {
      opts = opts || {};
      let postBody = opts['createWebRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/requests/createweb', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitCustomRequest operation.
     * @callback module:api/RequestsApi~submitCustomRequestCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * submit custom service request
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiRequest} opts.apiRequest 
     * @param {module:api/RequestsApi~submitCustomRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    submitCustomRequest(opts, callback) {
      opts = opts || {};
      let postBody = opts['apiRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/requests/custom', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitDeleteGroupRequest operation.
     * @callback module:api/RequestsApi~submitDeleteGroupRequestCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * submit delete group request
     * @param {Object} opts Optional parameters
     * @param {module:model/DeleteGroupRequest} opts.deleteGroupRequest 
     * @param {module:api/RequestsApi~submitDeleteGroupRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    submitDeleteGroupRequest(opts, callback) {
      opts = opts || {};
      let postBody = opts['deleteGroupRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/requests/deletegroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitDeleteSiteRequest operation.
     * @callback module:api/RequestsApi~submitDeleteSiteRequestCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * submit delete site request
     * @param {Object} opts Optional parameters
     * @param {module:model/DeleteSiteRequest} opts.deleteSiteRequest 
     * @param {module:api/RequestsApi~submitDeleteSiteRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    submitDeleteSiteRequest(opts, callback) {
      opts = opts || {};
      let postBody = opts['deleteSiteRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/requests/deletesite', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitDeleteWebRequest operation.
     * @callback module:api/RequestsApi~submitDeleteWebRequestCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * submit delete web request
     * @param {Object} opts Optional parameters
     * @param {module:model/DeleteWebLifecycleRequest} opts.deleteWebLifecycleRequest 
     * @param {module:api/RequestsApi~submitDeleteWebRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    submitDeleteWebRequest(opts, callback) {
      opts = opts || {};
      let postBody = opts['deleteWebLifecycleRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/requests/deleteweb', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitExtendGroupRequest operation.
     * @callback module:api/RequestsApi~submitExtendGroupRequestCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * submit extend group request
     * @param {Object} opts Optional parameters
     * @param {module:model/ExtendGroupRequest} opts.extendGroupRequest 
     * @param {module:api/RequestsApi~submitExtendGroupRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    submitExtendGroupRequest(opts, callback) {
      opts = opts || {};
      let postBody = opts['extendGroupRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/requests/extendgroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitExtendSiteRequest operation.
     * @callback module:api/RequestsApi~submitExtendSiteRequestCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * submit extend site request
     * @param {Object} opts Optional parameters
     * @param {module:model/ExtendSiteRequest} opts.extendSiteRequest 
     * @param {module:api/RequestsApi~submitExtendSiteRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    submitExtendSiteRequest(opts, callback) {
      opts = opts || {};
      let postBody = opts['extendSiteRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/requests/extendsite', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitGrantPermissionRequest operation.
     * @callback module:api/RequestsApi~submitGrantPermissionRequestCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get submit grant permission request
     * @param {Object} opts Optional parameters
     * @param {module:model/GrantPermissionRequest} opts.grantPermissionRequest 
     * @param {module:api/RequestsApi~submitGrantPermissionRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    submitGrantPermissionRequest(opts, callback) {
      opts = opts || {};
      let postBody = opts['grantPermissionRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/requests/grantpermission', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitLockSiteRequest operation.
     * @callback module:api/RequestsApi~submitLockSiteRequestCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * submit lock site request
     * @param {Object} opts Optional parameters
     * @param {module:model/LockSiteRequest} opts.lockSiteRequest 
     * @param {module:api/RequestsApi~submitLockSiteRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    submitLockSiteRequest(opts, callback) {
      opts = opts || {};
      let postBody = opts['lockSiteRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/requests/locksite', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitManagePermimssionRequest operation.
     * @callback module:api/RequestsApi~submitManagePermimssionRequestCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * submit manage permission request
     * @param {Object} opts Optional parameters
     * @param {module:model/ManagePermissionRequest} opts.managePermissionRequest 
     * @param {module:api/RequestsApi~submitManagePermimssionRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    submitManagePermimssionRequest(opts, callback) {
      opts = opts || {};
      let postBody = opts['managePermissionRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/requests/managepermission', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitRestoreGroupRequest operation.
     * @callback module:api/RequestsApi~submitRestoreGroupRequestCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * submit restore group request
     * @param {Object} opts Optional parameters
     * @param {module:model/RestoreGroupRequest} opts.restoreGroupRequest 
     * @param {module:api/RequestsApi~submitRestoreGroupRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    submitRestoreGroupRequest(opts, callback) {
      opts = opts || {};
      let postBody = opts['restoreGroupRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/requests/restoregroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitUnlockSiteRequest operation.
     * @callback module:api/RequestsApi~submitUnlockSiteRequestCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * submit unlock site request
     * @param {Object} opts Optional parameters
     * @param {module:model/UnlockSiteRequest} opts.unlockSiteRequest 
     * @param {module:api/RequestsApi~submitUnlockSiteRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    submitUnlockSiteRequest(opts, callback) {
      opts = opts || {};
      let postBody = opts['unlockSiteRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/requests/unlocksite', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
