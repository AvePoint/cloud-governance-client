/* 
 * Cloud Governance Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Cloud.Governance.Client.Client.OpenAPIDateConverter;

namespace Cloud.Governance.Client.Model
{
    /// <summary>
    /// RequestAuditGridModel
    /// </summary>
    [DataContract]
    public partial class RequestAuditGridModel :  IEquatable<RequestAuditGridModel>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets ProgressStatusDetail
        /// </summary>
        [DataMember(Name="progressStatusDetail", EmitDefaultValue=false)]
        public RequestProgressStatus? ProgressStatusDetail { get; set; }
        /// <summary>
        /// Gets or Sets ProgressStatus
        /// </summary>
        [DataMember(Name="progressStatus", EmitDefaultValue=false)]
        public ApiRequestProgressStatus? ProgressStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RequestAuditGridModel" /> class.
        /// </summary>
        /// <param name="requestId">requestId.</param>
        /// <param name="ticketNumber">ticketNumber.</param>
        /// <param name="requestSummary">requestSummary.</param>
        /// <param name="requester">requester.</param>
        /// <param name="requesterDisplayName">requesterDisplayName.</param>
        /// <param name="department">department.</param>
        /// <param name="description">description.</param>
        /// <param name="submittedTime">submittedTime.</param>
        /// <param name="progressStatusDetail">progressStatusDetail.</param>
        /// <param name="progressStatus">progressStatus.</param>
        /// <param name="assignTo">assignTo.</param>
        /// <param name="assignToDisplayName">assignToDisplayName.</param>
        /// <param name="lastUpdated">lastUpdated.</param>
        /// <param name="serviceId">serviceId.</param>
        /// <param name="serviceType">serviceType.</param>
        /// <param name="serviceName">serviceName.</param>
        /// <param name="createdTime">createdTime.</param>
        public RequestAuditGridModel(Guid requestId = default(Guid), int ticketNumber = default(int), string requestSummary = default(string), string requester = default(string), string requesterDisplayName = default(string), string department = default(string), string description = default(string), DateTime submittedTime = default(DateTime), RequestProgressStatus progressStatusDetail = default(RequestProgressStatus), ApiRequestProgressStatus progressStatus = default(ApiRequestProgressStatus), string assignTo = default(string), string assignToDisplayName = default(string), DateTime lastUpdated = default(DateTime), Guid serviceId = default(Guid), int serviceType = default(int), string serviceName = default(string), string createdTime = default(string))
        {
            this.RequestId = requestId;
            this.TicketNumber = ticketNumber;
            this.RequestSummary = requestSummary;
            this.Requester = requester;
            this.RequesterDisplayName = requesterDisplayName;
            this.Department = department;
            this.Description = description;
            this.SubmittedTime = submittedTime;
            this.ProgressStatusDetail = progressStatusDetail;
            this.ProgressStatus = progressStatus;
            this.AssignTo = assignTo;
            this.AssignToDisplayName = assignToDisplayName;
            this.LastUpdated = lastUpdated;
            this.ServiceId = serviceId;
            this.ServiceType = serviceType;
            this.ServiceName = serviceName;
            this.CreatedTime = createdTime;
        }
        
        /// <summary>
        /// Gets or Sets RequestId
        /// </summary>
        [DataMember(Name="requestId", EmitDefaultValue=false)]
        public Guid RequestId { get; set; }

        /// <summary>
        /// Gets or Sets TicketNumber
        /// </summary>
        [DataMember(Name="ticketNumber", EmitDefaultValue=false)]
        public int TicketNumber { get; set; }

        /// <summary>
        /// Gets or Sets RequestSummary
        /// </summary>
        [DataMember(Name="requestSummary", EmitDefaultValue=true)]
        public string RequestSummary { get; set; }

        /// <summary>
        /// Gets or Sets Requester
        /// </summary>
        [DataMember(Name="requester", EmitDefaultValue=true)]
        public string Requester { get; set; }

        /// <summary>
        /// Gets or Sets RequesterDisplayName
        /// </summary>
        [DataMember(Name="requesterDisplayName", EmitDefaultValue=true)]
        public string RequesterDisplayName { get; set; }

        /// <summary>
        /// Gets or Sets Department
        /// </summary>
        [DataMember(Name="department", EmitDefaultValue=true)]
        public string Department { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets SubmittedTime
        /// </summary>
        [DataMember(Name="submittedTime", EmitDefaultValue=false)]
        public DateTime SubmittedTime { get; set; }

        /// <summary>
        /// Gets or Sets ProgressStatusDetailDescription
        /// </summary>
        [DataMember(Name="progressStatusDetailDescription", EmitDefaultValue=true)]
        public string ProgressStatusDetailDescription { get; private set; }

        /// <summary>
        /// Gets or Sets ProgressStatusDescription
        /// </summary>
        [DataMember(Name="progressStatusDescription", EmitDefaultValue=true)]
        public string ProgressStatusDescription { get; private set; }

        /// <summary>
        /// Gets or Sets AssignTo
        /// </summary>
        [DataMember(Name="assignTo", EmitDefaultValue=true)]
        public string AssignTo { get; set; }

        /// <summary>
        /// Gets or Sets AssignToDisplayName
        /// </summary>
        [DataMember(Name="assignToDisplayName", EmitDefaultValue=true)]
        public string AssignToDisplayName { get; set; }

        /// <summary>
        /// Gets or Sets LastUpdated
        /// </summary>
        [DataMember(Name="lastUpdated", EmitDefaultValue=false)]
        public DateTime LastUpdated { get; set; }

        /// <summary>
        /// Gets or Sets ServiceId
        /// </summary>
        [DataMember(Name="serviceId", EmitDefaultValue=false)]
        public Guid ServiceId { get; set; }

        /// <summary>
        /// Gets or Sets ServiceType
        /// </summary>
        [DataMember(Name="serviceType", EmitDefaultValue=false)]
        public int ServiceType { get; set; }

        /// <summary>
        /// Gets or Sets ServiceName
        /// </summary>
        [DataMember(Name="serviceName", EmitDefaultValue=true)]
        public string ServiceName { get; set; }

        /// <summary>
        /// Gets or Sets CreatedTime
        /// </summary>
        [DataMember(Name="createdTime", EmitDefaultValue=true)]
        public string CreatedTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RequestAuditGridModel {\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  TicketNumber: ").Append(TicketNumber).Append("\n");
            sb.Append("  RequestSummary: ").Append(RequestSummary).Append("\n");
            sb.Append("  Requester: ").Append(Requester).Append("\n");
            sb.Append("  RequesterDisplayName: ").Append(RequesterDisplayName).Append("\n");
            sb.Append("  Department: ").Append(Department).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  SubmittedTime: ").Append(SubmittedTime).Append("\n");
            sb.Append("  ProgressStatusDetail: ").Append(ProgressStatusDetail).Append("\n");
            sb.Append("  ProgressStatusDetailDescription: ").Append(ProgressStatusDetailDescription).Append("\n");
            sb.Append("  ProgressStatus: ").Append(ProgressStatus).Append("\n");
            sb.Append("  ProgressStatusDescription: ").Append(ProgressStatusDescription).Append("\n");
            sb.Append("  AssignTo: ").Append(AssignTo).Append("\n");
            sb.Append("  AssignToDisplayName: ").Append(AssignToDisplayName).Append("\n");
            sb.Append("  LastUpdated: ").Append(LastUpdated).Append("\n");
            sb.Append("  ServiceId: ").Append(ServiceId).Append("\n");
            sb.Append("  ServiceType: ").Append(ServiceType).Append("\n");
            sb.Append("  ServiceName: ").Append(ServiceName).Append("\n");
            sb.Append("  CreatedTime: ").Append(CreatedTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RequestAuditGridModel);
        }

        /// <summary>
        /// Returns true if RequestAuditGridModel instances are equal
        /// </summary>
        /// <param name="input">Instance of RequestAuditGridModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RequestAuditGridModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.TicketNumber == input.TicketNumber ||
                    this.TicketNumber.Equals(input.TicketNumber)
                ) && 
                (
                    this.RequestSummary == input.RequestSummary ||
                    (this.RequestSummary != null &&
                    this.RequestSummary.Equals(input.RequestSummary))
                ) && 
                (
                    this.Requester == input.Requester ||
                    (this.Requester != null &&
                    this.Requester.Equals(input.Requester))
                ) && 
                (
                    this.RequesterDisplayName == input.RequesterDisplayName ||
                    (this.RequesterDisplayName != null &&
                    this.RequesterDisplayName.Equals(input.RequesterDisplayName))
                ) && 
                (
                    this.Department == input.Department ||
                    (this.Department != null &&
                    this.Department.Equals(input.Department))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.SubmittedTime == input.SubmittedTime ||
                    (this.SubmittedTime != null &&
                    this.SubmittedTime.Equals(input.SubmittedTime))
                ) && 
                (
                    this.ProgressStatusDetail == input.ProgressStatusDetail ||
                    this.ProgressStatusDetail.Equals(input.ProgressStatusDetail)
                ) && 
                (
                    this.ProgressStatusDetailDescription == input.ProgressStatusDetailDescription ||
                    (this.ProgressStatusDetailDescription != null &&
                    this.ProgressStatusDetailDescription.Equals(input.ProgressStatusDetailDescription))
                ) && 
                (
                    this.ProgressStatus == input.ProgressStatus ||
                    this.ProgressStatus.Equals(input.ProgressStatus)
                ) && 
                (
                    this.ProgressStatusDescription == input.ProgressStatusDescription ||
                    (this.ProgressStatusDescription != null &&
                    this.ProgressStatusDescription.Equals(input.ProgressStatusDescription))
                ) && 
                (
                    this.AssignTo == input.AssignTo ||
                    (this.AssignTo != null &&
                    this.AssignTo.Equals(input.AssignTo))
                ) && 
                (
                    this.AssignToDisplayName == input.AssignToDisplayName ||
                    (this.AssignToDisplayName != null &&
                    this.AssignToDisplayName.Equals(input.AssignToDisplayName))
                ) && 
                (
                    this.LastUpdated == input.LastUpdated ||
                    (this.LastUpdated != null &&
                    this.LastUpdated.Equals(input.LastUpdated))
                ) && 
                (
                    this.ServiceId == input.ServiceId ||
                    (this.ServiceId != null &&
                    this.ServiceId.Equals(input.ServiceId))
                ) && 
                (
                    this.ServiceType == input.ServiceType ||
                    this.ServiceType.Equals(input.ServiceType)
                ) && 
                (
                    this.ServiceName == input.ServiceName ||
                    (this.ServiceName != null &&
                    this.ServiceName.Equals(input.ServiceName))
                ) && 
                (
                    this.CreatedTime == input.CreatedTime ||
                    (this.CreatedTime != null &&
                    this.CreatedTime.Equals(input.CreatedTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequestId != null)
                    hashCode = hashCode * 59 + this.RequestId.GetHashCode();
                hashCode = hashCode * 59 + this.TicketNumber.GetHashCode();
                if (this.RequestSummary != null)
                    hashCode = hashCode * 59 + this.RequestSummary.GetHashCode();
                if (this.Requester != null)
                    hashCode = hashCode * 59 + this.Requester.GetHashCode();
                if (this.RequesterDisplayName != null)
                    hashCode = hashCode * 59 + this.RequesterDisplayName.GetHashCode();
                if (this.Department != null)
                    hashCode = hashCode * 59 + this.Department.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.SubmittedTime != null)
                    hashCode = hashCode * 59 + this.SubmittedTime.GetHashCode();
                hashCode = hashCode * 59 + this.ProgressStatusDetail.GetHashCode();
                if (this.ProgressStatusDetailDescription != null)
                    hashCode = hashCode * 59 + this.ProgressStatusDetailDescription.GetHashCode();
                hashCode = hashCode * 59 + this.ProgressStatus.GetHashCode();
                if (this.ProgressStatusDescription != null)
                    hashCode = hashCode * 59 + this.ProgressStatusDescription.GetHashCode();
                if (this.AssignTo != null)
                    hashCode = hashCode * 59 + this.AssignTo.GetHashCode();
                if (this.AssignToDisplayName != null)
                    hashCode = hashCode * 59 + this.AssignToDisplayName.GetHashCode();
                if (this.LastUpdated != null)
                    hashCode = hashCode * 59 + this.LastUpdated.GetHashCode();
                if (this.ServiceId != null)
                    hashCode = hashCode * 59 + this.ServiceId.GetHashCode();
                hashCode = hashCode * 59 + this.ServiceType.GetHashCode();
                if (this.ServiceName != null)
                    hashCode = hashCode * 59 + this.ServiceName.GetHashCode();
                if (this.CreatedTime != null)
                    hashCode = hashCode * 59 + this.CreatedTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
