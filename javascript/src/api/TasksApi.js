/**
 * Cloud Governance Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiRequest from '../model/ApiRequest';
import ApiTask from '../model/ApiTask';
import ApiUser from '../model/ApiUser';
import ArchiveGroupRequest from '../model/ArchiveGroupRequest';
import ArchiveSiteRequest from '../model/ArchiveSiteRequest';
import ArchiveWebLifecycleRequest from '../model/ArchiveWebLifecycleRequest';
import AutoTaskArchiveRequest from '../model/AutoTaskArchiveRequest';
import AutoTaskChangePolicyRequest from '../model/AutoTaskChangePolicyRequest';
import AutoTaskDeleteRequest from '../model/AutoTaskDeleteRequest';
import AutoTaskExtendRequest from '../model/AutoTaskExtendRequest';
import ChangeGroupPolicyRequest from '../model/ChangeGroupPolicyRequest';
import ChangeGroupQuotaRequest from '../model/ChangeGroupQuotaRequest';
import ChangeGroupSettingRequest from '../model/ChangeGroupSettingRequest';
import ChangeListSettingRequest from '../model/ChangeListSettingRequest';
import ChangePermissionRequest from '../model/ChangePermissionRequest';
import ChangeSiteContactRequest from '../model/ChangeSiteContactRequest';
import ChangeSitePolicyRequest from '../model/ChangeSitePolicyRequest';
import ChangeSiteQuotaRequest from '../model/ChangeSiteQuotaRequest';
import ChangeSiteSettingRequest from '../model/ChangeSiteSettingRequest';
import ChangeWebContactRequest from '../model/ChangeWebContactRequest';
import ChangeWebSettingRequest from '../model/ChangeWebSettingRequest';
import ClonePermissionReportProperty from '../model/ClonePermissionReportProperty';
import ClonePermissionRequest from '../model/ClonePermissionRequest';
import ClonePermissionSecuritySearchResultPageResult from '../model/ClonePermissionSecuritySearchResultPageResult';
import CommentsParam from '../model/CommentsParam';
import ContentMoveRequest from '../model/ContentMoveRequest';
import CreateGroupRequest from '../model/CreateGroupRequest';
import CreateListRequest from '../model/CreateListRequest';
import CreateSiteRequest from '../model/CreateSiteRequest';
import CreateWebRequest from '../model/CreateWebRequest';
import CustomMetadata from '../model/CustomMetadata';
import DeleteGroupRequest from '../model/DeleteGroupRequest';
import DeleteSiteRequest from '../model/DeleteSiteRequest';
import DeleteWebLifecycleRequest from '../model/DeleteWebLifecycleRequest';
import DistinctPageResult from '../model/DistinctPageResult';
import ExtendGroupRequest from '../model/ExtendGroupRequest';
import ExtendSiteRequest from '../model/ExtendSiteRequest';
import GrantPermissionRequest from '../model/GrantPermissionRequest';
import GroupPermissionActionItem from '../model/GroupPermissionActionItem';
import GroupPermissionActionItemPageResult from '../model/GroupPermissionActionItemPageResult';
import LockSiteRequest from '../model/LockSiteRequest';
import ManagePermissionRequest from '../model/ManagePermissionRequest';
import ManuallyArchiveRecordModel from '../model/ManuallyArchiveRecordModel';
import ManuallyArchiveRecordModelPageResult from '../model/ManuallyArchiveRecordModelPageResult';
import MembershipRecertificationItemPageResult from '../model/MembershipRecertificationItemPageResult';
import MembershipRecertificationReportProperties from '../model/MembershipRecertificationReportProperties';
import MetadataRecertificationReportProperties from '../model/MetadataRecertificationReportProperties';
import OwnershipRecertification from '../model/OwnershipRecertification';
import PermissionActionItem from '../model/PermissionActionItem';
import PermissionActionItemPageResult from '../model/PermissionActionItemPageResult';
import PermissionLevel from '../model/PermissionLevel';
import RecertificationReportProperties from '../model/RecertificationReportProperties';
import RequestMetadata from '../model/RequestMetadata';
import RestoreGroupRequest from '../model/RestoreGroupRequest';
import SecuritySearchResult from '../model/SecuritySearchResult';
import SecuritySearchResultPageResult from '../model/SecuritySearchResultPageResult';
import TaskList from '../model/TaskList';
import TaskListPageResult from '../model/TaskListPageResult';
import UnlockSiteRequest from '../model/UnlockSiteRequest';

/**
* Tasks service.
* @module api/TasksApi
* @version 1.0
*/
export default class TasksApi {

    /**
    * Constructs a new TasksApi. 
    * @alias module:api/TasksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addMembersForGroupMembershipRecertification operation.
     * @callback module:api/TasksApi~addMembersForGroupMembershipRecertificationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * add members for group membership recertification
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/ApiUser>} opts.apiUser 
     * @param {module:api/TasksApi~addMembersForGroupMembershipRecertificationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addMembersForGroupMembershipRecertification(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiUser'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addMembersForGroupMembershipRecertification");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/group/recertification/membership/members', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addOwnersForGroupMembershipRecertification operation.
     * @callback module:api/TasksApi~addOwnersForGroupMembershipRecertificationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * add owners for group membership recertification
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/ApiUser>} opts.apiUser 
     * @param {module:api/TasksApi~addOwnersForGroupMembershipRecertificationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addOwnersForGroupMembershipRecertification(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiUser'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addOwnersForGroupMembershipRecertification");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/group/recertification/membership/owners', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the approveTask operation.
     * @callback module:api/TasksApi~approveTaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * approve task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/CommentsParam} opts.commentsParam 
     * @param {module:api/TasksApi~approveTaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    approveTask(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['commentsParam'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling approveTask");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/approve', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the claimElectionTask operation.
     * @callback module:api/TasksApi~claimElectionTaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * claim election task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.secondarycontact 
     * @param {module:api/TasksApi~claimElectionTaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    claimElectionTask(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling claimElectionTask");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'secondarycontact': opts['secondarycontact']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/election/claim', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the claimSiteOwnershipRecertificationTask operation.
     * @callback module:api/TasksApi~claimSiteOwnershipRecertificationTaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * claim site ownership recertification task
     * @param {String} id 
     * @param {String} secondarycontact 
     * @param {module:api/TasksApi~claimSiteOwnershipRecertificationTaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    claimSiteOwnershipRecertificationTask(id, secondarycontact, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling claimSiteOwnershipRecertificationTask");
      }
      // verify the required parameter 'secondarycontact' is set
      if (secondarycontact === undefined || secondarycontact === null) {
        throw new Error("Missing the required parameter 'secondarycontact' when calling claimSiteOwnershipRecertificationTask");
      }

      let pathParams = {
        'id': id,
        'secondarycontact': secondarycontact
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/site/recertification/ownership/claim/{secondarycontact}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the declineElectionTask operation.
     * @callback module:api/TasksApi~declineElectionTaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * decline election task
     * @param {String} id 
     * @param {module:api/TasksApi~declineElectionTaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    declineElectionTask(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling declineElectionTask");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/election/decline', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the declineSiteOwnershipRecertificationTask operation.
     * @callback module:api/TasksApi~declineSiteOwnershipRecertificationTaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * decline site ownership recertification task
     * @param {String} id 
     * @param {module:api/TasksApi~declineSiteOwnershipRecertificationTaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    declineSiteOwnershipRecertificationTask(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling declineSiteOwnershipRecertificationTask");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/site/recertification/ownership/decline', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the demoteAsMembersForGroupMembershipRecertification operation.
     * @callback module:api/TasksApi~demoteAsMembersForGroupMembershipRecertificationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * demote as members for group membership recertification
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/ApiUser>} opts.apiUser 
     * @param {module:api/TasksApi~demoteAsMembersForGroupMembershipRecertificationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    demoteAsMembersForGroupMembershipRecertification(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiUser'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling demoteAsMembersForGroupMembershipRecertification");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/group/recertification/membership/demoteasmember', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editArchiveGroupRequest operation.
     * @callback module:api/TasksApi~editArchiveGroupRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * edit archive group request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ArchiveGroupRequest} opts.archiveGroupRequest 
     * @param {module:api/TasksApi~editArchiveGroupRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    editArchiveGroupRequest(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['archiveGroupRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editArchiveGroupRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/archivegroup', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editArchiveSiteRequest operation.
     * @callback module:api/TasksApi~editArchiveSiteRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * edit archive site request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ArchiveSiteRequest} opts.archiveSiteRequest 
     * @param {module:api/TasksApi~editArchiveSiteRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    editArchiveSiteRequest(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['archiveSiteRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editArchiveSiteRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/archivesite', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editArchiveWebRequest operation.
     * @callback module:api/TasksApi~editArchiveWebRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * edit archive web request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ArchiveWebLifecycleRequest} opts.archiveWebLifecycleRequest 
     * @param {module:api/TasksApi~editArchiveWebRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    editArchiveWebRequest(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['archiveWebLifecycleRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editArchiveWebRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/archiveweb', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editChangeGroupPolicyRequest operation.
     * @callback module:api/TasksApi~editChangeGroupPolicyRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * edit change group policy request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeGroupPolicyRequest} opts.changeGroupPolicyRequest 
     * @param {module:api/TasksApi~editChangeGroupPolicyRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    editChangeGroupPolicyRequest(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['changeGroupPolicyRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editChangeGroupPolicyRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/changegrouppolicy', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editChangeGroupQuotaRequest operation.
     * @callback module:api/TasksApi~editChangeGroupQuotaRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * edit change group quota request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeGroupQuotaRequest} opts.changeGroupQuotaRequest 
     * @param {module:api/TasksApi~editChangeGroupQuotaRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    editChangeGroupQuotaRequest(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['changeGroupQuotaRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editChangeGroupQuotaRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/changegroupquota', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editChangeGroupRequest operation.
     * @callback module:api/TasksApi~editChangeGroupRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * edit create change group request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeGroupSettingRequest} opts.changeGroupSettingRequest 
     * @param {module:api/TasksApi~editChangeGroupRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    editChangeGroupRequest(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['changeGroupSettingRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editChangeGroupRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/changegroup', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editChangeListSettingRequest operation.
     * @callback module:api/TasksApi~editChangeListSettingRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * edit change list setting request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeListSettingRequest} opts.changeListSettingRequest 
     * @param {module:api/TasksApi~editChangeListSettingRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    editChangeListSettingRequest(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['changeListSettingRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editChangeListSettingRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/changelistsetting', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editChangePermissionRequest operation.
     * @callback module:api/TasksApi~editChangePermissionRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * edit change permission request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangePermissionRequest} opts.changePermissionRequest 
     * @param {module:api/TasksApi~editChangePermissionRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    editChangePermissionRequest(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['changePermissionRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editChangePermissionRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/changepermission', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editChangeSiteContactRequest operation.
     * @callback module:api/TasksApi~editChangeSiteContactRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * edit change site administrator/contact request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeSiteContactRequest} opts.changeSiteContactRequest 
     * @param {module:api/TasksApi~editChangeSiteContactRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    editChangeSiteContactRequest(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['changeSiteContactRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editChangeSiteContactRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/changesite/adminorcontact', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editChangeSitePolicyRequest operation.
     * @callback module:api/TasksApi~editChangeSitePolicyRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * edit change site policy request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeSitePolicyRequest} opts.changeSitePolicyRequest 
     * @param {module:api/TasksApi~editChangeSitePolicyRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    editChangeSitePolicyRequest(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['changeSitePolicyRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editChangeSitePolicyRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/changesitepolicy', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editChangeSiteQuotaRequest operation.
     * @callback module:api/TasksApi~editChangeSiteQuotaRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * edit change site quota request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeSiteQuotaRequest} opts.changeSiteQuotaRequest 
     * @param {module:api/TasksApi~editChangeSiteQuotaRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    editChangeSiteQuotaRequest(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['changeSiteQuotaRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editChangeSiteQuotaRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/changesitequota', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editChangeSiteSettingRequest operation.
     * @callback module:api/TasksApi~editChangeSiteSettingRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * edit change site setting request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeSiteSettingRequest} opts.changeSiteSettingRequest 
     * @param {module:api/TasksApi~editChangeSiteSettingRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    editChangeSiteSettingRequest(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['changeSiteSettingRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editChangeSiteSettingRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/changesite/setting', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editChangeWebContactRequest operation.
     * @callback module:api/TasksApi~editChangeWebContactRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * edit change web contact request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeWebContactRequest} opts.changeWebContactRequest 
     * @param {module:api/TasksApi~editChangeWebContactRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    editChangeWebContactRequest(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['changeWebContactRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editChangeWebContactRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/changewebcontact', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editChangeWebSettingRequest operation.
     * @callback module:api/TasksApi~editChangeWebSettingRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * edit change web setting request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeWebSettingRequest} opts.changeWebSettingRequest 
     * @param {module:api/TasksApi~editChangeWebSettingRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    editChangeWebSettingRequest(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['changeWebSettingRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editChangeWebSettingRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/changewebsettings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editClonePermissionRequest operation.
     * @callback module:api/TasksApi~editClonePermissionRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * edit clone permission request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ClonePermissionRequest} opts.clonePermissionRequest 
     * @param {module:api/TasksApi~editClonePermissionRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    editClonePermissionRequest(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['clonePermissionRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editClonePermissionRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/clonepermission', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editContentMoveRequest operation.
     * @callback module:api/TasksApi~editContentMoveRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * edit content move request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ContentMoveRequest} opts.contentMoveRequest 
     * @param {module:api/TasksApi~editContentMoveRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    editContentMoveRequest(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['contentMoveRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editContentMoveRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/contentmove', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editCreateGroupRequest operation.
     * @callback module:api/TasksApi~editCreateGroupRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * edit create site group request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateGroupRequest} opts.createGroupRequest 
     * @param {module:api/TasksApi~editCreateGroupRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    editCreateGroupRequest(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['createGroupRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editCreateGroupRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/creategroup', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editCreateListRequest operation.
     * @callback module:api/TasksApi~editCreateListRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * edit create list request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateListRequest} opts.createListRequest 
     * @param {module:api/TasksApi~editCreateListRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    editCreateListRequest(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['createListRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editCreateListRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/createlist', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editCreateSiteRequest operation.
     * @callback module:api/TasksApi~editCreateSiteRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * edit create site request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateSiteRequest} opts.createSiteRequest 
     * @param {module:api/TasksApi~editCreateSiteRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    editCreateSiteRequest(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['createSiteRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editCreateSiteRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/createsite', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editCreateWebRequest operation.
     * @callback module:api/TasksApi~editCreateWebRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * edit create web request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateWebRequest} opts.createWebRequest 
     * @param {module:api/TasksApi~editCreateWebRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    editCreateWebRequest(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['createWebRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editCreateWebRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/createweb', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editCustomRequest operation.
     * @callback module:api/TasksApi~editCustomRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * edit custom request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiRequest} opts.apiRequest 
     * @param {module:api/TasksApi~editCustomRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    editCustomRequest(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editCustomRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/custom', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editDeleteGroupRequest operation.
     * @callback module:api/TasksApi~editDeleteGroupRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * edit delete change group request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/DeleteGroupRequest} opts.deleteGroupRequest 
     * @param {module:api/TasksApi~editDeleteGroupRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    editDeleteGroupRequest(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['deleteGroupRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editDeleteGroupRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/deletegroup', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editDeleteSiteRequest operation.
     * @callback module:api/TasksApi~editDeleteSiteRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * edit delete site request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/DeleteSiteRequest} opts.deleteSiteRequest 
     * @param {module:api/TasksApi~editDeleteSiteRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    editDeleteSiteRequest(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['deleteSiteRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editDeleteSiteRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/deletesite', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editDeleteWebRequest operation.
     * @callback module:api/TasksApi~editDeleteWebRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * edit delete web request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/DeleteWebLifecycleRequest} opts.deleteWebLifecycleRequest 
     * @param {module:api/TasksApi~editDeleteWebRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    editDeleteWebRequest(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['deleteWebLifecycleRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editDeleteWebRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/deleteweb', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editExtendGroupRequest operation.
     * @callback module:api/TasksApi~editExtendGroupRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * edit extend group request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ExtendGroupRequest} opts.extendGroupRequest 
     * @param {module:api/TasksApi~editExtendGroupRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    editExtendGroupRequest(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['extendGroupRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editExtendGroupRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/extendgroup', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editExtendSiteRequest operation.
     * @callback module:api/TasksApi~editExtendSiteRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * edit extend site request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ExtendSiteRequest} opts.extendSiteRequest 
     * @param {module:api/TasksApi~editExtendSiteRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    editExtendSiteRequest(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['extendSiteRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editExtendSiteRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/extendsite', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editGrantPermissionRequest operation.
     * @callback module:api/TasksApi~editGrantPermissionRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * edit grant permission request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/GrantPermissionRequest} opts.grantPermissionRequest 
     * @param {module:api/TasksApi~editGrantPermissionRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    editGrantPermissionRequest(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['grantPermissionRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editGrantPermissionRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/grantpermission', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editLockSiteRequest operation.
     * @callback module:api/TasksApi~editLockSiteRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * edit lock site request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/LockSiteRequest} opts.lockSiteRequest 
     * @param {module:api/TasksApi~editLockSiteRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    editLockSiteRequest(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['lockSiteRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editLockSiteRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/locksite', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editManagePermissionRequest operation.
     * @callback module:api/TasksApi~editManagePermissionRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * edit manage permission request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ManagePermissionRequest} opts.managePermissionRequest 
     * @param {module:api/TasksApi~editManagePermissionRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    editManagePermissionRequest(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['managePermissionRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editManagePermissionRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/managepermission', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editRestoreGroupRequest operation.
     * @callback module:api/TasksApi~editRestoreGroupRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * edit restore group request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/RestoreGroupRequest} opts.restoreGroupRequest 
     * @param {module:api/TasksApi~editRestoreGroupRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    editRestoreGroupRequest(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['restoreGroupRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editRestoreGroupRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/restoregroup', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editUnLockSiteRequest operation.
     * @callback module:api/TasksApi~editUnLockSiteRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * edit unlock site request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/UnlockSiteRequest} opts.unlockSiteRequest 
     * @param {module:api/TasksApi~editUnLockSiteRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    editUnLockSiteRequest(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['unlockSiteRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editUnLockSiteRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/unlocksite', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChangePermissionReport operation.
     * @callback module:api/TasksApi~getChangePermissionReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PermissionActionItemPageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get change permission report
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {Object} opts.body 
     * @param {module:api/TasksApi~getChangePermissionReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PermissionActionItemPageResult}
     */
    getChangePermissionReport(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChangePermissionReport");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter': opts['filter'],
        'orderby': opts['orderby']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = PermissionActionItemPageResult;
      return this.apiClient.callApi(
        '/tasks/changepermission/{id}/permission', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChangePermissionReportByVersion operation.
     * @callback module:api/TasksApi~getChangePermissionReportByVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PermissionActionItemPageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get change permission report with specific version
     * @param {String} id 
     * @param {Number} version 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {Object} opts.body 
     * @param {module:api/TasksApi~getChangePermissionReportByVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PermissionActionItemPageResult}
     */
    getChangePermissionReportByVersion(id, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChangePermissionReportByVersion");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getChangePermissionReportByVersion");
      }

      let pathParams = {
        'id': id,
        'version': version
      };
      let queryParams = {
        'filter': opts['filter'],
        'orderby': opts['orderby']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = PermissionActionItemPageResult;
      return this.apiClient.callApi(
        '/tasks/changepermission/{id}/permission/{version}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChangePermissionReportFilters operation.
     * @callback module:api/TasksApi~getChangePermissionReportFiltersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DistinctPageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get change permission report filters
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @param {module:api/TasksApi~getChangePermissionReportFiltersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DistinctPageResult}
     */
    getChangePermissionReportFilters(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChangePermissionReportFilters");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter': opts['filter'],
        'distinct': opts['distinct'],
        'top': opts['top'],
        'skip': opts['skip']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = DistinctPageResult;
      return this.apiClient.callApi(
        '/tasks/changepermission/{id}/permission/filters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChangePermissionReportFiltersByVersion operation.
     * @callback module:api/TasksApi~getChangePermissionReportFiltersByVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DistinctPageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get change permission report filters with specific version
     * @param {String} id 
     * @param {Number} version 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @param {module:api/TasksApi~getChangePermissionReportFiltersByVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DistinctPageResult}
     */
    getChangePermissionReportFiltersByVersion(id, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChangePermissionReportFiltersByVersion");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getChangePermissionReportFiltersByVersion");
      }

      let pathParams = {
        'id': id,
        'version': version
      };
      let queryParams = {
        'filter': opts['filter'],
        'distinct': opts['distinct'],
        'top': opts['top'],
        'skip': opts['skip']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = DistinctPageResult;
      return this.apiClient.callApi(
        '/tasks/changepermission/{id}/permission/filters/{version}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChangePermissionReportFiltersForSPGroup operation.
     * @callback module:api/TasksApi~getChangePermissionReportFiltersForSPGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DistinctPageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get change permission report filters for a sharepoint group
     * @param {String} id 
     * @param {String} groupid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @param {module:api/TasksApi~getChangePermissionReportFiltersForSPGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DistinctPageResult}
     */
    getChangePermissionReportFiltersForSPGroup(id, groupid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChangePermissionReportFiltersForSPGroup");
      }
      // verify the required parameter 'groupid' is set
      if (groupid === undefined || groupid === null) {
        throw new Error("Missing the required parameter 'groupid' when calling getChangePermissionReportFiltersForSPGroup");
      }

      let pathParams = {
        'id': id,
        'groupid': groupid
      };
      let queryParams = {
        'filter': opts['filter'],
        'distinct': opts['distinct'],
        'top': opts['top'],
        'skip': opts['skip']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = DistinctPageResult;
      return this.apiClient.callApi(
        '/tasks/changepermission/{id}/permission/group/{groupid}/filters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChangePermissionReportFiltersForSPGroupByVersion operation.
     * @callback module:api/TasksApi~getChangePermissionReportFiltersForSPGroupByVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DistinctPageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get change permission report filters for a sharepoint group with specific version
     * @param {String} id 
     * @param {String} groupid 
     * @param {Number} version 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @param {module:api/TasksApi~getChangePermissionReportFiltersForSPGroupByVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DistinctPageResult}
     */
    getChangePermissionReportFiltersForSPGroupByVersion(id, groupid, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChangePermissionReportFiltersForSPGroupByVersion");
      }
      // verify the required parameter 'groupid' is set
      if (groupid === undefined || groupid === null) {
        throw new Error("Missing the required parameter 'groupid' when calling getChangePermissionReportFiltersForSPGroupByVersion");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getChangePermissionReportFiltersForSPGroupByVersion");
      }

      let pathParams = {
        'id': id,
        'groupid': groupid,
        'version': version
      };
      let queryParams = {
        'filter': opts['filter'],
        'distinct': opts['distinct'],
        'top': opts['top'],
        'skip': opts['skip']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = DistinctPageResult;
      return this.apiClient.callApi(
        '/tasks/changepermission/{id}/permission/group/{groupid}/filters/{version}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChangePermissionReportForSPGroup operation.
     * @callback module:api/TasksApi~getChangePermissionReportForSPGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PermissionActionItemPageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get change permission report for a sharepoint group
     * @param {String} id 
     * @param {String} groupid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {Object} opts.body 
     * @param {module:api/TasksApi~getChangePermissionReportForSPGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PermissionActionItemPageResult}
     */
    getChangePermissionReportForSPGroup(id, groupid, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChangePermissionReportForSPGroup");
      }
      // verify the required parameter 'groupid' is set
      if (groupid === undefined || groupid === null) {
        throw new Error("Missing the required parameter 'groupid' when calling getChangePermissionReportForSPGroup");
      }

      let pathParams = {
        'id': id,
        'groupid': groupid
      };
      let queryParams = {
        'filter': opts['filter'],
        'orderby': opts['orderby']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = PermissionActionItemPageResult;
      return this.apiClient.callApi(
        '/tasks/changepermission/{id}/permission/group/{groupid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChangePermissionReportForSPGroupByVersion operation.
     * @callback module:api/TasksApi~getChangePermissionReportForSPGroupByVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PermissionActionItemPageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get change permission report for a sharepoint group with specific version
     * @param {String} id 
     * @param {Number} version 
     * @param {String} groupid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {Object} opts.body 
     * @param {module:api/TasksApi~getChangePermissionReportForSPGroupByVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PermissionActionItemPageResult}
     */
    getChangePermissionReportForSPGroupByVersion(id, version, groupid, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChangePermissionReportForSPGroupByVersion");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getChangePermissionReportForSPGroupByVersion");
      }
      // verify the required parameter 'groupid' is set
      if (groupid === undefined || groupid === null) {
        throw new Error("Missing the required parameter 'groupid' when calling getChangePermissionReportForSPGroupByVersion");
      }

      let pathParams = {
        'id': id,
        'version': version,
        'groupid': groupid
      };
      let queryParams = {
        'filter': opts['filter'],
        'orderby': opts['orderby']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = PermissionActionItemPageResult;
      return this.apiClient.callApi(
        '/tasks/changepermission/{id}/permission/{version}/group/{groupid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChangePermissionReportPermissionLevels operation.
     * @callback module:api/TasksApi~getChangePermissionReportPermissionLevelsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PermissionLevel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get change permission report permission levels
     * @param {String} id 
     * @param {module:api/TasksApi~getChangePermissionReportPermissionLevelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PermissionLevel>}
     */
    getChangePermissionReportPermissionLevels(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChangePermissionReportPermissionLevels");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [PermissionLevel];
      return this.apiClient.callApi(
        '/tasks/changepermission/{id}/permissionlevels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChangePermissionReportProperties operation.
     * @callback module:api/TasksApi~getChangePermissionReportPropertiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecertificationReportProperties} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get change permission report properties
     * @param {String} id 
     * @param {module:api/TasksApi~getChangePermissionReportPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecertificationReportProperties}
     */
    getChangePermissionReportProperties(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChangePermissionReportProperties");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = RecertificationReportProperties;
      return this.apiClient.callApi(
        '/tasks/changepermission/{id}/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getClonePermissionReport operation.
     * @callback module:api/TasksApi~getClonePermissionReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClonePermissionSecuritySearchResultPageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get clone permission report
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, displayName, identityName, objectUrl, objectTitle, objectType, accountType, sharePointGroup, permissionLevels, action
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, displayName, identityName, objectUrl, objectTitle, objectType, accountType, sharePointGroup, permissionLevels, action
     * @param {Object} opts.body 
     * @param {module:api/TasksApi~getClonePermissionReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClonePermissionSecuritySearchResultPageResult}
     */
    getClonePermissionReport(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getClonePermissionReport");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter': opts['filter'],
        'orderby': opts['orderby']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ClonePermissionSecuritySearchResultPageResult;
      return this.apiClient.callApi(
        '/tasks/clonepermission/{id}/permission', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getClonePermissionReportProperties operation.
     * @callback module:api/TasksApi~getClonePermissionReportPropertiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClonePermissionReportProperty} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get clone permission report properties
     * @param {String} id 
     * @param {module:api/TasksApi~getClonePermissionReportPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClonePermissionReportProperty}
     */
    getClonePermissionReportProperties(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getClonePermissionReportProperties");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ClonePermissionReportProperty;
      return this.apiClient.callApi(
        '/tasks/clonepermission/{id}/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGetManualArchiveReport operation.
     * @callback module:api/TasksApi~getGetManualArchiveReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManuallyArchiveRecordModelPageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get manual archive report
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> rowKey, partitionKey, siteId, url, nodeType
     * @param {String} opts.orderby Order by one field, supported fields:<br/> rowKey, partitionKey, siteId, url, nodeType
     * @param {Object} opts.body 
     * @param {module:api/TasksApi~getGetManualArchiveReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManuallyArchiveRecordModelPageResult}
     */
    getGetManualArchiveReport(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGetManualArchiveReport");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter': opts['filter'],
        'orderby': opts['orderby']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ManuallyArchiveRecordModelPageResult;
      return this.apiClient.callApi(
        '/tasks/{id}/manualarchive', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGetManualArchiveReportFilters operation.
     * @callback module:api/TasksApi~getGetManualArchiveReportFiltersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DistinctPageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get manual archive report filters
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> rowKey, partitionKey, siteId, url, nodeType
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> rowKey, partitionKey, siteId, url, nodeType
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @param {module:api/TasksApi~getGetManualArchiveReportFiltersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DistinctPageResult}
     */
    getGetManualArchiveReportFilters(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGetManualArchiveReportFilters");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter': opts['filter'],
        'distinct': opts['distinct'],
        'top': opts['top'],
        'skip': opts['skip']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = DistinctPageResult;
      return this.apiClient.callApi(
        '/tasks/{id}/manualarchive/filters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupMembershipRecertificationReport operation.
     * @callback module:api/TasksApi~getGroupMembershipRecertificationReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MembershipRecertificationItemPageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get group membership recertification report
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType
     * @param {Object} opts.body 
     * @param {module:api/TasksApi~getGroupMembershipRecertificationReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MembershipRecertificationItemPageResult}
     */
    getGroupMembershipRecertificationReport(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGroupMembershipRecertificationReport");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter': opts['filter'],
        'orderby': opts['orderby']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = MembershipRecertificationItemPageResult;
      return this.apiClient.callApi(
        '/tasks/{id}/group/recertification/membership', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupMembershipRecertificationReportByVersion operation.
     * @callback module:api/TasksApi~getGroupMembershipRecertificationReportByVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MembershipRecertificationItemPageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get group membership recertification report by version
     * @param {String} id 
     * @param {Number} version 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType
     * @param {Object} opts.body 
     * @param {module:api/TasksApi~getGroupMembershipRecertificationReportByVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MembershipRecertificationItemPageResult}
     */
    getGroupMembershipRecertificationReportByVersion(id, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGroupMembershipRecertificationReportByVersion");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getGroupMembershipRecertificationReportByVersion");
      }

      let pathParams = {
        'id': id,
        'version': version
      };
      let queryParams = {
        'filter': opts['filter'],
        'orderby': opts['orderby']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = MembershipRecertificationItemPageResult;
      return this.apiClient.callApi(
        '/tasks/{id}/group/recertification/membership/{version}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupMembershipRecertificationReportFilters operation.
     * @callback module:api/TasksApi~getGroupMembershipRecertificationReportFiltersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DistinctPageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get group membership recertification report filters
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @param {module:api/TasksApi~getGroupMembershipRecertificationReportFiltersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DistinctPageResult}
     */
    getGroupMembershipRecertificationReportFilters(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGroupMembershipRecertificationReportFilters");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter': opts['filter'],
        'distinct': opts['distinct'],
        'top': opts['top'],
        'skip': opts['skip']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = DistinctPageResult;
      return this.apiClient.callApi(
        '/tasks/{id}/group/recertification/membership/filters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupMembershipRecertificationReportFiltersByVersion operation.
     * @callback module:api/TasksApi~getGroupMembershipRecertificationReportFiltersByVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DistinctPageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get group membership recertification report filters by version
     * @param {String} id 
     * @param {Number} version 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @param {module:api/TasksApi~getGroupMembershipRecertificationReportFiltersByVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DistinctPageResult}
     */
    getGroupMembershipRecertificationReportFiltersByVersion(id, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGroupMembershipRecertificationReportFiltersByVersion");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getGroupMembershipRecertificationReportFiltersByVersion");
      }

      let pathParams = {
        'id': id,
        'version': version
      };
      let queryParams = {
        'filter': opts['filter'],
        'distinct': opts['distinct'],
        'top': opts['top'],
        'skip': opts['skip']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = DistinctPageResult;
      return this.apiClient.callApi(
        '/tasks/{id}/group/recertification/membership/filters/{version}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupMembershipRecertificationReportProperties operation.
     * @callback module:api/TasksApi~getGroupMembershipRecertificationReportPropertiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MembershipRecertificationReportProperties} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get group membership recertification report properties
     * @param {String} id 
     * @param {module:api/TasksApi~getGroupMembershipRecertificationReportPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MembershipRecertificationReportProperties}
     */
    getGroupMembershipRecertificationReportProperties(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGroupMembershipRecertificationReportProperties");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = MembershipRecertificationReportProperties;
      return this.apiClient.callApi(
        '/tasks/{id}/group/recertification/membership/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupPermissionRecertificationReport operation.
     * @callback module:api/TasksApi~getGroupPermissionRecertificationReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupPermissionActionItemPageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get group permission recertification report
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType
     * @param {Object} opts.body 
     * @param {module:api/TasksApi~getGroupPermissionRecertificationReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupPermissionActionItemPageResult}
     */
    getGroupPermissionRecertificationReport(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGroupPermissionRecertificationReport");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter': opts['filter'],
        'orderby': opts['orderby']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = GroupPermissionActionItemPageResult;
      return this.apiClient.callApi(
        '/tasks/{id}/group/recertification/permission', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupPermissionRecertificationReportByVersion operation.
     * @callback module:api/TasksApi~getGroupPermissionRecertificationReportByVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupPermissionActionItemPageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get group permission recertification report by version
     * @param {String} id 
     * @param {Number} version 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType
     * @param {Object} opts.body 
     * @param {module:api/TasksApi~getGroupPermissionRecertificationReportByVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupPermissionActionItemPageResult}
     */
    getGroupPermissionRecertificationReportByVersion(id, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGroupPermissionRecertificationReportByVersion");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getGroupPermissionRecertificationReportByVersion");
      }

      let pathParams = {
        'id': id,
        'version': version
      };
      let queryParams = {
        'filter': opts['filter'],
        'orderby': opts['orderby']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = GroupPermissionActionItemPageResult;
      return this.apiClient.callApi(
        '/tasks/{id}/group/recertification/permission/{version}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupPermissionRecertificationReportFilters operation.
     * @callback module:api/TasksApi~getGroupPermissionRecertificationReportFiltersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DistinctPageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get group permission recertification report filters
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @param {module:api/TasksApi~getGroupPermissionRecertificationReportFiltersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DistinctPageResult}
     */
    getGroupPermissionRecertificationReportFilters(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGroupPermissionRecertificationReportFilters");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter': opts['filter'],
        'distinct': opts['distinct'],
        'top': opts['top'],
        'skip': opts['skip']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = DistinctPageResult;
      return this.apiClient.callApi(
        '/tasks/{id}/group/recertification/permission/filters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupPermissionRecertificationReportFiltersForSPGroup operation.
     * @callback module:api/TasksApi~getGroupPermissionRecertificationReportFiltersForSPGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DistinctPageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get group permission recertification report filters for sharepoint group
     * @param {String} id 
     * @param {String} groupid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @param {module:api/TasksApi~getGroupPermissionRecertificationReportFiltersForSPGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DistinctPageResult}
     */
    getGroupPermissionRecertificationReportFiltersForSPGroup(id, groupid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGroupPermissionRecertificationReportFiltersForSPGroup");
      }
      // verify the required parameter 'groupid' is set
      if (groupid === undefined || groupid === null) {
        throw new Error("Missing the required parameter 'groupid' when calling getGroupPermissionRecertificationReportFiltersForSPGroup");
      }

      let pathParams = {
        'id': id,
        'groupid': groupid
      };
      let queryParams = {
        'filter': opts['filter'],
        'distinct': opts['distinct'],
        'top': opts['top'],
        'skip': opts['skip']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = DistinctPageResult;
      return this.apiClient.callApi(
        '/tasks/{id}/group/recertification/permission/group/{groupid}/filters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupPermissionRecertificationReportForSPGroup operation.
     * @callback module:api/TasksApi~getGroupPermissionRecertificationReportForSPGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupPermissionActionItemPageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get group permission recertification report for sharepoint group
     * @param {String} id 
     * @param {String} groupid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType
     * @param {Object} opts.body 
     * @param {module:api/TasksApi~getGroupPermissionRecertificationReportForSPGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupPermissionActionItemPageResult}
     */
    getGroupPermissionRecertificationReportForSPGroup(id, groupid, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGroupPermissionRecertificationReportForSPGroup");
      }
      // verify the required parameter 'groupid' is set
      if (groupid === undefined || groupid === null) {
        throw new Error("Missing the required parameter 'groupid' when calling getGroupPermissionRecertificationReportForSPGroup");
      }

      let pathParams = {
        'id': id,
        'groupid': groupid
      };
      let queryParams = {
        'filter': opts['filter'],
        'orderby': opts['orderby']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = GroupPermissionActionItemPageResult;
      return this.apiClient.callApi(
        '/tasks/{id}/group/recertification/permission/group/{groupid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupPermissionRecertificationReportProperties operation.
     * @callback module:api/TasksApi~getGroupPermissionRecertificationReportPropertiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecertificationReportProperties} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get group permission recertification report properties
     * @param {String} id 
     * @param {module:api/TasksApi~getGroupPermissionRecertificationReportPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecertificationReportProperties}
     */
    getGroupPermissionRecertificationReportProperties(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGroupPermissionRecertificationReportProperties");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = RecertificationReportProperties;
      return this.apiClient.callApi(
        '/tasks/{id}/group/recertification/permission/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMyTaskFilters operation.
     * @callback module:api/TasksApi~getMyTaskFiltersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DistinctPageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get my task filters
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.isconfirmtask  (default to false)
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, title, requester, requestTicketNumber, requesterDisplayName, dueDate, serviceType, createdTime, taskType, status
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> id, title, requester, requestTicketNumber, requesterDisplayName, dueDate, serviceType, createdTime, taskType, status
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @param {module:api/TasksApi~getMyTaskFiltersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DistinctPageResult}
     */
    getMyTaskFilters(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'isconfirmtask': opts['isconfirmtask'],
        'filter': opts['filter'],
        'distinct': opts['distinct'],
        'top': opts['top'],
        'skip': opts['skip']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = DistinctPageResult;
      return this.apiClient.callApi(
        '/tasks/my/filters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMyTasks operation.
     * @callback module:api/TasksApi~getMyTasksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskListPageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get my tasks
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.isconfirmtask  (default to false)
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, title, requester, requestTicketNumber, requesterDisplayName, dueDate, serviceType, createdTime, taskType, status
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, title, requester, requestTicketNumber, requesterDisplayName, dueDate, serviceType, createdTime, taskType, status
     * @param {String} opts.search Search for title
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @param {module:api/TasksApi~getMyTasksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskListPageResult}
     */
    getMyTasks(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'isconfirmtask': opts['isconfirmtask'],
        'filter': opts['filter'],
        'orderby': opts['orderby'],
        'search': opts['search'],
        'top': opts['top'],
        'skip': opts['skip']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = TaskListPageResult;
      return this.apiClient.callApi(
        '/tasks/my', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRemovePermissionReport operation.
     * @callback module:api/TasksApi~getRemovePermissionReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SecuritySearchResultPageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get remove permission report
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, displayName, identityName, objectUrl, objectTitle, objectType, accountType, sharePointGroup, permissionLevels, action
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, displayName, identityName, objectUrl, objectTitle, objectType, accountType, sharePointGroup, permissionLevels, action
     * @param {Object} opts.body 
     * @param {module:api/TasksApi~getRemovePermissionReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecuritySearchResultPageResult}
     */
    getRemovePermissionReport(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRemovePermissionReport");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter': opts['filter'],
        'orderby': opts['orderby']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = SecuritySearchResultPageResult;
      return this.apiClient.callApi(
        '/tasks/removepermission/{id}/permission', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRemovePermissionReportProperties operation.
     * @callback module:api/TasksApi~getRemovePermissionReportPropertiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecertificationReportProperties} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get remove permission report properties
     * @param {String} id 
     * @param {module:api/TasksApi~getRemovePermissionReportPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecertificationReportProperties}
     */
    getRemovePermissionReportProperties(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRemovePermissionReportProperties");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = RecertificationReportProperties;
      return this.apiClient.callApi(
        '/tasks/removepermission/{id}/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSiteMetadataRecertificationReport operation.
     * @callback module:api/TasksApi~getSiteMetadataRecertificationReportCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CustomMetadata>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get site metadata recertification metadata
     * @param {String} id 
     * @param {module:api/TasksApi~getSiteMetadataRecertificationReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CustomMetadata>}
     */
    getSiteMetadataRecertificationReport(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSiteMetadataRecertificationReport");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CustomMetadata];
      return this.apiClient.callApi(
        '/tasks/{id}/site/recertification/metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSiteMetadataRecertificationReportProperties operation.
     * @callback module:api/TasksApi~getSiteMetadataRecertificationReportPropertiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetadataRecertificationReportProperties} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get site metadata recertification report properties
     * @param {String} id 
     * @param {module:api/TasksApi~getSiteMetadataRecertificationReportPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetadataRecertificationReportProperties}
     */
    getSiteMetadataRecertificationReportProperties(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSiteMetadataRecertificationReportProperties");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = MetadataRecertificationReportProperties;
      return this.apiClient.callApi(
        '/tasks/{id}/site/recertification/metadata/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSiteOwnershipRecertificationReportProperties operation.
     * @callback module:api/TasksApi~getSiteOwnershipRecertificationReportPropertiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecertificationReportProperties} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get site ownership recertification report properties
     * @param {String} id 
     * @param {module:api/TasksApi~getSiteOwnershipRecertificationReportPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecertificationReportProperties}
     */
    getSiteOwnershipRecertificationReportProperties(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSiteOwnershipRecertificationReportProperties");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = RecertificationReportProperties;
      return this.apiClient.callApi(
        '/tasks/{id}/site/recertification/ownership/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSitePermissionRecertificatioPermissionFilters operation.
     * @callback module:api/TasksApi~getSitePermissionRecertificatioPermissionFiltersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DistinctPageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get site permission recertification permission filters
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @param {module:api/TasksApi~getSitePermissionRecertificatioPermissionFiltersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DistinctPageResult}
     */
    getSitePermissionRecertificatioPermissionFilters(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSitePermissionRecertificatioPermissionFilters");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter': opts['filter'],
        'distinct': opts['distinct'],
        'top': opts['top'],
        'skip': opts['skip']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = DistinctPageResult;
      return this.apiClient.callApi(
        '/tasks/{id}/site/recertification/permission/filters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSitePermissionRecertificatioReportFiltersByVersion operation.
     * @callback module:api/TasksApi~getSitePermissionRecertificatioReportFiltersByVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DistinctPageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get site permission recertification permission filters with specific version
     * @param {String} id 
     * @param {Number} version 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @param {module:api/TasksApi~getSitePermissionRecertificatioReportFiltersByVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DistinctPageResult}
     */
    getSitePermissionRecertificatioReportFiltersByVersion(id, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSitePermissionRecertificatioReportFiltersByVersion");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getSitePermissionRecertificatioReportFiltersByVersion");
      }

      let pathParams = {
        'id': id,
        'version': version
      };
      let queryParams = {
        'filter': opts['filter'],
        'distinct': opts['distinct'],
        'top': opts['top'],
        'skip': opts['skip']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = DistinctPageResult;
      return this.apiClient.callApi(
        '/tasks/{id}/site/recertification/permission/filters/{version}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSitePermissionRecertificatioReportFiltersForSPGroup operation.
     * @callback module:api/TasksApi~getSitePermissionRecertificatioReportFiltersForSPGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DistinctPageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} groupid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @param {module:api/TasksApi~getSitePermissionRecertificatioReportFiltersForSPGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DistinctPageResult}
     */
    getSitePermissionRecertificatioReportFiltersForSPGroup(id, groupid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSitePermissionRecertificatioReportFiltersForSPGroup");
      }
      // verify the required parameter 'groupid' is set
      if (groupid === undefined || groupid === null) {
        throw new Error("Missing the required parameter 'groupid' when calling getSitePermissionRecertificatioReportFiltersForSPGroup");
      }

      let pathParams = {
        'id': id,
        'groupid': groupid
      };
      let queryParams = {
        'filter': opts['filter'],
        'distinct': opts['distinct'],
        'top': opts['top'],
        'skip': opts['skip']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = DistinctPageResult;
      return this.apiClient.callApi(
        '/tasks/{id}/site/recertification/permission/group/{groupid}/filters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSitePermissionRecertificatioReportFiltersForSPGroupByVersion operation.
     * @callback module:api/TasksApi~getSitePermissionRecertificatioReportFiltersForSPGroupByVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DistinctPageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} groupid 
     * @param {Number} version 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @param {module:api/TasksApi~getSitePermissionRecertificatioReportFiltersForSPGroupByVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DistinctPageResult}
     */
    getSitePermissionRecertificatioReportFiltersForSPGroupByVersion(id, groupid, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSitePermissionRecertificatioReportFiltersForSPGroupByVersion");
      }
      // verify the required parameter 'groupid' is set
      if (groupid === undefined || groupid === null) {
        throw new Error("Missing the required parameter 'groupid' when calling getSitePermissionRecertificatioReportFiltersForSPGroupByVersion");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getSitePermissionRecertificatioReportFiltersForSPGroupByVersion");
      }

      let pathParams = {
        'id': id,
        'groupid': groupid,
        'version': version
      };
      let queryParams = {
        'filter': opts['filter'],
        'distinct': opts['distinct'],
        'top': opts['top'],
        'skip': opts['skip']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = DistinctPageResult;
      return this.apiClient.callApi(
        '/tasks/{id}/site/recertification/permission/group/{groupid}/filters/{version}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSitePermissionRecertificationPermissionLevels operation.
     * @callback module:api/TasksApi~getSitePermissionRecertificationPermissionLevelsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PermissionLevel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get site permission recertification permission levels
     * @param {String} id 
     * @param {module:api/TasksApi~getSitePermissionRecertificationPermissionLevelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PermissionLevel>}
     */
    getSitePermissionRecertificationPermissionLevels(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSitePermissionRecertificationPermissionLevels");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [PermissionLevel];
      return this.apiClient.callApi(
        '/tasks/{id}/recertification/permissionlevels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSitePermissionRecertificationReport operation.
     * @callback module:api/TasksApi~getSitePermissionRecertificationReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PermissionActionItemPageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get site permission recertification report
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {Object} opts.body 
     * @param {module:api/TasksApi~getSitePermissionRecertificationReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PermissionActionItemPageResult}
     */
    getSitePermissionRecertificationReport(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSitePermissionRecertificationReport");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter': opts['filter'],
        'orderby': opts['orderby']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = PermissionActionItemPageResult;
      return this.apiClient.callApi(
        '/tasks/{id}/site/recertification/permission', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSitePermissionRecertificationReportByVersion operation.
     * @callback module:api/TasksApi~getSitePermissionRecertificationReportByVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PermissionActionItemPageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get site permission recertification report by specific version
     * @param {String} id 
     * @param {Number} version 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {Object} opts.body 
     * @param {module:api/TasksApi~getSitePermissionRecertificationReportByVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PermissionActionItemPageResult}
     */
    getSitePermissionRecertificationReportByVersion(id, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSitePermissionRecertificationReportByVersion");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getSitePermissionRecertificationReportByVersion");
      }

      let pathParams = {
        'id': id,
        'version': version
      };
      let queryParams = {
        'filter': opts['filter'],
        'orderby': opts['orderby']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = PermissionActionItemPageResult;
      return this.apiClient.callApi(
        '/tasks/{id}/site/recertification/permission/{version}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSitePermissionRecertificationReportForSPGroup operation.
     * @callback module:api/TasksApi~getSitePermissionRecertificationReportForSPGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PermissionActionItemPageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get site permission recertification group permission items
     * @param {String} id 
     * @param {String} groupid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {Object} opts.body 
     * @param {module:api/TasksApi~getSitePermissionRecertificationReportForSPGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PermissionActionItemPageResult}
     */
    getSitePermissionRecertificationReportForSPGroup(id, groupid, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSitePermissionRecertificationReportForSPGroup");
      }
      // verify the required parameter 'groupid' is set
      if (groupid === undefined || groupid === null) {
        throw new Error("Missing the required parameter 'groupid' when calling getSitePermissionRecertificationReportForSPGroup");
      }

      let pathParams = {
        'id': id,
        'groupid': groupid
      };
      let queryParams = {
        'filter': opts['filter'],
        'orderby': opts['orderby']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = PermissionActionItemPageResult;
      return this.apiClient.callApi(
        '/tasks/{id}/site/recertification/permission/group/{groupid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSitePermissionRecertificationReportForSPGroupByVersion operation.
     * @callback module:api/TasksApi~getSitePermissionRecertificationReportForSPGroupByVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PermissionActionItemPageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get site permission recertification group permission items with specific version with specific version
     * @param {String} id 
     * @param {Number} version 
     * @param {String} groupid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {Object} opts.body 
     * @param {module:api/TasksApi~getSitePermissionRecertificationReportForSPGroupByVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PermissionActionItemPageResult}
     */
    getSitePermissionRecertificationReportForSPGroupByVersion(id, version, groupid, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSitePermissionRecertificationReportForSPGroupByVersion");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getSitePermissionRecertificationReportForSPGroupByVersion");
      }
      // verify the required parameter 'groupid' is set
      if (groupid === undefined || groupid === null) {
        throw new Error("Missing the required parameter 'groupid' when calling getSitePermissionRecertificationReportForSPGroupByVersion");
      }

      let pathParams = {
        'id': id,
        'version': version,
        'groupid': groupid
      };
      let queryParams = {
        'filter': opts['filter'],
        'orderby': opts['orderby']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = PermissionActionItemPageResult;
      return this.apiClient.callApi(
        '/tasks/{id}/site/recertification/permission/{version}/group/{groupid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSitePermissionRecertificationReportProperties operation.
     * @callback module:api/TasksApi~getSitePermissionRecertificationReportPropertiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecertificationReportProperties} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get site permission recertification report properties
     * @param {String} id 
     * @param {module:api/TasksApi~getSitePermissionRecertificationReportPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecertificationReportProperties}
     */
    getSitePermissionRecertificationReportProperties(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSitePermissionRecertificationReportProperties");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = RecertificationReportProperties;
      return this.apiClient.callApi(
        '/tasks/{id}/site/recertification/permission/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTaskByBatchId operation.
     * @callback module:api/TasksApi~getTaskByBatchIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get task by batch id
     * @param {String} batchid 
     * @param {module:api/TasksApi~getTaskByBatchIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskList}
     */
    getTaskByBatchId(batchid, callback) {
      let postBody = null;
      // verify the required parameter 'batchid' is set
      if (batchid === undefined || batchid === null) {
        throw new Error("Missing the required parameter 'batchid' when calling getTaskByBatchId");
      }

      let pathParams = {
        'batchid': batchid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = TaskList;
      return this.apiClient.callApi(
        '/tasks/my/{batchid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTaskById operation.
     * @callback module:api/TasksApi~getTaskByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiTask} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get my task by id
     * @param {String} id 
     * @param {module:api/TasksApi~getTaskByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiTask}
     */
    getTaskById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTaskById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ApiTask;
      return this.apiClient.callApi(
        '/tasks/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the promoteAsOwnersForGroupMembershipRecertification operation.
     * @callback module:api/TasksApi~promoteAsOwnersForGroupMembershipRecertificationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * promote as owners for group membership recertification
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/ApiUser>} opts.apiUser 
     * @param {module:api/TasksApi~promoteAsOwnersForGroupMembershipRecertificationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    promoteAsOwnersForGroupMembershipRecertification(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiUser'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling promoteAsOwnersForGroupMembershipRecertification");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/group/recertification/membership/promoteasowner', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reassignTask operation.
     * @callback module:api/TasksApi~reassignTaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * reassign task
     * @param {String} id 
     * @param {String} user 
     * @param {module:api/TasksApi~reassignTaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reassignTask(id, user, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reassignTask");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling reassignTask");
      }

      let pathParams = {
        'id': id,
        'user': user
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/reassignto/{user}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rejectTask operation.
     * @callback module:api/TasksApi~rejectTaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * reject task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/CommentsParam} opts.commentsParam 
     * @param {module:api/TasksApi~rejectTaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rejectTask(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['commentsParam'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling rejectTask");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/reject', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeUsersForGroupMembershipRecertification operation.
     * @callback module:api/TasksApi~removeUsersForGroupMembershipRecertificationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * remove users for group membership recertification
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.requestBody 
     * @param {module:api/TasksApi~removeUsersForGroupMembershipRecertificationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeUsersForGroupMembershipRecertification(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBody'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeUsersForGroupMembershipRecertification");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/group/recertification/membership/removeuser', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reseAllChangesForChangePermissionTask operation.
     * @callback module:api/TasksApi~reseAllChangesForChangePermissionTaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * save all changes for change permission task
     * @param {String} id 
     * @param {module:api/TasksApi~reseAllChangesForChangePermissionTaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reseAllChangesForChangePermissionTask(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reseAllChangesForChangePermissionTask");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/changepermission/{id}/resetallchange', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resetAllChangesForRecertificationTask operation.
     * @callback module:api/TasksApi~resetAllChangesForRecertificationTaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * reset all changes for site/group recertification task
     * @param {String} id 
     * @param {module:api/TasksApi~resetAllChangesForRecertificationTaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    resetAllChangesForRecertificationTask(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling resetAllChangesForRecertificationTask");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/recertification/resetallchange', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resetMyChangesForChangePermissionTask operation.
     * @callback module:api/TasksApi~resetMyChangesForChangePermissionTaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * save my changes for change permission task
     * @param {String} id 
     * @param {module:api/TasksApi~resetMyChangesForChangePermissionTaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    resetMyChangesForChangePermissionTask(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling resetMyChangesForChangePermissionTask");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/changepermission/{id}/resetmychange', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resetMyChangesForRecertificationTask operation.
     * @callback module:api/TasksApi~resetMyChangesForRecertificationTaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * reset my changes for site/group recertification task
     * @param {String} id 
     * @param {module:api/TasksApi~resetMyChangesForRecertificationTaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    resetMyChangesForRecertificationTask(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling resetMyChangesForRecertificationTask");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/recertification/resetmychange', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retryErrorTask operation.
     * @callback module:api/TasksApi~retryErrorTaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * retry error task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/CommentsParam} opts.commentsParam 
     * @param {module:api/TasksApi~retryErrorTaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    retryErrorTask(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['commentsParam'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling retryErrorTask");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/retry', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveChangePermissionActions operation.
     * @callback module:api/TasksApi~saveChangePermissionActionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * save change permission actions
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PermissionActionItem>} opts.permissionActionItem 
     * @param {module:api/TasksApi~saveChangePermissionActionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    saveChangePermissionActions(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['permissionActionItem'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling saveChangePermissionActions");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/changepermission/{id}/permission', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveClonePermissionReport operation.
     * @callback module:api/TasksApi~saveClonePermissionReportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save clone permission report
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/SecuritySearchResult>} opts.securitySearchResult 
     * @param {module:api/TasksApi~saveClonePermissionReportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    saveClonePermissionReport(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['securitySearchResult'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling saveClonePermissionReport");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/clonepermission/{id}/permission', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveGetManualArchiveReport operation.
     * @callback module:api/TasksApi~saveGetManualArchiveReportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * save manual archive report
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/ManuallyArchiveRecordModel>} opts.manuallyArchiveRecordModel 
     * @param {module:api/TasksApi~saveGetManualArchiveReportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    saveGetManualArchiveReport(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['manuallyArchiveRecordModel'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling saveGetManualArchiveReport");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/manualarchive', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveGroupPermissionRecertificationResults operation.
     * @callback module:api/TasksApi~saveGroupPermissionRecertificationResultsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * save group permission recertification results
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/GroupPermissionActionItem>} opts.groupPermissionActionItem 
     * @param {module:api/TasksApi~saveGroupPermissionRecertificationResultsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    saveGroupPermissionRecertificationResults(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['groupPermissionActionItem'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling saveGroupPermissionRecertificationResults");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/group/recertification/permission', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveRemovePermissionReport operation.
     * @callback module:api/TasksApi~saveRemovePermissionReportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * save remove permission report
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/SecuritySearchResult>} opts.securitySearchResult 
     * @param {module:api/TasksApi~saveRemovePermissionReportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    saveRemovePermissionReport(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['securitySearchResult'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling saveRemovePermissionReport");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/removepermission/{id}/permission', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveSiteMetadataRecertificationResult operation.
     * @callback module:api/TasksApi~saveSiteMetadataRecertificationResultCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * save site metadata recertification metadata
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/RequestMetadata>} opts.requestMetadata 
     * @param {module:api/TasksApi~saveSiteMetadataRecertificationResultCallback} callback The callback function, accepting three arguments: error, data, response
     */
    saveSiteMetadataRecertificationResult(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['requestMetadata'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling saveSiteMetadataRecertificationResult");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/site/recertification/metadata', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveSitePermissionRecertificationResult operation.
     * @callback module:api/TasksApi~saveSitePermissionRecertificationResultCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * save site permission recertification permissions
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PermissionActionItem>} opts.permissionActionItem 
     * @param {module:api/TasksApi~saveSitePermissionRecertificationResultCallback} callback The callback function, accepting three arguments: error, data, response
     */
    saveSitePermissionRecertificationResult(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['permissionActionItem'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling saveSitePermissionRecertificationResult");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/site/recertification/permission', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the skipErrorTask operation.
     * @callback module:api/TasksApi~skipErrorTaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * skip error task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/CommentsParam} opts.commentsParam 
     * @param {module:api/TasksApi~skipErrorTaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    skipErrorTask(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['commentsParam'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling skipErrorTask");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/skip', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the specifyPrimaryAndSecondaryContactWhenPrimaryContactIsDeactived operation.
     * @callback module:api/TasksApi~specifyPrimaryAndSecondaryContactWhenPrimaryContactIsDeactivedCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * specify primary and secondary contact when primary contact is deactived
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.primarycontact 
     * @param {String} opts.secondarycontact 
     * @param {String} opts.primarycontactemail 
     * @param {String} opts.secodnarycontactemail 
     * @param {module:api/TasksApi~specifyPrimaryAndSecondaryContactWhenPrimaryContactIsDeactivedCallback} callback The callback function, accepting three arguments: error, data, response
     */
    specifyPrimaryAndSecondaryContactWhenPrimaryContactIsDeactived(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling specifyPrimaryAndSecondaryContactWhenPrimaryContactIsDeactived");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'primarycontact': opts['primarycontact'],
        'secondarycontact': opts['secondarycontact'],
        'primarycontactemail': opts['primarycontactemail'],
        'secodnarycontactemail': opts['secodnarycontactemail']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/election/specify/contacts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the specifySecondaryContactWhenSecondaryContactIsDeactived operation.
     * @callback module:api/TasksApi~specifySecondaryContactWhenSecondaryContactIsDeactivedCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * specify secondary contact when secondary contact is deactived
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.secondarycontact 
     * @param {module:api/TasksApi~specifySecondaryContactWhenSecondaryContactIsDeactivedCallback} callback The callback function, accepting three arguments: error, data, response
     */
    specifySecondaryContactWhenSecondaryContactIsDeactived(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling specifySecondaryContactWhenSecondaryContactIsDeactived");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'secondarycontact': opts['secondarycontact']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/election/specify/secondarycontact', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitArchiveGroupAutoTask operation.
     * @callback module:api/TasksApi~submitArchiveGroupAutoTaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * submit archive group auto task
     * @param {Object} opts Optional parameters
     * @param {module:model/AutoTaskArchiveRequest} opts.autoTaskArchiveRequest 
     * @param {module:api/TasksApi~submitArchiveGroupAutoTaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    submitArchiveGroupAutoTask(opts, callback) {
      opts = opts || {};
      let postBody = opts['autoTaskArchiveRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/archivegroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitArchiveSiteAutoTask operation.
     * @callback module:api/TasksApi~submitArchiveSiteAutoTaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * submit site archive auto task
     * @param {Object} opts Optional parameters
     * @param {module:model/AutoTaskArchiveRequest} opts.autoTaskArchiveRequest 
     * @param {module:api/TasksApi~submitArchiveSiteAutoTaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    submitArchiveSiteAutoTask(opts, callback) {
      opts = opts || {};
      let postBody = opts['autoTaskArchiveRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/archivesite', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitChangeSitePolicyAutoTask operation.
     * @callback module:api/TasksApi~submitChangeSitePolicyAutoTaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * submit site policy change auto task
     * @param {Object} opts Optional parameters
     * @param {module:model/AutoTaskChangePolicyRequest} opts.autoTaskChangePolicyRequest 
     * @param {module:api/TasksApi~submitChangeSitePolicyAutoTaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    submitChangeSitePolicyAutoTask(opts, callback) {
      opts = opts || {};
      let postBody = opts['autoTaskChangePolicyRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/changesitepolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitContinueAccessGroupAutoTask operation.
     * @callback module:api/TasksApi~submitContinueAccessGroupAutoTaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * submit group continue access auto task
     * @param {Object} opts Optional parameters
     * @param {String} opts.id 
     * @param {module:model/CommentsParam} opts.commentsParam 
     * @param {module:api/TasksApi~submitContinueAccessGroupAutoTaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    submitContinueAccessGroupAutoTask(opts, callback) {
      opts = opts || {};
      let postBody = opts['commentsParam'];

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/continueaccessgroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitContinueAccessSiteAutoTask operation.
     * @callback module:api/TasksApi~submitContinueAccessSiteAutoTaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * submit site continue access auto task
     * @param {Object} opts Optional parameters
     * @param {String} opts.id 
     * @param {module:model/CommentsParam} opts.commentsParam 
     * @param {module:api/TasksApi~submitContinueAccessSiteAutoTaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    submitContinueAccessSiteAutoTask(opts, callback) {
      opts = opts || {};
      let postBody = opts['commentsParam'];

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/continueaccesssite', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitDeleteGroupAutoTask operation.
     * @callback module:api/TasksApi~submitDeleteGroupAutoTaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * submit delete group auto task
     * @param {Object} opts Optional parameters
     * @param {module:model/AutoTaskDeleteRequest} opts.autoTaskDeleteRequest 
     * @param {module:api/TasksApi~submitDeleteGroupAutoTaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    submitDeleteGroupAutoTask(opts, callback) {
      opts = opts || {};
      let postBody = opts['autoTaskDeleteRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/deletegroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitDeleteSiteAutoTask operation.
     * @callback module:api/TasksApi~submitDeleteSiteAutoTaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * submit site delete auto task
     * @param {Object} opts Optional parameters
     * @param {module:model/AutoTaskDeleteRequest} opts.autoTaskDeleteRequest 
     * @param {module:api/TasksApi~submitDeleteSiteAutoTaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    submitDeleteSiteAutoTask(opts, callback) {
      opts = opts || {};
      let postBody = opts['autoTaskDeleteRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/deletesite', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitExtendGroupAutoTask operation.
     * @callback module:api/TasksApi~submitExtendGroupAutoTaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * submit extend group auto task
     * @param {Object} opts Optional parameters
     * @param {module:model/AutoTaskExtendRequest} opts.autoTaskExtendRequest 
     * @param {module:api/TasksApi~submitExtendGroupAutoTaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    submitExtendGroupAutoTask(opts, callback) {
      opts = opts || {};
      let postBody = opts['autoTaskExtendRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/extendgroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitExtendSiteAutoTask operation.
     * @callback module:api/TasksApi~submitExtendSiteAutoTaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * submit site extend auto task
     * @param {Object} opts Optional parameters
     * @param {module:model/AutoTaskExtendRequest} opts.autoTaskExtendRequest 
     * @param {module:api/TasksApi~submitExtendSiteAutoTaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    submitExtendSiteAutoTask(opts, callback) {
      opts = opts || {};
      let postBody = opts['autoTaskExtendRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/extendsite', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitRecertificationTask operation.
     * @callback module:api/TasksApi~submitRecertificationTaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * submit site/group recertification task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/CommentsParam} opts.commentsParam 
     * @param {module:api/TasksApi~submitRecertificationTaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    submitRecertificationTask(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['commentsParam'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling submitRecertificationTask");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/submit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the viewSiteOwnershipRecertificationTask operation.
     * @callback module:api/TasksApi~viewSiteOwnershipRecertificationTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OwnershipRecertification} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * view site ownership recertification task
     * @param {String} id 
     * @param {module:api/TasksApi~viewSiteOwnershipRecertificationTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OwnershipRecertification}
     */
    viewSiteOwnershipRecertificationTask(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling viewSiteOwnershipRecertificationTask");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = OwnershipRecertification;
      return this.apiClient.callApi(
        '/tasks/{id}/site/recertification/ownership', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
