/* 
 * Cloud Governance Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Cloud.Governance.Client.Client.OpenAPIDateConverter;

namespace Cloud.Governance.Client.Model
{
    /// <summary>
    /// SiteProperty
    /// </summary>
    [DataContract]
    public partial class SiteProperty :  IEquatable<SiteProperty>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SiteProperty" /> class.
        /// </summary>
        /// <param name="department">department.</param>
        /// <param name="policy">policy.</param>
        /// <param name="customMetadatas">customMetadatas.</param>
        /// <param name="title">title.</param>
        /// <param name="description">description.</param>
        /// <param name="siteMaxDepth">siteMaxDepth.</param>
        /// <param name="warningExpiredTimeDate">warningExpiredTimeDate.</param>
        /// <param name="warningExpiredTimeDateType">warningExpiredTimeDateType.</param>
        /// <param name="expiredTimeDate">expiredTimeDate.</param>
        /// <param name="expiredTimeDateType">expiredTimeDateType.</param>
        /// <param name="expiredTimeDateWorkflowTemplate">expiredTimeDateWorkflowTemplate.</param>
        /// <param name="expirationPeriodWorkflowStage">expirationPeriodWorkflowStage.</param>
        /// <param name="quotaSize">quotaSize.</param>
        /// <param name="serverResourceQuota">serverResourceQuota.</param>
        /// <param name="caOrAdminCenterUrl">caOrAdminCenterUrl.</param>
        /// <param name="applyPolicy">applyPolicy.</param>
        /// <param name="appliedDeploymentPlans">appliedDeploymentPlans.</param>
        /// <param name="additionalActionTime">additionalActionTime.</param>
        /// <param name="quotaThresholdWarningTimes">quotaThresholdWarningTimes.</param>
        public SiteProperty(string department = default(string), SitePolicyInfo policy = default(SitePolicyInfo), List<RequestMetadataInfo> customMetadatas = default(List<RequestMetadataInfo>), string title = default(string), string description = default(string), int siteMaxDepth = default(int), int warningExpiredTimeDate = default(int), int warningExpiredTimeDateType = default(int), int expiredTimeDate = default(int), int expiredTimeDateType = default(int), Guid expiredTimeDateWorkflowTemplate = default(Guid), ApprovalProcessStageCollection expirationPeriodWorkflowStage = default(ApprovalProcessStageCollection), long quotaSize = default(long), double serverResourceQuota = default(double), string caOrAdminCenterUrl = default(string), ApplyPolicyInfo applyPolicy = default(ApplyPolicyInfo), string appliedDeploymentPlans = default(string), DateTime additionalActionTime = default(DateTime), int quotaThresholdWarningTimes = default(int))
        {
            this.Department = department;
            this.Policy = policy;
            this.CustomMetadatas = customMetadatas;
            this.Title = title;
            this.Description = description;
            this.SiteMaxDepth = siteMaxDepth;
            this.WarningExpiredTimeDate = warningExpiredTimeDate;
            this.WarningExpiredTimeDateType = warningExpiredTimeDateType;
            this.ExpiredTimeDate = expiredTimeDate;
            this.ExpiredTimeDateType = expiredTimeDateType;
            this.ExpiredTimeDateWorkflowTemplate = expiredTimeDateWorkflowTemplate;
            this.ExpirationPeriodWorkflowStage = expirationPeriodWorkflowStage;
            this.QuotaSize = quotaSize;
            this.ServerResourceQuota = serverResourceQuota;
            this.CaOrAdminCenterUrl = caOrAdminCenterUrl;
            this.ApplyPolicy = applyPolicy;
            this.AppliedDeploymentPlans = appliedDeploymentPlans;
            this.AdditionalActionTime = additionalActionTime;
            this.QuotaThresholdWarningTimes = quotaThresholdWarningTimes;
        }
        
        /// <summary>
        /// Gets or Sets Department
        /// </summary>
        [DataMember(Name="department", EmitDefaultValue=true)]
        public string Department { get; set; }

        /// <summary>
        /// Gets or Sets Policy
        /// </summary>
        [DataMember(Name="policy", EmitDefaultValue=true)]
        public SitePolicyInfo Policy { get; set; }

        /// <summary>
        /// Gets or Sets CustomMetadatas
        /// </summary>
        [DataMember(Name="customMetadatas", EmitDefaultValue=true)]
        public List<RequestMetadataInfo> CustomMetadatas { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=true)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets SiteMaxDepth
        /// </summary>
        [DataMember(Name="siteMaxDepth", EmitDefaultValue=false)]
        public int SiteMaxDepth { get; set; }

        /// <summary>
        /// Gets or Sets WarningExpiredTimeDate
        /// </summary>
        [DataMember(Name="warningExpiredTimeDate", EmitDefaultValue=false)]
        public int WarningExpiredTimeDate { get; set; }

        /// <summary>
        /// Gets or Sets WarningExpiredTimeDateType
        /// </summary>
        [DataMember(Name="warningExpiredTimeDateType", EmitDefaultValue=false)]
        public int WarningExpiredTimeDateType { get; set; }

        /// <summary>
        /// Gets or Sets ExpiredTimeDate
        /// </summary>
        [DataMember(Name="expiredTimeDate", EmitDefaultValue=false)]
        public int ExpiredTimeDate { get; set; }

        /// <summary>
        /// Gets or Sets ExpiredTimeDateType
        /// </summary>
        [DataMember(Name="expiredTimeDateType", EmitDefaultValue=false)]
        public int ExpiredTimeDateType { get; set; }

        /// <summary>
        /// Gets or Sets ExpiredTimeDateWorkflowTemplate
        /// </summary>
        [DataMember(Name="expiredTimeDateWorkflowTemplate", EmitDefaultValue=false)]
        public Guid ExpiredTimeDateWorkflowTemplate { get; set; }

        /// <summary>
        /// Gets or Sets ExpirationPeriodWorkflowStage
        /// </summary>
        [DataMember(Name="expirationPeriodWorkflowStage", EmitDefaultValue=true)]
        public ApprovalProcessStageCollection ExpirationPeriodWorkflowStage { get; set; }

        /// <summary>
        /// Gets or Sets QuotaSize
        /// </summary>
        [DataMember(Name="quotaSize", EmitDefaultValue=false)]
        public long QuotaSize { get; set; }

        /// <summary>
        /// Gets or Sets ServerResourceQuota
        /// </summary>
        [DataMember(Name="serverResourceQuota", EmitDefaultValue=false)]
        public double ServerResourceQuota { get; set; }

        /// <summary>
        /// Gets or Sets CaOrAdminCenterUrl
        /// </summary>
        [DataMember(Name="caOrAdminCenterUrl", EmitDefaultValue=true)]
        public string CaOrAdminCenterUrl { get; set; }

        /// <summary>
        /// Gets or Sets ApplyPolicy
        /// </summary>
        [DataMember(Name="applyPolicy", EmitDefaultValue=true)]
        public ApplyPolicyInfo ApplyPolicy { get; set; }

        /// <summary>
        /// Gets or Sets AppliedDeploymentPlans
        /// </summary>
        [DataMember(Name="appliedDeploymentPlans", EmitDefaultValue=true)]
        public string AppliedDeploymentPlans { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalActionTime
        /// </summary>
        [DataMember(Name="additionalActionTime", EmitDefaultValue=false)]
        public DateTime AdditionalActionTime { get; set; }

        /// <summary>
        /// Gets or Sets QuotaThresholdWarningTimes
        /// </summary>
        [DataMember(Name="quotaThresholdWarningTimes", EmitDefaultValue=false)]
        public int QuotaThresholdWarningTimes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SiteProperty {\n");
            sb.Append("  Department: ").Append(Department).Append("\n");
            sb.Append("  Policy: ").Append(Policy).Append("\n");
            sb.Append("  CustomMetadatas: ").Append(CustomMetadatas).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  SiteMaxDepth: ").Append(SiteMaxDepth).Append("\n");
            sb.Append("  WarningExpiredTimeDate: ").Append(WarningExpiredTimeDate).Append("\n");
            sb.Append("  WarningExpiredTimeDateType: ").Append(WarningExpiredTimeDateType).Append("\n");
            sb.Append("  ExpiredTimeDate: ").Append(ExpiredTimeDate).Append("\n");
            sb.Append("  ExpiredTimeDateType: ").Append(ExpiredTimeDateType).Append("\n");
            sb.Append("  ExpiredTimeDateWorkflowTemplate: ").Append(ExpiredTimeDateWorkflowTemplate).Append("\n");
            sb.Append("  ExpirationPeriodWorkflowStage: ").Append(ExpirationPeriodWorkflowStage).Append("\n");
            sb.Append("  QuotaSize: ").Append(QuotaSize).Append("\n");
            sb.Append("  ServerResourceQuota: ").Append(ServerResourceQuota).Append("\n");
            sb.Append("  CaOrAdminCenterUrl: ").Append(CaOrAdminCenterUrl).Append("\n");
            sb.Append("  ApplyPolicy: ").Append(ApplyPolicy).Append("\n");
            sb.Append("  AppliedDeploymentPlans: ").Append(AppliedDeploymentPlans).Append("\n");
            sb.Append("  AdditionalActionTime: ").Append(AdditionalActionTime).Append("\n");
            sb.Append("  QuotaThresholdWarningTimes: ").Append(QuotaThresholdWarningTimes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SiteProperty);
        }

        /// <summary>
        /// Returns true if SiteProperty instances are equal
        /// </summary>
        /// <param name="input">Instance of SiteProperty to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SiteProperty input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Department == input.Department ||
                    (this.Department != null &&
                    this.Department.Equals(input.Department))
                ) && 
                (
                    this.Policy == input.Policy ||
                    (this.Policy != null &&
                    this.Policy.Equals(input.Policy))
                ) && 
                (
                    this.CustomMetadatas == input.CustomMetadatas ||
                    this.CustomMetadatas != null &&
                    input.CustomMetadatas != null &&
                    this.CustomMetadatas.SequenceEqual(input.CustomMetadatas)
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.SiteMaxDepth == input.SiteMaxDepth ||
                    this.SiteMaxDepth.Equals(input.SiteMaxDepth)
                ) && 
                (
                    this.WarningExpiredTimeDate == input.WarningExpiredTimeDate ||
                    this.WarningExpiredTimeDate.Equals(input.WarningExpiredTimeDate)
                ) && 
                (
                    this.WarningExpiredTimeDateType == input.WarningExpiredTimeDateType ||
                    this.WarningExpiredTimeDateType.Equals(input.WarningExpiredTimeDateType)
                ) && 
                (
                    this.ExpiredTimeDate == input.ExpiredTimeDate ||
                    this.ExpiredTimeDate.Equals(input.ExpiredTimeDate)
                ) && 
                (
                    this.ExpiredTimeDateType == input.ExpiredTimeDateType ||
                    this.ExpiredTimeDateType.Equals(input.ExpiredTimeDateType)
                ) && 
                (
                    this.ExpiredTimeDateWorkflowTemplate == input.ExpiredTimeDateWorkflowTemplate ||
                    (this.ExpiredTimeDateWorkflowTemplate != null &&
                    this.ExpiredTimeDateWorkflowTemplate.Equals(input.ExpiredTimeDateWorkflowTemplate))
                ) && 
                (
                    this.ExpirationPeriodWorkflowStage == input.ExpirationPeriodWorkflowStage ||
                    (this.ExpirationPeriodWorkflowStage != null &&
                    this.ExpirationPeriodWorkflowStage.Equals(input.ExpirationPeriodWorkflowStage))
                ) && 
                (
                    this.QuotaSize == input.QuotaSize ||
                    this.QuotaSize.Equals(input.QuotaSize)
                ) && 
                (
                    this.ServerResourceQuota == input.ServerResourceQuota ||
                    this.ServerResourceQuota.Equals(input.ServerResourceQuota)
                ) && 
                (
                    this.CaOrAdminCenterUrl == input.CaOrAdminCenterUrl ||
                    (this.CaOrAdminCenterUrl != null &&
                    this.CaOrAdminCenterUrl.Equals(input.CaOrAdminCenterUrl))
                ) && 
                (
                    this.ApplyPolicy == input.ApplyPolicy ||
                    (this.ApplyPolicy != null &&
                    this.ApplyPolicy.Equals(input.ApplyPolicy))
                ) && 
                (
                    this.AppliedDeploymentPlans == input.AppliedDeploymentPlans ||
                    (this.AppliedDeploymentPlans != null &&
                    this.AppliedDeploymentPlans.Equals(input.AppliedDeploymentPlans))
                ) && 
                (
                    this.AdditionalActionTime == input.AdditionalActionTime ||
                    (this.AdditionalActionTime != null &&
                    this.AdditionalActionTime.Equals(input.AdditionalActionTime))
                ) && 
                (
                    this.QuotaThresholdWarningTimes == input.QuotaThresholdWarningTimes ||
                    this.QuotaThresholdWarningTimes.Equals(input.QuotaThresholdWarningTimes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Department != null)
                    hashCode = hashCode * 59 + this.Department.GetHashCode();
                if (this.Policy != null)
                    hashCode = hashCode * 59 + this.Policy.GetHashCode();
                if (this.CustomMetadatas != null)
                    hashCode = hashCode * 59 + this.CustomMetadatas.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                hashCode = hashCode * 59 + this.SiteMaxDepth.GetHashCode();
                hashCode = hashCode * 59 + this.WarningExpiredTimeDate.GetHashCode();
                hashCode = hashCode * 59 + this.WarningExpiredTimeDateType.GetHashCode();
                hashCode = hashCode * 59 + this.ExpiredTimeDate.GetHashCode();
                hashCode = hashCode * 59 + this.ExpiredTimeDateType.GetHashCode();
                if (this.ExpiredTimeDateWorkflowTemplate != null)
                    hashCode = hashCode * 59 + this.ExpiredTimeDateWorkflowTemplate.GetHashCode();
                if (this.ExpirationPeriodWorkflowStage != null)
                    hashCode = hashCode * 59 + this.ExpirationPeriodWorkflowStage.GetHashCode();
                hashCode = hashCode * 59 + this.QuotaSize.GetHashCode();
                hashCode = hashCode * 59 + this.ServerResourceQuota.GetHashCode();
                if (this.CaOrAdminCenterUrl != null)
                    hashCode = hashCode * 59 + this.CaOrAdminCenterUrl.GetHashCode();
                if (this.ApplyPolicy != null)
                    hashCode = hashCode * 59 + this.ApplyPolicy.GetHashCode();
                if (this.AppliedDeploymentPlans != null)
                    hashCode = hashCode * 59 + this.AppliedDeploymentPlans.GetHashCode();
                if (this.AdditionalActionTime != null)
                    hashCode = hashCode * 59 + this.AdditionalActionTime.GetHashCode();
                hashCode = hashCode * 59 + this.QuotaThresholdWarningTimes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
