/* 
 * Cloud Governance Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Cloud.Governance.Client.Client.OpenAPIDateConverter;

namespace Cloud.Governance.Client.Model
{
    /// <summary>
    /// PolicyExpirationSetting
    /// </summary>
    [DataContract]
    public partial class PolicyExpirationSetting :  IEquatable<PolicyExpirationSetting>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets DurationType
        /// </summary>
        [DataMember(Name="durationType", EmitDefaultValue=false)]
        public DurationType? DurationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PolicyExpirationSetting" /> class.
        /// </summary>
        /// <param name="isEnabled">isEnabled.</param>
        /// <param name="duration">duration.</param>
        /// <param name="durationType">durationType.</param>
        /// <param name="processId">processId.</param>
        /// <param name="isAutoLockEnabled">isAutoLockEnabled.</param>
        /// <param name="autoLockProfileId">autoLockProfileId.</param>
        /// <param name="isNotifyEnabled">isNotifyEnabled.</param>
        /// <param name="notifyTemplateId">notifyTemplateId.</param>
        public PolicyExpirationSetting(bool isEnabled = default(bool), int duration = default(int), DurationType durationType = default(DurationType), Guid processId = default(Guid), bool isAutoLockEnabled = default(bool), Guid autoLockProfileId = default(Guid), bool isNotifyEnabled = default(bool), Guid notifyTemplateId = default(Guid))
        {
            this.IsEnabled = isEnabled;
            this.Duration = duration;
            this.DurationType = durationType;
            this.ProcessId = processId;
            this.IsAutoLockEnabled = isAutoLockEnabled;
            this.AutoLockProfileId = autoLockProfileId;
            this.IsNotifyEnabled = isNotifyEnabled;
            this.NotifyTemplateId = notifyTemplateId;
        }
        
        /// <summary>
        /// Gets or Sets IsEnabled
        /// </summary>
        [DataMember(Name="isEnabled", EmitDefaultValue=false)]
        public bool IsEnabled { get; set; }

        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public int Duration { get; set; }

        /// <summary>
        /// Gets or Sets ProcessId
        /// </summary>
        [DataMember(Name="processId", EmitDefaultValue=false)]
        public Guid ProcessId { get; set; }

        /// <summary>
        /// Gets or Sets IsAutoLockEnabled
        /// </summary>
        [DataMember(Name="isAutoLockEnabled", EmitDefaultValue=false)]
        public bool IsAutoLockEnabled { get; set; }

        /// <summary>
        /// Gets or Sets AutoLockProfileId
        /// </summary>
        [DataMember(Name="autoLockProfileId", EmitDefaultValue=false)]
        public Guid AutoLockProfileId { get; set; }

        /// <summary>
        /// Gets or Sets IsNotifyEnabled
        /// </summary>
        [DataMember(Name="isNotifyEnabled", EmitDefaultValue=false)]
        public bool IsNotifyEnabled { get; set; }

        /// <summary>
        /// Gets or Sets NotifyTemplateId
        /// </summary>
        [DataMember(Name="notifyTemplateId", EmitDefaultValue=false)]
        public Guid NotifyTemplateId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PolicyExpirationSetting {\n");
            sb.Append("  IsEnabled: ").Append(IsEnabled).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  DurationType: ").Append(DurationType).Append("\n");
            sb.Append("  ProcessId: ").Append(ProcessId).Append("\n");
            sb.Append("  IsAutoLockEnabled: ").Append(IsAutoLockEnabled).Append("\n");
            sb.Append("  AutoLockProfileId: ").Append(AutoLockProfileId).Append("\n");
            sb.Append("  IsNotifyEnabled: ").Append(IsNotifyEnabled).Append("\n");
            sb.Append("  NotifyTemplateId: ").Append(NotifyTemplateId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PolicyExpirationSetting);
        }

        /// <summary>
        /// Returns true if PolicyExpirationSetting instances are equal
        /// </summary>
        /// <param name="input">Instance of PolicyExpirationSetting to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PolicyExpirationSetting input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IsEnabled == input.IsEnabled ||
                    this.IsEnabled.Equals(input.IsEnabled)
                ) && 
                (
                    this.Duration == input.Duration ||
                    this.Duration.Equals(input.Duration)
                ) && 
                (
                    this.DurationType == input.DurationType ||
                    this.DurationType.Equals(input.DurationType)
                ) && 
                (
                    this.ProcessId == input.ProcessId ||
                    (this.ProcessId != null &&
                    this.ProcessId.Equals(input.ProcessId))
                ) && 
                (
                    this.IsAutoLockEnabled == input.IsAutoLockEnabled ||
                    this.IsAutoLockEnabled.Equals(input.IsAutoLockEnabled)
                ) && 
                (
                    this.AutoLockProfileId == input.AutoLockProfileId ||
                    (this.AutoLockProfileId != null &&
                    this.AutoLockProfileId.Equals(input.AutoLockProfileId))
                ) && 
                (
                    this.IsNotifyEnabled == input.IsNotifyEnabled ||
                    this.IsNotifyEnabled.Equals(input.IsNotifyEnabled)
                ) && 
                (
                    this.NotifyTemplateId == input.NotifyTemplateId ||
                    (this.NotifyTemplateId != null &&
                    this.NotifyTemplateId.Equals(input.NotifyTemplateId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.IsEnabled.GetHashCode();
                hashCode = hashCode * 59 + this.Duration.GetHashCode();
                hashCode = hashCode * 59 + this.DurationType.GetHashCode();
                if (this.ProcessId != null)
                    hashCode = hashCode * 59 + this.ProcessId.GetHashCode();
                hashCode = hashCode * 59 + this.IsAutoLockEnabled.GetHashCode();
                if (this.AutoLockProfileId != null)
                    hashCode = hashCode * 59 + this.AutoLockProfileId.GetHashCode();
                hashCode = hashCode * 59 + this.IsNotifyEnabled.GetHashCode();
                if (this.NotifyTemplateId != null)
                    hashCode = hashCode * 59 + this.NotifyTemplateId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
