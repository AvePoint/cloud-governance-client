/* 
 * Cloud Governance Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Cloud.Governance.NewSdk.Client;
using Cloud.Governance.NewSdk.Model;

namespace Cloud.Governance.NewSdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IQuestionnairesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// get questionnaire by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>QuestionnaireRef</returns>
        QuestionnaireRef GetQuestionnaireById (Guid id);

        /// <summary>
        /// get questionnaire by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of QuestionnaireRef</returns>
        ApiResponse<QuestionnaireRef> GetQuestionnaireByIdWithHttpInfo (Guid id);
        /// <summary>
        /// submit questionnaire
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireRequest"> (optional)</param>
        /// <returns>List&lt;ServiceList&gt;</returns>
        List<ServiceList> SubmitQuestionnaire (QuestionnaireRequest questionnaireRequest = null);

        /// <summary>
        /// submit questionnaire
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireRequest"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ServiceList&gt;</returns>
        ApiResponse<List<ServiceList>> SubmitQuestionnaireWithHttpInfo (QuestionnaireRequest questionnaireRequest = null);
        /// <summary>
        /// submit questionnaire in workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objecttype"></param>
        /// <param name="objectid"></param>
        /// <param name="questionnaireRequest"> (optional)</param>
        /// <returns>List&lt;ServiceList&gt;</returns>
        List<ServiceList> SubmitQuestionnaireInWorkspace (WorkspaceType objecttype, string objectid, QuestionnaireRequest questionnaireRequest = null);

        /// <summary>
        /// submit questionnaire in workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objecttype"></param>
        /// <param name="objectid"></param>
        /// <param name="questionnaireRequest"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ServiceList&gt;</returns>
        ApiResponse<List<ServiceList>> SubmitQuestionnaireInWorkspaceWithHttpInfo (WorkspaceType objecttype, string objectid, QuestionnaireRequest questionnaireRequest = null);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IQuestionnairesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// get questionnaire by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of QuestionnaireRef</returns>
        System.Threading.Tasks.Task<QuestionnaireRef> GetQuestionnaireByIdAsync (Guid id);

        /// <summary>
        /// get questionnaire by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (QuestionnaireRef)</returns>
        System.Threading.Tasks.Task<ApiResponse<QuestionnaireRef>> GetQuestionnaireByIdAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// submit questionnaire
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireRequest"> (optional)</param>
        /// <returns>Task of List&lt;ServiceList&gt;</returns>
        System.Threading.Tasks.Task<List<ServiceList>> SubmitQuestionnaireAsync (QuestionnaireRequest questionnaireRequest = null);

        /// <summary>
        /// submit questionnaire
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ServiceList&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ServiceList>>> SubmitQuestionnaireAsyncWithHttpInfo (QuestionnaireRequest questionnaireRequest = null);
        /// <summary>
        /// submit questionnaire in workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objecttype"></param>
        /// <param name="objectid"></param>
        /// <param name="questionnaireRequest"> (optional)</param>
        /// <returns>Task of List&lt;ServiceList&gt;</returns>
        System.Threading.Tasks.Task<List<ServiceList>> SubmitQuestionnaireInWorkspaceAsync (WorkspaceType objecttype, string objectid, QuestionnaireRequest questionnaireRequest = null);

        /// <summary>
        /// submit questionnaire in workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objecttype"></param>
        /// <param name="objectid"></param>
        /// <param name="questionnaireRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ServiceList&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ServiceList>>> SubmitQuestionnaireInWorkspaceAsyncWithHttpInfo (WorkspaceType objecttype, string objectid, QuestionnaireRequest questionnaireRequest = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IQuestionnairesApi : IQuestionnairesApiSync, IQuestionnairesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class QuestionnairesApi : IQuestionnairesApi
    {
        private Cloud.Governance.NewSdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="QuestionnairesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public QuestionnairesApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QuestionnairesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public QuestionnairesApi(String basePath)
        {
            this.Configuration = Cloud.Governance.NewSdk.Client.Configuration.MergeConfigurations(
                Cloud.Governance.NewSdk.Client.GlobalConfiguration.Instance,
                new Cloud.Governance.NewSdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Cloud.Governance.NewSdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Cloud.Governance.NewSdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Cloud.Governance.NewSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QuestionnairesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public QuestionnairesApi(Cloud.Governance.NewSdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Cloud.Governance.NewSdk.Client.Configuration.MergeConfigurations(
                Cloud.Governance.NewSdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Cloud.Governance.NewSdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Cloud.Governance.NewSdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Cloud.Governance.NewSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QuestionnairesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public QuestionnairesApi(Cloud.Governance.NewSdk.Client.ISynchronousClient client,Cloud.Governance.NewSdk.Client.IAsynchronousClient asyncClient, Cloud.Governance.NewSdk.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Cloud.Governance.NewSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Cloud.Governance.NewSdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Cloud.Governance.NewSdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Cloud.Governance.NewSdk.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Cloud.Governance.NewSdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// get questionnaire by id 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>QuestionnaireRef</returns>
        public QuestionnaireRef GetQuestionnaireById (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<QuestionnaireRef> localVarResponse = GetQuestionnaireByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get questionnaire by id 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of QuestionnaireRef</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< QuestionnaireRef > GetQuestionnaireByIdWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling QuestionnairesApi->GetQuestionnaireById");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< QuestionnaireRef >("/questionnaires/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetQuestionnaireById", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get questionnaire by id 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of QuestionnaireRef</returns>
        public async System.Threading.Tasks.Task<QuestionnaireRef> GetQuestionnaireByIdAsync (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<QuestionnaireRef> localVarResponse = await GetQuestionnaireByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get questionnaire by id 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (QuestionnaireRef)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<QuestionnaireRef>> GetQuestionnaireByIdAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling QuestionnairesApi->GetQuestionnaireById");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<QuestionnaireRef>("/questionnaires/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetQuestionnaireById", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit questionnaire 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireRequest"> (optional)</param>
        /// <returns>List&lt;ServiceList&gt;</returns>
        public List<ServiceList> SubmitQuestionnaire (QuestionnaireRequest questionnaireRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<List<ServiceList>> localVarResponse = SubmitQuestionnaireWithHttpInfo(questionnaireRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// submit questionnaire 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireRequest"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ServiceList&gt;</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< List<ServiceList> > SubmitQuestionnaireWithHttpInfo (QuestionnaireRequest questionnaireRequest = null)
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = questionnaireRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post< List<ServiceList> >("/questionnaires", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitQuestionnaire", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit questionnaire 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireRequest"> (optional)</param>
        /// <returns>Task of List&lt;ServiceList&gt;</returns>
        public async System.Threading.Tasks.Task<List<ServiceList>> SubmitQuestionnaireAsync (QuestionnaireRequest questionnaireRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<List<ServiceList>> localVarResponse = await SubmitQuestionnaireAsyncWithHttpInfo(questionnaireRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// submit questionnaire 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ServiceList&gt;)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<List<ServiceList>>> SubmitQuestionnaireAsyncWithHttpInfo (QuestionnaireRequest questionnaireRequest = null)
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = questionnaireRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<List<ServiceList>>("/questionnaires", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitQuestionnaire", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit questionnaire in workspace 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objecttype"></param>
        /// <param name="objectid"></param>
        /// <param name="questionnaireRequest"> (optional)</param>
        /// <returns>List&lt;ServiceList&gt;</returns>
        public List<ServiceList> SubmitQuestionnaireInWorkspace (WorkspaceType objecttype, string objectid, QuestionnaireRequest questionnaireRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<List<ServiceList>> localVarResponse = SubmitQuestionnaireInWorkspaceWithHttpInfo(objecttype, objectid, questionnaireRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// submit questionnaire in workspace 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objecttype"></param>
        /// <param name="objectid"></param>
        /// <param name="questionnaireRequest"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ServiceList&gt;</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< List<ServiceList> > SubmitQuestionnaireInWorkspaceWithHttpInfo (WorkspaceType objecttype, string objectid, QuestionnaireRequest questionnaireRequest = null)
        {
            // verify the required parameter 'objecttype' is set
            if (objecttype == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'objecttype' when calling QuestionnairesApi->SubmitQuestionnaireInWorkspace");

            // verify the required parameter 'objectid' is set
            if (objectid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'objectid' when calling QuestionnairesApi->SubmitQuestionnaireInWorkspace");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (objecttype != null)
                requestOptions.PathParameters.Add("objecttype", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(objecttype)); // path parameter
            if (objectid != null)
                requestOptions.PathParameters.Add("objectid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(objectid)); // path parameter
            requestOptions.Data = questionnaireRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post< List<ServiceList> >("/questionnaires/workspace/{objecttype}/{objectid}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitQuestionnaireInWorkspace", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit questionnaire in workspace 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objecttype"></param>
        /// <param name="objectid"></param>
        /// <param name="questionnaireRequest"> (optional)</param>
        /// <returns>Task of List&lt;ServiceList&gt;</returns>
        public async System.Threading.Tasks.Task<List<ServiceList>> SubmitQuestionnaireInWorkspaceAsync (WorkspaceType objecttype, string objectid, QuestionnaireRequest questionnaireRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<List<ServiceList>> localVarResponse = await SubmitQuestionnaireInWorkspaceAsyncWithHttpInfo(objecttype, objectid, questionnaireRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// submit questionnaire in workspace 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objecttype"></param>
        /// <param name="objectid"></param>
        /// <param name="questionnaireRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ServiceList&gt;)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<List<ServiceList>>> SubmitQuestionnaireInWorkspaceAsyncWithHttpInfo (WorkspaceType objecttype, string objectid, QuestionnaireRequest questionnaireRequest = null)
        {
            // verify the required parameter 'objecttype' is set
            if (objecttype == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'objecttype' when calling QuestionnairesApi->SubmitQuestionnaireInWorkspace");

            // verify the required parameter 'objectid' is set
            if (objectid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'objectid' when calling QuestionnairesApi->SubmitQuestionnaireInWorkspace");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (objecttype != null)
                requestOptions.PathParameters.Add("objecttype", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(objecttype)); // path parameter
            if (objectid != null)
                requestOptions.PathParameters.Add("objectid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(objectid)); // path parameter
            requestOptions.Data = questionnaireRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<List<ServiceList>>("/questionnaires/workspace/{objecttype}/{objectid}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitQuestionnaireInWorkspace", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
