/* 
 * Cloud Governance Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Cloud.Governance.NewSdk.Api;
using Cloud.Governance.NewSdk.Model;
using Cloud.Governance.NewSdk.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Cloud.Governance.NewSdk.Test
{
    /// <summary>
    ///  Class for testing CreateWebScopeSettings
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class CreateWebScopeSettingsTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for CreateWebScopeSettings
        //private CreateWebScopeSettings instance;

        public CreateWebScopeSettingsTests()
        {
            // TODO uncomment below to create an instance of CreateWebScopeSettings
            //instance = new CreateWebScopeSettings();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of CreateWebScopeSettings
        /// </summary>
        [Fact]
        public void CreateWebScopeSettingsInstanceTest()
        {
            // TODO uncomment below to test "IsInstanceOfType" CreateWebScopeSettings
            //Assert.IsInstanceOfType<CreateWebScopeSettings> (instance, "variable 'instance' is a CreateWebScopeSettings");
        }


        /// <summary>
        /// Test the property 'SelectedNodes'
        /// </summary>
        [Fact]
        public void SelectedNodesTest()
        {
            // TODO unit test for the property 'SelectedNodes'
        }
        /// <summary>
        /// Test the property 'RestrictParentUrl'
        /// </summary>
        [Fact]
        public void RestrictParentUrlTest()
        {
            // TODO unit test for the property 'RestrictParentUrl'
        }
        /// <summary>
        /// Test the property 'ScopeType'
        /// </summary>
        [Fact]
        public void ScopeTypeTest()
        {
            // TODO unit test for the property 'ScopeType'
        }
        /// <summary>
        /// Test the property 'UseTitleInUrl'
        /// </summary>
        [Fact]
        public void UseTitleInUrlTest()
        {
            // TODO unit test for the property 'UseTitleInUrl'
        }
        /// <summary>
        /// Test the property 'EnableUrlValidation'
        /// </summary>
        [Fact]
        public void EnableUrlValidationTest()
        {
            // TODO unit test for the property 'EnableUrlValidation'
        }
        /// <summary>
        /// Test the property 'TextValidationRule'
        /// </summary>
        [Fact]
        public void TextValidationRuleTest()
        {
            // TODO unit test for the property 'TextValidationRule'
        }
        /// <summary>
        /// Test the property 'AutoPopulateUrlWithSPContext'
        /// </summary>
        [Fact]
        public void AutoPopulateUrlWithSPContextTest()
        {
            // TODO unit test for the property 'AutoPopulateUrlWithSPContext'
        }
        /// <summary>
        /// Test the property 'AutoPopulateUrlWithSPContextAssignBy'
        /// </summary>
        [Fact]
        public void AutoPopulateUrlWithSPContextAssignByTest()
        {
            // TODO unit test for the property 'AutoPopulateUrlWithSPContextAssignBy'
        }

    }

}
