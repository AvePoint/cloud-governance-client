/* 
 * Cloud Governance Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Cloud.Governance.Client.Client.OpenAPIDateConverter;

namespace Cloud.Governance.Client.Model
{
    /// <summary>
    /// PermissionActionItem
    /// </summary>
    [DataContract]
    public partial class PermissionActionItem :  IEquatable<PermissionActionItem>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets AccountType
        /// </summary>
        [DataMember(Name="accountType", EmitDefaultValue=false)]
        public PrincipalType? AccountType { get; set; }
        /// <summary>
        /// Gets or Sets ActionType
        /// </summary>
        [DataMember(Name="actionType", EmitDefaultValue=false)]
        public PermissionActionType? ActionType { get; set; }
        /// <summary>
        /// Gets or Sets AccessType
        /// </summary>
        [DataMember(Name="accessType", EmitDefaultValue=false)]
        public UserAccessType? AccessType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PermissionActionItem" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="idInSharepoint">idInSharepoint.</param>
        /// <param name="accountType">accountType.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="level">level.</param>
        /// <param name="levelDescription">levelDescription.</param>
        /// <param name="memberOf">memberOf.</param>
        /// <param name="path">path.</param>
        /// <param name="permissionLevel">permissionLevel.</param>
        /// <param name="sharePointGroup">sharePointGroup.</param>
        /// <param name="titleName">titleName.</param>
        /// <param name="userOrGroup">userOrGroup.</param>
        /// <param name="memberId">memberId.</param>
        /// <param name="parentId">parentId.</param>
        /// <param name="parentAccountType">parentAccountType.</param>
        /// <param name="actionType">actionType.</param>
        /// <param name="accessType">accessType.</param>
        /// <param name="isSiteAdministrator">isSiteAdministrator.</param>
        public PermissionActionItem(string id = default(string), string idInSharepoint = default(string), PrincipalType accountType = default(PrincipalType), string displayName = default(string), string level = default(string), string levelDescription = default(string), string memberOf = default(string), string path = default(string), string permissionLevel = default(string), string sharePointGroup = default(string), string titleName = default(string), string userOrGroup = default(string), int memberId = default(int), string parentId = default(string), int parentAccountType = default(int), PermissionActionType actionType = default(PermissionActionType), UserAccessType accessType = default(UserAccessType), bool isSiteAdministrator = default(bool))
        {
            this.Id = id;
            this.IdInSharepoint = idInSharepoint;
            this.AccountType = accountType;
            this.DisplayName = displayName;
            this.Level = level;
            this.LevelDescription = levelDescription;
            this.MemberOf = memberOf;
            this.Path = path;
            this.PermissionLevel = permissionLevel;
            this.SharePointGroup = sharePointGroup;
            this.TitleName = titleName;
            this.UserOrGroup = userOrGroup;
            this.MemberId = memberId;
            this.ParentId = parentId;
            this.ParentAccountType = parentAccountType;
            this.ActionType = actionType;
            this.AccessType = accessType;
            this.IsSiteAdministrator = isSiteAdministrator;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets IdInSharepoint
        /// </summary>
        [DataMember(Name="idInSharepoint", EmitDefaultValue=true)]
        public string IdInSharepoint { get; set; }

        /// <summary>
        /// Gets or Sets AccountTypeDescription
        /// </summary>
        [DataMember(Name="accountTypeDescription", EmitDefaultValue=true)]
        public string AccountTypeDescription { get; private set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name="displayName", EmitDefaultValue=true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets Level
        /// </summary>
        [DataMember(Name="level", EmitDefaultValue=true)]
        public string Level { get; set; }

        /// <summary>
        /// Gets or Sets LevelDescription
        /// </summary>
        [DataMember(Name="levelDescription", EmitDefaultValue=true)]
        public string LevelDescription { get; set; }

        /// <summary>
        /// Gets or Sets MemberOf
        /// </summary>
        [DataMember(Name="memberOf", EmitDefaultValue=true)]
        public string MemberOf { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name="path", EmitDefaultValue=true)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or Sets PermissionLevel
        /// </summary>
        [DataMember(Name="permissionLevel", EmitDefaultValue=true)]
        public string PermissionLevel { get; set; }

        /// <summary>
        /// Gets or Sets SharePointGroup
        /// </summary>
        [DataMember(Name="sharePointGroup", EmitDefaultValue=true)]
        public string SharePointGroup { get; set; }

        /// <summary>
        /// Gets or Sets TitleName
        /// </summary>
        [DataMember(Name="titleName", EmitDefaultValue=true)]
        public string TitleName { get; set; }

        /// <summary>
        /// Gets or Sets UserOrGroup
        /// </summary>
        [DataMember(Name="userOrGroup", EmitDefaultValue=true)]
        public string UserOrGroup { get; set; }

        /// <summary>
        /// Gets or Sets MemberId
        /// </summary>
        [DataMember(Name="memberId", EmitDefaultValue=false)]
        public int MemberId { get; set; }

        /// <summary>
        /// Gets or Sets ParentId
        /// </summary>
        [DataMember(Name="parentId", EmitDefaultValue=true)]
        public string ParentId { get; set; }

        /// <summary>
        /// Gets or Sets ParentAccountType
        /// </summary>
        [DataMember(Name="parentAccountType", EmitDefaultValue=false)]
        public int ParentAccountType { get; set; }

        /// <summary>
        /// Gets or Sets AccessTypeDescription
        /// </summary>
        [DataMember(Name="accessTypeDescription", EmitDefaultValue=true)]
        public string AccessTypeDescription { get; private set; }

        /// <summary>
        /// Gets or Sets IsSiteAdministrator
        /// </summary>
        [DataMember(Name="isSiteAdministrator", EmitDefaultValue=false)]
        public bool IsSiteAdministrator { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PermissionActionItem {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IdInSharepoint: ").Append(IdInSharepoint).Append("\n");
            sb.Append("  AccountType: ").Append(AccountType).Append("\n");
            sb.Append("  AccountTypeDescription: ").Append(AccountTypeDescription).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  LevelDescription: ").Append(LevelDescription).Append("\n");
            sb.Append("  MemberOf: ").Append(MemberOf).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  PermissionLevel: ").Append(PermissionLevel).Append("\n");
            sb.Append("  SharePointGroup: ").Append(SharePointGroup).Append("\n");
            sb.Append("  TitleName: ").Append(TitleName).Append("\n");
            sb.Append("  UserOrGroup: ").Append(UserOrGroup).Append("\n");
            sb.Append("  MemberId: ").Append(MemberId).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  ParentAccountType: ").Append(ParentAccountType).Append("\n");
            sb.Append("  ActionType: ").Append(ActionType).Append("\n");
            sb.Append("  AccessType: ").Append(AccessType).Append("\n");
            sb.Append("  AccessTypeDescription: ").Append(AccessTypeDescription).Append("\n");
            sb.Append("  IsSiteAdministrator: ").Append(IsSiteAdministrator).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PermissionActionItem);
        }

        /// <summary>
        /// Returns true if PermissionActionItem instances are equal
        /// </summary>
        /// <param name="input">Instance of PermissionActionItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PermissionActionItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IdInSharepoint == input.IdInSharepoint ||
                    (this.IdInSharepoint != null &&
                    this.IdInSharepoint.Equals(input.IdInSharepoint))
                ) && 
                (
                    this.AccountType == input.AccountType ||
                    this.AccountType.Equals(input.AccountType)
                ) && 
                (
                    this.AccountTypeDescription == input.AccountTypeDescription ||
                    (this.AccountTypeDescription != null &&
                    this.AccountTypeDescription.Equals(input.AccountTypeDescription))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Level == input.Level ||
                    (this.Level != null &&
                    this.Level.Equals(input.Level))
                ) && 
                (
                    this.LevelDescription == input.LevelDescription ||
                    (this.LevelDescription != null &&
                    this.LevelDescription.Equals(input.LevelDescription))
                ) && 
                (
                    this.MemberOf == input.MemberOf ||
                    (this.MemberOf != null &&
                    this.MemberOf.Equals(input.MemberOf))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.PermissionLevel == input.PermissionLevel ||
                    (this.PermissionLevel != null &&
                    this.PermissionLevel.Equals(input.PermissionLevel))
                ) && 
                (
                    this.SharePointGroup == input.SharePointGroup ||
                    (this.SharePointGroup != null &&
                    this.SharePointGroup.Equals(input.SharePointGroup))
                ) && 
                (
                    this.TitleName == input.TitleName ||
                    (this.TitleName != null &&
                    this.TitleName.Equals(input.TitleName))
                ) && 
                (
                    this.UserOrGroup == input.UserOrGroup ||
                    (this.UserOrGroup != null &&
                    this.UserOrGroup.Equals(input.UserOrGroup))
                ) && 
                (
                    this.MemberId == input.MemberId ||
                    this.MemberId.Equals(input.MemberId)
                ) && 
                (
                    this.ParentId == input.ParentId ||
                    (this.ParentId != null &&
                    this.ParentId.Equals(input.ParentId))
                ) && 
                (
                    this.ParentAccountType == input.ParentAccountType ||
                    this.ParentAccountType.Equals(input.ParentAccountType)
                ) && 
                (
                    this.ActionType == input.ActionType ||
                    this.ActionType.Equals(input.ActionType)
                ) && 
                (
                    this.AccessType == input.AccessType ||
                    this.AccessType.Equals(input.AccessType)
                ) && 
                (
                    this.AccessTypeDescription == input.AccessTypeDescription ||
                    (this.AccessTypeDescription != null &&
                    this.AccessTypeDescription.Equals(input.AccessTypeDescription))
                ) && 
                (
                    this.IsSiteAdministrator == input.IsSiteAdministrator ||
                    this.IsSiteAdministrator.Equals(input.IsSiteAdministrator)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IdInSharepoint != null)
                    hashCode = hashCode * 59 + this.IdInSharepoint.GetHashCode();
                hashCode = hashCode * 59 + this.AccountType.GetHashCode();
                if (this.AccountTypeDescription != null)
                    hashCode = hashCode * 59 + this.AccountTypeDescription.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.Level != null)
                    hashCode = hashCode * 59 + this.Level.GetHashCode();
                if (this.LevelDescription != null)
                    hashCode = hashCode * 59 + this.LevelDescription.GetHashCode();
                if (this.MemberOf != null)
                    hashCode = hashCode * 59 + this.MemberOf.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.PermissionLevel != null)
                    hashCode = hashCode * 59 + this.PermissionLevel.GetHashCode();
                if (this.SharePointGroup != null)
                    hashCode = hashCode * 59 + this.SharePointGroup.GetHashCode();
                if (this.TitleName != null)
                    hashCode = hashCode * 59 + this.TitleName.GetHashCode();
                if (this.UserOrGroup != null)
                    hashCode = hashCode * 59 + this.UserOrGroup.GetHashCode();
                hashCode = hashCode * 59 + this.MemberId.GetHashCode();
                if (this.ParentId != null)
                    hashCode = hashCode * 59 + this.ParentId.GetHashCode();
                hashCode = hashCode * 59 + this.ParentAccountType.GetHashCode();
                hashCode = hashCode * 59 + this.ActionType.GetHashCode();
                hashCode = hashCode * 59 + this.AccessType.GetHashCode();
                if (this.AccessTypeDescription != null)
                    hashCode = hashCode * 59 + this.AccessTypeDescription.GetHashCode();
                hashCode = hashCode * 59 + this.IsSiteAdministrator.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
