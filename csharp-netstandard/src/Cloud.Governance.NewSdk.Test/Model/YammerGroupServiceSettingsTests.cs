/* 
 * Cloud Governance Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Cloud.Governance.NewSdk.Api;
using Cloud.Governance.NewSdk.Model;
using Cloud.Governance.NewSdk.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Cloud.Governance.NewSdk.Test
{
    /// <summary>
    ///  Class for testing YammerGroupServiceSettings
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class YammerGroupServiceSettingsTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for YammerGroupServiceSettings
        //private YammerGroupServiceSettings instance;

        public YammerGroupServiceSettingsTests()
        {
            // TODO uncomment below to create an instance of YammerGroupServiceSettings
            //instance = new YammerGroupServiceSettings();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of YammerGroupServiceSettings
        /// </summary>
        [Fact]
        public void YammerGroupServiceSettingsInstanceTest()
        {
            // TODO uncomment below to test "IsInstanceOfType" YammerGroupServiceSettings
            //Assert.IsInstanceOfType<YammerGroupServiceSettings> (instance, "variable 'instance' is a YammerGroupServiceSettings");
        }


        /// <summary>
        /// Test the property 'NetworkId'
        /// </summary>
        [Fact]
        public void NetworkIdTest()
        {
            // TODO unit test for the property 'NetworkId'
        }
        /// <summary>
        /// Test the property 'AllowCreate'
        /// </summary>
        [Fact]
        public void AllowCreateTest()
        {
            // TODO unit test for the property 'AllowCreate'
        }
        /// <summary>
        /// Test the property 'AllowReuseExisting'
        /// </summary>
        [Fact]
        public void AllowReuseExistingTest()
        {
            // TODO unit test for the property 'AllowReuseExisting'
        }
        /// <summary>
        /// Test the property 'Enabled'
        /// </summary>
        [Fact]
        public void EnabledTest()
        {
            // TODO unit test for the property 'Enabled'
        }
        /// <summary>
        /// Test the property 'CreateNewGroupAssignBy'
        /// </summary>
        [Fact]
        public void CreateNewGroupAssignByTest()
        {
            // TODO unit test for the property 'CreateNewGroupAssignBy'
        }
        /// <summary>
        /// Test the property 'NameOrId'
        /// </summary>
        [Fact]
        public void NameOrIdTest()
        {
            // TODO unit test for the property 'NameOrId'
        }
        /// <summary>
        /// Test the property 'Description'
        /// </summary>
        [Fact]
        public void DescriptionTest()
        {
            // TODO unit test for the property 'Description'
        }
        /// <summary>
        /// Test the property 'Type'
        /// </summary>
        [Fact]
        public void TypeTest()
        {
            // TODO unit test for the property 'Type'
        }
        /// <summary>
        /// Test the property 'JoinType'
        /// </summary>
        [Fact]
        public void JoinTypeTest()
        {
            // TODO unit test for the property 'JoinType'
        }
        /// <summary>
        /// Test the property 'IsListInDirectory'
        /// </summary>
        [Fact]
        public void IsListInDirectoryTest()
        {
            // TODO unit test for the property 'IsListInDirectory'
        }
        /// <summary>
        /// Test the property 'IsGroupAlreadyExisted'
        /// </summary>
        [Fact]
        public void IsGroupAlreadyExistedTest()
        {
            // TODO unit test for the property 'IsGroupAlreadyExisted'
        }

    }

}
