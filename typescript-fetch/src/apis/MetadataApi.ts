// tslint:disable
/**
 * Cloud Governance Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CustomMetadata,
    CustomMetadataFromJSON,
    CustomMetadataToJSON,
} from '../models';

export interface GetMetadataRequest {
    filter?: string;
    orderby?: string;
    search?: string;
    top?: number;
    skip?: number;
}

export interface GetMetadataByIdRequest {
    id: string;
}

/**
 * no description
 */
export class MetadataApi extends runtime.BaseAPI {

    /**
     * get metadata
     */
    async getMetadataRaw(requestParameters: GetMetadataRequest): Promise<runtime.ApiResponse<Array<CustomMetadata>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.orderby !== undefined) {
            queryParameters['orderby'] = requestParameters.orderby;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.top !== undefined) {
            queryParameters['top'] = requestParameters.top;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/metadata`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CustomMetadataFromJSON));
    }

    /**
     * get metadata
     */
    async getMetadata(requestParameters: GetMetadataRequest): Promise<Array<CustomMetadata>> {
        const response = await this.getMetadataRaw(requestParameters);
        return await response.value();
    }

    /**
     * get metadata by id
     */
    async getMetadataByIdRaw(requestParameters: GetMetadataByIdRequest): Promise<runtime.ApiResponse<CustomMetadata>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getMetadataById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/metadata/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomMetadataFromJSON(jsonValue));
    }

    /**
     * get metadata by id
     */
    async getMetadataById(requestParameters: GetMetadataByIdRequest): Promise<CustomMetadata> {
        const response = await this.getMetadataByIdRaw(requestParameters);
        return await response.value();
    }

}
