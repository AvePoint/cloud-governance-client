/* 
 * Cloud Governance Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Cloud.Governance.NewSdk.Client;
using Cloud.Governance.NewSdk.Api;
using Cloud.Governance.NewSdk.Model;

namespace Cloud.Governance.NewSdk.Test
{
    /// <summary>
    ///  Class for testing TasksApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class TasksApiTests : IDisposable
    {
        private TasksApi instance;

        public TasksApiTests()
        {
            instance = new TasksApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of TasksApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TasksApi
            //Assert.IsType(typeof(TasksApi), instance, "instance is a TasksApi");
        }

        
        /// <summary>
        /// Test AddMembersForGroupMembershipRecertification
        /// </summary>
        [Fact]
        public void AddMembersForGroupMembershipRecertificationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //List<ApiUser> apiUser = null;
            //instance.AddMembersForGroupMembershipRecertification(id, apiUser);
            
        }
        
        /// <summary>
        /// Test AddOwnersForGroupMembershipRecertification
        /// </summary>
        [Fact]
        public void AddOwnersForGroupMembershipRecertificationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //List<ApiUser> apiUser = null;
            //instance.AddOwnersForGroupMembershipRecertification(id, apiUser);
            
        }
        
        /// <summary>
        /// Test ApproveTask
        /// </summary>
        [Fact]
        public void ApproveTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //CommentsParam commentsParam = null;
            //instance.ApproveTask(id, commentsParam);
            
        }
        
        /// <summary>
        /// Test ClaimElectionTask
        /// </summary>
        [Fact]
        public void ClaimElectionTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //string secondarycontact = null;
            //instance.ClaimElectionTask(id, secondarycontact);
            
        }
        
        /// <summary>
        /// Test ClaimSiteOwnershipRecertificationTask
        /// </summary>
        [Fact]
        public void ClaimSiteOwnershipRecertificationTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //string secondarycontact = null;
            //instance.ClaimSiteOwnershipRecertificationTask(id, secondarycontact);
            
        }
        
        /// <summary>
        /// Test DeclineElectionTask
        /// </summary>
        [Fact]
        public void DeclineElectionTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //instance.DeclineElectionTask(id);
            
        }
        
        /// <summary>
        /// Test DeclineSiteOwnershipRecertificationTask
        /// </summary>
        [Fact]
        public void DeclineSiteOwnershipRecertificationTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //instance.DeclineSiteOwnershipRecertificationTask(id);
            
        }
        
        /// <summary>
        /// Test DemoteAsMembersForGroupMembershipRecertification
        /// </summary>
        [Fact]
        public void DemoteAsMembersForGroupMembershipRecertificationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //List<ApiUser> apiUser = null;
            //instance.DemoteAsMembersForGroupMembershipRecertification(id, apiUser);
            
        }
        
        /// <summary>
        /// Test EditArchiveGroupRequest
        /// </summary>
        [Fact]
        public void EditArchiveGroupRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //ArchiveGroupRequest archiveGroupRequest = null;
            //instance.EditArchiveGroupRequest(id, archiveGroupRequest);
            
        }
        
        /// <summary>
        /// Test EditArchiveSiteRequest
        /// </summary>
        [Fact]
        public void EditArchiveSiteRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //ArchiveSiteRequest archiveSiteRequest = null;
            //instance.EditArchiveSiteRequest(id, archiveSiteRequest);
            
        }
        
        /// <summary>
        /// Test EditArchiveWebRequest
        /// </summary>
        [Fact]
        public void EditArchiveWebRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //ArchiveWebLifecycleRequest archiveWebLifecycleRequest = null;
            //instance.EditArchiveWebRequest(id, archiveWebLifecycleRequest);
            
        }
        
        /// <summary>
        /// Test EditChangeGroupPolicyRequest
        /// </summary>
        [Fact]
        public void EditChangeGroupPolicyRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //ChangeGroupPolicyRequest changeGroupPolicyRequest = null;
            //instance.EditChangeGroupPolicyRequest(id, changeGroupPolicyRequest);
            
        }
        
        /// <summary>
        /// Test EditChangeGroupQuotaRequest
        /// </summary>
        [Fact]
        public void EditChangeGroupQuotaRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //ChangeGroupQuotaRequest changeGroupQuotaRequest = null;
            //instance.EditChangeGroupQuotaRequest(id, changeGroupQuotaRequest);
            
        }
        
        /// <summary>
        /// Test EditChangeGroupRequest
        /// </summary>
        [Fact]
        public void EditChangeGroupRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //ChangeGroupSettingRequest changeGroupSettingRequest = null;
            //instance.EditChangeGroupRequest(id, changeGroupSettingRequest);
            
        }
        
        /// <summary>
        /// Test EditChangeListSettingRequest
        /// </summary>
        [Fact]
        public void EditChangeListSettingRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //ChangeListSettingRequest changeListSettingRequest = null;
            //instance.EditChangeListSettingRequest(id, changeListSettingRequest);
            
        }
        
        /// <summary>
        /// Test EditChangePermissionRequest
        /// </summary>
        [Fact]
        public void EditChangePermissionRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //ChangePermissionRequest changePermissionRequest = null;
            //instance.EditChangePermissionRequest(id, changePermissionRequest);
            
        }
        
        /// <summary>
        /// Test EditChangeSiteContactRequest
        /// </summary>
        [Fact]
        public void EditChangeSiteContactRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //ChangeSiteContactRequest changeSiteContactRequest = null;
            //instance.EditChangeSiteContactRequest(id, changeSiteContactRequest);
            
        }
        
        /// <summary>
        /// Test EditChangeSitePolicyRequest
        /// </summary>
        [Fact]
        public void EditChangeSitePolicyRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //ChangeSitePolicyRequest changeSitePolicyRequest = null;
            //instance.EditChangeSitePolicyRequest(id, changeSitePolicyRequest);
            
        }
        
        /// <summary>
        /// Test EditChangeSiteQuotaRequest
        /// </summary>
        [Fact]
        public void EditChangeSiteQuotaRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //ChangeSiteQuotaRequest changeSiteQuotaRequest = null;
            //instance.EditChangeSiteQuotaRequest(id, changeSiteQuotaRequest);
            
        }
        
        /// <summary>
        /// Test EditChangeSiteSettingRequest
        /// </summary>
        [Fact]
        public void EditChangeSiteSettingRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //ChangeSiteSettingRequest changeSiteSettingRequest = null;
            //instance.EditChangeSiteSettingRequest(id, changeSiteSettingRequest);
            
        }
        
        /// <summary>
        /// Test EditChangeWebContactRequest
        /// </summary>
        [Fact]
        public void EditChangeWebContactRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //ChangeWebContactRequest changeWebContactRequest = null;
            //instance.EditChangeWebContactRequest(id, changeWebContactRequest);
            
        }
        
        /// <summary>
        /// Test EditChangeWebSettingRequest
        /// </summary>
        [Fact]
        public void EditChangeWebSettingRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //ChangeWebSettingRequest changeWebSettingRequest = null;
            //instance.EditChangeWebSettingRequest(id, changeWebSettingRequest);
            
        }
        
        /// <summary>
        /// Test EditClonePermissionRequest
        /// </summary>
        [Fact]
        public void EditClonePermissionRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //ClonePermissionRequest clonePermissionRequest = null;
            //instance.EditClonePermissionRequest(id, clonePermissionRequest);
            
        }
        
        /// <summary>
        /// Test EditContentMoveRequest
        /// </summary>
        [Fact]
        public void EditContentMoveRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //ContentMoveRequest contentMoveRequest = null;
            //instance.EditContentMoveRequest(id, contentMoveRequest);
            
        }
        
        /// <summary>
        /// Test EditCreateGroupRequest
        /// </summary>
        [Fact]
        public void EditCreateGroupRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //CreateGroupRequest createGroupRequest = null;
            //instance.EditCreateGroupRequest(id, createGroupRequest);
            
        }
        
        /// <summary>
        /// Test EditCreateListRequest
        /// </summary>
        [Fact]
        public void EditCreateListRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //CreateListRequest createListRequest = null;
            //instance.EditCreateListRequest(id, createListRequest);
            
        }
        
        /// <summary>
        /// Test EditCreateSiteRequest
        /// </summary>
        [Fact]
        public void EditCreateSiteRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //CreateSiteRequest createSiteRequest = null;
            //instance.EditCreateSiteRequest(id, createSiteRequest);
            
        }
        
        /// <summary>
        /// Test EditCreateWebRequest
        /// </summary>
        [Fact]
        public void EditCreateWebRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //CreateWebRequest createWebRequest = null;
            //instance.EditCreateWebRequest(id, createWebRequest);
            
        }
        
        /// <summary>
        /// Test EditCustomRequest
        /// </summary>
        [Fact]
        public void EditCustomRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //ApiRequest apiRequest = null;
            //instance.EditCustomRequest(id, apiRequest);
            
        }
        
        /// <summary>
        /// Test EditDeleteGroupRequest
        /// </summary>
        [Fact]
        public void EditDeleteGroupRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //DeleteGroupRequest deleteGroupRequest = null;
            //instance.EditDeleteGroupRequest(id, deleteGroupRequest);
            
        }
        
        /// <summary>
        /// Test EditDeleteSiteRequest
        /// </summary>
        [Fact]
        public void EditDeleteSiteRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //DeleteSiteRequest deleteSiteRequest = null;
            //instance.EditDeleteSiteRequest(id, deleteSiteRequest);
            
        }
        
        /// <summary>
        /// Test EditDeleteWebRequest
        /// </summary>
        [Fact]
        public void EditDeleteWebRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //DeleteWebLifecycleRequest deleteWebLifecycleRequest = null;
            //instance.EditDeleteWebRequest(id, deleteWebLifecycleRequest);
            
        }
        
        /// <summary>
        /// Test EditExtendGroupRequest
        /// </summary>
        [Fact]
        public void EditExtendGroupRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //ExtendGroupRequest extendGroupRequest = null;
            //instance.EditExtendGroupRequest(id, extendGroupRequest);
            
        }
        
        /// <summary>
        /// Test EditExtendSiteRequest
        /// </summary>
        [Fact]
        public void EditExtendSiteRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //ExtendSiteRequest extendSiteRequest = null;
            //instance.EditExtendSiteRequest(id, extendSiteRequest);
            
        }
        
        /// <summary>
        /// Test EditGrantPermissionRequest
        /// </summary>
        [Fact]
        public void EditGrantPermissionRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //GrantPermissionRequest grantPermissionRequest = null;
            //instance.EditGrantPermissionRequest(id, grantPermissionRequest);
            
        }
        
        /// <summary>
        /// Test EditLockSiteRequest
        /// </summary>
        [Fact]
        public void EditLockSiteRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //LockSiteRequest lockSiteRequest = null;
            //instance.EditLockSiteRequest(id, lockSiteRequest);
            
        }
        
        /// <summary>
        /// Test EditManagePermissionRequest
        /// </summary>
        [Fact]
        public void EditManagePermissionRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //ManagePermissionRequest managePermissionRequest = null;
            //instance.EditManagePermissionRequest(id, managePermissionRequest);
            
        }
        
        /// <summary>
        /// Test EditRestoreGroupRequest
        /// </summary>
        [Fact]
        public void EditRestoreGroupRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //RestoreGroupRequest restoreGroupRequest = null;
            //instance.EditRestoreGroupRequest(id, restoreGroupRequest);
            
        }
        
        /// <summary>
        /// Test EditUnLockSiteRequest
        /// </summary>
        [Fact]
        public void EditUnLockSiteRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //UnlockSiteRequest unlockSiteRequest = null;
            //instance.EditUnLockSiteRequest(id, unlockSiteRequest);
            
        }
        
        /// <summary>
        /// Test GetChangePermissionReport
        /// </summary>
        [Fact]
        public void GetChangePermissionReportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //string filter = null;
            //string orderby = null;
            //Object body = null;
            //var response = instance.GetChangePermissionReport(id, filter, orderby, body);
            //Assert.IsType<PermissionActionItemPageResult> (response, "response is PermissionActionItemPageResult");
        }
        
        /// <summary>
        /// Test GetChangePermissionReportByVersion
        /// </summary>
        [Fact]
        public void GetChangePermissionReportByVersionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //long version = null;
            //string filter = null;
            //string orderby = null;
            //Object body = null;
            //var response = instance.GetChangePermissionReportByVersion(id, version, filter, orderby, body);
            //Assert.IsType<PermissionActionItemPageResult> (response, "response is PermissionActionItemPageResult");
        }
        
        /// <summary>
        /// Test GetChangePermissionReportFilters
        /// </summary>
        [Fact]
        public void GetChangePermissionReportFiltersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //string filter = null;
            //string distinct = null;
            //int? top = null;
            //int? skip = null;
            //var response = instance.GetChangePermissionReportFilters(id, filter, distinct, top, skip);
            //Assert.IsType<DistinctPageResult> (response, "response is DistinctPageResult");
        }
        
        /// <summary>
        /// Test GetChangePermissionReportFiltersByVersion
        /// </summary>
        [Fact]
        public void GetChangePermissionReportFiltersByVersionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //long version = null;
            //string filter = null;
            //string distinct = null;
            //int? top = null;
            //int? skip = null;
            //var response = instance.GetChangePermissionReportFiltersByVersion(id, version, filter, distinct, top, skip);
            //Assert.IsType<DistinctPageResult> (response, "response is DistinctPageResult");
        }
        
        /// <summary>
        /// Test GetChangePermissionReportFiltersForSPGroup
        /// </summary>
        [Fact]
        public void GetChangePermissionReportFiltersForSPGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //Guid groupid = null;
            //string filter = null;
            //string distinct = null;
            //int? top = null;
            //int? skip = null;
            //var response = instance.GetChangePermissionReportFiltersForSPGroup(id, groupid, filter, distinct, top, skip);
            //Assert.IsType<DistinctPageResult> (response, "response is DistinctPageResult");
        }
        
        /// <summary>
        /// Test GetChangePermissionReportFiltersForSPGroupByVersion
        /// </summary>
        [Fact]
        public void GetChangePermissionReportFiltersForSPGroupByVersionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //Guid groupid = null;
            //long version = null;
            //string filter = null;
            //string distinct = null;
            //int? top = null;
            //int? skip = null;
            //var response = instance.GetChangePermissionReportFiltersForSPGroupByVersion(id, groupid, version, filter, distinct, top, skip);
            //Assert.IsType<DistinctPageResult> (response, "response is DistinctPageResult");
        }
        
        /// <summary>
        /// Test GetChangePermissionReportForSPGroup
        /// </summary>
        [Fact]
        public void GetChangePermissionReportForSPGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //Guid groupid = null;
            //string filter = null;
            //string orderby = null;
            //Object body = null;
            //var response = instance.GetChangePermissionReportForSPGroup(id, groupid, filter, orderby, body);
            //Assert.IsType<PermissionActionItemPageResult> (response, "response is PermissionActionItemPageResult");
        }
        
        /// <summary>
        /// Test GetChangePermissionReportForSPGroupByVersion
        /// </summary>
        [Fact]
        public void GetChangePermissionReportForSPGroupByVersionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //long version = null;
            //Guid groupid = null;
            //string filter = null;
            //string orderby = null;
            //Object body = null;
            //var response = instance.GetChangePermissionReportForSPGroupByVersion(id, version, groupid, filter, orderby, body);
            //Assert.IsType<PermissionActionItemPageResult> (response, "response is PermissionActionItemPageResult");
        }
        
        /// <summary>
        /// Test GetChangePermissionReportPermissionLevels
        /// </summary>
        [Fact]
        public void GetChangePermissionReportPermissionLevelsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //var response = instance.GetChangePermissionReportPermissionLevels(id);
            //Assert.IsType<List<PermissionLevel>> (response, "response is List<PermissionLevel>");
        }
        
        /// <summary>
        /// Test GetChangePermissionReportProperties
        /// </summary>
        [Fact]
        public void GetChangePermissionReportPropertiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //var response = instance.GetChangePermissionReportProperties(id);
            //Assert.IsType<RecertificationReportProperties> (response, "response is RecertificationReportProperties");
        }
        
        /// <summary>
        /// Test GetClonePermissionReport
        /// </summary>
        [Fact]
        public void GetClonePermissionReportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //string filter = null;
            //string orderby = null;
            //Object body = null;
            //var response = instance.GetClonePermissionReport(id, filter, orderby, body);
            //Assert.IsType<ClonePermissionSecuritySearchResultPageResult> (response, "response is ClonePermissionSecuritySearchResultPageResult");
        }
        
        /// <summary>
        /// Test GetClonePermissionReportProperties
        /// </summary>
        [Fact]
        public void GetClonePermissionReportPropertiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //var response = instance.GetClonePermissionReportProperties(id);
            //Assert.IsType<ClonePermissionReportProperty> (response, "response is ClonePermissionReportProperty");
        }
        
        /// <summary>
        /// Test GetGetManualArchiveReport
        /// </summary>
        [Fact]
        public void GetGetManualArchiveReportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //string filter = null;
            //string orderby = null;
            //Object body = null;
            //var response = instance.GetGetManualArchiveReport(id, filter, orderby, body);
            //Assert.IsType<ManuallyArchiveRecordModelPageResult> (response, "response is ManuallyArchiveRecordModelPageResult");
        }
        
        /// <summary>
        /// Test GetGetManualArchiveReportFilters
        /// </summary>
        [Fact]
        public void GetGetManualArchiveReportFiltersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //string filter = null;
            //string distinct = null;
            //int? top = null;
            //int? skip = null;
            //var response = instance.GetGetManualArchiveReportFilters(id, filter, distinct, top, skip);
            //Assert.IsType<DistinctPageResult> (response, "response is DistinctPageResult");
        }
        
        /// <summary>
        /// Test GetGroupMembershipRecertificationReport
        /// </summary>
        [Fact]
        public void GetGroupMembershipRecertificationReportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //string filter = null;
            //string orderby = null;
            //Object body = null;
            //var response = instance.GetGroupMembershipRecertificationReport(id, filter, orderby, body);
            //Assert.IsType<MembershipRecertificationItemPageResult> (response, "response is MembershipRecertificationItemPageResult");
        }
        
        /// <summary>
        /// Test GetGroupMembershipRecertificationReportByVersion
        /// </summary>
        [Fact]
        public void GetGroupMembershipRecertificationReportByVersionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //int version = null;
            //string filter = null;
            //string orderby = null;
            //Object body = null;
            //var response = instance.GetGroupMembershipRecertificationReportByVersion(id, version, filter, orderby, body);
            //Assert.IsType<MembershipRecertificationItemPageResult> (response, "response is MembershipRecertificationItemPageResult");
        }
        
        /// <summary>
        /// Test GetGroupMembershipRecertificationReportFilters
        /// </summary>
        [Fact]
        public void GetGroupMembershipRecertificationReportFiltersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //string filter = null;
            //string distinct = null;
            //int? top = null;
            //int? skip = null;
            //var response = instance.GetGroupMembershipRecertificationReportFilters(id, filter, distinct, top, skip);
            //Assert.IsType<DistinctPageResult> (response, "response is DistinctPageResult");
        }
        
        /// <summary>
        /// Test GetGroupMembershipRecertificationReportFiltersByVersion
        /// </summary>
        [Fact]
        public void GetGroupMembershipRecertificationReportFiltersByVersionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //int version = null;
            //string filter = null;
            //string distinct = null;
            //int? top = null;
            //int? skip = null;
            //var response = instance.GetGroupMembershipRecertificationReportFiltersByVersion(id, version, filter, distinct, top, skip);
            //Assert.IsType<DistinctPageResult> (response, "response is DistinctPageResult");
        }
        
        /// <summary>
        /// Test GetGroupMembershipRecertificationReportProperties
        /// </summary>
        [Fact]
        public void GetGroupMembershipRecertificationReportPropertiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //var response = instance.GetGroupMembershipRecertificationReportProperties(id);
            //Assert.IsType<MembershipRecertificationReportProperties> (response, "response is MembershipRecertificationReportProperties");
        }
        
        /// <summary>
        /// Test GetGroupPermissionRecertificationReport
        /// </summary>
        [Fact]
        public void GetGroupPermissionRecertificationReportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //string filter = null;
            //string orderby = null;
            //Object body = null;
            //var response = instance.GetGroupPermissionRecertificationReport(id, filter, orderby, body);
            //Assert.IsType<GroupPermissionActionItemPageResult> (response, "response is GroupPermissionActionItemPageResult");
        }
        
        /// <summary>
        /// Test GetGroupPermissionRecertificationReportByVersion
        /// </summary>
        [Fact]
        public void GetGroupPermissionRecertificationReportByVersionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //int version = null;
            //string filter = null;
            //string orderby = null;
            //Object body = null;
            //var response = instance.GetGroupPermissionRecertificationReportByVersion(id, version, filter, orderby, body);
            //Assert.IsType<GroupPermissionActionItemPageResult> (response, "response is GroupPermissionActionItemPageResult");
        }
        
        /// <summary>
        /// Test GetGroupPermissionRecertificationReportFilters
        /// </summary>
        [Fact]
        public void GetGroupPermissionRecertificationReportFiltersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //string filter = null;
            //string distinct = null;
            //int? top = null;
            //int? skip = null;
            //var response = instance.GetGroupPermissionRecertificationReportFilters(id, filter, distinct, top, skip);
            //Assert.IsType<DistinctPageResult> (response, "response is DistinctPageResult");
        }
        
        /// <summary>
        /// Test GetGroupPermissionRecertificationReportFiltersForSPGroup
        /// </summary>
        [Fact]
        public void GetGroupPermissionRecertificationReportFiltersForSPGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //Guid groupid = null;
            //string filter = null;
            //string distinct = null;
            //int? top = null;
            //int? skip = null;
            //var response = instance.GetGroupPermissionRecertificationReportFiltersForSPGroup(id, groupid, filter, distinct, top, skip);
            //Assert.IsType<DistinctPageResult> (response, "response is DistinctPageResult");
        }
        
        /// <summary>
        /// Test GetGroupPermissionRecertificationReportForSPGroup
        /// </summary>
        [Fact]
        public void GetGroupPermissionRecertificationReportForSPGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //Guid groupid = null;
            //string filter = null;
            //string orderby = null;
            //Object body = null;
            //var response = instance.GetGroupPermissionRecertificationReportForSPGroup(id, groupid, filter, orderby, body);
            //Assert.IsType<GroupPermissionActionItemPageResult> (response, "response is GroupPermissionActionItemPageResult");
        }
        
        /// <summary>
        /// Test GetGroupPermissionRecertificationReportProperties
        /// </summary>
        [Fact]
        public void GetGroupPermissionRecertificationReportPropertiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //var response = instance.GetGroupPermissionRecertificationReportProperties(id);
            //Assert.IsType<RecertificationReportProperties> (response, "response is RecertificationReportProperties");
        }
        
        /// <summary>
        /// Test GetMyTaskFilters
        /// </summary>
        [Fact]
        public void GetMyTaskFiltersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? isconfirmtask = null;
            //string filter = null;
            //string distinct = null;
            //int? top = null;
            //int? skip = null;
            //var response = instance.GetMyTaskFilters(isconfirmtask, filter, distinct, top, skip);
            //Assert.IsType<DistinctPageResult> (response, "response is DistinctPageResult");
        }
        
        /// <summary>
        /// Test GetMyTasks
        /// </summary>
        [Fact]
        public void GetMyTasksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? isconfirmtask = null;
            //string filter = null;
            //string orderby = null;
            //string search = null;
            //int? top = null;
            //int? skip = null;
            //var response = instance.GetMyTasks(isconfirmtask, filter, orderby, search, top, skip);
            //Assert.IsType<TaskListPageResult> (response, "response is TaskListPageResult");
        }
        
        /// <summary>
        /// Test GetRemovePermissionReport
        /// </summary>
        [Fact]
        public void GetRemovePermissionReportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //string filter = null;
            //string orderby = null;
            //Object body = null;
            //var response = instance.GetRemovePermissionReport(id, filter, orderby, body);
            //Assert.IsType<SecuritySearchResultPageResult> (response, "response is SecuritySearchResultPageResult");
        }
        
        /// <summary>
        /// Test GetRemovePermissionReportProperties
        /// </summary>
        [Fact]
        public void GetRemovePermissionReportPropertiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //var response = instance.GetRemovePermissionReportProperties(id);
            //Assert.IsType<RecertificationReportProperties> (response, "response is RecertificationReportProperties");
        }
        
        /// <summary>
        /// Test GetSiteMetadataRecertificationReport
        /// </summary>
        [Fact]
        public void GetSiteMetadataRecertificationReportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //var response = instance.GetSiteMetadataRecertificationReport(id);
            //Assert.IsType<List<CustomMetadata>> (response, "response is List<CustomMetadata>");
        }
        
        /// <summary>
        /// Test GetSiteMetadataRecertificationReportProperties
        /// </summary>
        [Fact]
        public void GetSiteMetadataRecertificationReportPropertiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //var response = instance.GetSiteMetadataRecertificationReportProperties(id);
            //Assert.IsType<MetadataRecertificationReportProperties> (response, "response is MetadataRecertificationReportProperties");
        }
        
        /// <summary>
        /// Test GetSiteOwnershipRecertificationReportProperties
        /// </summary>
        [Fact]
        public void GetSiteOwnershipRecertificationReportPropertiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //var response = instance.GetSiteOwnershipRecertificationReportProperties(id);
            //Assert.IsType<RecertificationReportProperties> (response, "response is RecertificationReportProperties");
        }
        
        /// <summary>
        /// Test GetSitePermissionRecertificatioPermissionFilters
        /// </summary>
        [Fact]
        public void GetSitePermissionRecertificatioPermissionFiltersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //string filter = null;
            //string distinct = null;
            //int? top = null;
            //int? skip = null;
            //var response = instance.GetSitePermissionRecertificatioPermissionFilters(id, filter, distinct, top, skip);
            //Assert.IsType<DistinctPageResult> (response, "response is DistinctPageResult");
        }
        
        /// <summary>
        /// Test GetSitePermissionRecertificatioReportFiltersByVersion
        /// </summary>
        [Fact]
        public void GetSitePermissionRecertificatioReportFiltersByVersionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //long version = null;
            //string filter = null;
            //string distinct = null;
            //int? top = null;
            //int? skip = null;
            //var response = instance.GetSitePermissionRecertificatioReportFiltersByVersion(id, version, filter, distinct, top, skip);
            //Assert.IsType<DistinctPageResult> (response, "response is DistinctPageResult");
        }
        
        /// <summary>
        /// Test GetSitePermissionRecertificatioReportFiltersForSPGroup
        /// </summary>
        [Fact]
        public void GetSitePermissionRecertificatioReportFiltersForSPGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //Guid groupid = null;
            //string filter = null;
            //string distinct = null;
            //int? top = null;
            //int? skip = null;
            //var response = instance.GetSitePermissionRecertificatioReportFiltersForSPGroup(id, groupid, filter, distinct, top, skip);
            //Assert.IsType<DistinctPageResult> (response, "response is DistinctPageResult");
        }
        
        /// <summary>
        /// Test GetSitePermissionRecertificatioReportFiltersForSPGroupByVersion
        /// </summary>
        [Fact]
        public void GetSitePermissionRecertificatioReportFiltersForSPGroupByVersionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //Guid groupid = null;
            //long version = null;
            //string filter = null;
            //string distinct = null;
            //int? top = null;
            //int? skip = null;
            //var response = instance.GetSitePermissionRecertificatioReportFiltersForSPGroupByVersion(id, groupid, version, filter, distinct, top, skip);
            //Assert.IsType<DistinctPageResult> (response, "response is DistinctPageResult");
        }
        
        /// <summary>
        /// Test GetSitePermissionRecertificationPermissionLevels
        /// </summary>
        [Fact]
        public void GetSitePermissionRecertificationPermissionLevelsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //var response = instance.GetSitePermissionRecertificationPermissionLevels(id);
            //Assert.IsType<List<PermissionLevel>> (response, "response is List<PermissionLevel>");
        }
        
        /// <summary>
        /// Test GetSitePermissionRecertificationReport
        /// </summary>
        [Fact]
        public void GetSitePermissionRecertificationReportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //string filter = null;
            //string orderby = null;
            //Object body = null;
            //var response = instance.GetSitePermissionRecertificationReport(id, filter, orderby, body);
            //Assert.IsType<PermissionActionItemPageResult> (response, "response is PermissionActionItemPageResult");
        }
        
        /// <summary>
        /// Test GetSitePermissionRecertificationReportByVersion
        /// </summary>
        [Fact]
        public void GetSitePermissionRecertificationReportByVersionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //long version = null;
            //string filter = null;
            //string orderby = null;
            //Object body = null;
            //var response = instance.GetSitePermissionRecertificationReportByVersion(id, version, filter, orderby, body);
            //Assert.IsType<PermissionActionItemPageResult> (response, "response is PermissionActionItemPageResult");
        }
        
        /// <summary>
        /// Test GetSitePermissionRecertificationReportForSPGroup
        /// </summary>
        [Fact]
        public void GetSitePermissionRecertificationReportForSPGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //Guid groupid = null;
            //string filter = null;
            //string orderby = null;
            //Object body = null;
            //var response = instance.GetSitePermissionRecertificationReportForSPGroup(id, groupid, filter, orderby, body);
            //Assert.IsType<PermissionActionItemPageResult> (response, "response is PermissionActionItemPageResult");
        }
        
        /// <summary>
        /// Test GetSitePermissionRecertificationReportForSPGroupByVersion
        /// </summary>
        [Fact]
        public void GetSitePermissionRecertificationReportForSPGroupByVersionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //long version = null;
            //Guid groupid = null;
            //string filter = null;
            //string orderby = null;
            //Object body = null;
            //var response = instance.GetSitePermissionRecertificationReportForSPGroupByVersion(id, version, groupid, filter, orderby, body);
            //Assert.IsType<PermissionActionItemPageResult> (response, "response is PermissionActionItemPageResult");
        }
        
        /// <summary>
        /// Test GetSitePermissionRecertificationReportProperties
        /// </summary>
        [Fact]
        public void GetSitePermissionRecertificationReportPropertiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //var response = instance.GetSitePermissionRecertificationReportProperties(id);
            //Assert.IsType<RecertificationReportProperties> (response, "response is RecertificationReportProperties");
        }
        
        /// <summary>
        /// Test GetTaskByBatchId
        /// </summary>
        [Fact]
        public void GetTaskByBatchIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid batchid = null;
            //var response = instance.GetTaskByBatchId(batchid);
            //Assert.IsType<TaskList> (response, "response is TaskList");
        }
        
        /// <summary>
        /// Test GetTaskById
        /// </summary>
        [Fact]
        public void GetTaskByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //var response = instance.GetTaskById(id);
            //Assert.IsType<ApiTask> (response, "response is ApiTask");
        }
        
        /// <summary>
        /// Test PromoteAsOwnersForGroupMembershipRecertification
        /// </summary>
        [Fact]
        public void PromoteAsOwnersForGroupMembershipRecertificationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //List<ApiUser> apiUser = null;
            //instance.PromoteAsOwnersForGroupMembershipRecertification(id, apiUser);
            
        }
        
        /// <summary>
        /// Test ReassignTask
        /// </summary>
        [Fact]
        public void ReassignTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //string user = null;
            //instance.ReassignTask(id, user);
            
        }
        
        /// <summary>
        /// Test RejectTask
        /// </summary>
        [Fact]
        public void RejectTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //CommentsParam commentsParam = null;
            //instance.RejectTask(id, commentsParam);
            
        }
        
        /// <summary>
        /// Test RemoveUsersForGroupMembershipRecertification
        /// </summary>
        [Fact]
        public void RemoveUsersForGroupMembershipRecertificationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //List<Guid> requestBody = null;
            //instance.RemoveUsersForGroupMembershipRecertification(id, requestBody);
            
        }
        
        /// <summary>
        /// Test ReseAllChangesForChangePermissionTask
        /// </summary>
        [Fact]
        public void ReseAllChangesForChangePermissionTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //instance.ReseAllChangesForChangePermissionTask(id);
            
        }
        
        /// <summary>
        /// Test ResetAllChangesForRecertificationTask
        /// </summary>
        [Fact]
        public void ResetAllChangesForRecertificationTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //instance.ResetAllChangesForRecertificationTask(id);
            
        }
        
        /// <summary>
        /// Test ResetMyChangesForChangePermissionTask
        /// </summary>
        [Fact]
        public void ResetMyChangesForChangePermissionTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //instance.ResetMyChangesForChangePermissionTask(id);
            
        }
        
        /// <summary>
        /// Test ResetMyChangesForRecertificationTask
        /// </summary>
        [Fact]
        public void ResetMyChangesForRecertificationTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //instance.ResetMyChangesForRecertificationTask(id);
            
        }
        
        /// <summary>
        /// Test RetryErrorTask
        /// </summary>
        [Fact]
        public void RetryErrorTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //CommentsParam commentsParam = null;
            //instance.RetryErrorTask(id, commentsParam);
            
        }
        
        /// <summary>
        /// Test SaveChangePermissionActions
        /// </summary>
        [Fact]
        public void SaveChangePermissionActionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //List<PermissionActionItem> permissionActionItem = null;
            //instance.SaveChangePermissionActions(id, permissionActionItem);
            
        }
        
        /// <summary>
        /// Test SaveClonePermissionReport
        /// </summary>
        [Fact]
        public void SaveClonePermissionReportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //List<SecuritySearchResult> securitySearchResult = null;
            //instance.SaveClonePermissionReport(id, securitySearchResult);
            
        }
        
        /// <summary>
        /// Test SaveGetManualArchiveReport
        /// </summary>
        [Fact]
        public void SaveGetManualArchiveReportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //List<ManuallyArchiveRecordModel> manuallyArchiveRecordModel = null;
            //instance.SaveGetManualArchiveReport(id, manuallyArchiveRecordModel);
            
        }
        
        /// <summary>
        /// Test SaveGroupPermissionRecertificationResults
        /// </summary>
        [Fact]
        public void SaveGroupPermissionRecertificationResultsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //List<GroupPermissionActionItem> groupPermissionActionItem = null;
            //instance.SaveGroupPermissionRecertificationResults(id, groupPermissionActionItem);
            
        }
        
        /// <summary>
        /// Test SaveRemovePermissionReport
        /// </summary>
        [Fact]
        public void SaveRemovePermissionReportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //List<SecuritySearchResult> securitySearchResult = null;
            //instance.SaveRemovePermissionReport(id, securitySearchResult);
            
        }
        
        /// <summary>
        /// Test SaveSiteMetadataRecertificationResult
        /// </summary>
        [Fact]
        public void SaveSiteMetadataRecertificationResultTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //List<RequestMetadata> requestMetadata = null;
            //instance.SaveSiteMetadataRecertificationResult(id, requestMetadata);
            
        }
        
        /// <summary>
        /// Test SaveSitePermissionRecertificationResult
        /// </summary>
        [Fact]
        public void SaveSitePermissionRecertificationResultTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //List<PermissionActionItem> permissionActionItem = null;
            //instance.SaveSitePermissionRecertificationResult(id, permissionActionItem);
            
        }
        
        /// <summary>
        /// Test SkipErrorTask
        /// </summary>
        [Fact]
        public void SkipErrorTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //CommentsParam commentsParam = null;
            //instance.SkipErrorTask(id, commentsParam);
            
        }
        
        /// <summary>
        /// Test SpecifyPrimaryAndSecondaryContactWhenPrimaryContactIsDeactived
        /// </summary>
        [Fact]
        public void SpecifyPrimaryAndSecondaryContactWhenPrimaryContactIsDeactivedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //string primarycontact = null;
            //string secondarycontact = null;
            //Guid? primarycontactemail = null;
            //Guid? secodnarycontactemail = null;
            //instance.SpecifyPrimaryAndSecondaryContactWhenPrimaryContactIsDeactived(id, primarycontact, secondarycontact, primarycontactemail, secodnarycontactemail);
            
        }
        
        /// <summary>
        /// Test SpecifySecondaryContactWhenSecondaryContactIsDeactived
        /// </summary>
        [Fact]
        public void SpecifySecondaryContactWhenSecondaryContactIsDeactivedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //string secondarycontact = null;
            //instance.SpecifySecondaryContactWhenSecondaryContactIsDeactived(id, secondarycontact);
            
        }
        
        /// <summary>
        /// Test SubmitArchiveGroupAutoTask
        /// </summary>
        [Fact]
        public void SubmitArchiveGroupAutoTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AutoTaskArchiveRequest autoTaskArchiveRequest = null;
            //instance.SubmitArchiveGroupAutoTask(autoTaskArchiveRequest);
            
        }
        
        /// <summary>
        /// Test SubmitArchiveSiteAutoTask
        /// </summary>
        [Fact]
        public void SubmitArchiveSiteAutoTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AutoTaskArchiveRequest autoTaskArchiveRequest = null;
            //instance.SubmitArchiveSiteAutoTask(autoTaskArchiveRequest);
            
        }
        
        /// <summary>
        /// Test SubmitChangeSitePolicyAutoTask
        /// </summary>
        [Fact]
        public void SubmitChangeSitePolicyAutoTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AutoTaskChangePolicyRequest autoTaskChangePolicyRequest = null;
            //instance.SubmitChangeSitePolicyAutoTask(autoTaskChangePolicyRequest);
            
        }
        
        /// <summary>
        /// Test SubmitContinueAccessGroupAutoTask
        /// </summary>
        [Fact]
        public void SubmitContinueAccessGroupAutoTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? id = null;
            //CommentsParam commentsParam = null;
            //instance.SubmitContinueAccessGroupAutoTask(id, commentsParam);
            
        }
        
        /// <summary>
        /// Test SubmitContinueAccessSiteAutoTask
        /// </summary>
        [Fact]
        public void SubmitContinueAccessSiteAutoTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? id = null;
            //CommentsParam commentsParam = null;
            //instance.SubmitContinueAccessSiteAutoTask(id, commentsParam);
            
        }
        
        /// <summary>
        /// Test SubmitDeleteGroupAutoTask
        /// </summary>
        [Fact]
        public void SubmitDeleteGroupAutoTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AutoTaskDeleteRequest autoTaskDeleteRequest = null;
            //instance.SubmitDeleteGroupAutoTask(autoTaskDeleteRequest);
            
        }
        
        /// <summary>
        /// Test SubmitDeleteSiteAutoTask
        /// </summary>
        [Fact]
        public void SubmitDeleteSiteAutoTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AutoTaskDeleteRequest autoTaskDeleteRequest = null;
            //instance.SubmitDeleteSiteAutoTask(autoTaskDeleteRequest);
            
        }
        
        /// <summary>
        /// Test SubmitExtendGroupAutoTask
        /// </summary>
        [Fact]
        public void SubmitExtendGroupAutoTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AutoTaskExtendRequest autoTaskExtendRequest = null;
            //instance.SubmitExtendGroupAutoTask(autoTaskExtendRequest);
            
        }
        
        /// <summary>
        /// Test SubmitExtendSiteAutoTask
        /// </summary>
        [Fact]
        public void SubmitExtendSiteAutoTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AutoTaskExtendRequest autoTaskExtendRequest = null;
            //instance.SubmitExtendSiteAutoTask(autoTaskExtendRequest);
            
        }
        
        /// <summary>
        /// Test SubmitRecertificationTask
        /// </summary>
        [Fact]
        public void SubmitRecertificationTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //CommentsParam commentsParam = null;
            //instance.SubmitRecertificationTask(id, commentsParam);
            
        }
        
        /// <summary>
        /// Test ViewSiteOwnershipRecertificationTask
        /// </summary>
        [Fact]
        public void ViewSiteOwnershipRecertificationTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //var response = instance.ViewSiteOwnershipRecertificationTask(id);
            //Assert.IsType<OwnershipRecertification> (response, "response is OwnershipRecertification");
        }
        
    }

}
