/* 
 * Cloud Governance Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Cloud.Governance.NewSdk.Client;
using Cloud.Governance.NewSdk.Api;
using Cloud.Governance.NewSdk.Model;

namespace Cloud.Governance.NewSdk.Test
{
    /// <summary>
    ///  Class for testing WorkspaceApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class WorkspaceApiTests : IDisposable
    {
        private WorkspaceApi instance;

        public WorkspaceApiTests()
        {
            instance = new WorkspaceApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of WorkspaceApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' WorkspaceApi
            //Assert.IsType(typeof(WorkspaceApi), instance, "instance is a WorkspaceApi");
        }

        
        /// <summary>
        /// Test ConfirmGorup
        /// </summary>
        [Fact]
        public void ConfirmGorupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //ConfirmInformation confirmInformation = null;
            //instance.ConfirmGorup(id, confirmInformation);
            
        }
        
        /// <summary>
        /// Test ConfirmGorupWithUnknowPrimaryContact
        /// </summary>
        [Fact]
        public void ConfirmGorupWithUnknowPrimaryContactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //instance.ConfirmGorupWithUnknowPrimaryContact(id);
            
        }
        
        /// <summary>
        /// Test ConfirmGroupWithKnowningPrimaryContact
        /// </summary>
        [Fact]
        public void ConfirmGroupWithKnowningPrimaryContactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //UserParam userParam = null;
            //instance.ConfirmGroupWithKnowningPrimaryContact(id, userParam);
            
        }
        
        /// <summary>
        /// Test ConfirmSite
        /// </summary>
        [Fact]
        public void ConfirmSiteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //ConfirmInformation confirmInformation = null;
            //instance.ConfirmSite(id, confirmInformation);
            
        }
        
        /// <summary>
        /// Test ConfirmSiteWitKnowingPrimaryContact
        /// </summary>
        [Fact]
        public void ConfirmSiteWitKnowingPrimaryContactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //UserParam userParam = null;
            //instance.ConfirmSiteWitKnowingPrimaryContact(id, userParam);
            
        }
        
        /// <summary>
        /// Test ConfirmSiteWithUnknowPrimaryContact
        /// </summary>
        [Fact]
        public void ConfirmSiteWithUnknowPrimaryContactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //instance.ConfirmSiteWithUnknowPrimaryContact(id);
            
        }
        
        /// <summary>
        /// Test GetGroupAutoImportProfile
        /// </summary>
        [Fact]
        public void GetGroupAutoImportProfileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //var response = instance.GetGroupAutoImportProfile(id);
            //Assert.IsType<AutoImportProfileRef> (response, "response is AutoImportProfileRef");
        }
        
        /// <summary>
        /// Test GetGroupContacts
        /// </summary>
        [Fact]
        public void GetGroupContactsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //var response = instance.GetGroupContacts(id);
            //Assert.IsType<ObjectContactModel> (response, "response is ObjectContactModel");
        }
        
        /// <summary>
        /// Test GetGroupMembershipRenewalItems
        /// </summary>
        [Fact]
        public void GetGroupMembershipRenewalItemsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //var response = instance.GetGroupMembershipRenewalItems(id);
            //Assert.IsType<List<MembershipRenewalItemModel>> (response, "response is List<MembershipRenewalItemModel>");
        }
        
        /// <summary>
        /// Test GetGroupMetadataRenewalItems
        /// </summary>
        [Fact]
        public void GetGroupMetadataRenewalItemsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //var response = instance.GetGroupMetadataRenewalItems(id);
            //Assert.IsType<List<CustomMetadata>> (response, "response is List<CustomMetadata>");
        }
        
        /// <summary>
        /// Test GetGroupPermissionRenewalFilters
        /// </summary>
        [Fact]
        public void GetGroupPermissionRenewalFiltersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //string filter = null;
            //string distinct = null;
            //int? top = null;
            //int? skip = null;
            //var response = instance.GetGroupPermissionRenewalFilters(id, filter, distinct, top, skip);
            //Assert.IsType<DistinctPageResult> (response, "response is DistinctPageResult");
        }
        
        /// <summary>
        /// Test GetGroupPermissionRenewalFiltersForSPGroup
        /// </summary>
        [Fact]
        public void GetGroupPermissionRenewalFiltersForSPGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //Guid groupid = null;
            //string filter = null;
            //string distinct = null;
            //int? top = null;
            //int? skip = null;
            //var response = instance.GetGroupPermissionRenewalFiltersForSPGroup(id, groupid, filter, distinct, top, skip);
            //Assert.IsType<DistinctPageResult> (response, "response is DistinctPageResult");
        }
        
        /// <summary>
        /// Test GetGroupPermissionRenewalItems
        /// </summary>
        [Fact]
        public void GetGroupPermissionRenewalItemsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //string filter = null;
            //string orderby = null;
            //Object body = null;
            //var response = instance.GetGroupPermissionRenewalItems(id, filter, orderby, body);
            //Assert.IsType<PermissionActionItemPageResult> (response, "response is PermissionActionItemPageResult");
        }
        
        /// <summary>
        /// Test GetGroupPermissionRenewalItemsForSPGroup
        /// </summary>
        [Fact]
        public void GetGroupPermissionRenewalItemsForSPGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //Guid groupid = null;
            //string filter = null;
            //string orderby = null;
            //Object body = null;
            //var response = instance.GetGroupPermissionRenewalItemsForSPGroup(id, groupid, filter, orderby, body);
            //Assert.IsType<PermissionActionItemPageResult> (response, "response is PermissionActionItemPageResult");
        }
        
        /// <summary>
        /// Test GetGroupPermissionRenewalPermissionLevels
        /// </summary>
        [Fact]
        public void GetGroupPermissionRenewalPermissionLevelsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //var response = instance.GetGroupPermissionRenewalPermissionLevels(id);
            //Assert.IsType<List<PermissionLevel>> (response, "response is List<PermissionLevel>");
        }
        
        /// <summary>
        /// Test GetGroupRenewalProfileSettings
        /// </summary>
        [Fact]
        public void GetGroupRenewalProfileSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //var response = instance.GetGroupRenewalProfileSettings(id);
            //Assert.IsType<GroupRenewProfileRef> (response, "response is GroupRenewProfileRef");
        }
        
        /// <summary>
        /// Test GetGroupSharingOptions
        /// </summary>
        [Fact]
        public void GetGroupSharingOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string emailOrId = null;
            //var response = instance.GetGroupSharingOptions(emailOrId);
            //Assert.IsType<ExternalSharingOptions> (response, "response is ExternalSharingOptions");
        }
        
        /// <summary>
        /// Test GetMyGroupInformation
        /// </summary>
        [Fact]
        public void GetMyGroupInformationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //var response = instance.GetMyGroupInformation(id);
            //Assert.IsType<ApiMyGroup> (response, "response is ApiMyGroup");
        }
        
        /// <summary>
        /// Test GetMySiteInformation
        /// </summary>
        [Fact]
        public void GetMySiteInformationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //var response = instance.GetMySiteInformation(id);
            //Assert.IsType<MySite> (response, "response is MySite");
        }
        
        /// <summary>
        /// Test GetSiteAutoImportProfile
        /// </summary>
        [Fact]
        public void GetSiteAutoImportProfileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //var response = instance.GetSiteAutoImportProfile(id);
            //Assert.IsType<AutoImportProfileRef> (response, "response is AutoImportProfileRef");
        }
        
        /// <summary>
        /// Test GetSiteContacts
        /// </summary>
        [Fact]
        public void GetSiteContactsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //var response = instance.GetSiteContacts(id);
            //Assert.IsType<ObjectContactModel> (response, "response is ObjectContactModel");
        }
        
        /// <summary>
        /// Test GetSiteMetadata
        /// </summary>
        [Fact]
        public void GetSiteMetadataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string url = null;
            //var response = instance.GetSiteMetadata(url);
            //Assert.IsType<List<CustomMetadata>> (response, "response is List<CustomMetadata>");
        }
        
        /// <summary>
        /// Test GetSiteMetadataRenewalItems
        /// </summary>
        [Fact]
        public void GetSiteMetadataRenewalItemsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //var response = instance.GetSiteMetadataRenewalItems(id);
            //Assert.IsType<List<CustomMetadata>> (response, "response is List<CustomMetadata>");
        }
        
        /// <summary>
        /// Test GetSitePermissionRenewalFilters
        /// </summary>
        [Fact]
        public void GetSitePermissionRenewalFiltersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //string filter = null;
            //string distinct = null;
            //int? top = null;
            //int? skip = null;
            //var response = instance.GetSitePermissionRenewalFilters(id, filter, distinct, top, skip);
            //Assert.IsType<DistinctPageResult> (response, "response is DistinctPageResult");
        }
        
        /// <summary>
        /// Test GetSitePermissionRenewalFiltersForSPGroup
        /// </summary>
        [Fact]
        public void GetSitePermissionRenewalFiltersForSPGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //Guid groupid = null;
            //string filter = null;
            //string distinct = null;
            //int? top = null;
            //int? skip = null;
            //var response = instance.GetSitePermissionRenewalFiltersForSPGroup(id, groupid, filter, distinct, top, skip);
            //Assert.IsType<DistinctPageResult> (response, "response is DistinctPageResult");
        }
        
        /// <summary>
        /// Test GetSitePermissionRenewalItems
        /// </summary>
        [Fact]
        public void GetSitePermissionRenewalItemsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //string filter = null;
            //string orderby = null;
            //Object body = null;
            //var response = instance.GetSitePermissionRenewalItems(id, filter, orderby, body);
            //Assert.IsType<PermissionActionItemPageResult> (response, "response is PermissionActionItemPageResult");
        }
        
        /// <summary>
        /// Test GetSitePermissionRenewalItemsForSPGroup
        /// </summary>
        [Fact]
        public void GetSitePermissionRenewalItemsForSPGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //Guid groupid = null;
            //string filter = null;
            //string orderby = null;
            //Object body = null;
            //var response = instance.GetSitePermissionRenewalItemsForSPGroup(id, groupid, filter, orderby, body);
            //Assert.IsType<PermissionActionItemPageResult> (response, "response is PermissionActionItemPageResult");
        }
        
        /// <summary>
        /// Test GetSitePermissionRenewalPermissionLevels
        /// </summary>
        [Fact]
        public void GetSitePermissionRenewalPermissionLevelsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //var response = instance.GetSitePermissionRenewalPermissionLevels(id);
            //Assert.IsType<List<PermissionLevel>> (response, "response is List<PermissionLevel>");
        }
        
        /// <summary>
        /// Test GetSiteRenewalProfileSettings
        /// </summary>
        [Fact]
        public void GetSiteRenewalProfileSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //var response = instance.GetSiteRenewalProfileSettings(id);
            //Assert.IsType<RenewProfileRef> (response, "response is RenewProfileRef");
        }
        
        /// <summary>
        /// Test GetSiteSharingOptions
        /// </summary>
        [Fact]
        public void GetSiteSharingOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string siteUrlOrId = null;
            //var response = instance.GetSiteSharingOptions(siteUrlOrId);
            //Assert.IsType<ExternalSharingOptions> (response, "response is ExternalSharingOptions");
        }
        
        /// <summary>
        /// Test GetWorkspaceFilters
        /// </summary>
        [Fact]
        public void GetWorkspaceFiltersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filter = null;
            //string distinct = null;
            //int? top = null;
            //int? skip = null;
            //var response = instance.GetWorkspaceFilters(filter, distinct, top, skip);
            //Assert.IsType<DistinctPageResult> (response, "response is DistinctPageResult");
        }
        
        /// <summary>
        /// Test GetWorkspaceItems
        /// </summary>
        [Fact]
        public void GetWorkspaceItemsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filter = null;
            //string orderby = null;
            //string search = null;
            //int? top = null;
            //int? skip = null;
            //var response = instance.GetWorkspaceItems(filter, orderby, search, top, skip);
            //Assert.IsType<List<WorkspaceList>> (response, "response is List<WorkspaceList>");
        }
        
        /// <summary>
        /// Test ReassignGroupRenewalTask
        /// </summary>
        [Fact]
        public void ReassignGroupRenewalTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //string userid = null;
            //instance.ReassignGroupRenewalTask(id, userid);
            
        }
        
        /// <summary>
        /// Test ReassignSiteRenewalTask
        /// </summary>
        [Fact]
        public void ReassignSiteRenewalTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //string userid = null;
            //instance.ReassignSiteRenewalTask(id, userid);
            
        }
        
        /// <summary>
        /// Test RejectGroupRenewalTask
        /// </summary>
        [Fact]
        public void RejectGroupRenewalTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //instance.RejectGroupRenewalTask(id);
            
        }
        
        /// <summary>
        /// Test RejectSiteRenewalTask
        /// </summary>
        [Fact]
        public void RejectSiteRenewalTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //instance.RejectSiteRenewalTask(id);
            
        }
        
        /// <summary>
        /// Test ResetChangeForSiteRenewal
        /// </summary>
        [Fact]
        public void ResetChangeForSiteRenewalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //instance.ResetChangeForSiteRenewal(id);
            
        }
        
        /// <summary>
        /// Test ResetChangesForGroupRenewal
        /// </summary>
        [Fact]
        public void ResetChangesForGroupRenewalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //instance.ResetChangesForGroupRenewal(id);
            
        }
        
        /// <summary>
        /// Test SaveGroupPermissionRenewalItems
        /// </summary>
        [Fact]
        public void SaveGroupPermissionRenewalItemsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //List<PermissionActionItem> permissionActionItem = null;
            //instance.SaveGroupPermissionRenewalItems(id, permissionActionItem);
            
        }
        
        /// <summary>
        /// Test SaveSitePermissionRenewalItems
        /// </summary>
        [Fact]
        public void SaveSitePermissionRenewalItemsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //List<PermissionActionItem> permissionActionItem = null;
            //instance.SaveSitePermissionRenewalItems(id, permissionActionItem);
            
        }
        
        /// <summary>
        /// Test SubmitGroupRenewalTask
        /// </summary>
        [Fact]
        public void SubmitGroupRenewalTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //RenewModel renewModel = null;
            //var response = instance.SubmitGroupRenewalTask(id, renewModel);
            //Assert.IsType<bool> (response, "response is bool");
        }
        
        /// <summary>
        /// Test SubmitGroupRenewalTaskForArchiving
        /// </summary>
        [Fact]
        public void SubmitGroupRenewalTaskForArchivingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //instance.SubmitGroupRenewalTaskForArchiving(id);
            
        }
        
        /// <summary>
        /// Test SubmitGroupRenewalTaskForDeleting
        /// </summary>
        [Fact]
        public void SubmitGroupRenewalTaskForDeletingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //instance.SubmitGroupRenewalTaskForDeleting(id);
            
        }
        
        /// <summary>
        /// Test SubmitSiteRenewalTask
        /// </summary>
        [Fact]
        public void SubmitSiteRenewalTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //RenewModel renewModel = null;
            //var response = instance.SubmitSiteRenewalTask(id, renewModel);
            //Assert.IsType<bool> (response, "response is bool");
        }
        
        /// <summary>
        /// Test SubmitSiteRenewalTaskForDeleting
        /// </summary>
        [Fact]
        public void SubmitSiteRenewalTaskForDeletingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //instance.SubmitSiteRenewalTaskForDeleting(id);
            
        }
        
        /// <summary>
        /// Test SubmitSiteRenewalTaskWithArchiving
        /// </summary>
        [Fact]
        public void SubmitSiteRenewalTaskWithArchivingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //instance.SubmitSiteRenewalTaskWithArchiving(id);
            
        }
        
    }

}
