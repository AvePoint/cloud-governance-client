/* 
 * Cloud Governance Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Cloud.Governance.Client.Client.OpenAPIDateConverter;

namespace Cloud.Governance.Client.Model
{
    /// <summary>
    /// GroupSharingSetting
    /// </summary>
    [DataContract]
    public partial class GroupSharingSetting :  IEquatable<GroupSharingSetting>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets SiteSharingType
        /// </summary>
        [DataMember(Name="siteSharingType", EmitDefaultValue=false)]
        public GroupSiteSharingCapabilities? SiteSharingType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupSharingSetting" /> class.
        /// </summary>
        /// <param name="enableManageGroupSharing">enableManageGroupSharing.</param>
        /// <param name="enableInviteGuestUser">enableInviteGuestUser.</param>
        /// <param name="enableManageSiteSharing">enableManageSiteSharing.</param>
        /// <param name="siteSharingType">siteSharingType.</param>
        public GroupSharingSetting(bool enableManageGroupSharing = default(bool), bool enableInviteGuestUser = default(bool), bool enableManageSiteSharing = default(bool), GroupSiteSharingCapabilities siteSharingType = default(GroupSiteSharingCapabilities))
        {
            this.EnableManageGroupSharing = enableManageGroupSharing;
            this.EnableInviteGuestUser = enableInviteGuestUser;
            this.EnableManageSiteSharing = enableManageSiteSharing;
            this.SiteSharingType = siteSharingType;
        }
        
        /// <summary>
        /// Gets or Sets EnableManageGroupSharing
        /// </summary>
        [DataMember(Name="enableManageGroupSharing", EmitDefaultValue=false)]
        public bool EnableManageGroupSharing { get; set; }

        /// <summary>
        /// Gets or Sets EnableInviteGuestUser
        /// </summary>
        [DataMember(Name="enableInviteGuestUser", EmitDefaultValue=false)]
        public bool EnableInviteGuestUser { get; set; }

        /// <summary>
        /// Gets or Sets EnableManageSiteSharing
        /// </summary>
        [DataMember(Name="enableManageSiteSharing", EmitDefaultValue=false)]
        public bool EnableManageSiteSharing { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GroupSharingSetting {\n");
            sb.Append("  EnableManageGroupSharing: ").Append(EnableManageGroupSharing).Append("\n");
            sb.Append("  EnableInviteGuestUser: ").Append(EnableInviteGuestUser).Append("\n");
            sb.Append("  EnableManageSiteSharing: ").Append(EnableManageSiteSharing).Append("\n");
            sb.Append("  SiteSharingType: ").Append(SiteSharingType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GroupSharingSetting);
        }

        /// <summary>
        /// Returns true if GroupSharingSetting instances are equal
        /// </summary>
        /// <param name="input">Instance of GroupSharingSetting to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GroupSharingSetting input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EnableManageGroupSharing == input.EnableManageGroupSharing ||
                    this.EnableManageGroupSharing.Equals(input.EnableManageGroupSharing)
                ) && 
                (
                    this.EnableInviteGuestUser == input.EnableInviteGuestUser ||
                    this.EnableInviteGuestUser.Equals(input.EnableInviteGuestUser)
                ) && 
                (
                    this.EnableManageSiteSharing == input.EnableManageSiteSharing ||
                    this.EnableManageSiteSharing.Equals(input.EnableManageSiteSharing)
                ) && 
                (
                    this.SiteSharingType == input.SiteSharingType ||
                    this.SiteSharingType.Equals(input.SiteSharingType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.EnableManageGroupSharing.GetHashCode();
                hashCode = hashCode * 59 + this.EnableInviteGuestUser.GetHashCode();
                hashCode = hashCode * 59 + this.EnableManageSiteSharing.GetHashCode();
                hashCode = hashCode * 59 + this.SiteSharingType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
