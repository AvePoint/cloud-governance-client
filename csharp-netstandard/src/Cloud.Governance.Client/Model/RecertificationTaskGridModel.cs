/* 
 * Cloud Governance Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Cloud.Governance.Client.Client.OpenAPIDateConverter;

namespace Cloud.Governance.Client.Model
{
    /// <summary>
    /// RecertificationTaskGridModel
    /// </summary>
    [DataContract]
    public partial class RecertificationTaskGridModel :  IEquatable<RecertificationTaskGridModel>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets TaskStatus
        /// </summary>
        [DataMember(Name="taskStatus", EmitDefaultValue=false)]
        public TaskResult? TaskStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RecertificationTaskGridModel" /> class.
        /// </summary>
        /// <param name="summary">summary.</param>
        /// <param name="comments">comments.</param>
        /// <param name="modified">modified.</param>
        /// <param name="assignTo">assignTo.</param>
        /// <param name="assignToDisplayName">assignToDisplayName.</param>
        /// <param name="objectUrl">objectUrl.</param>
        /// <param name="createdTime">createdTime.</param>
        /// <param name="taskStatus">taskStatus.</param>
        public RecertificationTaskGridModel(string summary = default(string), string comments = default(string), DateTime modified = default(DateTime), string assignTo = default(string), string assignToDisplayName = default(string), string objectUrl = default(string), string createdTime = default(string), TaskResult taskStatus = default(TaskResult))
        {
            this.Summary = summary;
            this.Comments = comments;
            this.Modified = modified;
            this.AssignTo = assignTo;
            this.AssignToDisplayName = assignToDisplayName;
            this.ObjectUrl = objectUrl;
            this.CreatedTime = createdTime;
            this.TaskStatus = taskStatus;
        }
        
        /// <summary>
        /// Gets or Sets Summary
        /// </summary>
        [DataMember(Name="summary", EmitDefaultValue=true)]
        public string Summary { get; set; }

        /// <summary>
        /// Gets or Sets Comments
        /// </summary>
        [DataMember(Name="comments", EmitDefaultValue=true)]
        public string Comments { get; set; }

        /// <summary>
        /// Gets or Sets Modified
        /// </summary>
        [DataMember(Name="modified", EmitDefaultValue=false)]
        public DateTime Modified { get; set; }

        /// <summary>
        /// Gets or Sets AssignTo
        /// </summary>
        [DataMember(Name="assignTo", EmitDefaultValue=true)]
        public string AssignTo { get; set; }

        /// <summary>
        /// Gets or Sets AssignToDisplayName
        /// </summary>
        [DataMember(Name="assignToDisplayName", EmitDefaultValue=true)]
        public string AssignToDisplayName { get; set; }

        /// <summary>
        /// Gets or Sets ObjectUrl
        /// </summary>
        [DataMember(Name="objectUrl", EmitDefaultValue=true)]
        public string ObjectUrl { get; set; }

        /// <summary>
        /// Gets or Sets CreatedTime
        /// </summary>
        [DataMember(Name="createdTime", EmitDefaultValue=true)]
        public string CreatedTime { get; set; }

        /// <summary>
        /// Gets or Sets TaskStatusDescription
        /// </summary>
        [DataMember(Name="taskStatusDescription", EmitDefaultValue=true)]
        public string TaskStatusDescription { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RecertificationTaskGridModel {\n");
            sb.Append("  Summary: ").Append(Summary).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  Modified: ").Append(Modified).Append("\n");
            sb.Append("  AssignTo: ").Append(AssignTo).Append("\n");
            sb.Append("  AssignToDisplayName: ").Append(AssignToDisplayName).Append("\n");
            sb.Append("  ObjectUrl: ").Append(ObjectUrl).Append("\n");
            sb.Append("  CreatedTime: ").Append(CreatedTime).Append("\n");
            sb.Append("  TaskStatus: ").Append(TaskStatus).Append("\n");
            sb.Append("  TaskStatusDescription: ").Append(TaskStatusDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RecertificationTaskGridModel);
        }

        /// <summary>
        /// Returns true if RecertificationTaskGridModel instances are equal
        /// </summary>
        /// <param name="input">Instance of RecertificationTaskGridModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecertificationTaskGridModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Summary == input.Summary ||
                    (this.Summary != null &&
                    this.Summary.Equals(input.Summary))
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                ) && 
                (
                    this.Modified == input.Modified ||
                    (this.Modified != null &&
                    this.Modified.Equals(input.Modified))
                ) && 
                (
                    this.AssignTo == input.AssignTo ||
                    (this.AssignTo != null &&
                    this.AssignTo.Equals(input.AssignTo))
                ) && 
                (
                    this.AssignToDisplayName == input.AssignToDisplayName ||
                    (this.AssignToDisplayName != null &&
                    this.AssignToDisplayName.Equals(input.AssignToDisplayName))
                ) && 
                (
                    this.ObjectUrl == input.ObjectUrl ||
                    (this.ObjectUrl != null &&
                    this.ObjectUrl.Equals(input.ObjectUrl))
                ) && 
                (
                    this.CreatedTime == input.CreatedTime ||
                    (this.CreatedTime != null &&
                    this.CreatedTime.Equals(input.CreatedTime))
                ) && 
                (
                    this.TaskStatus == input.TaskStatus ||
                    this.TaskStatus.Equals(input.TaskStatus)
                ) && 
                (
                    this.TaskStatusDescription == input.TaskStatusDescription ||
                    (this.TaskStatusDescription != null &&
                    this.TaskStatusDescription.Equals(input.TaskStatusDescription))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Summary != null)
                    hashCode = hashCode * 59 + this.Summary.GetHashCode();
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                if (this.Modified != null)
                    hashCode = hashCode * 59 + this.Modified.GetHashCode();
                if (this.AssignTo != null)
                    hashCode = hashCode * 59 + this.AssignTo.GetHashCode();
                if (this.AssignToDisplayName != null)
                    hashCode = hashCode * 59 + this.AssignToDisplayName.GetHashCode();
                if (this.ObjectUrl != null)
                    hashCode = hashCode * 59 + this.ObjectUrl.GetHashCode();
                if (this.CreatedTime != null)
                    hashCode = hashCode * 59 + this.CreatedTime.GetHashCode();
                hashCode = hashCode * 59 + this.TaskStatus.GetHashCode();
                if (this.TaskStatusDescription != null)
                    hashCode = hashCode * 59 + this.TaskStatusDescription.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
