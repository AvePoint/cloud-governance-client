// tslint:disable
/**
 * Cloud Governance Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    QuestionnaireRef,
    QuestionnaireRefFromJSON,
    QuestionnaireRefToJSON,
    QuestionnaireRequest,
    QuestionnaireRequestFromJSON,
    QuestionnaireRequestToJSON,
    ServiceList,
    ServiceListFromJSON,
    ServiceListToJSON,
    WorkspaceType,
    WorkspaceTypeFromJSON,
    WorkspaceTypeToJSON,
} from '../models';

export interface GetQuestionnaireByIdRequest {
    id: string;
}

export interface SubmitQuestionnaireRequest {
    questionnaireRequest?: QuestionnaireRequest;
}

export interface SubmitQuestionnaireInWorkspaceRequest {
    objecttype: WorkspaceType;
    objectid: string;
    questionnaireRequest?: QuestionnaireRequest;
}

/**
 * no description
 */
export class QuestionnairesApi extends runtime.BaseAPI {

    /**
     * get questionnaire by id
     */
    async getQuestionnaireByIdRaw(requestParameters: GetQuestionnaireByIdRequest): Promise<runtime.ApiResponse<QuestionnaireRef>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getQuestionnaireById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/questionnaires/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => QuestionnaireRefFromJSON(jsonValue));
    }

    /**
     * get questionnaire by id
     */
    async getQuestionnaireById(requestParameters: GetQuestionnaireByIdRequest): Promise<QuestionnaireRef> {
        const response = await this.getQuestionnaireByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * submit questionnaire
     */
    async submitQuestionnaireRaw(requestParameters: SubmitQuestionnaireRequest): Promise<runtime.ApiResponse<Array<ServiceList>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/questionnaires`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QuestionnaireRequestToJSON(requestParameters.questionnaireRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ServiceListFromJSON));
    }

    /**
     * submit questionnaire
     */
    async submitQuestionnaire(requestParameters: SubmitQuestionnaireRequest): Promise<Array<ServiceList>> {
        const response = await this.submitQuestionnaireRaw(requestParameters);
        return await response.value();
    }

    /**
     * submit questionnaire in workspace
     */
    async submitQuestionnaireInWorkspaceRaw(requestParameters: SubmitQuestionnaireInWorkspaceRequest): Promise<runtime.ApiResponse<Array<ServiceList>>> {
        if (requestParameters.objecttype === null || requestParameters.objecttype === undefined) {
            throw new runtime.RequiredError('objecttype','Required parameter requestParameters.objecttype was null or undefined when calling submitQuestionnaireInWorkspace.');
        }

        if (requestParameters.objectid === null || requestParameters.objectid === undefined) {
            throw new runtime.RequiredError('objectid','Required parameter requestParameters.objectid was null or undefined when calling submitQuestionnaireInWorkspace.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/questionnaires/workspace/{objecttype}/{objectid}`.replace(`{${"objecttype"}}`, encodeURIComponent(String(requestParameters.objecttype))).replace(`{${"objectid"}}`, encodeURIComponent(String(requestParameters.objectid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QuestionnaireRequestToJSON(requestParameters.questionnaireRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ServiceListFromJSON));
    }

    /**
     * submit questionnaire in workspace
     */
    async submitQuestionnaireInWorkspace(requestParameters: SubmitQuestionnaireInWorkspaceRequest): Promise<Array<ServiceList>> {
        const response = await this.submitQuestionnaireInWorkspaceRaw(requestParameters);
        return await response.value();
    }

}
