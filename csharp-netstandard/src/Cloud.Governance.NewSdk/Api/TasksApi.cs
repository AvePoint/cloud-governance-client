/* 
 * Cloud Governance Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Cloud.Governance.NewSdk.Client;
using Cloud.Governance.NewSdk.Model;

namespace Cloud.Governance.NewSdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITasksApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// add members for group membership recertification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiUser"> (optional)</param>
        /// <returns></returns>
        void AddMembersForGroupMembershipRecertification (Guid id, List<ApiUser> apiUser = null);

        /// <summary>
        /// add members for group membership recertification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiUser"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddMembersForGroupMembershipRecertificationWithHttpInfo (Guid id, List<ApiUser> apiUser = null);
        /// <summary>
        /// add owners for group membership recertification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiUser"> (optional)</param>
        /// <returns></returns>
        void AddOwnersForGroupMembershipRecertification (Guid id, List<ApiUser> apiUser = null);

        /// <summary>
        /// add owners for group membership recertification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiUser"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddOwnersForGroupMembershipRecertificationWithHttpInfo (Guid id, List<ApiUser> apiUser = null);
        /// <summary>
        /// approve task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="commentsParam"> (optional)</param>
        /// <returns></returns>
        void ApproveTask (Guid id, CommentsParam commentsParam = null);

        /// <summary>
        /// approve task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="commentsParam"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApproveTaskWithHttpInfo (Guid id, CommentsParam commentsParam = null);
        /// <summary>
        /// claim election task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="secondarycontact"> (optional)</param>
        /// <returns></returns>
        void ClaimElectionTask (Guid id, string secondarycontact = null);

        /// <summary>
        /// claim election task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="secondarycontact"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ClaimElectionTaskWithHttpInfo (Guid id, string secondarycontact = null);
        /// <summary>
        /// claim site ownership recertification task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="secondarycontact"></param>
        /// <returns></returns>
        void ClaimSiteOwnershipRecertificationTask (Guid id, string secondarycontact);

        /// <summary>
        /// claim site ownership recertification task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="secondarycontact"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ClaimSiteOwnershipRecertificationTaskWithHttpInfo (Guid id, string secondarycontact);
        /// <summary>
        /// decline election task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeclineElectionTask (Guid id);

        /// <summary>
        /// decline election task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeclineElectionTaskWithHttpInfo (Guid id);
        /// <summary>
        /// decline site ownership recertification task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeclineSiteOwnershipRecertificationTask (Guid id);

        /// <summary>
        /// decline site ownership recertification task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeclineSiteOwnershipRecertificationTaskWithHttpInfo (Guid id);
        /// <summary>
        /// demote as members for group membership recertification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiUser"> (optional)</param>
        /// <returns></returns>
        void DemoteAsMembersForGroupMembershipRecertification (Guid id, List<ApiUser> apiUser = null);

        /// <summary>
        /// demote as members for group membership recertification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiUser"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DemoteAsMembersForGroupMembershipRecertificationWithHttpInfo (Guid id, List<ApiUser> apiUser = null);
        /// <summary>
        /// edit archive group request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="archiveGroupRequest"> (optional)</param>
        /// <returns></returns>
        void EditArchiveGroupRequest (Guid id, ArchiveGroupRequest archiveGroupRequest = null);

        /// <summary>
        /// edit archive group request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="archiveGroupRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EditArchiveGroupRequestWithHttpInfo (Guid id, ArchiveGroupRequest archiveGroupRequest = null);
        /// <summary>
        /// edit archive site request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="archiveSiteRequest"> (optional)</param>
        /// <returns></returns>
        void EditArchiveSiteRequest (Guid id, ArchiveSiteRequest archiveSiteRequest = null);

        /// <summary>
        /// edit archive site request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="archiveSiteRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EditArchiveSiteRequestWithHttpInfo (Guid id, ArchiveSiteRequest archiveSiteRequest = null);
        /// <summary>
        /// edit archive web request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="archiveWebLifecycleRequest"> (optional)</param>
        /// <returns></returns>
        void EditArchiveWebRequest (Guid id, ArchiveWebLifecycleRequest archiveWebLifecycleRequest = null);

        /// <summary>
        /// edit archive web request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="archiveWebLifecycleRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EditArchiveWebRequestWithHttpInfo (Guid id, ArchiveWebLifecycleRequest archiveWebLifecycleRequest = null);
        /// <summary>
        /// edit change group policy request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeGroupPolicyRequest"> (optional)</param>
        /// <returns></returns>
        void EditChangeGroupPolicyRequest (Guid id, ChangeGroupPolicyRequest changeGroupPolicyRequest = null);

        /// <summary>
        /// edit change group policy request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeGroupPolicyRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EditChangeGroupPolicyRequestWithHttpInfo (Guid id, ChangeGroupPolicyRequest changeGroupPolicyRequest = null);
        /// <summary>
        /// edit change group quota request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeGroupQuotaRequest"> (optional)</param>
        /// <returns></returns>
        void EditChangeGroupQuotaRequest (Guid id, ChangeGroupQuotaRequest changeGroupQuotaRequest = null);

        /// <summary>
        /// edit change group quota request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeGroupQuotaRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EditChangeGroupQuotaRequestWithHttpInfo (Guid id, ChangeGroupQuotaRequest changeGroupQuotaRequest = null);
        /// <summary>
        /// edit create change group request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeGroupSettingRequest"> (optional)</param>
        /// <returns></returns>
        void EditChangeGroupRequest (Guid id, ChangeGroupSettingRequest changeGroupSettingRequest = null);

        /// <summary>
        /// edit create change group request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeGroupSettingRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EditChangeGroupRequestWithHttpInfo (Guid id, ChangeGroupSettingRequest changeGroupSettingRequest = null);
        /// <summary>
        /// edit change list setting request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeListSettingRequest"> (optional)</param>
        /// <returns></returns>
        void EditChangeListSettingRequest (Guid id, ChangeListSettingRequest changeListSettingRequest = null);

        /// <summary>
        /// edit change list setting request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeListSettingRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EditChangeListSettingRequestWithHttpInfo (Guid id, ChangeListSettingRequest changeListSettingRequest = null);
        /// <summary>
        /// edit change permission request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changePermissionRequest"> (optional)</param>
        /// <returns></returns>
        void EditChangePermissionRequest (Guid id, ChangePermissionRequest changePermissionRequest = null);

        /// <summary>
        /// edit change permission request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changePermissionRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EditChangePermissionRequestWithHttpInfo (Guid id, ChangePermissionRequest changePermissionRequest = null);
        /// <summary>
        /// edit change site administrator/contact request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeSiteContactRequest"> (optional)</param>
        /// <returns></returns>
        void EditChangeSiteContactRequest (Guid id, ChangeSiteContactRequest changeSiteContactRequest = null);

        /// <summary>
        /// edit change site administrator/contact request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeSiteContactRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EditChangeSiteContactRequestWithHttpInfo (Guid id, ChangeSiteContactRequest changeSiteContactRequest = null);
        /// <summary>
        /// edit change site policy request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeSitePolicyRequest"> (optional)</param>
        /// <returns></returns>
        void EditChangeSitePolicyRequest (Guid id, ChangeSitePolicyRequest changeSitePolicyRequest = null);

        /// <summary>
        /// edit change site policy request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeSitePolicyRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EditChangeSitePolicyRequestWithHttpInfo (Guid id, ChangeSitePolicyRequest changeSitePolicyRequest = null);
        /// <summary>
        /// edit change site quota request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeSiteQuotaRequest"> (optional)</param>
        /// <returns></returns>
        void EditChangeSiteQuotaRequest (Guid id, ChangeSiteQuotaRequest changeSiteQuotaRequest = null);

        /// <summary>
        /// edit change site quota request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeSiteQuotaRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EditChangeSiteQuotaRequestWithHttpInfo (Guid id, ChangeSiteQuotaRequest changeSiteQuotaRequest = null);
        /// <summary>
        /// edit change site setting request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeSiteSettingRequest"> (optional)</param>
        /// <returns></returns>
        void EditChangeSiteSettingRequest (Guid id, ChangeSiteSettingRequest changeSiteSettingRequest = null);

        /// <summary>
        /// edit change site setting request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeSiteSettingRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EditChangeSiteSettingRequestWithHttpInfo (Guid id, ChangeSiteSettingRequest changeSiteSettingRequest = null);
        /// <summary>
        /// edit change web contact request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeWebContactRequest"> (optional)</param>
        /// <returns></returns>
        void EditChangeWebContactRequest (Guid id, ChangeWebContactRequest changeWebContactRequest = null);

        /// <summary>
        /// edit change web contact request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeWebContactRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EditChangeWebContactRequestWithHttpInfo (Guid id, ChangeWebContactRequest changeWebContactRequest = null);
        /// <summary>
        /// edit change web setting request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeWebSettingRequest"> (optional)</param>
        /// <returns></returns>
        void EditChangeWebSettingRequest (Guid id, ChangeWebSettingRequest changeWebSettingRequest = null);

        /// <summary>
        /// edit change web setting request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeWebSettingRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EditChangeWebSettingRequestWithHttpInfo (Guid id, ChangeWebSettingRequest changeWebSettingRequest = null);
        /// <summary>
        /// edit clone permission request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clonePermissionRequest"> (optional)</param>
        /// <returns></returns>
        void EditClonePermissionRequest (Guid id, ClonePermissionRequest clonePermissionRequest = null);

        /// <summary>
        /// edit clone permission request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clonePermissionRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EditClonePermissionRequestWithHttpInfo (Guid id, ClonePermissionRequest clonePermissionRequest = null);
        /// <summary>
        /// edit content move request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="contentMoveRequest"> (optional)</param>
        /// <returns></returns>
        void EditContentMoveRequest (Guid id, ContentMoveRequest contentMoveRequest = null);

        /// <summary>
        /// edit content move request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="contentMoveRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EditContentMoveRequestWithHttpInfo (Guid id, ContentMoveRequest contentMoveRequest = null);
        /// <summary>
        /// edit create site group request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createGroupRequest"> (optional)</param>
        /// <returns></returns>
        void EditCreateGroupRequest (Guid id, CreateGroupRequest createGroupRequest = null);

        /// <summary>
        /// edit create site group request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createGroupRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EditCreateGroupRequestWithHttpInfo (Guid id, CreateGroupRequest createGroupRequest = null);
        /// <summary>
        /// edit create list request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createListRequest"> (optional)</param>
        /// <returns></returns>
        void EditCreateListRequest (Guid id, CreateListRequest createListRequest = null);

        /// <summary>
        /// edit create list request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createListRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EditCreateListRequestWithHttpInfo (Guid id, CreateListRequest createListRequest = null);
        /// <summary>
        /// edit create site request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createSiteRequest"> (optional)</param>
        /// <returns></returns>
        void EditCreateSiteRequest (Guid id, CreateSiteRequest createSiteRequest = null);

        /// <summary>
        /// edit create site request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createSiteRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EditCreateSiteRequestWithHttpInfo (Guid id, CreateSiteRequest createSiteRequest = null);
        /// <summary>
        /// edit create web request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createWebRequest"> (optional)</param>
        /// <returns></returns>
        void EditCreateWebRequest (Guid id, CreateWebRequest createWebRequest = null);

        /// <summary>
        /// edit create web request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createWebRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EditCreateWebRequestWithHttpInfo (Guid id, CreateWebRequest createWebRequest = null);
        /// <summary>
        /// edit custom request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiRequest"> (optional)</param>
        /// <returns></returns>
        void EditCustomRequest (Guid id, ApiRequest apiRequest = null);

        /// <summary>
        /// edit custom request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EditCustomRequestWithHttpInfo (Guid id, ApiRequest apiRequest = null);
        /// <summary>
        /// edit delete change group request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="deleteGroupRequest"> (optional)</param>
        /// <returns></returns>
        void EditDeleteGroupRequest (Guid id, DeleteGroupRequest deleteGroupRequest = null);

        /// <summary>
        /// edit delete change group request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="deleteGroupRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EditDeleteGroupRequestWithHttpInfo (Guid id, DeleteGroupRequest deleteGroupRequest = null);
        /// <summary>
        /// edit delete site request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="deleteSiteRequest"> (optional)</param>
        /// <returns></returns>
        void EditDeleteSiteRequest (Guid id, DeleteSiteRequest deleteSiteRequest = null);

        /// <summary>
        /// edit delete site request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="deleteSiteRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EditDeleteSiteRequestWithHttpInfo (Guid id, DeleteSiteRequest deleteSiteRequest = null);
        /// <summary>
        /// edit delete web request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="deleteWebLifecycleRequest"> (optional)</param>
        /// <returns></returns>
        void EditDeleteWebRequest (Guid id, DeleteWebLifecycleRequest deleteWebLifecycleRequest = null);

        /// <summary>
        /// edit delete web request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="deleteWebLifecycleRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EditDeleteWebRequestWithHttpInfo (Guid id, DeleteWebLifecycleRequest deleteWebLifecycleRequest = null);
        /// <summary>
        /// edit extend group request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="extendGroupRequest"> (optional)</param>
        /// <returns></returns>
        void EditExtendGroupRequest (Guid id, ExtendGroupRequest extendGroupRequest = null);

        /// <summary>
        /// edit extend group request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="extendGroupRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EditExtendGroupRequestWithHttpInfo (Guid id, ExtendGroupRequest extendGroupRequest = null);
        /// <summary>
        /// edit extend site request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="extendSiteRequest"> (optional)</param>
        /// <returns></returns>
        void EditExtendSiteRequest (Guid id, ExtendSiteRequest extendSiteRequest = null);

        /// <summary>
        /// edit extend site request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="extendSiteRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EditExtendSiteRequestWithHttpInfo (Guid id, ExtendSiteRequest extendSiteRequest = null);
        /// <summary>
        /// edit grant permission request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="grantPermissionRequest"> (optional)</param>
        /// <returns></returns>
        void EditGrantPermissionRequest (Guid id, GrantPermissionRequest grantPermissionRequest = null);

        /// <summary>
        /// edit grant permission request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="grantPermissionRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EditGrantPermissionRequestWithHttpInfo (Guid id, GrantPermissionRequest grantPermissionRequest = null);
        /// <summary>
        /// edit lock site request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="lockSiteRequest"> (optional)</param>
        /// <returns></returns>
        void EditLockSiteRequest (Guid id, LockSiteRequest lockSiteRequest = null);

        /// <summary>
        /// edit lock site request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="lockSiteRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EditLockSiteRequestWithHttpInfo (Guid id, LockSiteRequest lockSiteRequest = null);
        /// <summary>
        /// edit manage permission request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="managePermissionRequest"> (optional)</param>
        /// <returns></returns>
        void EditManagePermissionRequest (Guid id, ManagePermissionRequest managePermissionRequest = null);

        /// <summary>
        /// edit manage permission request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="managePermissionRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EditManagePermissionRequestWithHttpInfo (Guid id, ManagePermissionRequest managePermissionRequest = null);
        /// <summary>
        /// edit restore group request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="restoreGroupRequest"> (optional)</param>
        /// <returns></returns>
        void EditRestoreGroupRequest (Guid id, RestoreGroupRequest restoreGroupRequest = null);

        /// <summary>
        /// edit restore group request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="restoreGroupRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EditRestoreGroupRequestWithHttpInfo (Guid id, RestoreGroupRequest restoreGroupRequest = null);
        /// <summary>
        /// edit unlock site request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="unlockSiteRequest"> (optional)</param>
        /// <returns></returns>
        void EditUnLockSiteRequest (Guid id, UnlockSiteRequest unlockSiteRequest = null);

        /// <summary>
        /// edit unlock site request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="unlockSiteRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EditUnLockSiteRequestWithHttpInfo (Guid id, UnlockSiteRequest unlockSiteRequest = null);
        /// <summary>
        /// get change permission report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PermissionActionItemPageResult</returns>
        PermissionActionItemPageResult GetChangePermissionReport (Guid id, string filter = null, string orderby = null, Object body = null);

        /// <summary>
        /// get change permission report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PermissionActionItemPageResult</returns>
        ApiResponse<PermissionActionItemPageResult> GetChangePermissionReportWithHttpInfo (Guid id, string filter = null, string orderby = null, Object body = null);
        /// <summary>
        /// get change permission report with specific version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PermissionActionItemPageResult</returns>
        PermissionActionItemPageResult GetChangePermissionReportByVersion (Guid id, long version, string filter = null, string orderby = null, Object body = null);

        /// <summary>
        /// get change permission report with specific version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PermissionActionItemPageResult</returns>
        ApiResponse<PermissionActionItemPageResult> GetChangePermissionReportByVersionWithHttpInfo (Guid id, long version, string filter = null, string orderby = null, Object body = null);
        /// <summary>
        /// get change permission report filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>DistinctPageResult</returns>
        DistinctPageResult GetChangePermissionReportFilters (Guid id, string filter = null, string distinct = null, int? top = null, int? skip = null);

        /// <summary>
        /// get change permission report filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>ApiResponse of DistinctPageResult</returns>
        ApiResponse<DistinctPageResult> GetChangePermissionReportFiltersWithHttpInfo (Guid id, string filter = null, string distinct = null, int? top = null, int? skip = null);
        /// <summary>
        /// get change permission report filters with specific version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>DistinctPageResult</returns>
        DistinctPageResult GetChangePermissionReportFiltersByVersion (Guid id, long version, string filter = null, string distinct = null, int? top = null, int? skip = null);

        /// <summary>
        /// get change permission report filters with specific version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>ApiResponse of DistinctPageResult</returns>
        ApiResponse<DistinctPageResult> GetChangePermissionReportFiltersByVersionWithHttpInfo (Guid id, long version, string filter = null, string distinct = null, int? top = null, int? skip = null);
        /// <summary>
        /// get change permission report filters for a sharepoint group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>DistinctPageResult</returns>
        DistinctPageResult GetChangePermissionReportFiltersForSPGroup (Guid id, Guid groupid, string filter = null, string distinct = null, int? top = null, int? skip = null);

        /// <summary>
        /// get change permission report filters for a sharepoint group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>ApiResponse of DistinctPageResult</returns>
        ApiResponse<DistinctPageResult> GetChangePermissionReportFiltersForSPGroupWithHttpInfo (Guid id, Guid groupid, string filter = null, string distinct = null, int? top = null, int? skip = null);
        /// <summary>
        /// get change permission report filters for a sharepoint group with specific version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>DistinctPageResult</returns>
        DistinctPageResult GetChangePermissionReportFiltersForSPGroupByVersion (Guid id, Guid groupid, long version, string filter = null, string distinct = null, int? top = null, int? skip = null);

        /// <summary>
        /// get change permission report filters for a sharepoint group with specific version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>ApiResponse of DistinctPageResult</returns>
        ApiResponse<DistinctPageResult> GetChangePermissionReportFiltersForSPGroupByVersionWithHttpInfo (Guid id, Guid groupid, long version, string filter = null, string distinct = null, int? top = null, int? skip = null);
        /// <summary>
        /// get change permission report for a sharepoint group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PermissionActionItemPageResult</returns>
        PermissionActionItemPageResult GetChangePermissionReportForSPGroup (Guid id, Guid groupid, string filter = null, string orderby = null, Object body = null);

        /// <summary>
        /// get change permission report for a sharepoint group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PermissionActionItemPageResult</returns>
        ApiResponse<PermissionActionItemPageResult> GetChangePermissionReportForSPGroupWithHttpInfo (Guid id, Guid groupid, string filter = null, string orderby = null, Object body = null);
        /// <summary>
        /// get change permission report for a sharepoint group with specific version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PermissionActionItemPageResult</returns>
        PermissionActionItemPageResult GetChangePermissionReportForSPGroupByVersion (Guid id, long version, Guid groupid, string filter = null, string orderby = null, Object body = null);

        /// <summary>
        /// get change permission report for a sharepoint group with specific version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PermissionActionItemPageResult</returns>
        ApiResponse<PermissionActionItemPageResult> GetChangePermissionReportForSPGroupByVersionWithHttpInfo (Guid id, long version, Guid groupid, string filter = null, string orderby = null, Object body = null);
        /// <summary>
        /// get change permission report permission levels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>List&lt;PermissionLevel&gt;</returns>
        List<PermissionLevel> GetChangePermissionReportPermissionLevels (Guid id);

        /// <summary>
        /// get change permission report permission levels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of List&lt;PermissionLevel&gt;</returns>
        ApiResponse<List<PermissionLevel>> GetChangePermissionReportPermissionLevelsWithHttpInfo (Guid id);
        /// <summary>
        /// get change permission report properties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>RecertificationReportProperties</returns>
        RecertificationReportProperties GetChangePermissionReportProperties (Guid id);

        /// <summary>
        /// get change permission report properties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of RecertificationReportProperties</returns>
        ApiResponse<RecertificationReportProperties> GetChangePermissionReportPropertiesWithHttpInfo (Guid id);
        /// <summary>
        /// get clone permission report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, displayName, identityName, objectUrl, objectTitle, objectType, accountType, sharePointGroup, permissionLevels, action (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, displayName, identityName, objectUrl, objectTitle, objectType, accountType, sharePointGroup, permissionLevels, action (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ClonePermissionSecuritySearchResultPageResult</returns>
        ClonePermissionSecuritySearchResultPageResult GetClonePermissionReport (Guid id, string filter = null, string orderby = null, Object body = null);

        /// <summary>
        /// get clone permission report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, displayName, identityName, objectUrl, objectTitle, objectType, accountType, sharePointGroup, permissionLevels, action (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, displayName, identityName, objectUrl, objectTitle, objectType, accountType, sharePointGroup, permissionLevels, action (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ClonePermissionSecuritySearchResultPageResult</returns>
        ApiResponse<ClonePermissionSecuritySearchResultPageResult> GetClonePermissionReportWithHttpInfo (Guid id, string filter = null, string orderby = null, Object body = null);
        /// <summary>
        /// get clone permission report properties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ClonePermissionReportProperty</returns>
        ClonePermissionReportProperty GetClonePermissionReportProperties (Guid id);

        /// <summary>
        /// get clone permission report properties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ClonePermissionReportProperty</returns>
        ApiResponse<ClonePermissionReportProperty> GetClonePermissionReportPropertiesWithHttpInfo (Guid id);
        /// <summary>
        /// get manual archive report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; rowKey, partitionKey, siteId, url, nodeType (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; rowKey, partitionKey, siteId, url, nodeType (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ManuallyArchiveRecordModelPageResult</returns>
        ManuallyArchiveRecordModelPageResult GetGetManualArchiveReport (Guid id, string filter = null, string orderby = null, Object body = null);

        /// <summary>
        /// get manual archive report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; rowKey, partitionKey, siteId, url, nodeType (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; rowKey, partitionKey, siteId, url, nodeType (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ManuallyArchiveRecordModelPageResult</returns>
        ApiResponse<ManuallyArchiveRecordModelPageResult> GetGetManualArchiveReportWithHttpInfo (Guid id, string filter = null, string orderby = null, Object body = null);
        /// <summary>
        /// get manual archive report filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; rowKey, partitionKey, siteId, url, nodeType (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; rowKey, partitionKey, siteId, url, nodeType (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>DistinctPageResult</returns>
        DistinctPageResult GetGetManualArchiveReportFilters (Guid id, string filter = null, string distinct = null, int? top = null, int? skip = null);

        /// <summary>
        /// get manual archive report filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; rowKey, partitionKey, siteId, url, nodeType (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; rowKey, partitionKey, siteId, url, nodeType (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>ApiResponse of DistinctPageResult</returns>
        ApiResponse<DistinctPageResult> GetGetManualArchiveReportFiltersWithHttpInfo (Guid id, string filter = null, string distinct = null, int? top = null, int? skip = null);
        /// <summary>
        /// get group membership recertification report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>MembershipRecertificationItemPageResult</returns>
        MembershipRecertificationItemPageResult GetGroupMembershipRecertificationReport (Guid id, string filter = null, string orderby = null, Object body = null);

        /// <summary>
        /// get group membership recertification report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of MembershipRecertificationItemPageResult</returns>
        ApiResponse<MembershipRecertificationItemPageResult> GetGroupMembershipRecertificationReportWithHttpInfo (Guid id, string filter = null, string orderby = null, Object body = null);
        /// <summary>
        /// get group membership recertification report by version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>MembershipRecertificationItemPageResult</returns>
        MembershipRecertificationItemPageResult GetGroupMembershipRecertificationReportByVersion (Guid id, int version, string filter = null, string orderby = null, Object body = null);

        /// <summary>
        /// get group membership recertification report by version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of MembershipRecertificationItemPageResult</returns>
        ApiResponse<MembershipRecertificationItemPageResult> GetGroupMembershipRecertificationReportByVersionWithHttpInfo (Guid id, int version, string filter = null, string orderby = null, Object body = null);
        /// <summary>
        /// get group membership recertification report filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>DistinctPageResult</returns>
        DistinctPageResult GetGroupMembershipRecertificationReportFilters (Guid id, string filter = null, string distinct = null, int? top = null, int? skip = null);

        /// <summary>
        /// get group membership recertification report filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>ApiResponse of DistinctPageResult</returns>
        ApiResponse<DistinctPageResult> GetGroupMembershipRecertificationReportFiltersWithHttpInfo (Guid id, string filter = null, string distinct = null, int? top = null, int? skip = null);
        /// <summary>
        /// get group membership recertification report filters by version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>DistinctPageResult</returns>
        DistinctPageResult GetGroupMembershipRecertificationReportFiltersByVersion (Guid id, int version, string filter = null, string distinct = null, int? top = null, int? skip = null);

        /// <summary>
        /// get group membership recertification report filters by version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>ApiResponse of DistinctPageResult</returns>
        ApiResponse<DistinctPageResult> GetGroupMembershipRecertificationReportFiltersByVersionWithHttpInfo (Guid id, int version, string filter = null, string distinct = null, int? top = null, int? skip = null);
        /// <summary>
        /// get group membership recertification report properties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>MembershipRecertificationReportProperties</returns>
        MembershipRecertificationReportProperties GetGroupMembershipRecertificationReportProperties (Guid id);

        /// <summary>
        /// get group membership recertification report properties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of MembershipRecertificationReportProperties</returns>
        ApiResponse<MembershipRecertificationReportProperties> GetGroupMembershipRecertificationReportPropertiesWithHttpInfo (Guid id);
        /// <summary>
        /// get group permission recertification report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>GroupPermissionActionItemPageResult</returns>
        GroupPermissionActionItemPageResult GetGroupPermissionRecertificationReport (Guid id, string filter = null, string orderby = null, Object body = null);

        /// <summary>
        /// get group permission recertification report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of GroupPermissionActionItemPageResult</returns>
        ApiResponse<GroupPermissionActionItemPageResult> GetGroupPermissionRecertificationReportWithHttpInfo (Guid id, string filter = null, string orderby = null, Object body = null);
        /// <summary>
        /// get group permission recertification report by version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>GroupPermissionActionItemPageResult</returns>
        GroupPermissionActionItemPageResult GetGroupPermissionRecertificationReportByVersion (Guid id, int version, string filter = null, string orderby = null, Object body = null);

        /// <summary>
        /// get group permission recertification report by version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of GroupPermissionActionItemPageResult</returns>
        ApiResponse<GroupPermissionActionItemPageResult> GetGroupPermissionRecertificationReportByVersionWithHttpInfo (Guid id, int version, string filter = null, string orderby = null, Object body = null);
        /// <summary>
        /// get group permission recertification report filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>DistinctPageResult</returns>
        DistinctPageResult GetGroupPermissionRecertificationReportFilters (Guid id, string filter = null, string distinct = null, int? top = null, int? skip = null);

        /// <summary>
        /// get group permission recertification report filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>ApiResponse of DistinctPageResult</returns>
        ApiResponse<DistinctPageResult> GetGroupPermissionRecertificationReportFiltersWithHttpInfo (Guid id, string filter = null, string distinct = null, int? top = null, int? skip = null);
        /// <summary>
        /// get group permission recertification report filters for sharepoint group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>DistinctPageResult</returns>
        DistinctPageResult GetGroupPermissionRecertificationReportFiltersForSPGroup (Guid id, Guid groupid, string filter = null, string distinct = null, int? top = null, int? skip = null);

        /// <summary>
        /// get group permission recertification report filters for sharepoint group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>ApiResponse of DistinctPageResult</returns>
        ApiResponse<DistinctPageResult> GetGroupPermissionRecertificationReportFiltersForSPGroupWithHttpInfo (Guid id, Guid groupid, string filter = null, string distinct = null, int? top = null, int? skip = null);
        /// <summary>
        /// get group permission recertification report for sharepoint group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>GroupPermissionActionItemPageResult</returns>
        GroupPermissionActionItemPageResult GetGroupPermissionRecertificationReportForSPGroup (Guid id, Guid groupid, string filter = null, string orderby = null, Object body = null);

        /// <summary>
        /// get group permission recertification report for sharepoint group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of GroupPermissionActionItemPageResult</returns>
        ApiResponse<GroupPermissionActionItemPageResult> GetGroupPermissionRecertificationReportForSPGroupWithHttpInfo (Guid id, Guid groupid, string filter = null, string orderby = null, Object body = null);
        /// <summary>
        /// get group permission recertification report properties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>RecertificationReportProperties</returns>
        RecertificationReportProperties GetGroupPermissionRecertificationReportProperties (Guid id);

        /// <summary>
        /// get group permission recertification report properties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of RecertificationReportProperties</returns>
        ApiResponse<RecertificationReportProperties> GetGroupPermissionRecertificationReportPropertiesWithHttpInfo (Guid id);
        /// <summary>
        /// get my task filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isconfirmtask"> (optional, default to false)</param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, title, requester, requestTicketNumber, requesterDisplayName, dueDate, serviceType, createdTime, taskType, status (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, title, requester, requestTicketNumber, requesterDisplayName, dueDate, serviceType, createdTime, taskType, status (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>DistinctPageResult</returns>
        DistinctPageResult GetMyTaskFilters (bool? isconfirmtask = null, string filter = null, string distinct = null, int? top = null, int? skip = null);

        /// <summary>
        /// get my task filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isconfirmtask"> (optional, default to false)</param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, title, requester, requestTicketNumber, requesterDisplayName, dueDate, serviceType, createdTime, taskType, status (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, title, requester, requestTicketNumber, requesterDisplayName, dueDate, serviceType, createdTime, taskType, status (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>ApiResponse of DistinctPageResult</returns>
        ApiResponse<DistinctPageResult> GetMyTaskFiltersWithHttpInfo (bool? isconfirmtask = null, string filter = null, string distinct = null, int? top = null, int? skip = null);
        /// <summary>
        /// get my tasks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isconfirmtask"> (optional, default to false)</param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, title, requester, requestTicketNumber, requesterDisplayName, dueDate, serviceType, createdTime, taskType, status (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, title, requester, requestTicketNumber, requesterDisplayName, dueDate, serviceType, createdTime, taskType, status (optional)</param>
        /// <param name="search">Search for title (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>TaskListPageResult</returns>
        TaskListPageResult GetMyTasks (bool? isconfirmtask = null, string filter = null, string orderby = null, string search = null, int? top = null, int? skip = null);

        /// <summary>
        /// get my tasks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isconfirmtask"> (optional, default to false)</param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, title, requester, requestTicketNumber, requesterDisplayName, dueDate, serviceType, createdTime, taskType, status (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, title, requester, requestTicketNumber, requesterDisplayName, dueDate, serviceType, createdTime, taskType, status (optional)</param>
        /// <param name="search">Search for title (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>ApiResponse of TaskListPageResult</returns>
        ApiResponse<TaskListPageResult> GetMyTasksWithHttpInfo (bool? isconfirmtask = null, string filter = null, string orderby = null, string search = null, int? top = null, int? skip = null);
        /// <summary>
        /// get remove permission report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, displayName, identityName, objectUrl, objectTitle, objectType, accountType, sharePointGroup, permissionLevels, action (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, displayName, identityName, objectUrl, objectTitle, objectType, accountType, sharePointGroup, permissionLevels, action (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>SecuritySearchResultPageResult</returns>
        SecuritySearchResultPageResult GetRemovePermissionReport (Guid id, string filter = null, string orderby = null, Object body = null);

        /// <summary>
        /// get remove permission report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, displayName, identityName, objectUrl, objectTitle, objectType, accountType, sharePointGroup, permissionLevels, action (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, displayName, identityName, objectUrl, objectTitle, objectType, accountType, sharePointGroup, permissionLevels, action (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SecuritySearchResultPageResult</returns>
        ApiResponse<SecuritySearchResultPageResult> GetRemovePermissionReportWithHttpInfo (Guid id, string filter = null, string orderby = null, Object body = null);
        /// <summary>
        /// get remove permission report properties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>RecertificationReportProperties</returns>
        RecertificationReportProperties GetRemovePermissionReportProperties (Guid id);

        /// <summary>
        /// get remove permission report properties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of RecertificationReportProperties</returns>
        ApiResponse<RecertificationReportProperties> GetRemovePermissionReportPropertiesWithHttpInfo (Guid id);
        /// <summary>
        /// get site metadata recertification metadata
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>List&lt;CustomMetadata&gt;</returns>
        List<CustomMetadata> GetSiteMetadataRecertificationReport (Guid id);

        /// <summary>
        /// get site metadata recertification metadata
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of List&lt;CustomMetadata&gt;</returns>
        ApiResponse<List<CustomMetadata>> GetSiteMetadataRecertificationReportWithHttpInfo (Guid id);
        /// <summary>
        /// get site metadata recertification report properties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>MetadataRecertificationReportProperties</returns>
        MetadataRecertificationReportProperties GetSiteMetadataRecertificationReportProperties (Guid id);

        /// <summary>
        /// get site metadata recertification report properties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of MetadataRecertificationReportProperties</returns>
        ApiResponse<MetadataRecertificationReportProperties> GetSiteMetadataRecertificationReportPropertiesWithHttpInfo (Guid id);
        /// <summary>
        /// get site ownership recertification report properties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>RecertificationReportProperties</returns>
        RecertificationReportProperties GetSiteOwnershipRecertificationReportProperties (Guid id);

        /// <summary>
        /// get site ownership recertification report properties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of RecertificationReportProperties</returns>
        ApiResponse<RecertificationReportProperties> GetSiteOwnershipRecertificationReportPropertiesWithHttpInfo (Guid id);
        /// <summary>
        /// get site permission recertification permission filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>DistinctPageResult</returns>
        DistinctPageResult GetSitePermissionRecertificatioPermissionFilters (Guid id, string filter = null, string distinct = null, int? top = null, int? skip = null);

        /// <summary>
        /// get site permission recertification permission filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>ApiResponse of DistinctPageResult</returns>
        ApiResponse<DistinctPageResult> GetSitePermissionRecertificatioPermissionFiltersWithHttpInfo (Guid id, string filter = null, string distinct = null, int? top = null, int? skip = null);
        /// <summary>
        /// get site permission recertification permission filters with specific version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>DistinctPageResult</returns>
        DistinctPageResult GetSitePermissionRecertificatioReportFiltersByVersion (Guid id, long version, string filter = null, string distinct = null, int? top = null, int? skip = null);

        /// <summary>
        /// get site permission recertification permission filters with specific version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>ApiResponse of DistinctPageResult</returns>
        ApiResponse<DistinctPageResult> GetSitePermissionRecertificatioReportFiltersByVersionWithHttpInfo (Guid id, long version, string filter = null, string distinct = null, int? top = null, int? skip = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>DistinctPageResult</returns>
        DistinctPageResult GetSitePermissionRecertificatioReportFiltersForSPGroup (Guid id, Guid groupid, string filter = null, string distinct = null, int? top = null, int? skip = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>ApiResponse of DistinctPageResult</returns>
        ApiResponse<DistinctPageResult> GetSitePermissionRecertificatioReportFiltersForSPGroupWithHttpInfo (Guid id, Guid groupid, string filter = null, string distinct = null, int? top = null, int? skip = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>DistinctPageResult</returns>
        DistinctPageResult GetSitePermissionRecertificatioReportFiltersForSPGroupByVersion (Guid id, Guid groupid, long version, string filter = null, string distinct = null, int? top = null, int? skip = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>ApiResponse of DistinctPageResult</returns>
        ApiResponse<DistinctPageResult> GetSitePermissionRecertificatioReportFiltersForSPGroupByVersionWithHttpInfo (Guid id, Guid groupid, long version, string filter = null, string distinct = null, int? top = null, int? skip = null);
        /// <summary>
        /// get site permission recertification permission levels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>List&lt;PermissionLevel&gt;</returns>
        List<PermissionLevel> GetSitePermissionRecertificationPermissionLevels (Guid id);

        /// <summary>
        /// get site permission recertification permission levels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of List&lt;PermissionLevel&gt;</returns>
        ApiResponse<List<PermissionLevel>> GetSitePermissionRecertificationPermissionLevelsWithHttpInfo (Guid id);
        /// <summary>
        /// get site permission recertification report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PermissionActionItemPageResult</returns>
        PermissionActionItemPageResult GetSitePermissionRecertificationReport (Guid id, string filter = null, string orderby = null, Object body = null);

        /// <summary>
        /// get site permission recertification report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PermissionActionItemPageResult</returns>
        ApiResponse<PermissionActionItemPageResult> GetSitePermissionRecertificationReportWithHttpInfo (Guid id, string filter = null, string orderby = null, Object body = null);
        /// <summary>
        /// get site permission recertification report by specific version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PermissionActionItemPageResult</returns>
        PermissionActionItemPageResult GetSitePermissionRecertificationReportByVersion (Guid id, long version, string filter = null, string orderby = null, Object body = null);

        /// <summary>
        /// get site permission recertification report by specific version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PermissionActionItemPageResult</returns>
        ApiResponse<PermissionActionItemPageResult> GetSitePermissionRecertificationReportByVersionWithHttpInfo (Guid id, long version, string filter = null, string orderby = null, Object body = null);
        /// <summary>
        /// get site permission recertification group permission items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PermissionActionItemPageResult</returns>
        PermissionActionItemPageResult GetSitePermissionRecertificationReportForSPGroup (Guid id, Guid groupid, string filter = null, string orderby = null, Object body = null);

        /// <summary>
        /// get site permission recertification group permission items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PermissionActionItemPageResult</returns>
        ApiResponse<PermissionActionItemPageResult> GetSitePermissionRecertificationReportForSPGroupWithHttpInfo (Guid id, Guid groupid, string filter = null, string orderby = null, Object body = null);
        /// <summary>
        /// get site permission recertification group permission items with specific version with specific version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PermissionActionItemPageResult</returns>
        PermissionActionItemPageResult GetSitePermissionRecertificationReportForSPGroupByVersion (Guid id, long version, Guid groupid, string filter = null, string orderby = null, Object body = null);

        /// <summary>
        /// get site permission recertification group permission items with specific version with specific version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PermissionActionItemPageResult</returns>
        ApiResponse<PermissionActionItemPageResult> GetSitePermissionRecertificationReportForSPGroupByVersionWithHttpInfo (Guid id, long version, Guid groupid, string filter = null, string orderby = null, Object body = null);
        /// <summary>
        /// get site permission recertification report properties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>RecertificationReportProperties</returns>
        RecertificationReportProperties GetSitePermissionRecertificationReportProperties (Guid id);

        /// <summary>
        /// get site permission recertification report properties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of RecertificationReportProperties</returns>
        ApiResponse<RecertificationReportProperties> GetSitePermissionRecertificationReportPropertiesWithHttpInfo (Guid id);
        /// <summary>
        /// get task by batch id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchid"></param>
        /// <returns>TaskList</returns>
        TaskList GetTaskByBatchId (Guid batchid);

        /// <summary>
        /// get task by batch id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchid"></param>
        /// <returns>ApiResponse of TaskList</returns>
        ApiResponse<TaskList> GetTaskByBatchIdWithHttpInfo (Guid batchid);
        /// <summary>
        /// get my task by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiTask</returns>
        ApiTask GetTaskById (Guid id);

        /// <summary>
        /// get my task by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ApiTask</returns>
        ApiResponse<ApiTask> GetTaskByIdWithHttpInfo (Guid id);
        /// <summary>
        /// promote as owners for group membership recertification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiUser"> (optional)</param>
        /// <returns></returns>
        void PromoteAsOwnersForGroupMembershipRecertification (Guid id, List<ApiUser> apiUser = null);

        /// <summary>
        /// promote as owners for group membership recertification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiUser"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PromoteAsOwnersForGroupMembershipRecertificationWithHttpInfo (Guid id, List<ApiUser> apiUser = null);
        /// <summary>
        /// reassign task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="user"></param>
        /// <returns></returns>
        void ReassignTask (Guid id, string user);

        /// <summary>
        /// reassign task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="user"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ReassignTaskWithHttpInfo (Guid id, string user);
        /// <summary>
        /// reject task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="commentsParam"> (optional)</param>
        /// <returns></returns>
        void RejectTask (Guid id, CommentsParam commentsParam = null);

        /// <summary>
        /// reject task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="commentsParam"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RejectTaskWithHttpInfo (Guid id, CommentsParam commentsParam = null);
        /// <summary>
        /// remove users for group membership recertification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="requestBody"> (optional)</param>
        /// <returns></returns>
        void RemoveUsersForGroupMembershipRecertification (Guid id, List<Guid> requestBody = null);

        /// <summary>
        /// remove users for group membership recertification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="requestBody"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveUsersForGroupMembershipRecertificationWithHttpInfo (Guid id, List<Guid> requestBody = null);
        /// <summary>
        /// save all changes for change permission task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void ReseAllChangesForChangePermissionTask (Guid id);

        /// <summary>
        /// save all changes for change permission task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ReseAllChangesForChangePermissionTaskWithHttpInfo (Guid id);
        /// <summary>
        /// reset all changes for site/group recertification task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void ResetAllChangesForRecertificationTask (Guid id);

        /// <summary>
        /// reset all changes for site/group recertification task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ResetAllChangesForRecertificationTaskWithHttpInfo (Guid id);
        /// <summary>
        /// save my changes for change permission task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void ResetMyChangesForChangePermissionTask (Guid id);

        /// <summary>
        /// save my changes for change permission task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ResetMyChangesForChangePermissionTaskWithHttpInfo (Guid id);
        /// <summary>
        /// reset my changes for site/group recertification task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void ResetMyChangesForRecertificationTask (Guid id);

        /// <summary>
        /// reset my changes for site/group recertification task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ResetMyChangesForRecertificationTaskWithHttpInfo (Guid id);
        /// <summary>
        /// retry error task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="commentsParam"> (optional)</param>
        /// <returns></returns>
        void RetryErrorTask (Guid id, CommentsParam commentsParam = null);

        /// <summary>
        /// retry error task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="commentsParam"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RetryErrorTaskWithHttpInfo (Guid id, CommentsParam commentsParam = null);
        /// <summary>
        /// save change permission actions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="permissionActionItem"> (optional)</param>
        /// <returns></returns>
        void SaveChangePermissionActions (Guid id, List<PermissionActionItem> permissionActionItem = null);

        /// <summary>
        /// save change permission actions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="permissionActionItem"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SaveChangePermissionActionsWithHttpInfo (Guid id, List<PermissionActionItem> permissionActionItem = null);
        /// <summary>
        /// Save clone permission report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="securitySearchResult"> (optional)</param>
        /// <returns></returns>
        void SaveClonePermissionReport (Guid id, List<SecuritySearchResult> securitySearchResult = null);

        /// <summary>
        /// Save clone permission report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="securitySearchResult"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SaveClonePermissionReportWithHttpInfo (Guid id, List<SecuritySearchResult> securitySearchResult = null);
        /// <summary>
        /// save manual archive report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="manuallyArchiveRecordModel"> (optional)</param>
        /// <returns></returns>
        void SaveGetManualArchiveReport (Guid id, List<ManuallyArchiveRecordModel> manuallyArchiveRecordModel = null);

        /// <summary>
        /// save manual archive report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="manuallyArchiveRecordModel"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SaveGetManualArchiveReportWithHttpInfo (Guid id, List<ManuallyArchiveRecordModel> manuallyArchiveRecordModel = null);
        /// <summary>
        /// save group permission recertification results
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupPermissionActionItem"> (optional)</param>
        /// <returns></returns>
        void SaveGroupPermissionRecertificationResults (Guid id, List<GroupPermissionActionItem> groupPermissionActionItem = null);

        /// <summary>
        /// save group permission recertification results
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupPermissionActionItem"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SaveGroupPermissionRecertificationResultsWithHttpInfo (Guid id, List<GroupPermissionActionItem> groupPermissionActionItem = null);
        /// <summary>
        /// save remove permission report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="securitySearchResult"> (optional)</param>
        /// <returns></returns>
        void SaveRemovePermissionReport (Guid id, List<SecuritySearchResult> securitySearchResult = null);

        /// <summary>
        /// save remove permission report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="securitySearchResult"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SaveRemovePermissionReportWithHttpInfo (Guid id, List<SecuritySearchResult> securitySearchResult = null);
        /// <summary>
        /// save site metadata recertification metadata
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="requestMetadata"> (optional)</param>
        /// <returns></returns>
        void SaveSiteMetadataRecertificationResult (Guid id, List<RequestMetadata> requestMetadata = null);

        /// <summary>
        /// save site metadata recertification metadata
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="requestMetadata"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SaveSiteMetadataRecertificationResultWithHttpInfo (Guid id, List<RequestMetadata> requestMetadata = null);
        /// <summary>
        /// save site permission recertification permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="permissionActionItem"> (optional)</param>
        /// <returns></returns>
        void SaveSitePermissionRecertificationResult (Guid id, List<PermissionActionItem> permissionActionItem = null);

        /// <summary>
        /// save site permission recertification permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="permissionActionItem"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SaveSitePermissionRecertificationResultWithHttpInfo (Guid id, List<PermissionActionItem> permissionActionItem = null);
        /// <summary>
        /// skip error task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="commentsParam"> (optional)</param>
        /// <returns></returns>
        void SkipErrorTask (Guid id, CommentsParam commentsParam = null);

        /// <summary>
        /// skip error task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="commentsParam"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SkipErrorTaskWithHttpInfo (Guid id, CommentsParam commentsParam = null);
        /// <summary>
        /// specify primary and secondary contact when primary contact is deactived
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="primarycontact"> (optional)</param>
        /// <param name="secondarycontact"> (optional)</param>
        /// <param name="primarycontactemail"> (optional)</param>
        /// <param name="secodnarycontactemail"> (optional)</param>
        /// <returns></returns>
        void SpecifyPrimaryAndSecondaryContactWhenPrimaryContactIsDeactived (Guid id, string primarycontact = null, string secondarycontact = null, Guid? primarycontactemail = null, Guid? secodnarycontactemail = null);

        /// <summary>
        /// specify primary and secondary contact when primary contact is deactived
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="primarycontact"> (optional)</param>
        /// <param name="secondarycontact"> (optional)</param>
        /// <param name="primarycontactemail"> (optional)</param>
        /// <param name="secodnarycontactemail"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SpecifyPrimaryAndSecondaryContactWhenPrimaryContactIsDeactivedWithHttpInfo (Guid id, string primarycontact = null, string secondarycontact = null, Guid? primarycontactemail = null, Guid? secodnarycontactemail = null);
        /// <summary>
        /// specify secondary contact when secondary contact is deactived
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="secondarycontact"> (optional)</param>
        /// <returns></returns>
        void SpecifySecondaryContactWhenSecondaryContactIsDeactived (Guid id, string secondarycontact = null);

        /// <summary>
        /// specify secondary contact when secondary contact is deactived
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="secondarycontact"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SpecifySecondaryContactWhenSecondaryContactIsDeactivedWithHttpInfo (Guid id, string secondarycontact = null);
        /// <summary>
        /// submit archive group auto task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoTaskArchiveRequest"> (optional)</param>
        /// <returns></returns>
        void SubmitArchiveGroupAutoTask (AutoTaskArchiveRequest autoTaskArchiveRequest = null);

        /// <summary>
        /// submit archive group auto task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoTaskArchiveRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SubmitArchiveGroupAutoTaskWithHttpInfo (AutoTaskArchiveRequest autoTaskArchiveRequest = null);
        /// <summary>
        /// submit site archive auto task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoTaskArchiveRequest"> (optional)</param>
        /// <returns></returns>
        void SubmitArchiveSiteAutoTask (AutoTaskArchiveRequest autoTaskArchiveRequest = null);

        /// <summary>
        /// submit site archive auto task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoTaskArchiveRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SubmitArchiveSiteAutoTaskWithHttpInfo (AutoTaskArchiveRequest autoTaskArchiveRequest = null);
        /// <summary>
        /// submit site policy change auto task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoTaskChangePolicyRequest"> (optional)</param>
        /// <returns></returns>
        void SubmitChangeSitePolicyAutoTask (AutoTaskChangePolicyRequest autoTaskChangePolicyRequest = null);

        /// <summary>
        /// submit site policy change auto task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoTaskChangePolicyRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SubmitChangeSitePolicyAutoTaskWithHttpInfo (AutoTaskChangePolicyRequest autoTaskChangePolicyRequest = null);
        /// <summary>
        /// submit group continue access auto task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="commentsParam"> (optional)</param>
        /// <returns></returns>
        void SubmitContinueAccessGroupAutoTask (Guid? id = null, CommentsParam commentsParam = null);

        /// <summary>
        /// submit group continue access auto task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="commentsParam"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SubmitContinueAccessGroupAutoTaskWithHttpInfo (Guid? id = null, CommentsParam commentsParam = null);
        /// <summary>
        /// submit site continue access auto task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="commentsParam"> (optional)</param>
        /// <returns></returns>
        void SubmitContinueAccessSiteAutoTask (Guid? id = null, CommentsParam commentsParam = null);

        /// <summary>
        /// submit site continue access auto task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="commentsParam"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SubmitContinueAccessSiteAutoTaskWithHttpInfo (Guid? id = null, CommentsParam commentsParam = null);
        /// <summary>
        /// submit delete group auto task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoTaskDeleteRequest"> (optional)</param>
        /// <returns></returns>
        void SubmitDeleteGroupAutoTask (AutoTaskDeleteRequest autoTaskDeleteRequest = null);

        /// <summary>
        /// submit delete group auto task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoTaskDeleteRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SubmitDeleteGroupAutoTaskWithHttpInfo (AutoTaskDeleteRequest autoTaskDeleteRequest = null);
        /// <summary>
        /// submit site delete auto task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoTaskDeleteRequest"> (optional)</param>
        /// <returns></returns>
        void SubmitDeleteSiteAutoTask (AutoTaskDeleteRequest autoTaskDeleteRequest = null);

        /// <summary>
        /// submit site delete auto task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoTaskDeleteRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SubmitDeleteSiteAutoTaskWithHttpInfo (AutoTaskDeleteRequest autoTaskDeleteRequest = null);
        /// <summary>
        /// submit extend group auto task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoTaskExtendRequest"> (optional)</param>
        /// <returns></returns>
        void SubmitExtendGroupAutoTask (AutoTaskExtendRequest autoTaskExtendRequest = null);

        /// <summary>
        /// submit extend group auto task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoTaskExtendRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SubmitExtendGroupAutoTaskWithHttpInfo (AutoTaskExtendRequest autoTaskExtendRequest = null);
        /// <summary>
        /// submit site extend auto task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoTaskExtendRequest"> (optional)</param>
        /// <returns></returns>
        void SubmitExtendSiteAutoTask (AutoTaskExtendRequest autoTaskExtendRequest = null);

        /// <summary>
        /// submit site extend auto task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoTaskExtendRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SubmitExtendSiteAutoTaskWithHttpInfo (AutoTaskExtendRequest autoTaskExtendRequest = null);
        /// <summary>
        /// submit site/group recertification task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="commentsParam"> (optional)</param>
        /// <returns></returns>
        void SubmitRecertificationTask (Guid id, CommentsParam commentsParam = null);

        /// <summary>
        /// submit site/group recertification task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="commentsParam"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SubmitRecertificationTaskWithHttpInfo (Guid id, CommentsParam commentsParam = null);
        /// <summary>
        /// view site ownership recertification task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>OwnershipRecertification</returns>
        OwnershipRecertification ViewSiteOwnershipRecertificationTask (Guid id);

        /// <summary>
        /// view site ownership recertification task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of OwnershipRecertification</returns>
        ApiResponse<OwnershipRecertification> ViewSiteOwnershipRecertificationTaskWithHttpInfo (Guid id);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITasksApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// add members for group membership recertification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiUser"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddMembersForGroupMembershipRecertificationAsync (Guid id, List<ApiUser> apiUser = null);

        /// <summary>
        /// add members for group membership recertification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiUser"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddMembersForGroupMembershipRecertificationAsyncWithHttpInfo (Guid id, List<ApiUser> apiUser = null);
        /// <summary>
        /// add owners for group membership recertification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiUser"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddOwnersForGroupMembershipRecertificationAsync (Guid id, List<ApiUser> apiUser = null);

        /// <summary>
        /// add owners for group membership recertification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiUser"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddOwnersForGroupMembershipRecertificationAsyncWithHttpInfo (Guid id, List<ApiUser> apiUser = null);
        /// <summary>
        /// approve task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="commentsParam"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApproveTaskAsync (Guid id, CommentsParam commentsParam = null);

        /// <summary>
        /// approve task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="commentsParam"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApproveTaskAsyncWithHttpInfo (Guid id, CommentsParam commentsParam = null);
        /// <summary>
        /// claim election task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="secondarycontact"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ClaimElectionTaskAsync (Guid id, string secondarycontact = null);

        /// <summary>
        /// claim election task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="secondarycontact"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClaimElectionTaskAsyncWithHttpInfo (Guid id, string secondarycontact = null);
        /// <summary>
        /// claim site ownership recertification task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="secondarycontact"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ClaimSiteOwnershipRecertificationTaskAsync (Guid id, string secondarycontact);

        /// <summary>
        /// claim site ownership recertification task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="secondarycontact"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClaimSiteOwnershipRecertificationTaskAsyncWithHttpInfo (Guid id, string secondarycontact);
        /// <summary>
        /// decline election task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeclineElectionTaskAsync (Guid id);

        /// <summary>
        /// decline election task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeclineElectionTaskAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// decline site ownership recertification task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeclineSiteOwnershipRecertificationTaskAsync (Guid id);

        /// <summary>
        /// decline site ownership recertification task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeclineSiteOwnershipRecertificationTaskAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// demote as members for group membership recertification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiUser"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DemoteAsMembersForGroupMembershipRecertificationAsync (Guid id, List<ApiUser> apiUser = null);

        /// <summary>
        /// demote as members for group membership recertification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiUser"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DemoteAsMembersForGroupMembershipRecertificationAsyncWithHttpInfo (Guid id, List<ApiUser> apiUser = null);
        /// <summary>
        /// edit archive group request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="archiveGroupRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EditArchiveGroupRequestAsync (Guid id, ArchiveGroupRequest archiveGroupRequest = null);

        /// <summary>
        /// edit archive group request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="archiveGroupRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditArchiveGroupRequestAsyncWithHttpInfo (Guid id, ArchiveGroupRequest archiveGroupRequest = null);
        /// <summary>
        /// edit archive site request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="archiveSiteRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EditArchiveSiteRequestAsync (Guid id, ArchiveSiteRequest archiveSiteRequest = null);

        /// <summary>
        /// edit archive site request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="archiveSiteRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditArchiveSiteRequestAsyncWithHttpInfo (Guid id, ArchiveSiteRequest archiveSiteRequest = null);
        /// <summary>
        /// edit archive web request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="archiveWebLifecycleRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EditArchiveWebRequestAsync (Guid id, ArchiveWebLifecycleRequest archiveWebLifecycleRequest = null);

        /// <summary>
        /// edit archive web request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="archiveWebLifecycleRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditArchiveWebRequestAsyncWithHttpInfo (Guid id, ArchiveWebLifecycleRequest archiveWebLifecycleRequest = null);
        /// <summary>
        /// edit change group policy request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeGroupPolicyRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EditChangeGroupPolicyRequestAsync (Guid id, ChangeGroupPolicyRequest changeGroupPolicyRequest = null);

        /// <summary>
        /// edit change group policy request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeGroupPolicyRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditChangeGroupPolicyRequestAsyncWithHttpInfo (Guid id, ChangeGroupPolicyRequest changeGroupPolicyRequest = null);
        /// <summary>
        /// edit change group quota request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeGroupQuotaRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EditChangeGroupQuotaRequestAsync (Guid id, ChangeGroupQuotaRequest changeGroupQuotaRequest = null);

        /// <summary>
        /// edit change group quota request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeGroupQuotaRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditChangeGroupQuotaRequestAsyncWithHttpInfo (Guid id, ChangeGroupQuotaRequest changeGroupQuotaRequest = null);
        /// <summary>
        /// edit create change group request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeGroupSettingRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EditChangeGroupRequestAsync (Guid id, ChangeGroupSettingRequest changeGroupSettingRequest = null);

        /// <summary>
        /// edit create change group request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeGroupSettingRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditChangeGroupRequestAsyncWithHttpInfo (Guid id, ChangeGroupSettingRequest changeGroupSettingRequest = null);
        /// <summary>
        /// edit change list setting request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeListSettingRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EditChangeListSettingRequestAsync (Guid id, ChangeListSettingRequest changeListSettingRequest = null);

        /// <summary>
        /// edit change list setting request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeListSettingRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditChangeListSettingRequestAsyncWithHttpInfo (Guid id, ChangeListSettingRequest changeListSettingRequest = null);
        /// <summary>
        /// edit change permission request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changePermissionRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EditChangePermissionRequestAsync (Guid id, ChangePermissionRequest changePermissionRequest = null);

        /// <summary>
        /// edit change permission request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changePermissionRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditChangePermissionRequestAsyncWithHttpInfo (Guid id, ChangePermissionRequest changePermissionRequest = null);
        /// <summary>
        /// edit change site administrator/contact request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeSiteContactRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EditChangeSiteContactRequestAsync (Guid id, ChangeSiteContactRequest changeSiteContactRequest = null);

        /// <summary>
        /// edit change site administrator/contact request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeSiteContactRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditChangeSiteContactRequestAsyncWithHttpInfo (Guid id, ChangeSiteContactRequest changeSiteContactRequest = null);
        /// <summary>
        /// edit change site policy request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeSitePolicyRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EditChangeSitePolicyRequestAsync (Guid id, ChangeSitePolicyRequest changeSitePolicyRequest = null);

        /// <summary>
        /// edit change site policy request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeSitePolicyRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditChangeSitePolicyRequestAsyncWithHttpInfo (Guid id, ChangeSitePolicyRequest changeSitePolicyRequest = null);
        /// <summary>
        /// edit change site quota request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeSiteQuotaRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EditChangeSiteQuotaRequestAsync (Guid id, ChangeSiteQuotaRequest changeSiteQuotaRequest = null);

        /// <summary>
        /// edit change site quota request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeSiteQuotaRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditChangeSiteQuotaRequestAsyncWithHttpInfo (Guid id, ChangeSiteQuotaRequest changeSiteQuotaRequest = null);
        /// <summary>
        /// edit change site setting request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeSiteSettingRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EditChangeSiteSettingRequestAsync (Guid id, ChangeSiteSettingRequest changeSiteSettingRequest = null);

        /// <summary>
        /// edit change site setting request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeSiteSettingRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditChangeSiteSettingRequestAsyncWithHttpInfo (Guid id, ChangeSiteSettingRequest changeSiteSettingRequest = null);
        /// <summary>
        /// edit change web contact request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeWebContactRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EditChangeWebContactRequestAsync (Guid id, ChangeWebContactRequest changeWebContactRequest = null);

        /// <summary>
        /// edit change web contact request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeWebContactRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditChangeWebContactRequestAsyncWithHttpInfo (Guid id, ChangeWebContactRequest changeWebContactRequest = null);
        /// <summary>
        /// edit change web setting request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeWebSettingRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EditChangeWebSettingRequestAsync (Guid id, ChangeWebSettingRequest changeWebSettingRequest = null);

        /// <summary>
        /// edit change web setting request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeWebSettingRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditChangeWebSettingRequestAsyncWithHttpInfo (Guid id, ChangeWebSettingRequest changeWebSettingRequest = null);
        /// <summary>
        /// edit clone permission request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clonePermissionRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EditClonePermissionRequestAsync (Guid id, ClonePermissionRequest clonePermissionRequest = null);

        /// <summary>
        /// edit clone permission request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clonePermissionRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditClonePermissionRequestAsyncWithHttpInfo (Guid id, ClonePermissionRequest clonePermissionRequest = null);
        /// <summary>
        /// edit content move request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="contentMoveRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EditContentMoveRequestAsync (Guid id, ContentMoveRequest contentMoveRequest = null);

        /// <summary>
        /// edit content move request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="contentMoveRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditContentMoveRequestAsyncWithHttpInfo (Guid id, ContentMoveRequest contentMoveRequest = null);
        /// <summary>
        /// edit create site group request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createGroupRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EditCreateGroupRequestAsync (Guid id, CreateGroupRequest createGroupRequest = null);

        /// <summary>
        /// edit create site group request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createGroupRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditCreateGroupRequestAsyncWithHttpInfo (Guid id, CreateGroupRequest createGroupRequest = null);
        /// <summary>
        /// edit create list request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createListRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EditCreateListRequestAsync (Guid id, CreateListRequest createListRequest = null);

        /// <summary>
        /// edit create list request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createListRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditCreateListRequestAsyncWithHttpInfo (Guid id, CreateListRequest createListRequest = null);
        /// <summary>
        /// edit create site request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createSiteRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EditCreateSiteRequestAsync (Guid id, CreateSiteRequest createSiteRequest = null);

        /// <summary>
        /// edit create site request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createSiteRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditCreateSiteRequestAsyncWithHttpInfo (Guid id, CreateSiteRequest createSiteRequest = null);
        /// <summary>
        /// edit create web request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createWebRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EditCreateWebRequestAsync (Guid id, CreateWebRequest createWebRequest = null);

        /// <summary>
        /// edit create web request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createWebRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditCreateWebRequestAsyncWithHttpInfo (Guid id, CreateWebRequest createWebRequest = null);
        /// <summary>
        /// edit custom request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EditCustomRequestAsync (Guid id, ApiRequest apiRequest = null);

        /// <summary>
        /// edit custom request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditCustomRequestAsyncWithHttpInfo (Guid id, ApiRequest apiRequest = null);
        /// <summary>
        /// edit delete change group request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="deleteGroupRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EditDeleteGroupRequestAsync (Guid id, DeleteGroupRequest deleteGroupRequest = null);

        /// <summary>
        /// edit delete change group request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="deleteGroupRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditDeleteGroupRequestAsyncWithHttpInfo (Guid id, DeleteGroupRequest deleteGroupRequest = null);
        /// <summary>
        /// edit delete site request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="deleteSiteRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EditDeleteSiteRequestAsync (Guid id, DeleteSiteRequest deleteSiteRequest = null);

        /// <summary>
        /// edit delete site request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="deleteSiteRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditDeleteSiteRequestAsyncWithHttpInfo (Guid id, DeleteSiteRequest deleteSiteRequest = null);
        /// <summary>
        /// edit delete web request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="deleteWebLifecycleRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EditDeleteWebRequestAsync (Guid id, DeleteWebLifecycleRequest deleteWebLifecycleRequest = null);

        /// <summary>
        /// edit delete web request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="deleteWebLifecycleRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditDeleteWebRequestAsyncWithHttpInfo (Guid id, DeleteWebLifecycleRequest deleteWebLifecycleRequest = null);
        /// <summary>
        /// edit extend group request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="extendGroupRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EditExtendGroupRequestAsync (Guid id, ExtendGroupRequest extendGroupRequest = null);

        /// <summary>
        /// edit extend group request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="extendGroupRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditExtendGroupRequestAsyncWithHttpInfo (Guid id, ExtendGroupRequest extendGroupRequest = null);
        /// <summary>
        /// edit extend site request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="extendSiteRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EditExtendSiteRequestAsync (Guid id, ExtendSiteRequest extendSiteRequest = null);

        /// <summary>
        /// edit extend site request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="extendSiteRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditExtendSiteRequestAsyncWithHttpInfo (Guid id, ExtendSiteRequest extendSiteRequest = null);
        /// <summary>
        /// edit grant permission request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="grantPermissionRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EditGrantPermissionRequestAsync (Guid id, GrantPermissionRequest grantPermissionRequest = null);

        /// <summary>
        /// edit grant permission request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="grantPermissionRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditGrantPermissionRequestAsyncWithHttpInfo (Guid id, GrantPermissionRequest grantPermissionRequest = null);
        /// <summary>
        /// edit lock site request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="lockSiteRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EditLockSiteRequestAsync (Guid id, LockSiteRequest lockSiteRequest = null);

        /// <summary>
        /// edit lock site request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="lockSiteRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditLockSiteRequestAsyncWithHttpInfo (Guid id, LockSiteRequest lockSiteRequest = null);
        /// <summary>
        /// edit manage permission request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="managePermissionRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EditManagePermissionRequestAsync (Guid id, ManagePermissionRequest managePermissionRequest = null);

        /// <summary>
        /// edit manage permission request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="managePermissionRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditManagePermissionRequestAsyncWithHttpInfo (Guid id, ManagePermissionRequest managePermissionRequest = null);
        /// <summary>
        /// edit restore group request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="restoreGroupRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EditRestoreGroupRequestAsync (Guid id, RestoreGroupRequest restoreGroupRequest = null);

        /// <summary>
        /// edit restore group request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="restoreGroupRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditRestoreGroupRequestAsyncWithHttpInfo (Guid id, RestoreGroupRequest restoreGroupRequest = null);
        /// <summary>
        /// edit unlock site request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="unlockSiteRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EditUnLockSiteRequestAsync (Guid id, UnlockSiteRequest unlockSiteRequest = null);

        /// <summary>
        /// edit unlock site request in task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="unlockSiteRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditUnLockSiteRequestAsyncWithHttpInfo (Guid id, UnlockSiteRequest unlockSiteRequest = null);
        /// <summary>
        /// get change permission report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of PermissionActionItemPageResult</returns>
        System.Threading.Tasks.Task<PermissionActionItemPageResult> GetChangePermissionReportAsync (Guid id, string filter = null, string orderby = null, Object body = null);

        /// <summary>
        /// get change permission report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (PermissionActionItemPageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<PermissionActionItemPageResult>> GetChangePermissionReportAsyncWithHttpInfo (Guid id, string filter = null, string orderby = null, Object body = null);
        /// <summary>
        /// get change permission report with specific version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of PermissionActionItemPageResult</returns>
        System.Threading.Tasks.Task<PermissionActionItemPageResult> GetChangePermissionReportByVersionAsync (Guid id, long version, string filter = null, string orderby = null, Object body = null);

        /// <summary>
        /// get change permission report with specific version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (PermissionActionItemPageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<PermissionActionItemPageResult>> GetChangePermissionReportByVersionAsyncWithHttpInfo (Guid id, long version, string filter = null, string orderby = null, Object body = null);
        /// <summary>
        /// get change permission report filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of DistinctPageResult</returns>
        System.Threading.Tasks.Task<DistinctPageResult> GetChangePermissionReportFiltersAsync (Guid id, string filter = null, string distinct = null, int? top = null, int? skip = null);

        /// <summary>
        /// get change permission report filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of ApiResponse (DistinctPageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<DistinctPageResult>> GetChangePermissionReportFiltersAsyncWithHttpInfo (Guid id, string filter = null, string distinct = null, int? top = null, int? skip = null);
        /// <summary>
        /// get change permission report filters with specific version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of DistinctPageResult</returns>
        System.Threading.Tasks.Task<DistinctPageResult> GetChangePermissionReportFiltersByVersionAsync (Guid id, long version, string filter = null, string distinct = null, int? top = null, int? skip = null);

        /// <summary>
        /// get change permission report filters with specific version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of ApiResponse (DistinctPageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<DistinctPageResult>> GetChangePermissionReportFiltersByVersionAsyncWithHttpInfo (Guid id, long version, string filter = null, string distinct = null, int? top = null, int? skip = null);
        /// <summary>
        /// get change permission report filters for a sharepoint group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of DistinctPageResult</returns>
        System.Threading.Tasks.Task<DistinctPageResult> GetChangePermissionReportFiltersForSPGroupAsync (Guid id, Guid groupid, string filter = null, string distinct = null, int? top = null, int? skip = null);

        /// <summary>
        /// get change permission report filters for a sharepoint group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of ApiResponse (DistinctPageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<DistinctPageResult>> GetChangePermissionReportFiltersForSPGroupAsyncWithHttpInfo (Guid id, Guid groupid, string filter = null, string distinct = null, int? top = null, int? skip = null);
        /// <summary>
        /// get change permission report filters for a sharepoint group with specific version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of DistinctPageResult</returns>
        System.Threading.Tasks.Task<DistinctPageResult> GetChangePermissionReportFiltersForSPGroupByVersionAsync (Guid id, Guid groupid, long version, string filter = null, string distinct = null, int? top = null, int? skip = null);

        /// <summary>
        /// get change permission report filters for a sharepoint group with specific version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of ApiResponse (DistinctPageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<DistinctPageResult>> GetChangePermissionReportFiltersForSPGroupByVersionAsyncWithHttpInfo (Guid id, Guid groupid, long version, string filter = null, string distinct = null, int? top = null, int? skip = null);
        /// <summary>
        /// get change permission report for a sharepoint group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of PermissionActionItemPageResult</returns>
        System.Threading.Tasks.Task<PermissionActionItemPageResult> GetChangePermissionReportForSPGroupAsync (Guid id, Guid groupid, string filter = null, string orderby = null, Object body = null);

        /// <summary>
        /// get change permission report for a sharepoint group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (PermissionActionItemPageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<PermissionActionItemPageResult>> GetChangePermissionReportForSPGroupAsyncWithHttpInfo (Guid id, Guid groupid, string filter = null, string orderby = null, Object body = null);
        /// <summary>
        /// get change permission report for a sharepoint group with specific version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of PermissionActionItemPageResult</returns>
        System.Threading.Tasks.Task<PermissionActionItemPageResult> GetChangePermissionReportForSPGroupByVersionAsync (Guid id, long version, Guid groupid, string filter = null, string orderby = null, Object body = null);

        /// <summary>
        /// get change permission report for a sharepoint group with specific version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (PermissionActionItemPageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<PermissionActionItemPageResult>> GetChangePermissionReportForSPGroupByVersionAsyncWithHttpInfo (Guid id, long version, Guid groupid, string filter = null, string orderby = null, Object body = null);
        /// <summary>
        /// get change permission report permission levels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of List&lt;PermissionLevel&gt;</returns>
        System.Threading.Tasks.Task<List<PermissionLevel>> GetChangePermissionReportPermissionLevelsAsync (Guid id);

        /// <summary>
        /// get change permission report permission levels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (List&lt;PermissionLevel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PermissionLevel>>> GetChangePermissionReportPermissionLevelsAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// get change permission report properties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of RecertificationReportProperties</returns>
        System.Threading.Tasks.Task<RecertificationReportProperties> GetChangePermissionReportPropertiesAsync (Guid id);

        /// <summary>
        /// get change permission report properties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (RecertificationReportProperties)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecertificationReportProperties>> GetChangePermissionReportPropertiesAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// get clone permission report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, displayName, identityName, objectUrl, objectTitle, objectType, accountType, sharePointGroup, permissionLevels, action (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, displayName, identityName, objectUrl, objectTitle, objectType, accountType, sharePointGroup, permissionLevels, action (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ClonePermissionSecuritySearchResultPageResult</returns>
        System.Threading.Tasks.Task<ClonePermissionSecuritySearchResultPageResult> GetClonePermissionReportAsync (Guid id, string filter = null, string orderby = null, Object body = null);

        /// <summary>
        /// get clone permission report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, displayName, identityName, objectUrl, objectTitle, objectType, accountType, sharePointGroup, permissionLevels, action (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, displayName, identityName, objectUrl, objectTitle, objectType, accountType, sharePointGroup, permissionLevels, action (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ClonePermissionSecuritySearchResultPageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClonePermissionSecuritySearchResultPageResult>> GetClonePermissionReportAsyncWithHttpInfo (Guid id, string filter = null, string orderby = null, Object body = null);
        /// <summary>
        /// get clone permission report properties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ClonePermissionReportProperty</returns>
        System.Threading.Tasks.Task<ClonePermissionReportProperty> GetClonePermissionReportPropertiesAsync (Guid id);

        /// <summary>
        /// get clone permission report properties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ClonePermissionReportProperty)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClonePermissionReportProperty>> GetClonePermissionReportPropertiesAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// get manual archive report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; rowKey, partitionKey, siteId, url, nodeType (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; rowKey, partitionKey, siteId, url, nodeType (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ManuallyArchiveRecordModelPageResult</returns>
        System.Threading.Tasks.Task<ManuallyArchiveRecordModelPageResult> GetGetManualArchiveReportAsync (Guid id, string filter = null, string orderby = null, Object body = null);

        /// <summary>
        /// get manual archive report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; rowKey, partitionKey, siteId, url, nodeType (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; rowKey, partitionKey, siteId, url, nodeType (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ManuallyArchiveRecordModelPageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ManuallyArchiveRecordModelPageResult>> GetGetManualArchiveReportAsyncWithHttpInfo (Guid id, string filter = null, string orderby = null, Object body = null);
        /// <summary>
        /// get manual archive report filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; rowKey, partitionKey, siteId, url, nodeType (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; rowKey, partitionKey, siteId, url, nodeType (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of DistinctPageResult</returns>
        System.Threading.Tasks.Task<DistinctPageResult> GetGetManualArchiveReportFiltersAsync (Guid id, string filter = null, string distinct = null, int? top = null, int? skip = null);

        /// <summary>
        /// get manual archive report filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; rowKey, partitionKey, siteId, url, nodeType (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; rowKey, partitionKey, siteId, url, nodeType (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of ApiResponse (DistinctPageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<DistinctPageResult>> GetGetManualArchiveReportFiltersAsyncWithHttpInfo (Guid id, string filter = null, string distinct = null, int? top = null, int? skip = null);
        /// <summary>
        /// get group membership recertification report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of MembershipRecertificationItemPageResult</returns>
        System.Threading.Tasks.Task<MembershipRecertificationItemPageResult> GetGroupMembershipRecertificationReportAsync (Guid id, string filter = null, string orderby = null, Object body = null);

        /// <summary>
        /// get group membership recertification report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (MembershipRecertificationItemPageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<MembershipRecertificationItemPageResult>> GetGroupMembershipRecertificationReportAsyncWithHttpInfo (Guid id, string filter = null, string orderby = null, Object body = null);
        /// <summary>
        /// get group membership recertification report by version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of MembershipRecertificationItemPageResult</returns>
        System.Threading.Tasks.Task<MembershipRecertificationItemPageResult> GetGroupMembershipRecertificationReportByVersionAsync (Guid id, int version, string filter = null, string orderby = null, Object body = null);

        /// <summary>
        /// get group membership recertification report by version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (MembershipRecertificationItemPageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<MembershipRecertificationItemPageResult>> GetGroupMembershipRecertificationReportByVersionAsyncWithHttpInfo (Guid id, int version, string filter = null, string orderby = null, Object body = null);
        /// <summary>
        /// get group membership recertification report filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of DistinctPageResult</returns>
        System.Threading.Tasks.Task<DistinctPageResult> GetGroupMembershipRecertificationReportFiltersAsync (Guid id, string filter = null, string distinct = null, int? top = null, int? skip = null);

        /// <summary>
        /// get group membership recertification report filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of ApiResponse (DistinctPageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<DistinctPageResult>> GetGroupMembershipRecertificationReportFiltersAsyncWithHttpInfo (Guid id, string filter = null, string distinct = null, int? top = null, int? skip = null);
        /// <summary>
        /// get group membership recertification report filters by version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of DistinctPageResult</returns>
        System.Threading.Tasks.Task<DistinctPageResult> GetGroupMembershipRecertificationReportFiltersByVersionAsync (Guid id, int version, string filter = null, string distinct = null, int? top = null, int? skip = null);

        /// <summary>
        /// get group membership recertification report filters by version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of ApiResponse (DistinctPageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<DistinctPageResult>> GetGroupMembershipRecertificationReportFiltersByVersionAsyncWithHttpInfo (Guid id, int version, string filter = null, string distinct = null, int? top = null, int? skip = null);
        /// <summary>
        /// get group membership recertification report properties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of MembershipRecertificationReportProperties</returns>
        System.Threading.Tasks.Task<MembershipRecertificationReportProperties> GetGroupMembershipRecertificationReportPropertiesAsync (Guid id);

        /// <summary>
        /// get group membership recertification report properties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (MembershipRecertificationReportProperties)</returns>
        System.Threading.Tasks.Task<ApiResponse<MembershipRecertificationReportProperties>> GetGroupMembershipRecertificationReportPropertiesAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// get group permission recertification report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of GroupPermissionActionItemPageResult</returns>
        System.Threading.Tasks.Task<GroupPermissionActionItemPageResult> GetGroupPermissionRecertificationReportAsync (Guid id, string filter = null, string orderby = null, Object body = null);

        /// <summary>
        /// get group permission recertification report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (GroupPermissionActionItemPageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupPermissionActionItemPageResult>> GetGroupPermissionRecertificationReportAsyncWithHttpInfo (Guid id, string filter = null, string orderby = null, Object body = null);
        /// <summary>
        /// get group permission recertification report by version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of GroupPermissionActionItemPageResult</returns>
        System.Threading.Tasks.Task<GroupPermissionActionItemPageResult> GetGroupPermissionRecertificationReportByVersionAsync (Guid id, int version, string filter = null, string orderby = null, Object body = null);

        /// <summary>
        /// get group permission recertification report by version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (GroupPermissionActionItemPageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupPermissionActionItemPageResult>> GetGroupPermissionRecertificationReportByVersionAsyncWithHttpInfo (Guid id, int version, string filter = null, string orderby = null, Object body = null);
        /// <summary>
        /// get group permission recertification report filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of DistinctPageResult</returns>
        System.Threading.Tasks.Task<DistinctPageResult> GetGroupPermissionRecertificationReportFiltersAsync (Guid id, string filter = null, string distinct = null, int? top = null, int? skip = null);

        /// <summary>
        /// get group permission recertification report filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of ApiResponse (DistinctPageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<DistinctPageResult>> GetGroupPermissionRecertificationReportFiltersAsyncWithHttpInfo (Guid id, string filter = null, string distinct = null, int? top = null, int? skip = null);
        /// <summary>
        /// get group permission recertification report filters for sharepoint group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of DistinctPageResult</returns>
        System.Threading.Tasks.Task<DistinctPageResult> GetGroupPermissionRecertificationReportFiltersForSPGroupAsync (Guid id, Guid groupid, string filter = null, string distinct = null, int? top = null, int? skip = null);

        /// <summary>
        /// get group permission recertification report filters for sharepoint group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of ApiResponse (DistinctPageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<DistinctPageResult>> GetGroupPermissionRecertificationReportFiltersForSPGroupAsyncWithHttpInfo (Guid id, Guid groupid, string filter = null, string distinct = null, int? top = null, int? skip = null);
        /// <summary>
        /// get group permission recertification report for sharepoint group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of GroupPermissionActionItemPageResult</returns>
        System.Threading.Tasks.Task<GroupPermissionActionItemPageResult> GetGroupPermissionRecertificationReportForSPGroupAsync (Guid id, Guid groupid, string filter = null, string orderby = null, Object body = null);

        /// <summary>
        /// get group permission recertification report for sharepoint group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (GroupPermissionActionItemPageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupPermissionActionItemPageResult>> GetGroupPermissionRecertificationReportForSPGroupAsyncWithHttpInfo (Guid id, Guid groupid, string filter = null, string orderby = null, Object body = null);
        /// <summary>
        /// get group permission recertification report properties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of RecertificationReportProperties</returns>
        System.Threading.Tasks.Task<RecertificationReportProperties> GetGroupPermissionRecertificationReportPropertiesAsync (Guid id);

        /// <summary>
        /// get group permission recertification report properties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (RecertificationReportProperties)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecertificationReportProperties>> GetGroupPermissionRecertificationReportPropertiesAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// get my task filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isconfirmtask"> (optional, default to false)</param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, title, requester, requestTicketNumber, requesterDisplayName, dueDate, serviceType, createdTime, taskType, status (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, title, requester, requestTicketNumber, requesterDisplayName, dueDate, serviceType, createdTime, taskType, status (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of DistinctPageResult</returns>
        System.Threading.Tasks.Task<DistinctPageResult> GetMyTaskFiltersAsync (bool? isconfirmtask = null, string filter = null, string distinct = null, int? top = null, int? skip = null);

        /// <summary>
        /// get my task filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isconfirmtask"> (optional, default to false)</param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, title, requester, requestTicketNumber, requesterDisplayName, dueDate, serviceType, createdTime, taskType, status (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, title, requester, requestTicketNumber, requesterDisplayName, dueDate, serviceType, createdTime, taskType, status (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of ApiResponse (DistinctPageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<DistinctPageResult>> GetMyTaskFiltersAsyncWithHttpInfo (bool? isconfirmtask = null, string filter = null, string distinct = null, int? top = null, int? skip = null);
        /// <summary>
        /// get my tasks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isconfirmtask"> (optional, default to false)</param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, title, requester, requestTicketNumber, requesterDisplayName, dueDate, serviceType, createdTime, taskType, status (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, title, requester, requestTicketNumber, requesterDisplayName, dueDate, serviceType, createdTime, taskType, status (optional)</param>
        /// <param name="search">Search for title (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of TaskListPageResult</returns>
        System.Threading.Tasks.Task<TaskListPageResult> GetMyTasksAsync (bool? isconfirmtask = null, string filter = null, string orderby = null, string search = null, int? top = null, int? skip = null);

        /// <summary>
        /// get my tasks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isconfirmtask"> (optional, default to false)</param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, title, requester, requestTicketNumber, requesterDisplayName, dueDate, serviceType, createdTime, taskType, status (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, title, requester, requestTicketNumber, requesterDisplayName, dueDate, serviceType, createdTime, taskType, status (optional)</param>
        /// <param name="search">Search for title (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of ApiResponse (TaskListPageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskListPageResult>> GetMyTasksAsyncWithHttpInfo (bool? isconfirmtask = null, string filter = null, string orderby = null, string search = null, int? top = null, int? skip = null);
        /// <summary>
        /// get remove permission report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, displayName, identityName, objectUrl, objectTitle, objectType, accountType, sharePointGroup, permissionLevels, action (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, displayName, identityName, objectUrl, objectTitle, objectType, accountType, sharePointGroup, permissionLevels, action (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of SecuritySearchResultPageResult</returns>
        System.Threading.Tasks.Task<SecuritySearchResultPageResult> GetRemovePermissionReportAsync (Guid id, string filter = null, string orderby = null, Object body = null);

        /// <summary>
        /// get remove permission report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, displayName, identityName, objectUrl, objectTitle, objectType, accountType, sharePointGroup, permissionLevels, action (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, displayName, identityName, objectUrl, objectTitle, objectType, accountType, sharePointGroup, permissionLevels, action (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (SecuritySearchResultPageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SecuritySearchResultPageResult>> GetRemovePermissionReportAsyncWithHttpInfo (Guid id, string filter = null, string orderby = null, Object body = null);
        /// <summary>
        /// get remove permission report properties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of RecertificationReportProperties</returns>
        System.Threading.Tasks.Task<RecertificationReportProperties> GetRemovePermissionReportPropertiesAsync (Guid id);

        /// <summary>
        /// get remove permission report properties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (RecertificationReportProperties)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecertificationReportProperties>> GetRemovePermissionReportPropertiesAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// get site metadata recertification metadata
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of List&lt;CustomMetadata&gt;</returns>
        System.Threading.Tasks.Task<List<CustomMetadata>> GetSiteMetadataRecertificationReportAsync (Guid id);

        /// <summary>
        /// get site metadata recertification metadata
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (List&lt;CustomMetadata&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CustomMetadata>>> GetSiteMetadataRecertificationReportAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// get site metadata recertification report properties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of MetadataRecertificationReportProperties</returns>
        System.Threading.Tasks.Task<MetadataRecertificationReportProperties> GetSiteMetadataRecertificationReportPropertiesAsync (Guid id);

        /// <summary>
        /// get site metadata recertification report properties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (MetadataRecertificationReportProperties)</returns>
        System.Threading.Tasks.Task<ApiResponse<MetadataRecertificationReportProperties>> GetSiteMetadataRecertificationReportPropertiesAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// get site ownership recertification report properties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of RecertificationReportProperties</returns>
        System.Threading.Tasks.Task<RecertificationReportProperties> GetSiteOwnershipRecertificationReportPropertiesAsync (Guid id);

        /// <summary>
        /// get site ownership recertification report properties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (RecertificationReportProperties)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecertificationReportProperties>> GetSiteOwnershipRecertificationReportPropertiesAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// get site permission recertification permission filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of DistinctPageResult</returns>
        System.Threading.Tasks.Task<DistinctPageResult> GetSitePermissionRecertificatioPermissionFiltersAsync (Guid id, string filter = null, string distinct = null, int? top = null, int? skip = null);

        /// <summary>
        /// get site permission recertification permission filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of ApiResponse (DistinctPageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<DistinctPageResult>> GetSitePermissionRecertificatioPermissionFiltersAsyncWithHttpInfo (Guid id, string filter = null, string distinct = null, int? top = null, int? skip = null);
        /// <summary>
        /// get site permission recertification permission filters with specific version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of DistinctPageResult</returns>
        System.Threading.Tasks.Task<DistinctPageResult> GetSitePermissionRecertificatioReportFiltersByVersionAsync (Guid id, long version, string filter = null, string distinct = null, int? top = null, int? skip = null);

        /// <summary>
        /// get site permission recertification permission filters with specific version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of ApiResponse (DistinctPageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<DistinctPageResult>> GetSitePermissionRecertificatioReportFiltersByVersionAsyncWithHttpInfo (Guid id, long version, string filter = null, string distinct = null, int? top = null, int? skip = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of DistinctPageResult</returns>
        System.Threading.Tasks.Task<DistinctPageResult> GetSitePermissionRecertificatioReportFiltersForSPGroupAsync (Guid id, Guid groupid, string filter = null, string distinct = null, int? top = null, int? skip = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of ApiResponse (DistinctPageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<DistinctPageResult>> GetSitePermissionRecertificatioReportFiltersForSPGroupAsyncWithHttpInfo (Guid id, Guid groupid, string filter = null, string distinct = null, int? top = null, int? skip = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of DistinctPageResult</returns>
        System.Threading.Tasks.Task<DistinctPageResult> GetSitePermissionRecertificatioReportFiltersForSPGroupByVersionAsync (Guid id, Guid groupid, long version, string filter = null, string distinct = null, int? top = null, int? skip = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of ApiResponse (DistinctPageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<DistinctPageResult>> GetSitePermissionRecertificatioReportFiltersForSPGroupByVersionAsyncWithHttpInfo (Guid id, Guid groupid, long version, string filter = null, string distinct = null, int? top = null, int? skip = null);
        /// <summary>
        /// get site permission recertification permission levels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of List&lt;PermissionLevel&gt;</returns>
        System.Threading.Tasks.Task<List<PermissionLevel>> GetSitePermissionRecertificationPermissionLevelsAsync (Guid id);

        /// <summary>
        /// get site permission recertification permission levels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (List&lt;PermissionLevel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PermissionLevel>>> GetSitePermissionRecertificationPermissionLevelsAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// get site permission recertification report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of PermissionActionItemPageResult</returns>
        System.Threading.Tasks.Task<PermissionActionItemPageResult> GetSitePermissionRecertificationReportAsync (Guid id, string filter = null, string orderby = null, Object body = null);

        /// <summary>
        /// get site permission recertification report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (PermissionActionItemPageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<PermissionActionItemPageResult>> GetSitePermissionRecertificationReportAsyncWithHttpInfo (Guid id, string filter = null, string orderby = null, Object body = null);
        /// <summary>
        /// get site permission recertification report by specific version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of PermissionActionItemPageResult</returns>
        System.Threading.Tasks.Task<PermissionActionItemPageResult> GetSitePermissionRecertificationReportByVersionAsync (Guid id, long version, string filter = null, string orderby = null, Object body = null);

        /// <summary>
        /// get site permission recertification report by specific version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (PermissionActionItemPageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<PermissionActionItemPageResult>> GetSitePermissionRecertificationReportByVersionAsyncWithHttpInfo (Guid id, long version, string filter = null, string orderby = null, Object body = null);
        /// <summary>
        /// get site permission recertification group permission items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of PermissionActionItemPageResult</returns>
        System.Threading.Tasks.Task<PermissionActionItemPageResult> GetSitePermissionRecertificationReportForSPGroupAsync (Guid id, Guid groupid, string filter = null, string orderby = null, Object body = null);

        /// <summary>
        /// get site permission recertification group permission items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (PermissionActionItemPageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<PermissionActionItemPageResult>> GetSitePermissionRecertificationReportForSPGroupAsyncWithHttpInfo (Guid id, Guid groupid, string filter = null, string orderby = null, Object body = null);
        /// <summary>
        /// get site permission recertification group permission items with specific version with specific version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of PermissionActionItemPageResult</returns>
        System.Threading.Tasks.Task<PermissionActionItemPageResult> GetSitePermissionRecertificationReportForSPGroupByVersionAsync (Guid id, long version, Guid groupid, string filter = null, string orderby = null, Object body = null);

        /// <summary>
        /// get site permission recertification group permission items with specific version with specific version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (PermissionActionItemPageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<PermissionActionItemPageResult>> GetSitePermissionRecertificationReportForSPGroupByVersionAsyncWithHttpInfo (Guid id, long version, Guid groupid, string filter = null, string orderby = null, Object body = null);
        /// <summary>
        /// get site permission recertification report properties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of RecertificationReportProperties</returns>
        System.Threading.Tasks.Task<RecertificationReportProperties> GetSitePermissionRecertificationReportPropertiesAsync (Guid id);

        /// <summary>
        /// get site permission recertification report properties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (RecertificationReportProperties)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecertificationReportProperties>> GetSitePermissionRecertificationReportPropertiesAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// get task by batch id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchid"></param>
        /// <returns>Task of TaskList</returns>
        System.Threading.Tasks.Task<TaskList> GetTaskByBatchIdAsync (Guid batchid);

        /// <summary>
        /// get task by batch id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchid"></param>
        /// <returns>Task of ApiResponse (TaskList)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskList>> GetTaskByBatchIdAsyncWithHttpInfo (Guid batchid);
        /// <summary>
        /// get my task by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiTask</returns>
        System.Threading.Tasks.Task<ApiTask> GetTaskByIdAsync (Guid id);

        /// <summary>
        /// get my task by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ApiTask)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiTask>> GetTaskByIdAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// promote as owners for group membership recertification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiUser"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PromoteAsOwnersForGroupMembershipRecertificationAsync (Guid id, List<ApiUser> apiUser = null);

        /// <summary>
        /// promote as owners for group membership recertification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiUser"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PromoteAsOwnersForGroupMembershipRecertificationAsyncWithHttpInfo (Guid id, List<ApiUser> apiUser = null);
        /// <summary>
        /// reassign task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="user"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ReassignTaskAsync (Guid id, string user);

        /// <summary>
        /// reassign task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="user"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReassignTaskAsyncWithHttpInfo (Guid id, string user);
        /// <summary>
        /// reject task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="commentsParam"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RejectTaskAsync (Guid id, CommentsParam commentsParam = null);

        /// <summary>
        /// reject task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="commentsParam"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RejectTaskAsyncWithHttpInfo (Guid id, CommentsParam commentsParam = null);
        /// <summary>
        /// remove users for group membership recertification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="requestBody"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveUsersForGroupMembershipRecertificationAsync (Guid id, List<Guid> requestBody = null);

        /// <summary>
        /// remove users for group membership recertification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="requestBody"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveUsersForGroupMembershipRecertificationAsyncWithHttpInfo (Guid id, List<Guid> requestBody = null);
        /// <summary>
        /// save all changes for change permission task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ReseAllChangesForChangePermissionTaskAsync (Guid id);

        /// <summary>
        /// save all changes for change permission task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReseAllChangesForChangePermissionTaskAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// reset all changes for site/group recertification task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ResetAllChangesForRecertificationTaskAsync (Guid id);

        /// <summary>
        /// reset all changes for site/group recertification task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ResetAllChangesForRecertificationTaskAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// save my changes for change permission task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ResetMyChangesForChangePermissionTaskAsync (Guid id);

        /// <summary>
        /// save my changes for change permission task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ResetMyChangesForChangePermissionTaskAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// reset my changes for site/group recertification task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ResetMyChangesForRecertificationTaskAsync (Guid id);

        /// <summary>
        /// reset my changes for site/group recertification task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ResetMyChangesForRecertificationTaskAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// retry error task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="commentsParam"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RetryErrorTaskAsync (Guid id, CommentsParam commentsParam = null);

        /// <summary>
        /// retry error task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="commentsParam"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RetryErrorTaskAsyncWithHttpInfo (Guid id, CommentsParam commentsParam = null);
        /// <summary>
        /// save change permission actions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="permissionActionItem"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SaveChangePermissionActionsAsync (Guid id, List<PermissionActionItem> permissionActionItem = null);

        /// <summary>
        /// save change permission actions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="permissionActionItem"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SaveChangePermissionActionsAsyncWithHttpInfo (Guid id, List<PermissionActionItem> permissionActionItem = null);
        /// <summary>
        /// Save clone permission report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="securitySearchResult"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SaveClonePermissionReportAsync (Guid id, List<SecuritySearchResult> securitySearchResult = null);

        /// <summary>
        /// Save clone permission report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="securitySearchResult"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SaveClonePermissionReportAsyncWithHttpInfo (Guid id, List<SecuritySearchResult> securitySearchResult = null);
        /// <summary>
        /// save manual archive report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="manuallyArchiveRecordModel"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SaveGetManualArchiveReportAsync (Guid id, List<ManuallyArchiveRecordModel> manuallyArchiveRecordModel = null);

        /// <summary>
        /// save manual archive report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="manuallyArchiveRecordModel"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SaveGetManualArchiveReportAsyncWithHttpInfo (Guid id, List<ManuallyArchiveRecordModel> manuallyArchiveRecordModel = null);
        /// <summary>
        /// save group permission recertification results
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupPermissionActionItem"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SaveGroupPermissionRecertificationResultsAsync (Guid id, List<GroupPermissionActionItem> groupPermissionActionItem = null);

        /// <summary>
        /// save group permission recertification results
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupPermissionActionItem"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SaveGroupPermissionRecertificationResultsAsyncWithHttpInfo (Guid id, List<GroupPermissionActionItem> groupPermissionActionItem = null);
        /// <summary>
        /// save remove permission report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="securitySearchResult"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SaveRemovePermissionReportAsync (Guid id, List<SecuritySearchResult> securitySearchResult = null);

        /// <summary>
        /// save remove permission report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="securitySearchResult"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SaveRemovePermissionReportAsyncWithHttpInfo (Guid id, List<SecuritySearchResult> securitySearchResult = null);
        /// <summary>
        /// save site metadata recertification metadata
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="requestMetadata"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SaveSiteMetadataRecertificationResultAsync (Guid id, List<RequestMetadata> requestMetadata = null);

        /// <summary>
        /// save site metadata recertification metadata
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="requestMetadata"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SaveSiteMetadataRecertificationResultAsyncWithHttpInfo (Guid id, List<RequestMetadata> requestMetadata = null);
        /// <summary>
        /// save site permission recertification permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="permissionActionItem"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SaveSitePermissionRecertificationResultAsync (Guid id, List<PermissionActionItem> permissionActionItem = null);

        /// <summary>
        /// save site permission recertification permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="permissionActionItem"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SaveSitePermissionRecertificationResultAsyncWithHttpInfo (Guid id, List<PermissionActionItem> permissionActionItem = null);
        /// <summary>
        /// skip error task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="commentsParam"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SkipErrorTaskAsync (Guid id, CommentsParam commentsParam = null);

        /// <summary>
        /// skip error task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="commentsParam"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SkipErrorTaskAsyncWithHttpInfo (Guid id, CommentsParam commentsParam = null);
        /// <summary>
        /// specify primary and secondary contact when primary contact is deactived
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="primarycontact"> (optional)</param>
        /// <param name="secondarycontact"> (optional)</param>
        /// <param name="primarycontactemail"> (optional)</param>
        /// <param name="secodnarycontactemail"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SpecifyPrimaryAndSecondaryContactWhenPrimaryContactIsDeactivedAsync (Guid id, string primarycontact = null, string secondarycontact = null, Guid? primarycontactemail = null, Guid? secodnarycontactemail = null);

        /// <summary>
        /// specify primary and secondary contact when primary contact is deactived
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="primarycontact"> (optional)</param>
        /// <param name="secondarycontact"> (optional)</param>
        /// <param name="primarycontactemail"> (optional)</param>
        /// <param name="secodnarycontactemail"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SpecifyPrimaryAndSecondaryContactWhenPrimaryContactIsDeactivedAsyncWithHttpInfo (Guid id, string primarycontact = null, string secondarycontact = null, Guid? primarycontactemail = null, Guid? secodnarycontactemail = null);
        /// <summary>
        /// specify secondary contact when secondary contact is deactived
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="secondarycontact"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SpecifySecondaryContactWhenSecondaryContactIsDeactivedAsync (Guid id, string secondarycontact = null);

        /// <summary>
        /// specify secondary contact when secondary contact is deactived
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="secondarycontact"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SpecifySecondaryContactWhenSecondaryContactIsDeactivedAsyncWithHttpInfo (Guid id, string secondarycontact = null);
        /// <summary>
        /// submit archive group auto task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoTaskArchiveRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SubmitArchiveGroupAutoTaskAsync (AutoTaskArchiveRequest autoTaskArchiveRequest = null);

        /// <summary>
        /// submit archive group auto task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoTaskArchiveRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SubmitArchiveGroupAutoTaskAsyncWithHttpInfo (AutoTaskArchiveRequest autoTaskArchiveRequest = null);
        /// <summary>
        /// submit site archive auto task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoTaskArchiveRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SubmitArchiveSiteAutoTaskAsync (AutoTaskArchiveRequest autoTaskArchiveRequest = null);

        /// <summary>
        /// submit site archive auto task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoTaskArchiveRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SubmitArchiveSiteAutoTaskAsyncWithHttpInfo (AutoTaskArchiveRequest autoTaskArchiveRequest = null);
        /// <summary>
        /// submit site policy change auto task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoTaskChangePolicyRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SubmitChangeSitePolicyAutoTaskAsync (AutoTaskChangePolicyRequest autoTaskChangePolicyRequest = null);

        /// <summary>
        /// submit site policy change auto task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoTaskChangePolicyRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SubmitChangeSitePolicyAutoTaskAsyncWithHttpInfo (AutoTaskChangePolicyRequest autoTaskChangePolicyRequest = null);
        /// <summary>
        /// submit group continue access auto task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="commentsParam"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SubmitContinueAccessGroupAutoTaskAsync (Guid? id = null, CommentsParam commentsParam = null);

        /// <summary>
        /// submit group continue access auto task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="commentsParam"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SubmitContinueAccessGroupAutoTaskAsyncWithHttpInfo (Guid? id = null, CommentsParam commentsParam = null);
        /// <summary>
        /// submit site continue access auto task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="commentsParam"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SubmitContinueAccessSiteAutoTaskAsync (Guid? id = null, CommentsParam commentsParam = null);

        /// <summary>
        /// submit site continue access auto task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="commentsParam"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SubmitContinueAccessSiteAutoTaskAsyncWithHttpInfo (Guid? id = null, CommentsParam commentsParam = null);
        /// <summary>
        /// submit delete group auto task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoTaskDeleteRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SubmitDeleteGroupAutoTaskAsync (AutoTaskDeleteRequest autoTaskDeleteRequest = null);

        /// <summary>
        /// submit delete group auto task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoTaskDeleteRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SubmitDeleteGroupAutoTaskAsyncWithHttpInfo (AutoTaskDeleteRequest autoTaskDeleteRequest = null);
        /// <summary>
        /// submit site delete auto task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoTaskDeleteRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SubmitDeleteSiteAutoTaskAsync (AutoTaskDeleteRequest autoTaskDeleteRequest = null);

        /// <summary>
        /// submit site delete auto task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoTaskDeleteRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SubmitDeleteSiteAutoTaskAsyncWithHttpInfo (AutoTaskDeleteRequest autoTaskDeleteRequest = null);
        /// <summary>
        /// submit extend group auto task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoTaskExtendRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SubmitExtendGroupAutoTaskAsync (AutoTaskExtendRequest autoTaskExtendRequest = null);

        /// <summary>
        /// submit extend group auto task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoTaskExtendRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SubmitExtendGroupAutoTaskAsyncWithHttpInfo (AutoTaskExtendRequest autoTaskExtendRequest = null);
        /// <summary>
        /// submit site extend auto task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoTaskExtendRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SubmitExtendSiteAutoTaskAsync (AutoTaskExtendRequest autoTaskExtendRequest = null);

        /// <summary>
        /// submit site extend auto task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoTaskExtendRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SubmitExtendSiteAutoTaskAsyncWithHttpInfo (AutoTaskExtendRequest autoTaskExtendRequest = null);
        /// <summary>
        /// submit site/group recertification task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="commentsParam"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SubmitRecertificationTaskAsync (Guid id, CommentsParam commentsParam = null);

        /// <summary>
        /// submit site/group recertification task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="commentsParam"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SubmitRecertificationTaskAsyncWithHttpInfo (Guid id, CommentsParam commentsParam = null);
        /// <summary>
        /// view site ownership recertification task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of OwnershipRecertification</returns>
        System.Threading.Tasks.Task<OwnershipRecertification> ViewSiteOwnershipRecertificationTaskAsync (Guid id);

        /// <summary>
        /// view site ownership recertification task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (OwnershipRecertification)</returns>
        System.Threading.Tasks.Task<ApiResponse<OwnershipRecertification>> ViewSiteOwnershipRecertificationTaskAsyncWithHttpInfo (Guid id);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITasksApi : ITasksApiSync, ITasksApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TasksApi : ITasksApi
    {
        private Cloud.Governance.NewSdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TasksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TasksApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TasksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TasksApi(String basePath)
        {
            this.Configuration = Cloud.Governance.NewSdk.Client.Configuration.MergeConfigurations(
                Cloud.Governance.NewSdk.Client.GlobalConfiguration.Instance,
                new Cloud.Governance.NewSdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Cloud.Governance.NewSdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Cloud.Governance.NewSdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Cloud.Governance.NewSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TasksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TasksApi(Cloud.Governance.NewSdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Cloud.Governance.NewSdk.Client.Configuration.MergeConfigurations(
                Cloud.Governance.NewSdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Cloud.Governance.NewSdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Cloud.Governance.NewSdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Cloud.Governance.NewSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TasksApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TasksApi(Cloud.Governance.NewSdk.Client.ISynchronousClient client,Cloud.Governance.NewSdk.Client.IAsynchronousClient asyncClient, Cloud.Governance.NewSdk.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Cloud.Governance.NewSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Cloud.Governance.NewSdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Cloud.Governance.NewSdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Cloud.Governance.NewSdk.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Cloud.Governance.NewSdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// add members for group membership recertification 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiUser"> (optional)</param>
        /// <returns></returns>
        public void AddMembersForGroupMembershipRecertification (Guid id, List<ApiUser> apiUser = null)
        {
             AddMembersForGroupMembershipRecertificationWithHttpInfo(id, apiUser);
        }

        /// <summary>
        /// add members for group membership recertification 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiUser"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> AddMembersForGroupMembershipRecertificationWithHttpInfo (Guid id, List<ApiUser> apiUser = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->AddMembersForGroupMembershipRecertification");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = apiUser;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post<Object>("/tasks/{id}/group/recertification/membership/members", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("AddMembersForGroupMembershipRecertification", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// add members for group membership recertification 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiUser"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddMembersForGroupMembershipRecertificationAsync (Guid id, List<ApiUser> apiUser = null)
        {
             await AddMembersForGroupMembershipRecertificationAsyncWithHttpInfo(id, apiUser);

        }

        /// <summary>
        /// add members for group membership recertification 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiUser"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> AddMembersForGroupMembershipRecertificationAsyncWithHttpInfo (Guid id, List<ApiUser> apiUser = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->AddMembersForGroupMembershipRecertification");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = apiUser;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Object>("/tasks/{id}/group/recertification/membership/members", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("AddMembersForGroupMembershipRecertification", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// add owners for group membership recertification 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiUser"> (optional)</param>
        /// <returns></returns>
        public void AddOwnersForGroupMembershipRecertification (Guid id, List<ApiUser> apiUser = null)
        {
             AddOwnersForGroupMembershipRecertificationWithHttpInfo(id, apiUser);
        }

        /// <summary>
        /// add owners for group membership recertification 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiUser"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> AddOwnersForGroupMembershipRecertificationWithHttpInfo (Guid id, List<ApiUser> apiUser = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->AddOwnersForGroupMembershipRecertification");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = apiUser;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post<Object>("/tasks/{id}/group/recertification/membership/owners", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("AddOwnersForGroupMembershipRecertification", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// add owners for group membership recertification 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiUser"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddOwnersForGroupMembershipRecertificationAsync (Guid id, List<ApiUser> apiUser = null)
        {
             await AddOwnersForGroupMembershipRecertificationAsyncWithHttpInfo(id, apiUser);

        }

        /// <summary>
        /// add owners for group membership recertification 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiUser"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> AddOwnersForGroupMembershipRecertificationAsyncWithHttpInfo (Guid id, List<ApiUser> apiUser = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->AddOwnersForGroupMembershipRecertification");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = apiUser;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Object>("/tasks/{id}/group/recertification/membership/owners", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("AddOwnersForGroupMembershipRecertification", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// approve task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="commentsParam"> (optional)</param>
        /// <returns></returns>
        public void ApproveTask (Guid id, CommentsParam commentsParam = null)
        {
             ApproveTaskWithHttpInfo(id, commentsParam);
        }

        /// <summary>
        /// approve task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="commentsParam"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> ApproveTaskWithHttpInfo (Guid id, CommentsParam commentsParam = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->ApproveTask");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = commentsParam;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post<Object>("/tasks/{id}/approve", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApproveTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// approve task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="commentsParam"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApproveTaskAsync (Guid id, CommentsParam commentsParam = null)
        {
             await ApproveTaskAsyncWithHttpInfo(id, commentsParam);

        }

        /// <summary>
        /// approve task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="commentsParam"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> ApproveTaskAsyncWithHttpInfo (Guid id, CommentsParam commentsParam = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->ApproveTask");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = commentsParam;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Object>("/tasks/{id}/approve", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApproveTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// claim election task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="secondarycontact"> (optional)</param>
        /// <returns></returns>
        public void ClaimElectionTask (Guid id, string secondarycontact = null)
        {
             ClaimElectionTaskWithHttpInfo(id, secondarycontact);
        }

        /// <summary>
        /// claim election task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="secondarycontact"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> ClaimElectionTaskWithHttpInfo (Guid id, string secondarycontact = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->ClaimElectionTask");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (secondarycontact != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "secondarycontact", secondarycontact))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post<Object>("/tasks/{id}/election/claim", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ClaimElectionTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// claim election task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="secondarycontact"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ClaimElectionTaskAsync (Guid id, string secondarycontact = null)
        {
             await ClaimElectionTaskAsyncWithHttpInfo(id, secondarycontact);

        }

        /// <summary>
        /// claim election task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="secondarycontact"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> ClaimElectionTaskAsyncWithHttpInfo (Guid id, string secondarycontact = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->ClaimElectionTask");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (secondarycontact != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "secondarycontact", secondarycontact))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Object>("/tasks/{id}/election/claim", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ClaimElectionTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// claim site ownership recertification task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="secondarycontact"></param>
        /// <returns></returns>
        public void ClaimSiteOwnershipRecertificationTask (Guid id, string secondarycontact)
        {
             ClaimSiteOwnershipRecertificationTaskWithHttpInfo(id, secondarycontact);
        }

        /// <summary>
        /// claim site ownership recertification task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="secondarycontact"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> ClaimSiteOwnershipRecertificationTaskWithHttpInfo (Guid id, string secondarycontact)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->ClaimSiteOwnershipRecertificationTask");

            // verify the required parameter 'secondarycontact' is set
            if (secondarycontact == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'secondarycontact' when calling TasksApi->ClaimSiteOwnershipRecertificationTask");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (secondarycontact != null)
                requestOptions.PathParameters.Add("secondarycontact", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(secondarycontact)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post<Object>("/tasks/{id}/site/recertification/ownership/claim/{secondarycontact}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ClaimSiteOwnershipRecertificationTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// claim site ownership recertification task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="secondarycontact"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ClaimSiteOwnershipRecertificationTaskAsync (Guid id, string secondarycontact)
        {
             await ClaimSiteOwnershipRecertificationTaskAsyncWithHttpInfo(id, secondarycontact);

        }

        /// <summary>
        /// claim site ownership recertification task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="secondarycontact"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> ClaimSiteOwnershipRecertificationTaskAsyncWithHttpInfo (Guid id, string secondarycontact)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->ClaimSiteOwnershipRecertificationTask");

            // verify the required parameter 'secondarycontact' is set
            if (secondarycontact == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'secondarycontact' when calling TasksApi->ClaimSiteOwnershipRecertificationTask");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (secondarycontact != null)
                requestOptions.PathParameters.Add("secondarycontact", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(secondarycontact)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Object>("/tasks/{id}/site/recertification/ownership/claim/{secondarycontact}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ClaimSiteOwnershipRecertificationTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// decline election task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeclineElectionTask (Guid id)
        {
             DeclineElectionTaskWithHttpInfo(id);
        }

        /// <summary>
        /// decline election task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> DeclineElectionTaskWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->DeclineElectionTask");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post<Object>("/tasks/{id}/election/decline", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeclineElectionTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// decline election task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeclineElectionTaskAsync (Guid id)
        {
             await DeclineElectionTaskAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// decline election task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> DeclineElectionTaskAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->DeclineElectionTask");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Object>("/tasks/{id}/election/decline", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeclineElectionTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// decline site ownership recertification task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeclineSiteOwnershipRecertificationTask (Guid id)
        {
             DeclineSiteOwnershipRecertificationTaskWithHttpInfo(id);
        }

        /// <summary>
        /// decline site ownership recertification task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> DeclineSiteOwnershipRecertificationTaskWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->DeclineSiteOwnershipRecertificationTask");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post<Object>("/tasks/{id}/site/recertification/ownership/decline", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeclineSiteOwnershipRecertificationTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// decline site ownership recertification task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeclineSiteOwnershipRecertificationTaskAsync (Guid id)
        {
             await DeclineSiteOwnershipRecertificationTaskAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// decline site ownership recertification task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> DeclineSiteOwnershipRecertificationTaskAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->DeclineSiteOwnershipRecertificationTask");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Object>("/tasks/{id}/site/recertification/ownership/decline", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeclineSiteOwnershipRecertificationTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// demote as members for group membership recertification 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiUser"> (optional)</param>
        /// <returns></returns>
        public void DemoteAsMembersForGroupMembershipRecertification (Guid id, List<ApiUser> apiUser = null)
        {
             DemoteAsMembersForGroupMembershipRecertificationWithHttpInfo(id, apiUser);
        }

        /// <summary>
        /// demote as members for group membership recertification 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiUser"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> DemoteAsMembersForGroupMembershipRecertificationWithHttpInfo (Guid id, List<ApiUser> apiUser = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->DemoteAsMembersForGroupMembershipRecertification");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = apiUser;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post<Object>("/tasks/{id}/group/recertification/membership/demoteasmember", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DemoteAsMembersForGroupMembershipRecertification", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// demote as members for group membership recertification 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiUser"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DemoteAsMembersForGroupMembershipRecertificationAsync (Guid id, List<ApiUser> apiUser = null)
        {
             await DemoteAsMembersForGroupMembershipRecertificationAsyncWithHttpInfo(id, apiUser);

        }

        /// <summary>
        /// demote as members for group membership recertification 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiUser"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> DemoteAsMembersForGroupMembershipRecertificationAsyncWithHttpInfo (Guid id, List<ApiUser> apiUser = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->DemoteAsMembersForGroupMembershipRecertification");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = apiUser;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Object>("/tasks/{id}/group/recertification/membership/demoteasmember", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DemoteAsMembersForGroupMembershipRecertification", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit archive group request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="archiveGroupRequest"> (optional)</param>
        /// <returns></returns>
        public void EditArchiveGroupRequest (Guid id, ArchiveGroupRequest archiveGroupRequest = null)
        {
             EditArchiveGroupRequestWithHttpInfo(id, archiveGroupRequest);
        }

        /// <summary>
        /// edit archive group request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="archiveGroupRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> EditArchiveGroupRequestWithHttpInfo (Guid id, ArchiveGroupRequest archiveGroupRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditArchiveGroupRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = archiveGroupRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Put<Object>("/tasks/{id}/archivegroup", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditArchiveGroupRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit archive group request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="archiveGroupRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EditArchiveGroupRequestAsync (Guid id, ArchiveGroupRequest archiveGroupRequest = null)
        {
             await EditArchiveGroupRequestAsyncWithHttpInfo(id, archiveGroupRequest);

        }

        /// <summary>
        /// edit archive group request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="archiveGroupRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> EditArchiveGroupRequestAsyncWithHttpInfo (Guid id, ArchiveGroupRequest archiveGroupRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditArchiveGroupRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = archiveGroupRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Object>("/tasks/{id}/archivegroup", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditArchiveGroupRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit archive site request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="archiveSiteRequest"> (optional)</param>
        /// <returns></returns>
        public void EditArchiveSiteRequest (Guid id, ArchiveSiteRequest archiveSiteRequest = null)
        {
             EditArchiveSiteRequestWithHttpInfo(id, archiveSiteRequest);
        }

        /// <summary>
        /// edit archive site request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="archiveSiteRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> EditArchiveSiteRequestWithHttpInfo (Guid id, ArchiveSiteRequest archiveSiteRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditArchiveSiteRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = archiveSiteRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Put<Object>("/tasks/{id}/archivesite", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditArchiveSiteRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit archive site request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="archiveSiteRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EditArchiveSiteRequestAsync (Guid id, ArchiveSiteRequest archiveSiteRequest = null)
        {
             await EditArchiveSiteRequestAsyncWithHttpInfo(id, archiveSiteRequest);

        }

        /// <summary>
        /// edit archive site request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="archiveSiteRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> EditArchiveSiteRequestAsyncWithHttpInfo (Guid id, ArchiveSiteRequest archiveSiteRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditArchiveSiteRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = archiveSiteRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Object>("/tasks/{id}/archivesite", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditArchiveSiteRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit archive web request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="archiveWebLifecycleRequest"> (optional)</param>
        /// <returns></returns>
        public void EditArchiveWebRequest (Guid id, ArchiveWebLifecycleRequest archiveWebLifecycleRequest = null)
        {
             EditArchiveWebRequestWithHttpInfo(id, archiveWebLifecycleRequest);
        }

        /// <summary>
        /// edit archive web request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="archiveWebLifecycleRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> EditArchiveWebRequestWithHttpInfo (Guid id, ArchiveWebLifecycleRequest archiveWebLifecycleRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditArchiveWebRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = archiveWebLifecycleRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Put<Object>("/tasks/{id}/archiveweb", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditArchiveWebRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit archive web request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="archiveWebLifecycleRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EditArchiveWebRequestAsync (Guid id, ArchiveWebLifecycleRequest archiveWebLifecycleRequest = null)
        {
             await EditArchiveWebRequestAsyncWithHttpInfo(id, archiveWebLifecycleRequest);

        }

        /// <summary>
        /// edit archive web request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="archiveWebLifecycleRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> EditArchiveWebRequestAsyncWithHttpInfo (Guid id, ArchiveWebLifecycleRequest archiveWebLifecycleRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditArchiveWebRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = archiveWebLifecycleRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Object>("/tasks/{id}/archiveweb", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditArchiveWebRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit change group policy request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeGroupPolicyRequest"> (optional)</param>
        /// <returns></returns>
        public void EditChangeGroupPolicyRequest (Guid id, ChangeGroupPolicyRequest changeGroupPolicyRequest = null)
        {
             EditChangeGroupPolicyRequestWithHttpInfo(id, changeGroupPolicyRequest);
        }

        /// <summary>
        /// edit change group policy request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeGroupPolicyRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> EditChangeGroupPolicyRequestWithHttpInfo (Guid id, ChangeGroupPolicyRequest changeGroupPolicyRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditChangeGroupPolicyRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = changeGroupPolicyRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Put<Object>("/tasks/{id}/changegrouppolicy", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditChangeGroupPolicyRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit change group policy request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeGroupPolicyRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EditChangeGroupPolicyRequestAsync (Guid id, ChangeGroupPolicyRequest changeGroupPolicyRequest = null)
        {
             await EditChangeGroupPolicyRequestAsyncWithHttpInfo(id, changeGroupPolicyRequest);

        }

        /// <summary>
        /// edit change group policy request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeGroupPolicyRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> EditChangeGroupPolicyRequestAsyncWithHttpInfo (Guid id, ChangeGroupPolicyRequest changeGroupPolicyRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditChangeGroupPolicyRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = changeGroupPolicyRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Object>("/tasks/{id}/changegrouppolicy", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditChangeGroupPolicyRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit change group quota request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeGroupQuotaRequest"> (optional)</param>
        /// <returns></returns>
        public void EditChangeGroupQuotaRequest (Guid id, ChangeGroupQuotaRequest changeGroupQuotaRequest = null)
        {
             EditChangeGroupQuotaRequestWithHttpInfo(id, changeGroupQuotaRequest);
        }

        /// <summary>
        /// edit change group quota request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeGroupQuotaRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> EditChangeGroupQuotaRequestWithHttpInfo (Guid id, ChangeGroupQuotaRequest changeGroupQuotaRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditChangeGroupQuotaRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = changeGroupQuotaRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Put<Object>("/tasks/{id}/changegroupquota", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditChangeGroupQuotaRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit change group quota request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeGroupQuotaRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EditChangeGroupQuotaRequestAsync (Guid id, ChangeGroupQuotaRequest changeGroupQuotaRequest = null)
        {
             await EditChangeGroupQuotaRequestAsyncWithHttpInfo(id, changeGroupQuotaRequest);

        }

        /// <summary>
        /// edit change group quota request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeGroupQuotaRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> EditChangeGroupQuotaRequestAsyncWithHttpInfo (Guid id, ChangeGroupQuotaRequest changeGroupQuotaRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditChangeGroupQuotaRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = changeGroupQuotaRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Object>("/tasks/{id}/changegroupquota", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditChangeGroupQuotaRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit create change group request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeGroupSettingRequest"> (optional)</param>
        /// <returns></returns>
        public void EditChangeGroupRequest (Guid id, ChangeGroupSettingRequest changeGroupSettingRequest = null)
        {
             EditChangeGroupRequestWithHttpInfo(id, changeGroupSettingRequest);
        }

        /// <summary>
        /// edit create change group request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeGroupSettingRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> EditChangeGroupRequestWithHttpInfo (Guid id, ChangeGroupSettingRequest changeGroupSettingRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditChangeGroupRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = changeGroupSettingRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Put<Object>("/tasks/{id}/changegroup", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditChangeGroupRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit create change group request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeGroupSettingRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EditChangeGroupRequestAsync (Guid id, ChangeGroupSettingRequest changeGroupSettingRequest = null)
        {
             await EditChangeGroupRequestAsyncWithHttpInfo(id, changeGroupSettingRequest);

        }

        /// <summary>
        /// edit create change group request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeGroupSettingRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> EditChangeGroupRequestAsyncWithHttpInfo (Guid id, ChangeGroupSettingRequest changeGroupSettingRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditChangeGroupRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = changeGroupSettingRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Object>("/tasks/{id}/changegroup", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditChangeGroupRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit change list setting request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeListSettingRequest"> (optional)</param>
        /// <returns></returns>
        public void EditChangeListSettingRequest (Guid id, ChangeListSettingRequest changeListSettingRequest = null)
        {
             EditChangeListSettingRequestWithHttpInfo(id, changeListSettingRequest);
        }

        /// <summary>
        /// edit change list setting request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeListSettingRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> EditChangeListSettingRequestWithHttpInfo (Guid id, ChangeListSettingRequest changeListSettingRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditChangeListSettingRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = changeListSettingRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Put<Object>("/tasks/{id}/changelistsetting", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditChangeListSettingRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit change list setting request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeListSettingRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EditChangeListSettingRequestAsync (Guid id, ChangeListSettingRequest changeListSettingRequest = null)
        {
             await EditChangeListSettingRequestAsyncWithHttpInfo(id, changeListSettingRequest);

        }

        /// <summary>
        /// edit change list setting request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeListSettingRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> EditChangeListSettingRequestAsyncWithHttpInfo (Guid id, ChangeListSettingRequest changeListSettingRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditChangeListSettingRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = changeListSettingRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Object>("/tasks/{id}/changelistsetting", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditChangeListSettingRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit change permission request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changePermissionRequest"> (optional)</param>
        /// <returns></returns>
        public void EditChangePermissionRequest (Guid id, ChangePermissionRequest changePermissionRequest = null)
        {
             EditChangePermissionRequestWithHttpInfo(id, changePermissionRequest);
        }

        /// <summary>
        /// edit change permission request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changePermissionRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> EditChangePermissionRequestWithHttpInfo (Guid id, ChangePermissionRequest changePermissionRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditChangePermissionRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = changePermissionRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Put<Object>("/tasks/{id}/changepermission", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditChangePermissionRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit change permission request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changePermissionRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EditChangePermissionRequestAsync (Guid id, ChangePermissionRequest changePermissionRequest = null)
        {
             await EditChangePermissionRequestAsyncWithHttpInfo(id, changePermissionRequest);

        }

        /// <summary>
        /// edit change permission request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changePermissionRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> EditChangePermissionRequestAsyncWithHttpInfo (Guid id, ChangePermissionRequest changePermissionRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditChangePermissionRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = changePermissionRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Object>("/tasks/{id}/changepermission", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditChangePermissionRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit change site administrator/contact request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeSiteContactRequest"> (optional)</param>
        /// <returns></returns>
        public void EditChangeSiteContactRequest (Guid id, ChangeSiteContactRequest changeSiteContactRequest = null)
        {
             EditChangeSiteContactRequestWithHttpInfo(id, changeSiteContactRequest);
        }

        /// <summary>
        /// edit change site administrator/contact request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeSiteContactRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> EditChangeSiteContactRequestWithHttpInfo (Guid id, ChangeSiteContactRequest changeSiteContactRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditChangeSiteContactRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = changeSiteContactRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Put<Object>("/tasks/{id}/changesite/adminorcontact", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditChangeSiteContactRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit change site administrator/contact request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeSiteContactRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EditChangeSiteContactRequestAsync (Guid id, ChangeSiteContactRequest changeSiteContactRequest = null)
        {
             await EditChangeSiteContactRequestAsyncWithHttpInfo(id, changeSiteContactRequest);

        }

        /// <summary>
        /// edit change site administrator/contact request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeSiteContactRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> EditChangeSiteContactRequestAsyncWithHttpInfo (Guid id, ChangeSiteContactRequest changeSiteContactRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditChangeSiteContactRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = changeSiteContactRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Object>("/tasks/{id}/changesite/adminorcontact", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditChangeSiteContactRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit change site policy request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeSitePolicyRequest"> (optional)</param>
        /// <returns></returns>
        public void EditChangeSitePolicyRequest (Guid id, ChangeSitePolicyRequest changeSitePolicyRequest = null)
        {
             EditChangeSitePolicyRequestWithHttpInfo(id, changeSitePolicyRequest);
        }

        /// <summary>
        /// edit change site policy request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeSitePolicyRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> EditChangeSitePolicyRequestWithHttpInfo (Guid id, ChangeSitePolicyRequest changeSitePolicyRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditChangeSitePolicyRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = changeSitePolicyRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Put<Object>("/tasks/{id}/changesitepolicy", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditChangeSitePolicyRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit change site policy request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeSitePolicyRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EditChangeSitePolicyRequestAsync (Guid id, ChangeSitePolicyRequest changeSitePolicyRequest = null)
        {
             await EditChangeSitePolicyRequestAsyncWithHttpInfo(id, changeSitePolicyRequest);

        }

        /// <summary>
        /// edit change site policy request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeSitePolicyRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> EditChangeSitePolicyRequestAsyncWithHttpInfo (Guid id, ChangeSitePolicyRequest changeSitePolicyRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditChangeSitePolicyRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = changeSitePolicyRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Object>("/tasks/{id}/changesitepolicy", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditChangeSitePolicyRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit change site quota request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeSiteQuotaRequest"> (optional)</param>
        /// <returns></returns>
        public void EditChangeSiteQuotaRequest (Guid id, ChangeSiteQuotaRequest changeSiteQuotaRequest = null)
        {
             EditChangeSiteQuotaRequestWithHttpInfo(id, changeSiteQuotaRequest);
        }

        /// <summary>
        /// edit change site quota request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeSiteQuotaRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> EditChangeSiteQuotaRequestWithHttpInfo (Guid id, ChangeSiteQuotaRequest changeSiteQuotaRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditChangeSiteQuotaRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = changeSiteQuotaRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Put<Object>("/tasks/{id}/changesitequota", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditChangeSiteQuotaRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit change site quota request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeSiteQuotaRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EditChangeSiteQuotaRequestAsync (Guid id, ChangeSiteQuotaRequest changeSiteQuotaRequest = null)
        {
             await EditChangeSiteQuotaRequestAsyncWithHttpInfo(id, changeSiteQuotaRequest);

        }

        /// <summary>
        /// edit change site quota request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeSiteQuotaRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> EditChangeSiteQuotaRequestAsyncWithHttpInfo (Guid id, ChangeSiteQuotaRequest changeSiteQuotaRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditChangeSiteQuotaRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = changeSiteQuotaRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Object>("/tasks/{id}/changesitequota", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditChangeSiteQuotaRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit change site setting request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeSiteSettingRequest"> (optional)</param>
        /// <returns></returns>
        public void EditChangeSiteSettingRequest (Guid id, ChangeSiteSettingRequest changeSiteSettingRequest = null)
        {
             EditChangeSiteSettingRequestWithHttpInfo(id, changeSiteSettingRequest);
        }

        /// <summary>
        /// edit change site setting request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeSiteSettingRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> EditChangeSiteSettingRequestWithHttpInfo (Guid id, ChangeSiteSettingRequest changeSiteSettingRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditChangeSiteSettingRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = changeSiteSettingRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Put<Object>("/tasks/{id}/changesite/setting", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditChangeSiteSettingRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit change site setting request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeSiteSettingRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EditChangeSiteSettingRequestAsync (Guid id, ChangeSiteSettingRequest changeSiteSettingRequest = null)
        {
             await EditChangeSiteSettingRequestAsyncWithHttpInfo(id, changeSiteSettingRequest);

        }

        /// <summary>
        /// edit change site setting request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeSiteSettingRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> EditChangeSiteSettingRequestAsyncWithHttpInfo (Guid id, ChangeSiteSettingRequest changeSiteSettingRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditChangeSiteSettingRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = changeSiteSettingRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Object>("/tasks/{id}/changesite/setting", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditChangeSiteSettingRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit change web contact request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeWebContactRequest"> (optional)</param>
        /// <returns></returns>
        public void EditChangeWebContactRequest (Guid id, ChangeWebContactRequest changeWebContactRequest = null)
        {
             EditChangeWebContactRequestWithHttpInfo(id, changeWebContactRequest);
        }

        /// <summary>
        /// edit change web contact request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeWebContactRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> EditChangeWebContactRequestWithHttpInfo (Guid id, ChangeWebContactRequest changeWebContactRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditChangeWebContactRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = changeWebContactRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Put<Object>("/tasks/{id}/changewebcontact", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditChangeWebContactRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit change web contact request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeWebContactRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EditChangeWebContactRequestAsync (Guid id, ChangeWebContactRequest changeWebContactRequest = null)
        {
             await EditChangeWebContactRequestAsyncWithHttpInfo(id, changeWebContactRequest);

        }

        /// <summary>
        /// edit change web contact request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeWebContactRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> EditChangeWebContactRequestAsyncWithHttpInfo (Guid id, ChangeWebContactRequest changeWebContactRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditChangeWebContactRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = changeWebContactRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Object>("/tasks/{id}/changewebcontact", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditChangeWebContactRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit change web setting request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeWebSettingRequest"> (optional)</param>
        /// <returns></returns>
        public void EditChangeWebSettingRequest (Guid id, ChangeWebSettingRequest changeWebSettingRequest = null)
        {
             EditChangeWebSettingRequestWithHttpInfo(id, changeWebSettingRequest);
        }

        /// <summary>
        /// edit change web setting request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeWebSettingRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> EditChangeWebSettingRequestWithHttpInfo (Guid id, ChangeWebSettingRequest changeWebSettingRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditChangeWebSettingRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = changeWebSettingRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Put<Object>("/tasks/{id}/changewebsettings", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditChangeWebSettingRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit change web setting request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeWebSettingRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EditChangeWebSettingRequestAsync (Guid id, ChangeWebSettingRequest changeWebSettingRequest = null)
        {
             await EditChangeWebSettingRequestAsyncWithHttpInfo(id, changeWebSettingRequest);

        }

        /// <summary>
        /// edit change web setting request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="changeWebSettingRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> EditChangeWebSettingRequestAsyncWithHttpInfo (Guid id, ChangeWebSettingRequest changeWebSettingRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditChangeWebSettingRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = changeWebSettingRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Object>("/tasks/{id}/changewebsettings", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditChangeWebSettingRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit clone permission request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clonePermissionRequest"> (optional)</param>
        /// <returns></returns>
        public void EditClonePermissionRequest (Guid id, ClonePermissionRequest clonePermissionRequest = null)
        {
             EditClonePermissionRequestWithHttpInfo(id, clonePermissionRequest);
        }

        /// <summary>
        /// edit clone permission request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clonePermissionRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> EditClonePermissionRequestWithHttpInfo (Guid id, ClonePermissionRequest clonePermissionRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditClonePermissionRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = clonePermissionRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Put<Object>("/tasks/{id}/clonepermission", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditClonePermissionRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit clone permission request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clonePermissionRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EditClonePermissionRequestAsync (Guid id, ClonePermissionRequest clonePermissionRequest = null)
        {
             await EditClonePermissionRequestAsyncWithHttpInfo(id, clonePermissionRequest);

        }

        /// <summary>
        /// edit clone permission request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="clonePermissionRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> EditClonePermissionRequestAsyncWithHttpInfo (Guid id, ClonePermissionRequest clonePermissionRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditClonePermissionRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = clonePermissionRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Object>("/tasks/{id}/clonepermission", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditClonePermissionRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit content move request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="contentMoveRequest"> (optional)</param>
        /// <returns></returns>
        public void EditContentMoveRequest (Guid id, ContentMoveRequest contentMoveRequest = null)
        {
             EditContentMoveRequestWithHttpInfo(id, contentMoveRequest);
        }

        /// <summary>
        /// edit content move request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="contentMoveRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> EditContentMoveRequestWithHttpInfo (Guid id, ContentMoveRequest contentMoveRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditContentMoveRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = contentMoveRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Put<Object>("/tasks/{id}/contentmove", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditContentMoveRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit content move request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="contentMoveRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EditContentMoveRequestAsync (Guid id, ContentMoveRequest contentMoveRequest = null)
        {
             await EditContentMoveRequestAsyncWithHttpInfo(id, contentMoveRequest);

        }

        /// <summary>
        /// edit content move request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="contentMoveRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> EditContentMoveRequestAsyncWithHttpInfo (Guid id, ContentMoveRequest contentMoveRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditContentMoveRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = contentMoveRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Object>("/tasks/{id}/contentmove", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditContentMoveRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit create site group request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createGroupRequest"> (optional)</param>
        /// <returns></returns>
        public void EditCreateGroupRequest (Guid id, CreateGroupRequest createGroupRequest = null)
        {
             EditCreateGroupRequestWithHttpInfo(id, createGroupRequest);
        }

        /// <summary>
        /// edit create site group request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createGroupRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> EditCreateGroupRequestWithHttpInfo (Guid id, CreateGroupRequest createGroupRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditCreateGroupRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = createGroupRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Put<Object>("/tasks/{id}/creategroup", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditCreateGroupRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit create site group request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createGroupRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EditCreateGroupRequestAsync (Guid id, CreateGroupRequest createGroupRequest = null)
        {
             await EditCreateGroupRequestAsyncWithHttpInfo(id, createGroupRequest);

        }

        /// <summary>
        /// edit create site group request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createGroupRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> EditCreateGroupRequestAsyncWithHttpInfo (Guid id, CreateGroupRequest createGroupRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditCreateGroupRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = createGroupRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Object>("/tasks/{id}/creategroup", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditCreateGroupRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit create list request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createListRequest"> (optional)</param>
        /// <returns></returns>
        public void EditCreateListRequest (Guid id, CreateListRequest createListRequest = null)
        {
             EditCreateListRequestWithHttpInfo(id, createListRequest);
        }

        /// <summary>
        /// edit create list request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createListRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> EditCreateListRequestWithHttpInfo (Guid id, CreateListRequest createListRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditCreateListRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = createListRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Put<Object>("/tasks/{id}/createlist", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditCreateListRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit create list request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createListRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EditCreateListRequestAsync (Guid id, CreateListRequest createListRequest = null)
        {
             await EditCreateListRequestAsyncWithHttpInfo(id, createListRequest);

        }

        /// <summary>
        /// edit create list request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createListRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> EditCreateListRequestAsyncWithHttpInfo (Guid id, CreateListRequest createListRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditCreateListRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = createListRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Object>("/tasks/{id}/createlist", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditCreateListRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit create site request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createSiteRequest"> (optional)</param>
        /// <returns></returns>
        public void EditCreateSiteRequest (Guid id, CreateSiteRequest createSiteRequest = null)
        {
             EditCreateSiteRequestWithHttpInfo(id, createSiteRequest);
        }

        /// <summary>
        /// edit create site request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createSiteRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> EditCreateSiteRequestWithHttpInfo (Guid id, CreateSiteRequest createSiteRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditCreateSiteRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = createSiteRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Put<Object>("/tasks/{id}/createsite", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditCreateSiteRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit create site request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createSiteRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EditCreateSiteRequestAsync (Guid id, CreateSiteRequest createSiteRequest = null)
        {
             await EditCreateSiteRequestAsyncWithHttpInfo(id, createSiteRequest);

        }

        /// <summary>
        /// edit create site request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createSiteRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> EditCreateSiteRequestAsyncWithHttpInfo (Guid id, CreateSiteRequest createSiteRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditCreateSiteRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = createSiteRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Object>("/tasks/{id}/createsite", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditCreateSiteRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit create web request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createWebRequest"> (optional)</param>
        /// <returns></returns>
        public void EditCreateWebRequest (Guid id, CreateWebRequest createWebRequest = null)
        {
             EditCreateWebRequestWithHttpInfo(id, createWebRequest);
        }

        /// <summary>
        /// edit create web request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createWebRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> EditCreateWebRequestWithHttpInfo (Guid id, CreateWebRequest createWebRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditCreateWebRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = createWebRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Put<Object>("/tasks/{id}/createweb", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditCreateWebRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit create web request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createWebRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EditCreateWebRequestAsync (Guid id, CreateWebRequest createWebRequest = null)
        {
             await EditCreateWebRequestAsyncWithHttpInfo(id, createWebRequest);

        }

        /// <summary>
        /// edit create web request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createWebRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> EditCreateWebRequestAsyncWithHttpInfo (Guid id, CreateWebRequest createWebRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditCreateWebRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = createWebRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Object>("/tasks/{id}/createweb", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditCreateWebRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit custom request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiRequest"> (optional)</param>
        /// <returns></returns>
        public void EditCustomRequest (Guid id, ApiRequest apiRequest = null)
        {
             EditCustomRequestWithHttpInfo(id, apiRequest);
        }

        /// <summary>
        /// edit custom request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> EditCustomRequestWithHttpInfo (Guid id, ApiRequest apiRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditCustomRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = apiRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Put<Object>("/tasks/{id}/custom", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditCustomRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit custom request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EditCustomRequestAsync (Guid id, ApiRequest apiRequest = null)
        {
             await EditCustomRequestAsyncWithHttpInfo(id, apiRequest);

        }

        /// <summary>
        /// edit custom request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> EditCustomRequestAsyncWithHttpInfo (Guid id, ApiRequest apiRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditCustomRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = apiRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Object>("/tasks/{id}/custom", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditCustomRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit delete change group request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="deleteGroupRequest"> (optional)</param>
        /// <returns></returns>
        public void EditDeleteGroupRequest (Guid id, DeleteGroupRequest deleteGroupRequest = null)
        {
             EditDeleteGroupRequestWithHttpInfo(id, deleteGroupRequest);
        }

        /// <summary>
        /// edit delete change group request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="deleteGroupRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> EditDeleteGroupRequestWithHttpInfo (Guid id, DeleteGroupRequest deleteGroupRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditDeleteGroupRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = deleteGroupRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Put<Object>("/tasks/{id}/deletegroup", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditDeleteGroupRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit delete change group request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="deleteGroupRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EditDeleteGroupRequestAsync (Guid id, DeleteGroupRequest deleteGroupRequest = null)
        {
             await EditDeleteGroupRequestAsyncWithHttpInfo(id, deleteGroupRequest);

        }

        /// <summary>
        /// edit delete change group request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="deleteGroupRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> EditDeleteGroupRequestAsyncWithHttpInfo (Guid id, DeleteGroupRequest deleteGroupRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditDeleteGroupRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = deleteGroupRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Object>("/tasks/{id}/deletegroup", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditDeleteGroupRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit delete site request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="deleteSiteRequest"> (optional)</param>
        /// <returns></returns>
        public void EditDeleteSiteRequest (Guid id, DeleteSiteRequest deleteSiteRequest = null)
        {
             EditDeleteSiteRequestWithHttpInfo(id, deleteSiteRequest);
        }

        /// <summary>
        /// edit delete site request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="deleteSiteRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> EditDeleteSiteRequestWithHttpInfo (Guid id, DeleteSiteRequest deleteSiteRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditDeleteSiteRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = deleteSiteRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Put<Object>("/tasks/{id}/deletesite", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditDeleteSiteRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit delete site request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="deleteSiteRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EditDeleteSiteRequestAsync (Guid id, DeleteSiteRequest deleteSiteRequest = null)
        {
             await EditDeleteSiteRequestAsyncWithHttpInfo(id, deleteSiteRequest);

        }

        /// <summary>
        /// edit delete site request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="deleteSiteRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> EditDeleteSiteRequestAsyncWithHttpInfo (Guid id, DeleteSiteRequest deleteSiteRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditDeleteSiteRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = deleteSiteRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Object>("/tasks/{id}/deletesite", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditDeleteSiteRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit delete web request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="deleteWebLifecycleRequest"> (optional)</param>
        /// <returns></returns>
        public void EditDeleteWebRequest (Guid id, DeleteWebLifecycleRequest deleteWebLifecycleRequest = null)
        {
             EditDeleteWebRequestWithHttpInfo(id, deleteWebLifecycleRequest);
        }

        /// <summary>
        /// edit delete web request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="deleteWebLifecycleRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> EditDeleteWebRequestWithHttpInfo (Guid id, DeleteWebLifecycleRequest deleteWebLifecycleRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditDeleteWebRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = deleteWebLifecycleRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Put<Object>("/tasks/{id}/deleteweb", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditDeleteWebRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit delete web request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="deleteWebLifecycleRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EditDeleteWebRequestAsync (Guid id, DeleteWebLifecycleRequest deleteWebLifecycleRequest = null)
        {
             await EditDeleteWebRequestAsyncWithHttpInfo(id, deleteWebLifecycleRequest);

        }

        /// <summary>
        /// edit delete web request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="deleteWebLifecycleRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> EditDeleteWebRequestAsyncWithHttpInfo (Guid id, DeleteWebLifecycleRequest deleteWebLifecycleRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditDeleteWebRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = deleteWebLifecycleRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Object>("/tasks/{id}/deleteweb", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditDeleteWebRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit extend group request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="extendGroupRequest"> (optional)</param>
        /// <returns></returns>
        public void EditExtendGroupRequest (Guid id, ExtendGroupRequest extendGroupRequest = null)
        {
             EditExtendGroupRequestWithHttpInfo(id, extendGroupRequest);
        }

        /// <summary>
        /// edit extend group request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="extendGroupRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> EditExtendGroupRequestWithHttpInfo (Guid id, ExtendGroupRequest extendGroupRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditExtendGroupRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = extendGroupRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Put<Object>("/tasks/{id}/extendgroup", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditExtendGroupRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit extend group request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="extendGroupRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EditExtendGroupRequestAsync (Guid id, ExtendGroupRequest extendGroupRequest = null)
        {
             await EditExtendGroupRequestAsyncWithHttpInfo(id, extendGroupRequest);

        }

        /// <summary>
        /// edit extend group request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="extendGroupRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> EditExtendGroupRequestAsyncWithHttpInfo (Guid id, ExtendGroupRequest extendGroupRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditExtendGroupRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = extendGroupRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Object>("/tasks/{id}/extendgroup", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditExtendGroupRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit extend site request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="extendSiteRequest"> (optional)</param>
        /// <returns></returns>
        public void EditExtendSiteRequest (Guid id, ExtendSiteRequest extendSiteRequest = null)
        {
             EditExtendSiteRequestWithHttpInfo(id, extendSiteRequest);
        }

        /// <summary>
        /// edit extend site request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="extendSiteRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> EditExtendSiteRequestWithHttpInfo (Guid id, ExtendSiteRequest extendSiteRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditExtendSiteRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = extendSiteRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Put<Object>("/tasks/{id}/extendsite", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditExtendSiteRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit extend site request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="extendSiteRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EditExtendSiteRequestAsync (Guid id, ExtendSiteRequest extendSiteRequest = null)
        {
             await EditExtendSiteRequestAsyncWithHttpInfo(id, extendSiteRequest);

        }

        /// <summary>
        /// edit extend site request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="extendSiteRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> EditExtendSiteRequestAsyncWithHttpInfo (Guid id, ExtendSiteRequest extendSiteRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditExtendSiteRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = extendSiteRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Object>("/tasks/{id}/extendsite", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditExtendSiteRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit grant permission request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="grantPermissionRequest"> (optional)</param>
        /// <returns></returns>
        public void EditGrantPermissionRequest (Guid id, GrantPermissionRequest grantPermissionRequest = null)
        {
             EditGrantPermissionRequestWithHttpInfo(id, grantPermissionRequest);
        }

        /// <summary>
        /// edit grant permission request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="grantPermissionRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> EditGrantPermissionRequestWithHttpInfo (Guid id, GrantPermissionRequest grantPermissionRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditGrantPermissionRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = grantPermissionRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Put<Object>("/tasks/{id}/grantpermission", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditGrantPermissionRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit grant permission request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="grantPermissionRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EditGrantPermissionRequestAsync (Guid id, GrantPermissionRequest grantPermissionRequest = null)
        {
             await EditGrantPermissionRequestAsyncWithHttpInfo(id, grantPermissionRequest);

        }

        /// <summary>
        /// edit grant permission request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="grantPermissionRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> EditGrantPermissionRequestAsyncWithHttpInfo (Guid id, GrantPermissionRequest grantPermissionRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditGrantPermissionRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = grantPermissionRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Object>("/tasks/{id}/grantpermission", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditGrantPermissionRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit lock site request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="lockSiteRequest"> (optional)</param>
        /// <returns></returns>
        public void EditLockSiteRequest (Guid id, LockSiteRequest lockSiteRequest = null)
        {
             EditLockSiteRequestWithHttpInfo(id, lockSiteRequest);
        }

        /// <summary>
        /// edit lock site request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="lockSiteRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> EditLockSiteRequestWithHttpInfo (Guid id, LockSiteRequest lockSiteRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditLockSiteRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = lockSiteRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Put<Object>("/tasks/{id}/locksite", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditLockSiteRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit lock site request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="lockSiteRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EditLockSiteRequestAsync (Guid id, LockSiteRequest lockSiteRequest = null)
        {
             await EditLockSiteRequestAsyncWithHttpInfo(id, lockSiteRequest);

        }

        /// <summary>
        /// edit lock site request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="lockSiteRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> EditLockSiteRequestAsyncWithHttpInfo (Guid id, LockSiteRequest lockSiteRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditLockSiteRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = lockSiteRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Object>("/tasks/{id}/locksite", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditLockSiteRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit manage permission request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="managePermissionRequest"> (optional)</param>
        /// <returns></returns>
        public void EditManagePermissionRequest (Guid id, ManagePermissionRequest managePermissionRequest = null)
        {
             EditManagePermissionRequestWithHttpInfo(id, managePermissionRequest);
        }

        /// <summary>
        /// edit manage permission request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="managePermissionRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> EditManagePermissionRequestWithHttpInfo (Guid id, ManagePermissionRequest managePermissionRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditManagePermissionRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = managePermissionRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Put<Object>("/tasks/{id}/managepermission", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditManagePermissionRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit manage permission request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="managePermissionRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EditManagePermissionRequestAsync (Guid id, ManagePermissionRequest managePermissionRequest = null)
        {
             await EditManagePermissionRequestAsyncWithHttpInfo(id, managePermissionRequest);

        }

        /// <summary>
        /// edit manage permission request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="managePermissionRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> EditManagePermissionRequestAsyncWithHttpInfo (Guid id, ManagePermissionRequest managePermissionRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditManagePermissionRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = managePermissionRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Object>("/tasks/{id}/managepermission", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditManagePermissionRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit restore group request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="restoreGroupRequest"> (optional)</param>
        /// <returns></returns>
        public void EditRestoreGroupRequest (Guid id, RestoreGroupRequest restoreGroupRequest = null)
        {
             EditRestoreGroupRequestWithHttpInfo(id, restoreGroupRequest);
        }

        /// <summary>
        /// edit restore group request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="restoreGroupRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> EditRestoreGroupRequestWithHttpInfo (Guid id, RestoreGroupRequest restoreGroupRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditRestoreGroupRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = restoreGroupRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Put<Object>("/tasks/{id}/restoregroup", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditRestoreGroupRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit restore group request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="restoreGroupRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EditRestoreGroupRequestAsync (Guid id, RestoreGroupRequest restoreGroupRequest = null)
        {
             await EditRestoreGroupRequestAsyncWithHttpInfo(id, restoreGroupRequest);

        }

        /// <summary>
        /// edit restore group request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="restoreGroupRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> EditRestoreGroupRequestAsyncWithHttpInfo (Guid id, RestoreGroupRequest restoreGroupRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditRestoreGroupRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = restoreGroupRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Object>("/tasks/{id}/restoregroup", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditRestoreGroupRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit unlock site request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="unlockSiteRequest"> (optional)</param>
        /// <returns></returns>
        public void EditUnLockSiteRequest (Guid id, UnlockSiteRequest unlockSiteRequest = null)
        {
             EditUnLockSiteRequestWithHttpInfo(id, unlockSiteRequest);
        }

        /// <summary>
        /// edit unlock site request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="unlockSiteRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> EditUnLockSiteRequestWithHttpInfo (Guid id, UnlockSiteRequest unlockSiteRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditUnLockSiteRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = unlockSiteRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Put<Object>("/tasks/{id}/unlocksite", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditUnLockSiteRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit unlock site request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="unlockSiteRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EditUnLockSiteRequestAsync (Guid id, UnlockSiteRequest unlockSiteRequest = null)
        {
             await EditUnLockSiteRequestAsyncWithHttpInfo(id, unlockSiteRequest);

        }

        /// <summary>
        /// edit unlock site request in task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="unlockSiteRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> EditUnLockSiteRequestAsyncWithHttpInfo (Guid id, UnlockSiteRequest unlockSiteRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->EditUnLockSiteRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = unlockSiteRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Object>("/tasks/{id}/unlocksite", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditUnLockSiteRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get change permission report 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PermissionActionItemPageResult</returns>
        public PermissionActionItemPageResult GetChangePermissionReport (Guid id, string filter = null, string orderby = null, Object body = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<PermissionActionItemPageResult> localVarResponse = GetChangePermissionReportWithHttpInfo(id, filter, orderby, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get change permission report 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PermissionActionItemPageResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< PermissionActionItemPageResult > GetChangePermissionReportWithHttpInfo (Guid id, string filter = null, string orderby = null, Object body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetChangePermissionReport");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (orderby != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = body;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< PermissionActionItemPageResult >("/tasks/changepermission/{id}/permission", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChangePermissionReport", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get change permission report 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of PermissionActionItemPageResult</returns>
        public async System.Threading.Tasks.Task<PermissionActionItemPageResult> GetChangePermissionReportAsync (Guid id, string filter = null, string orderby = null, Object body = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<PermissionActionItemPageResult> localVarResponse = await GetChangePermissionReportAsyncWithHttpInfo(id, filter, orderby, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get change permission report 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (PermissionActionItemPageResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<PermissionActionItemPageResult>> GetChangePermissionReportAsyncWithHttpInfo (Guid id, string filter = null, string orderby = null, Object body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetChangePermissionReport");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (orderby != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = body;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<PermissionActionItemPageResult>("/tasks/changepermission/{id}/permission", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChangePermissionReport", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get change permission report with specific version 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PermissionActionItemPageResult</returns>
        public PermissionActionItemPageResult GetChangePermissionReportByVersion (Guid id, long version, string filter = null, string orderby = null, Object body = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<PermissionActionItemPageResult> localVarResponse = GetChangePermissionReportByVersionWithHttpInfo(id, version, filter, orderby, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get change permission report with specific version 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PermissionActionItemPageResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< PermissionActionItemPageResult > GetChangePermissionReportByVersionWithHttpInfo (Guid id, long version, string filter = null, string orderby = null, Object body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetChangePermissionReportByVersion");

            // verify the required parameter 'version' is set
            if (version == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'version' when calling TasksApi->GetChangePermissionReportByVersion");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (version != null)
                requestOptions.PathParameters.Add("version", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (orderby != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = body;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< PermissionActionItemPageResult >("/tasks/changepermission/{id}/permission/{version}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChangePermissionReportByVersion", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get change permission report with specific version 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of PermissionActionItemPageResult</returns>
        public async System.Threading.Tasks.Task<PermissionActionItemPageResult> GetChangePermissionReportByVersionAsync (Guid id, long version, string filter = null, string orderby = null, Object body = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<PermissionActionItemPageResult> localVarResponse = await GetChangePermissionReportByVersionAsyncWithHttpInfo(id, version, filter, orderby, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get change permission report with specific version 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (PermissionActionItemPageResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<PermissionActionItemPageResult>> GetChangePermissionReportByVersionAsyncWithHttpInfo (Guid id, long version, string filter = null, string orderby = null, Object body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetChangePermissionReportByVersion");

            // verify the required parameter 'version' is set
            if (version == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'version' when calling TasksApi->GetChangePermissionReportByVersion");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (version != null)
                requestOptions.PathParameters.Add("version", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (orderby != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = body;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<PermissionActionItemPageResult>("/tasks/changepermission/{id}/permission/{version}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChangePermissionReportByVersion", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get change permission report filters 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>DistinctPageResult</returns>
        public DistinctPageResult GetChangePermissionReportFilters (Guid id, string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<DistinctPageResult> localVarResponse = GetChangePermissionReportFiltersWithHttpInfo(id, filter, distinct, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get change permission report filters 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>ApiResponse of DistinctPageResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< DistinctPageResult > GetChangePermissionReportFiltersWithHttpInfo (Guid id, string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetChangePermissionReportFilters");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (distinct != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "distinct", distinct))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (top != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< DistinctPageResult >("/tasks/changepermission/{id}/permission/filters", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChangePermissionReportFilters", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get change permission report filters 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of DistinctPageResult</returns>
        public async System.Threading.Tasks.Task<DistinctPageResult> GetChangePermissionReportFiltersAsync (Guid id, string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<DistinctPageResult> localVarResponse = await GetChangePermissionReportFiltersAsyncWithHttpInfo(id, filter, distinct, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get change permission report filters 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of ApiResponse (DistinctPageResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<DistinctPageResult>> GetChangePermissionReportFiltersAsyncWithHttpInfo (Guid id, string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetChangePermissionReportFilters");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (distinct != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "distinct", distinct))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (top != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<DistinctPageResult>("/tasks/changepermission/{id}/permission/filters", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChangePermissionReportFilters", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get change permission report filters with specific version 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>DistinctPageResult</returns>
        public DistinctPageResult GetChangePermissionReportFiltersByVersion (Guid id, long version, string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<DistinctPageResult> localVarResponse = GetChangePermissionReportFiltersByVersionWithHttpInfo(id, version, filter, distinct, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get change permission report filters with specific version 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>ApiResponse of DistinctPageResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< DistinctPageResult > GetChangePermissionReportFiltersByVersionWithHttpInfo (Guid id, long version, string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetChangePermissionReportFiltersByVersion");

            // verify the required parameter 'version' is set
            if (version == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'version' when calling TasksApi->GetChangePermissionReportFiltersByVersion");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (version != null)
                requestOptions.PathParameters.Add("version", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (distinct != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "distinct", distinct))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (top != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< DistinctPageResult >("/tasks/changepermission/{id}/permission/filters/{version}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChangePermissionReportFiltersByVersion", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get change permission report filters with specific version 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of DistinctPageResult</returns>
        public async System.Threading.Tasks.Task<DistinctPageResult> GetChangePermissionReportFiltersByVersionAsync (Guid id, long version, string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<DistinctPageResult> localVarResponse = await GetChangePermissionReportFiltersByVersionAsyncWithHttpInfo(id, version, filter, distinct, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get change permission report filters with specific version 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of ApiResponse (DistinctPageResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<DistinctPageResult>> GetChangePermissionReportFiltersByVersionAsyncWithHttpInfo (Guid id, long version, string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetChangePermissionReportFiltersByVersion");

            // verify the required parameter 'version' is set
            if (version == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'version' when calling TasksApi->GetChangePermissionReportFiltersByVersion");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (version != null)
                requestOptions.PathParameters.Add("version", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (distinct != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "distinct", distinct))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (top != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<DistinctPageResult>("/tasks/changepermission/{id}/permission/filters/{version}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChangePermissionReportFiltersByVersion", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get change permission report filters for a sharepoint group 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>DistinctPageResult</returns>
        public DistinctPageResult GetChangePermissionReportFiltersForSPGroup (Guid id, Guid groupid, string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<DistinctPageResult> localVarResponse = GetChangePermissionReportFiltersForSPGroupWithHttpInfo(id, groupid, filter, distinct, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get change permission report filters for a sharepoint group 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>ApiResponse of DistinctPageResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< DistinctPageResult > GetChangePermissionReportFiltersForSPGroupWithHttpInfo (Guid id, Guid groupid, string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetChangePermissionReportFiltersForSPGroup");

            // verify the required parameter 'groupid' is set
            if (groupid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'groupid' when calling TasksApi->GetChangePermissionReportFiltersForSPGroup");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (groupid != null)
                requestOptions.PathParameters.Add("groupid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(groupid)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (distinct != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "distinct", distinct))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (top != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< DistinctPageResult >("/tasks/changepermission/{id}/permission/group/{groupid}/filters", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChangePermissionReportFiltersForSPGroup", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get change permission report filters for a sharepoint group 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of DistinctPageResult</returns>
        public async System.Threading.Tasks.Task<DistinctPageResult> GetChangePermissionReportFiltersForSPGroupAsync (Guid id, Guid groupid, string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<DistinctPageResult> localVarResponse = await GetChangePermissionReportFiltersForSPGroupAsyncWithHttpInfo(id, groupid, filter, distinct, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get change permission report filters for a sharepoint group 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of ApiResponse (DistinctPageResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<DistinctPageResult>> GetChangePermissionReportFiltersForSPGroupAsyncWithHttpInfo (Guid id, Guid groupid, string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetChangePermissionReportFiltersForSPGroup");

            // verify the required parameter 'groupid' is set
            if (groupid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'groupid' when calling TasksApi->GetChangePermissionReportFiltersForSPGroup");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (groupid != null)
                requestOptions.PathParameters.Add("groupid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(groupid)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (distinct != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "distinct", distinct))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (top != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<DistinctPageResult>("/tasks/changepermission/{id}/permission/group/{groupid}/filters", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChangePermissionReportFiltersForSPGroup", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get change permission report filters for a sharepoint group with specific version 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>DistinctPageResult</returns>
        public DistinctPageResult GetChangePermissionReportFiltersForSPGroupByVersion (Guid id, Guid groupid, long version, string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<DistinctPageResult> localVarResponse = GetChangePermissionReportFiltersForSPGroupByVersionWithHttpInfo(id, groupid, version, filter, distinct, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get change permission report filters for a sharepoint group with specific version 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>ApiResponse of DistinctPageResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< DistinctPageResult > GetChangePermissionReportFiltersForSPGroupByVersionWithHttpInfo (Guid id, Guid groupid, long version, string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetChangePermissionReportFiltersForSPGroupByVersion");

            // verify the required parameter 'groupid' is set
            if (groupid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'groupid' when calling TasksApi->GetChangePermissionReportFiltersForSPGroupByVersion");

            // verify the required parameter 'version' is set
            if (version == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'version' when calling TasksApi->GetChangePermissionReportFiltersForSPGroupByVersion");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (groupid != null)
                requestOptions.PathParameters.Add("groupid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(groupid)); // path parameter
            if (version != null)
                requestOptions.PathParameters.Add("version", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (distinct != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "distinct", distinct))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (top != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< DistinctPageResult >("/tasks/changepermission/{id}/permission/group/{groupid}/filters/{version}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChangePermissionReportFiltersForSPGroupByVersion", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get change permission report filters for a sharepoint group with specific version 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of DistinctPageResult</returns>
        public async System.Threading.Tasks.Task<DistinctPageResult> GetChangePermissionReportFiltersForSPGroupByVersionAsync (Guid id, Guid groupid, long version, string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<DistinctPageResult> localVarResponse = await GetChangePermissionReportFiltersForSPGroupByVersionAsyncWithHttpInfo(id, groupid, version, filter, distinct, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get change permission report filters for a sharepoint group with specific version 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of ApiResponse (DistinctPageResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<DistinctPageResult>> GetChangePermissionReportFiltersForSPGroupByVersionAsyncWithHttpInfo (Guid id, Guid groupid, long version, string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetChangePermissionReportFiltersForSPGroupByVersion");

            // verify the required parameter 'groupid' is set
            if (groupid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'groupid' when calling TasksApi->GetChangePermissionReportFiltersForSPGroupByVersion");

            // verify the required parameter 'version' is set
            if (version == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'version' when calling TasksApi->GetChangePermissionReportFiltersForSPGroupByVersion");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (groupid != null)
                requestOptions.PathParameters.Add("groupid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(groupid)); // path parameter
            if (version != null)
                requestOptions.PathParameters.Add("version", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (distinct != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "distinct", distinct))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (top != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<DistinctPageResult>("/tasks/changepermission/{id}/permission/group/{groupid}/filters/{version}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChangePermissionReportFiltersForSPGroupByVersion", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get change permission report for a sharepoint group 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PermissionActionItemPageResult</returns>
        public PermissionActionItemPageResult GetChangePermissionReportForSPGroup (Guid id, Guid groupid, string filter = null, string orderby = null, Object body = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<PermissionActionItemPageResult> localVarResponse = GetChangePermissionReportForSPGroupWithHttpInfo(id, groupid, filter, orderby, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get change permission report for a sharepoint group 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PermissionActionItemPageResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< PermissionActionItemPageResult > GetChangePermissionReportForSPGroupWithHttpInfo (Guid id, Guid groupid, string filter = null, string orderby = null, Object body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetChangePermissionReportForSPGroup");

            // verify the required parameter 'groupid' is set
            if (groupid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'groupid' when calling TasksApi->GetChangePermissionReportForSPGroup");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (groupid != null)
                requestOptions.PathParameters.Add("groupid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(groupid)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (orderby != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = body;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< PermissionActionItemPageResult >("/tasks/changepermission/{id}/permission/group/{groupid}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChangePermissionReportForSPGroup", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get change permission report for a sharepoint group 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of PermissionActionItemPageResult</returns>
        public async System.Threading.Tasks.Task<PermissionActionItemPageResult> GetChangePermissionReportForSPGroupAsync (Guid id, Guid groupid, string filter = null, string orderby = null, Object body = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<PermissionActionItemPageResult> localVarResponse = await GetChangePermissionReportForSPGroupAsyncWithHttpInfo(id, groupid, filter, orderby, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get change permission report for a sharepoint group 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (PermissionActionItemPageResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<PermissionActionItemPageResult>> GetChangePermissionReportForSPGroupAsyncWithHttpInfo (Guid id, Guid groupid, string filter = null, string orderby = null, Object body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetChangePermissionReportForSPGroup");

            // verify the required parameter 'groupid' is set
            if (groupid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'groupid' when calling TasksApi->GetChangePermissionReportForSPGroup");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (groupid != null)
                requestOptions.PathParameters.Add("groupid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(groupid)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (orderby != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = body;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<PermissionActionItemPageResult>("/tasks/changepermission/{id}/permission/group/{groupid}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChangePermissionReportForSPGroup", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get change permission report for a sharepoint group with specific version 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PermissionActionItemPageResult</returns>
        public PermissionActionItemPageResult GetChangePermissionReportForSPGroupByVersion (Guid id, long version, Guid groupid, string filter = null, string orderby = null, Object body = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<PermissionActionItemPageResult> localVarResponse = GetChangePermissionReportForSPGroupByVersionWithHttpInfo(id, version, groupid, filter, orderby, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get change permission report for a sharepoint group with specific version 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PermissionActionItemPageResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< PermissionActionItemPageResult > GetChangePermissionReportForSPGroupByVersionWithHttpInfo (Guid id, long version, Guid groupid, string filter = null, string orderby = null, Object body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetChangePermissionReportForSPGroupByVersion");

            // verify the required parameter 'version' is set
            if (version == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'version' when calling TasksApi->GetChangePermissionReportForSPGroupByVersion");

            // verify the required parameter 'groupid' is set
            if (groupid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'groupid' when calling TasksApi->GetChangePermissionReportForSPGroupByVersion");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (version != null)
                requestOptions.PathParameters.Add("version", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (groupid != null)
                requestOptions.PathParameters.Add("groupid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(groupid)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (orderby != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = body;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< PermissionActionItemPageResult >("/tasks/changepermission/{id}/permission/{version}/group/{groupid}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChangePermissionReportForSPGroupByVersion", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get change permission report for a sharepoint group with specific version 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of PermissionActionItemPageResult</returns>
        public async System.Threading.Tasks.Task<PermissionActionItemPageResult> GetChangePermissionReportForSPGroupByVersionAsync (Guid id, long version, Guid groupid, string filter = null, string orderby = null, Object body = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<PermissionActionItemPageResult> localVarResponse = await GetChangePermissionReportForSPGroupByVersionAsyncWithHttpInfo(id, version, groupid, filter, orderby, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get change permission report for a sharepoint group with specific version 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (PermissionActionItemPageResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<PermissionActionItemPageResult>> GetChangePermissionReportForSPGroupByVersionAsyncWithHttpInfo (Guid id, long version, Guid groupid, string filter = null, string orderby = null, Object body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetChangePermissionReportForSPGroupByVersion");

            // verify the required parameter 'version' is set
            if (version == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'version' when calling TasksApi->GetChangePermissionReportForSPGroupByVersion");

            // verify the required parameter 'groupid' is set
            if (groupid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'groupid' when calling TasksApi->GetChangePermissionReportForSPGroupByVersion");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (version != null)
                requestOptions.PathParameters.Add("version", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (groupid != null)
                requestOptions.PathParameters.Add("groupid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(groupid)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (orderby != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = body;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<PermissionActionItemPageResult>("/tasks/changepermission/{id}/permission/{version}/group/{groupid}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChangePermissionReportForSPGroupByVersion", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get change permission report permission levels 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>List&lt;PermissionLevel&gt;</returns>
        public List<PermissionLevel> GetChangePermissionReportPermissionLevels (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<List<PermissionLevel>> localVarResponse = GetChangePermissionReportPermissionLevelsWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get change permission report permission levels 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of List&lt;PermissionLevel&gt;</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< List<PermissionLevel> > GetChangePermissionReportPermissionLevelsWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetChangePermissionReportPermissionLevels");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< List<PermissionLevel> >("/tasks/changepermission/{id}/permissionlevels", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChangePermissionReportPermissionLevels", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get change permission report permission levels 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of List&lt;PermissionLevel&gt;</returns>
        public async System.Threading.Tasks.Task<List<PermissionLevel>> GetChangePermissionReportPermissionLevelsAsync (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<List<PermissionLevel>> localVarResponse = await GetChangePermissionReportPermissionLevelsAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get change permission report permission levels 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (List&lt;PermissionLevel&gt;)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<List<PermissionLevel>>> GetChangePermissionReportPermissionLevelsAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetChangePermissionReportPermissionLevels");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<PermissionLevel>>("/tasks/changepermission/{id}/permissionlevels", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChangePermissionReportPermissionLevels", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get change permission report properties 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>RecertificationReportProperties</returns>
        public RecertificationReportProperties GetChangePermissionReportProperties (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<RecertificationReportProperties> localVarResponse = GetChangePermissionReportPropertiesWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get change permission report properties 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of RecertificationReportProperties</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< RecertificationReportProperties > GetChangePermissionReportPropertiesWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetChangePermissionReportProperties");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< RecertificationReportProperties >("/tasks/changepermission/{id}/properties", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChangePermissionReportProperties", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get change permission report properties 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of RecertificationReportProperties</returns>
        public async System.Threading.Tasks.Task<RecertificationReportProperties> GetChangePermissionReportPropertiesAsync (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<RecertificationReportProperties> localVarResponse = await GetChangePermissionReportPropertiesAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get change permission report properties 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (RecertificationReportProperties)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<RecertificationReportProperties>> GetChangePermissionReportPropertiesAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetChangePermissionReportProperties");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<RecertificationReportProperties>("/tasks/changepermission/{id}/properties", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChangePermissionReportProperties", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get clone permission report 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, displayName, identityName, objectUrl, objectTitle, objectType, accountType, sharePointGroup, permissionLevels, action (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, displayName, identityName, objectUrl, objectTitle, objectType, accountType, sharePointGroup, permissionLevels, action (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ClonePermissionSecuritySearchResultPageResult</returns>
        public ClonePermissionSecuritySearchResultPageResult GetClonePermissionReport (Guid id, string filter = null, string orderby = null, Object body = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ClonePermissionSecuritySearchResultPageResult> localVarResponse = GetClonePermissionReportWithHttpInfo(id, filter, orderby, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get clone permission report 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, displayName, identityName, objectUrl, objectTitle, objectType, accountType, sharePointGroup, permissionLevels, action (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, displayName, identityName, objectUrl, objectTitle, objectType, accountType, sharePointGroup, permissionLevels, action (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ClonePermissionSecuritySearchResultPageResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< ClonePermissionSecuritySearchResultPageResult > GetClonePermissionReportWithHttpInfo (Guid id, string filter = null, string orderby = null, Object body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetClonePermissionReport");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (orderby != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = body;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< ClonePermissionSecuritySearchResultPageResult >("/tasks/clonepermission/{id}/permission", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetClonePermissionReport", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get clone permission report 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, displayName, identityName, objectUrl, objectTitle, objectType, accountType, sharePointGroup, permissionLevels, action (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, displayName, identityName, objectUrl, objectTitle, objectType, accountType, sharePointGroup, permissionLevels, action (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ClonePermissionSecuritySearchResultPageResult</returns>
        public async System.Threading.Tasks.Task<ClonePermissionSecuritySearchResultPageResult> GetClonePermissionReportAsync (Guid id, string filter = null, string orderby = null, Object body = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ClonePermissionSecuritySearchResultPageResult> localVarResponse = await GetClonePermissionReportAsyncWithHttpInfo(id, filter, orderby, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get clone permission report 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, displayName, identityName, objectUrl, objectTitle, objectType, accountType, sharePointGroup, permissionLevels, action (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, displayName, identityName, objectUrl, objectTitle, objectType, accountType, sharePointGroup, permissionLevels, action (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ClonePermissionSecuritySearchResultPageResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<ClonePermissionSecuritySearchResultPageResult>> GetClonePermissionReportAsyncWithHttpInfo (Guid id, string filter = null, string orderby = null, Object body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetClonePermissionReport");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (orderby != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = body;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ClonePermissionSecuritySearchResultPageResult>("/tasks/clonepermission/{id}/permission", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetClonePermissionReport", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get clone permission report properties 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ClonePermissionReportProperty</returns>
        public ClonePermissionReportProperty GetClonePermissionReportProperties (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ClonePermissionReportProperty> localVarResponse = GetClonePermissionReportPropertiesWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get clone permission report properties 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ClonePermissionReportProperty</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< ClonePermissionReportProperty > GetClonePermissionReportPropertiesWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetClonePermissionReportProperties");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< ClonePermissionReportProperty >("/tasks/clonepermission/{id}/properties", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetClonePermissionReportProperties", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get clone permission report properties 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ClonePermissionReportProperty</returns>
        public async System.Threading.Tasks.Task<ClonePermissionReportProperty> GetClonePermissionReportPropertiesAsync (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ClonePermissionReportProperty> localVarResponse = await GetClonePermissionReportPropertiesAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get clone permission report properties 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ClonePermissionReportProperty)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<ClonePermissionReportProperty>> GetClonePermissionReportPropertiesAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetClonePermissionReportProperties");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ClonePermissionReportProperty>("/tasks/clonepermission/{id}/properties", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetClonePermissionReportProperties", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get manual archive report 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; rowKey, partitionKey, siteId, url, nodeType (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; rowKey, partitionKey, siteId, url, nodeType (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ManuallyArchiveRecordModelPageResult</returns>
        public ManuallyArchiveRecordModelPageResult GetGetManualArchiveReport (Guid id, string filter = null, string orderby = null, Object body = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ManuallyArchiveRecordModelPageResult> localVarResponse = GetGetManualArchiveReportWithHttpInfo(id, filter, orderby, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get manual archive report 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; rowKey, partitionKey, siteId, url, nodeType (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; rowKey, partitionKey, siteId, url, nodeType (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ManuallyArchiveRecordModelPageResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< ManuallyArchiveRecordModelPageResult > GetGetManualArchiveReportWithHttpInfo (Guid id, string filter = null, string orderby = null, Object body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetGetManualArchiveReport");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (orderby != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = body;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< ManuallyArchiveRecordModelPageResult >("/tasks/{id}/manualarchive", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetGetManualArchiveReport", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get manual archive report 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; rowKey, partitionKey, siteId, url, nodeType (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; rowKey, partitionKey, siteId, url, nodeType (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ManuallyArchiveRecordModelPageResult</returns>
        public async System.Threading.Tasks.Task<ManuallyArchiveRecordModelPageResult> GetGetManualArchiveReportAsync (Guid id, string filter = null, string orderby = null, Object body = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ManuallyArchiveRecordModelPageResult> localVarResponse = await GetGetManualArchiveReportAsyncWithHttpInfo(id, filter, orderby, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get manual archive report 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; rowKey, partitionKey, siteId, url, nodeType (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; rowKey, partitionKey, siteId, url, nodeType (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ManuallyArchiveRecordModelPageResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<ManuallyArchiveRecordModelPageResult>> GetGetManualArchiveReportAsyncWithHttpInfo (Guid id, string filter = null, string orderby = null, Object body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetGetManualArchiveReport");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (orderby != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = body;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ManuallyArchiveRecordModelPageResult>("/tasks/{id}/manualarchive", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetGetManualArchiveReport", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get manual archive report filters 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; rowKey, partitionKey, siteId, url, nodeType (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; rowKey, partitionKey, siteId, url, nodeType (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>DistinctPageResult</returns>
        public DistinctPageResult GetGetManualArchiveReportFilters (Guid id, string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<DistinctPageResult> localVarResponse = GetGetManualArchiveReportFiltersWithHttpInfo(id, filter, distinct, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get manual archive report filters 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; rowKey, partitionKey, siteId, url, nodeType (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; rowKey, partitionKey, siteId, url, nodeType (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>ApiResponse of DistinctPageResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< DistinctPageResult > GetGetManualArchiveReportFiltersWithHttpInfo (Guid id, string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetGetManualArchiveReportFilters");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (distinct != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "distinct", distinct))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (top != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< DistinctPageResult >("/tasks/{id}/manualarchive/filters", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetGetManualArchiveReportFilters", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get manual archive report filters 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; rowKey, partitionKey, siteId, url, nodeType (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; rowKey, partitionKey, siteId, url, nodeType (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of DistinctPageResult</returns>
        public async System.Threading.Tasks.Task<DistinctPageResult> GetGetManualArchiveReportFiltersAsync (Guid id, string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<DistinctPageResult> localVarResponse = await GetGetManualArchiveReportFiltersAsyncWithHttpInfo(id, filter, distinct, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get manual archive report filters 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; rowKey, partitionKey, siteId, url, nodeType (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; rowKey, partitionKey, siteId, url, nodeType (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of ApiResponse (DistinctPageResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<DistinctPageResult>> GetGetManualArchiveReportFiltersAsyncWithHttpInfo (Guid id, string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetGetManualArchiveReportFilters");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (distinct != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "distinct", distinct))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (top != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<DistinctPageResult>("/tasks/{id}/manualarchive/filters", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetGetManualArchiveReportFilters", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get group membership recertification report 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>MembershipRecertificationItemPageResult</returns>
        public MembershipRecertificationItemPageResult GetGroupMembershipRecertificationReport (Guid id, string filter = null, string orderby = null, Object body = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<MembershipRecertificationItemPageResult> localVarResponse = GetGroupMembershipRecertificationReportWithHttpInfo(id, filter, orderby, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get group membership recertification report 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of MembershipRecertificationItemPageResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< MembershipRecertificationItemPageResult > GetGroupMembershipRecertificationReportWithHttpInfo (Guid id, string filter = null, string orderby = null, Object body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetGroupMembershipRecertificationReport");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (orderby != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = body;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< MembershipRecertificationItemPageResult >("/tasks/{id}/group/recertification/membership", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetGroupMembershipRecertificationReport", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get group membership recertification report 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of MembershipRecertificationItemPageResult</returns>
        public async System.Threading.Tasks.Task<MembershipRecertificationItemPageResult> GetGroupMembershipRecertificationReportAsync (Guid id, string filter = null, string orderby = null, Object body = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<MembershipRecertificationItemPageResult> localVarResponse = await GetGroupMembershipRecertificationReportAsyncWithHttpInfo(id, filter, orderby, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get group membership recertification report 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (MembershipRecertificationItemPageResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<MembershipRecertificationItemPageResult>> GetGroupMembershipRecertificationReportAsyncWithHttpInfo (Guid id, string filter = null, string orderby = null, Object body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetGroupMembershipRecertificationReport");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (orderby != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = body;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<MembershipRecertificationItemPageResult>("/tasks/{id}/group/recertification/membership", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetGroupMembershipRecertificationReport", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get group membership recertification report by version 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>MembershipRecertificationItemPageResult</returns>
        public MembershipRecertificationItemPageResult GetGroupMembershipRecertificationReportByVersion (Guid id, int version, string filter = null, string orderby = null, Object body = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<MembershipRecertificationItemPageResult> localVarResponse = GetGroupMembershipRecertificationReportByVersionWithHttpInfo(id, version, filter, orderby, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get group membership recertification report by version 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of MembershipRecertificationItemPageResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< MembershipRecertificationItemPageResult > GetGroupMembershipRecertificationReportByVersionWithHttpInfo (Guid id, int version, string filter = null, string orderby = null, Object body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetGroupMembershipRecertificationReportByVersion");

            // verify the required parameter 'version' is set
            if (version == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'version' when calling TasksApi->GetGroupMembershipRecertificationReportByVersion");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (version != null)
                requestOptions.PathParameters.Add("version", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (orderby != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = body;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< MembershipRecertificationItemPageResult >("/tasks/{id}/group/recertification/membership/{version}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetGroupMembershipRecertificationReportByVersion", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get group membership recertification report by version 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of MembershipRecertificationItemPageResult</returns>
        public async System.Threading.Tasks.Task<MembershipRecertificationItemPageResult> GetGroupMembershipRecertificationReportByVersionAsync (Guid id, int version, string filter = null, string orderby = null, Object body = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<MembershipRecertificationItemPageResult> localVarResponse = await GetGroupMembershipRecertificationReportByVersionAsyncWithHttpInfo(id, version, filter, orderby, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get group membership recertification report by version 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (MembershipRecertificationItemPageResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<MembershipRecertificationItemPageResult>> GetGroupMembershipRecertificationReportByVersionAsyncWithHttpInfo (Guid id, int version, string filter = null, string orderby = null, Object body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetGroupMembershipRecertificationReportByVersion");

            // verify the required parameter 'version' is set
            if (version == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'version' when calling TasksApi->GetGroupMembershipRecertificationReportByVersion");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (version != null)
                requestOptions.PathParameters.Add("version", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (orderby != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = body;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<MembershipRecertificationItemPageResult>("/tasks/{id}/group/recertification/membership/{version}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetGroupMembershipRecertificationReportByVersion", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get group membership recertification report filters 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>DistinctPageResult</returns>
        public DistinctPageResult GetGroupMembershipRecertificationReportFilters (Guid id, string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<DistinctPageResult> localVarResponse = GetGroupMembershipRecertificationReportFiltersWithHttpInfo(id, filter, distinct, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get group membership recertification report filters 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>ApiResponse of DistinctPageResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< DistinctPageResult > GetGroupMembershipRecertificationReportFiltersWithHttpInfo (Guid id, string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetGroupMembershipRecertificationReportFilters");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (distinct != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "distinct", distinct))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (top != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< DistinctPageResult >("/tasks/{id}/group/recertification/membership/filters", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetGroupMembershipRecertificationReportFilters", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get group membership recertification report filters 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of DistinctPageResult</returns>
        public async System.Threading.Tasks.Task<DistinctPageResult> GetGroupMembershipRecertificationReportFiltersAsync (Guid id, string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<DistinctPageResult> localVarResponse = await GetGroupMembershipRecertificationReportFiltersAsyncWithHttpInfo(id, filter, distinct, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get group membership recertification report filters 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of ApiResponse (DistinctPageResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<DistinctPageResult>> GetGroupMembershipRecertificationReportFiltersAsyncWithHttpInfo (Guid id, string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetGroupMembershipRecertificationReportFilters");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (distinct != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "distinct", distinct))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (top != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<DistinctPageResult>("/tasks/{id}/group/recertification/membership/filters", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetGroupMembershipRecertificationReportFilters", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get group membership recertification report filters by version 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>DistinctPageResult</returns>
        public DistinctPageResult GetGroupMembershipRecertificationReportFiltersByVersion (Guid id, int version, string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<DistinctPageResult> localVarResponse = GetGroupMembershipRecertificationReportFiltersByVersionWithHttpInfo(id, version, filter, distinct, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get group membership recertification report filters by version 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>ApiResponse of DistinctPageResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< DistinctPageResult > GetGroupMembershipRecertificationReportFiltersByVersionWithHttpInfo (Guid id, int version, string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetGroupMembershipRecertificationReportFiltersByVersion");

            // verify the required parameter 'version' is set
            if (version == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'version' when calling TasksApi->GetGroupMembershipRecertificationReportFiltersByVersion");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (version != null)
                requestOptions.PathParameters.Add("version", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (distinct != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "distinct", distinct))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (top != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< DistinctPageResult >("/tasks/{id}/group/recertification/membership/filters/{version}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetGroupMembershipRecertificationReportFiltersByVersion", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get group membership recertification report filters by version 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of DistinctPageResult</returns>
        public async System.Threading.Tasks.Task<DistinctPageResult> GetGroupMembershipRecertificationReportFiltersByVersionAsync (Guid id, int version, string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<DistinctPageResult> localVarResponse = await GetGroupMembershipRecertificationReportFiltersByVersionAsyncWithHttpInfo(id, version, filter, distinct, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get group membership recertification report filters by version 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of ApiResponse (DistinctPageResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<DistinctPageResult>> GetGroupMembershipRecertificationReportFiltersByVersionAsyncWithHttpInfo (Guid id, int version, string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetGroupMembershipRecertificationReportFiltersByVersion");

            // verify the required parameter 'version' is set
            if (version == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'version' when calling TasksApi->GetGroupMembershipRecertificationReportFiltersByVersion");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (version != null)
                requestOptions.PathParameters.Add("version", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (distinct != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "distinct", distinct))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (top != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<DistinctPageResult>("/tasks/{id}/group/recertification/membership/filters/{version}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetGroupMembershipRecertificationReportFiltersByVersion", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get group membership recertification report properties 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>MembershipRecertificationReportProperties</returns>
        public MembershipRecertificationReportProperties GetGroupMembershipRecertificationReportProperties (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<MembershipRecertificationReportProperties> localVarResponse = GetGroupMembershipRecertificationReportPropertiesWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get group membership recertification report properties 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of MembershipRecertificationReportProperties</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< MembershipRecertificationReportProperties > GetGroupMembershipRecertificationReportPropertiesWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetGroupMembershipRecertificationReportProperties");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< MembershipRecertificationReportProperties >("/tasks/{id}/group/recertification/membership/properties", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetGroupMembershipRecertificationReportProperties", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get group membership recertification report properties 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of MembershipRecertificationReportProperties</returns>
        public async System.Threading.Tasks.Task<MembershipRecertificationReportProperties> GetGroupMembershipRecertificationReportPropertiesAsync (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<MembershipRecertificationReportProperties> localVarResponse = await GetGroupMembershipRecertificationReportPropertiesAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get group membership recertification report properties 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (MembershipRecertificationReportProperties)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<MembershipRecertificationReportProperties>> GetGroupMembershipRecertificationReportPropertiesAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetGroupMembershipRecertificationReportProperties");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<MembershipRecertificationReportProperties>("/tasks/{id}/group/recertification/membership/properties", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetGroupMembershipRecertificationReportProperties", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get group permission recertification report 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>GroupPermissionActionItemPageResult</returns>
        public GroupPermissionActionItemPageResult GetGroupPermissionRecertificationReport (Guid id, string filter = null, string orderby = null, Object body = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<GroupPermissionActionItemPageResult> localVarResponse = GetGroupPermissionRecertificationReportWithHttpInfo(id, filter, orderby, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get group permission recertification report 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of GroupPermissionActionItemPageResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< GroupPermissionActionItemPageResult > GetGroupPermissionRecertificationReportWithHttpInfo (Guid id, string filter = null, string orderby = null, Object body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetGroupPermissionRecertificationReport");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (orderby != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = body;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< GroupPermissionActionItemPageResult >("/tasks/{id}/group/recertification/permission", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetGroupPermissionRecertificationReport", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get group permission recertification report 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of GroupPermissionActionItemPageResult</returns>
        public async System.Threading.Tasks.Task<GroupPermissionActionItemPageResult> GetGroupPermissionRecertificationReportAsync (Guid id, string filter = null, string orderby = null, Object body = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<GroupPermissionActionItemPageResult> localVarResponse = await GetGroupPermissionRecertificationReportAsyncWithHttpInfo(id, filter, orderby, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get group permission recertification report 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (GroupPermissionActionItemPageResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<GroupPermissionActionItemPageResult>> GetGroupPermissionRecertificationReportAsyncWithHttpInfo (Guid id, string filter = null, string orderby = null, Object body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetGroupPermissionRecertificationReport");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (orderby != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = body;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<GroupPermissionActionItemPageResult>("/tasks/{id}/group/recertification/permission", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetGroupPermissionRecertificationReport", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get group permission recertification report by version 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>GroupPermissionActionItemPageResult</returns>
        public GroupPermissionActionItemPageResult GetGroupPermissionRecertificationReportByVersion (Guid id, int version, string filter = null, string orderby = null, Object body = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<GroupPermissionActionItemPageResult> localVarResponse = GetGroupPermissionRecertificationReportByVersionWithHttpInfo(id, version, filter, orderby, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get group permission recertification report by version 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of GroupPermissionActionItemPageResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< GroupPermissionActionItemPageResult > GetGroupPermissionRecertificationReportByVersionWithHttpInfo (Guid id, int version, string filter = null, string orderby = null, Object body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetGroupPermissionRecertificationReportByVersion");

            // verify the required parameter 'version' is set
            if (version == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'version' when calling TasksApi->GetGroupPermissionRecertificationReportByVersion");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (version != null)
                requestOptions.PathParameters.Add("version", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (orderby != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = body;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< GroupPermissionActionItemPageResult >("/tasks/{id}/group/recertification/permission/{version}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetGroupPermissionRecertificationReportByVersion", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get group permission recertification report by version 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of GroupPermissionActionItemPageResult</returns>
        public async System.Threading.Tasks.Task<GroupPermissionActionItemPageResult> GetGroupPermissionRecertificationReportByVersionAsync (Guid id, int version, string filter = null, string orderby = null, Object body = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<GroupPermissionActionItemPageResult> localVarResponse = await GetGroupPermissionRecertificationReportByVersionAsyncWithHttpInfo(id, version, filter, orderby, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get group permission recertification report by version 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (GroupPermissionActionItemPageResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<GroupPermissionActionItemPageResult>> GetGroupPermissionRecertificationReportByVersionAsyncWithHttpInfo (Guid id, int version, string filter = null, string orderby = null, Object body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetGroupPermissionRecertificationReportByVersion");

            // verify the required parameter 'version' is set
            if (version == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'version' when calling TasksApi->GetGroupPermissionRecertificationReportByVersion");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (version != null)
                requestOptions.PathParameters.Add("version", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (orderby != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = body;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<GroupPermissionActionItemPageResult>("/tasks/{id}/group/recertification/permission/{version}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetGroupPermissionRecertificationReportByVersion", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get group permission recertification report filters 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>DistinctPageResult</returns>
        public DistinctPageResult GetGroupPermissionRecertificationReportFilters (Guid id, string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<DistinctPageResult> localVarResponse = GetGroupPermissionRecertificationReportFiltersWithHttpInfo(id, filter, distinct, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get group permission recertification report filters 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>ApiResponse of DistinctPageResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< DistinctPageResult > GetGroupPermissionRecertificationReportFiltersWithHttpInfo (Guid id, string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetGroupPermissionRecertificationReportFilters");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (distinct != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "distinct", distinct))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (top != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< DistinctPageResult >("/tasks/{id}/group/recertification/permission/filters", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetGroupPermissionRecertificationReportFilters", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get group permission recertification report filters 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of DistinctPageResult</returns>
        public async System.Threading.Tasks.Task<DistinctPageResult> GetGroupPermissionRecertificationReportFiltersAsync (Guid id, string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<DistinctPageResult> localVarResponse = await GetGroupPermissionRecertificationReportFiltersAsyncWithHttpInfo(id, filter, distinct, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get group permission recertification report filters 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of ApiResponse (DistinctPageResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<DistinctPageResult>> GetGroupPermissionRecertificationReportFiltersAsyncWithHttpInfo (Guid id, string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetGroupPermissionRecertificationReportFilters");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (distinct != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "distinct", distinct))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (top != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<DistinctPageResult>("/tasks/{id}/group/recertification/permission/filters", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetGroupPermissionRecertificationReportFilters", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get group permission recertification report filters for sharepoint group 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>DistinctPageResult</returns>
        public DistinctPageResult GetGroupPermissionRecertificationReportFiltersForSPGroup (Guid id, Guid groupid, string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<DistinctPageResult> localVarResponse = GetGroupPermissionRecertificationReportFiltersForSPGroupWithHttpInfo(id, groupid, filter, distinct, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get group permission recertification report filters for sharepoint group 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>ApiResponse of DistinctPageResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< DistinctPageResult > GetGroupPermissionRecertificationReportFiltersForSPGroupWithHttpInfo (Guid id, Guid groupid, string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetGroupPermissionRecertificationReportFiltersForSPGroup");

            // verify the required parameter 'groupid' is set
            if (groupid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'groupid' when calling TasksApi->GetGroupPermissionRecertificationReportFiltersForSPGroup");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (groupid != null)
                requestOptions.PathParameters.Add("groupid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(groupid)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (distinct != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "distinct", distinct))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (top != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< DistinctPageResult >("/tasks/{id}/group/recertification/permission/group/{groupid}/filters", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetGroupPermissionRecertificationReportFiltersForSPGroup", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get group permission recertification report filters for sharepoint group 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of DistinctPageResult</returns>
        public async System.Threading.Tasks.Task<DistinctPageResult> GetGroupPermissionRecertificationReportFiltersForSPGroupAsync (Guid id, Guid groupid, string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<DistinctPageResult> localVarResponse = await GetGroupPermissionRecertificationReportFiltersForSPGroupAsyncWithHttpInfo(id, groupid, filter, distinct, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get group permission recertification report filters for sharepoint group 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of ApiResponse (DistinctPageResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<DistinctPageResult>> GetGroupPermissionRecertificationReportFiltersForSPGroupAsyncWithHttpInfo (Guid id, Guid groupid, string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetGroupPermissionRecertificationReportFiltersForSPGroup");

            // verify the required parameter 'groupid' is set
            if (groupid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'groupid' when calling TasksApi->GetGroupPermissionRecertificationReportFiltersForSPGroup");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (groupid != null)
                requestOptions.PathParameters.Add("groupid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(groupid)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (distinct != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "distinct", distinct))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (top != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<DistinctPageResult>("/tasks/{id}/group/recertification/permission/group/{groupid}/filters", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetGroupPermissionRecertificationReportFiltersForSPGroup", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get group permission recertification report for sharepoint group 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>GroupPermissionActionItemPageResult</returns>
        public GroupPermissionActionItemPageResult GetGroupPermissionRecertificationReportForSPGroup (Guid id, Guid groupid, string filter = null, string orderby = null, Object body = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<GroupPermissionActionItemPageResult> localVarResponse = GetGroupPermissionRecertificationReportForSPGroupWithHttpInfo(id, groupid, filter, orderby, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get group permission recertification report for sharepoint group 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of GroupPermissionActionItemPageResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< GroupPermissionActionItemPageResult > GetGroupPermissionRecertificationReportForSPGroupWithHttpInfo (Guid id, Guid groupid, string filter = null, string orderby = null, Object body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetGroupPermissionRecertificationReportForSPGroup");

            // verify the required parameter 'groupid' is set
            if (groupid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'groupid' when calling TasksApi->GetGroupPermissionRecertificationReportForSPGroup");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (groupid != null)
                requestOptions.PathParameters.Add("groupid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(groupid)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (orderby != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = body;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< GroupPermissionActionItemPageResult >("/tasks/{id}/group/recertification/permission/group/{groupid}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetGroupPermissionRecertificationReportForSPGroup", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get group permission recertification report for sharepoint group 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of GroupPermissionActionItemPageResult</returns>
        public async System.Threading.Tasks.Task<GroupPermissionActionItemPageResult> GetGroupPermissionRecertificationReportForSPGroupAsync (Guid id, Guid groupid, string filter = null, string orderby = null, Object body = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<GroupPermissionActionItemPageResult> localVarResponse = await GetGroupPermissionRecertificationReportForSPGroupAsyncWithHttpInfo(id, groupid, filter, orderby, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get group permission recertification report for sharepoint group 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (GroupPermissionActionItemPageResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<GroupPermissionActionItemPageResult>> GetGroupPermissionRecertificationReportForSPGroupAsyncWithHttpInfo (Guid id, Guid groupid, string filter = null, string orderby = null, Object body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetGroupPermissionRecertificationReportForSPGroup");

            // verify the required parameter 'groupid' is set
            if (groupid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'groupid' when calling TasksApi->GetGroupPermissionRecertificationReportForSPGroup");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (groupid != null)
                requestOptions.PathParameters.Add("groupid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(groupid)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (orderby != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = body;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<GroupPermissionActionItemPageResult>("/tasks/{id}/group/recertification/permission/group/{groupid}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetGroupPermissionRecertificationReportForSPGroup", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get group permission recertification report properties 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>RecertificationReportProperties</returns>
        public RecertificationReportProperties GetGroupPermissionRecertificationReportProperties (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<RecertificationReportProperties> localVarResponse = GetGroupPermissionRecertificationReportPropertiesWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get group permission recertification report properties 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of RecertificationReportProperties</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< RecertificationReportProperties > GetGroupPermissionRecertificationReportPropertiesWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetGroupPermissionRecertificationReportProperties");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< RecertificationReportProperties >("/tasks/{id}/group/recertification/permission/properties", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetGroupPermissionRecertificationReportProperties", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get group permission recertification report properties 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of RecertificationReportProperties</returns>
        public async System.Threading.Tasks.Task<RecertificationReportProperties> GetGroupPermissionRecertificationReportPropertiesAsync (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<RecertificationReportProperties> localVarResponse = await GetGroupPermissionRecertificationReportPropertiesAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get group permission recertification report properties 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (RecertificationReportProperties)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<RecertificationReportProperties>> GetGroupPermissionRecertificationReportPropertiesAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetGroupPermissionRecertificationReportProperties");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<RecertificationReportProperties>("/tasks/{id}/group/recertification/permission/properties", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetGroupPermissionRecertificationReportProperties", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get my task filters 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isconfirmtask"> (optional, default to false)</param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, title, requester, requestTicketNumber, requesterDisplayName, dueDate, serviceType, createdTime, taskType, status (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, title, requester, requestTicketNumber, requesterDisplayName, dueDate, serviceType, createdTime, taskType, status (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>DistinctPageResult</returns>
        public DistinctPageResult GetMyTaskFilters (bool? isconfirmtask = null, string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<DistinctPageResult> localVarResponse = GetMyTaskFiltersWithHttpInfo(isconfirmtask, filter, distinct, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get my task filters 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isconfirmtask"> (optional, default to false)</param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, title, requester, requestTicketNumber, requesterDisplayName, dueDate, serviceType, createdTime, taskType, status (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, title, requester, requestTicketNumber, requesterDisplayName, dueDate, serviceType, createdTime, taskType, status (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>ApiResponse of DistinctPageResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< DistinctPageResult > GetMyTaskFiltersWithHttpInfo (bool? isconfirmtask = null, string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (isconfirmtask != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "isconfirmtask", isconfirmtask))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (distinct != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "distinct", distinct))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (top != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< DistinctPageResult >("/tasks/my/filters", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetMyTaskFilters", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get my task filters 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isconfirmtask"> (optional, default to false)</param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, title, requester, requestTicketNumber, requesterDisplayName, dueDate, serviceType, createdTime, taskType, status (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, title, requester, requestTicketNumber, requesterDisplayName, dueDate, serviceType, createdTime, taskType, status (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of DistinctPageResult</returns>
        public async System.Threading.Tasks.Task<DistinctPageResult> GetMyTaskFiltersAsync (bool? isconfirmtask = null, string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<DistinctPageResult> localVarResponse = await GetMyTaskFiltersAsyncWithHttpInfo(isconfirmtask, filter, distinct, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get my task filters 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isconfirmtask"> (optional, default to false)</param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, title, requester, requestTicketNumber, requesterDisplayName, dueDate, serviceType, createdTime, taskType, status (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, title, requester, requestTicketNumber, requesterDisplayName, dueDate, serviceType, createdTime, taskType, status (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of ApiResponse (DistinctPageResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<DistinctPageResult>> GetMyTaskFiltersAsyncWithHttpInfo (bool? isconfirmtask = null, string filter = null, string distinct = null, int? top = null, int? skip = null)
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (isconfirmtask != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "isconfirmtask", isconfirmtask))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (distinct != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "distinct", distinct))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (top != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<DistinctPageResult>("/tasks/my/filters", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetMyTaskFilters", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get my tasks 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isconfirmtask"> (optional, default to false)</param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, title, requester, requestTicketNumber, requesterDisplayName, dueDate, serviceType, createdTime, taskType, status (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, title, requester, requestTicketNumber, requesterDisplayName, dueDate, serviceType, createdTime, taskType, status (optional)</param>
        /// <param name="search">Search for title (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>TaskListPageResult</returns>
        public TaskListPageResult GetMyTasks (bool? isconfirmtask = null, string filter = null, string orderby = null, string search = null, int? top = null, int? skip = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<TaskListPageResult> localVarResponse = GetMyTasksWithHttpInfo(isconfirmtask, filter, orderby, search, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get my tasks 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isconfirmtask"> (optional, default to false)</param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, title, requester, requestTicketNumber, requesterDisplayName, dueDate, serviceType, createdTime, taskType, status (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, title, requester, requestTicketNumber, requesterDisplayName, dueDate, serviceType, createdTime, taskType, status (optional)</param>
        /// <param name="search">Search for title (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>ApiResponse of TaskListPageResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< TaskListPageResult > GetMyTasksWithHttpInfo (bool? isconfirmtask = null, string filter = null, string orderby = null, string search = null, int? top = null, int? skip = null)
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (isconfirmtask != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "isconfirmtask", isconfirmtask))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (orderby != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (search != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "search", search))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (top != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< TaskListPageResult >("/tasks/my", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetMyTasks", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get my tasks 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isconfirmtask"> (optional, default to false)</param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, title, requester, requestTicketNumber, requesterDisplayName, dueDate, serviceType, createdTime, taskType, status (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, title, requester, requestTicketNumber, requesterDisplayName, dueDate, serviceType, createdTime, taskType, status (optional)</param>
        /// <param name="search">Search for title (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of TaskListPageResult</returns>
        public async System.Threading.Tasks.Task<TaskListPageResult> GetMyTasksAsync (bool? isconfirmtask = null, string filter = null, string orderby = null, string search = null, int? top = null, int? skip = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<TaskListPageResult> localVarResponse = await GetMyTasksAsyncWithHttpInfo(isconfirmtask, filter, orderby, search, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get my tasks 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isconfirmtask"> (optional, default to false)</param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, title, requester, requestTicketNumber, requesterDisplayName, dueDate, serviceType, createdTime, taskType, status (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, title, requester, requestTicketNumber, requesterDisplayName, dueDate, serviceType, createdTime, taskType, status (optional)</param>
        /// <param name="search">Search for title (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of ApiResponse (TaskListPageResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<TaskListPageResult>> GetMyTasksAsyncWithHttpInfo (bool? isconfirmtask = null, string filter = null, string orderby = null, string search = null, int? top = null, int? skip = null)
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (isconfirmtask != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "isconfirmtask", isconfirmtask))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (orderby != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (search != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "search", search))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (top != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<TaskListPageResult>("/tasks/my", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetMyTasks", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get remove permission report 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, displayName, identityName, objectUrl, objectTitle, objectType, accountType, sharePointGroup, permissionLevels, action (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, displayName, identityName, objectUrl, objectTitle, objectType, accountType, sharePointGroup, permissionLevels, action (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>SecuritySearchResultPageResult</returns>
        public SecuritySearchResultPageResult GetRemovePermissionReport (Guid id, string filter = null, string orderby = null, Object body = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<SecuritySearchResultPageResult> localVarResponse = GetRemovePermissionReportWithHttpInfo(id, filter, orderby, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get remove permission report 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, displayName, identityName, objectUrl, objectTitle, objectType, accountType, sharePointGroup, permissionLevels, action (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, displayName, identityName, objectUrl, objectTitle, objectType, accountType, sharePointGroup, permissionLevels, action (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SecuritySearchResultPageResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< SecuritySearchResultPageResult > GetRemovePermissionReportWithHttpInfo (Guid id, string filter = null, string orderby = null, Object body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetRemovePermissionReport");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (orderby != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = body;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< SecuritySearchResultPageResult >("/tasks/removepermission/{id}/permission", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetRemovePermissionReport", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get remove permission report 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, displayName, identityName, objectUrl, objectTitle, objectType, accountType, sharePointGroup, permissionLevels, action (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, displayName, identityName, objectUrl, objectTitle, objectType, accountType, sharePointGroup, permissionLevels, action (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of SecuritySearchResultPageResult</returns>
        public async System.Threading.Tasks.Task<SecuritySearchResultPageResult> GetRemovePermissionReportAsync (Guid id, string filter = null, string orderby = null, Object body = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<SecuritySearchResultPageResult> localVarResponse = await GetRemovePermissionReportAsyncWithHttpInfo(id, filter, orderby, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get remove permission report 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, displayName, identityName, objectUrl, objectTitle, objectType, accountType, sharePointGroup, permissionLevels, action (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, displayName, identityName, objectUrl, objectTitle, objectType, accountType, sharePointGroup, permissionLevels, action (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (SecuritySearchResultPageResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<SecuritySearchResultPageResult>> GetRemovePermissionReportAsyncWithHttpInfo (Guid id, string filter = null, string orderby = null, Object body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetRemovePermissionReport");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (orderby != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = body;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<SecuritySearchResultPageResult>("/tasks/removepermission/{id}/permission", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetRemovePermissionReport", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get remove permission report properties 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>RecertificationReportProperties</returns>
        public RecertificationReportProperties GetRemovePermissionReportProperties (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<RecertificationReportProperties> localVarResponse = GetRemovePermissionReportPropertiesWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get remove permission report properties 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of RecertificationReportProperties</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< RecertificationReportProperties > GetRemovePermissionReportPropertiesWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetRemovePermissionReportProperties");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< RecertificationReportProperties >("/tasks/removepermission/{id}/properties", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetRemovePermissionReportProperties", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get remove permission report properties 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of RecertificationReportProperties</returns>
        public async System.Threading.Tasks.Task<RecertificationReportProperties> GetRemovePermissionReportPropertiesAsync (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<RecertificationReportProperties> localVarResponse = await GetRemovePermissionReportPropertiesAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get remove permission report properties 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (RecertificationReportProperties)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<RecertificationReportProperties>> GetRemovePermissionReportPropertiesAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetRemovePermissionReportProperties");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<RecertificationReportProperties>("/tasks/removepermission/{id}/properties", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetRemovePermissionReportProperties", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get site metadata recertification metadata 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>List&lt;CustomMetadata&gt;</returns>
        public List<CustomMetadata> GetSiteMetadataRecertificationReport (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<List<CustomMetadata>> localVarResponse = GetSiteMetadataRecertificationReportWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get site metadata recertification metadata 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of List&lt;CustomMetadata&gt;</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< List<CustomMetadata> > GetSiteMetadataRecertificationReportWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetSiteMetadataRecertificationReport");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< List<CustomMetadata> >("/tasks/{id}/site/recertification/metadata", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetSiteMetadataRecertificationReport", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get site metadata recertification metadata 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of List&lt;CustomMetadata&gt;</returns>
        public async System.Threading.Tasks.Task<List<CustomMetadata>> GetSiteMetadataRecertificationReportAsync (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<List<CustomMetadata>> localVarResponse = await GetSiteMetadataRecertificationReportAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get site metadata recertification metadata 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (List&lt;CustomMetadata&gt;)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<List<CustomMetadata>>> GetSiteMetadataRecertificationReportAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetSiteMetadataRecertificationReport");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<CustomMetadata>>("/tasks/{id}/site/recertification/metadata", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetSiteMetadataRecertificationReport", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get site metadata recertification report properties 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>MetadataRecertificationReportProperties</returns>
        public MetadataRecertificationReportProperties GetSiteMetadataRecertificationReportProperties (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<MetadataRecertificationReportProperties> localVarResponse = GetSiteMetadataRecertificationReportPropertiesWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get site metadata recertification report properties 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of MetadataRecertificationReportProperties</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< MetadataRecertificationReportProperties > GetSiteMetadataRecertificationReportPropertiesWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetSiteMetadataRecertificationReportProperties");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< MetadataRecertificationReportProperties >("/tasks/{id}/site/recertification/metadata/properties", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetSiteMetadataRecertificationReportProperties", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get site metadata recertification report properties 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of MetadataRecertificationReportProperties</returns>
        public async System.Threading.Tasks.Task<MetadataRecertificationReportProperties> GetSiteMetadataRecertificationReportPropertiesAsync (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<MetadataRecertificationReportProperties> localVarResponse = await GetSiteMetadataRecertificationReportPropertiesAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get site metadata recertification report properties 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (MetadataRecertificationReportProperties)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<MetadataRecertificationReportProperties>> GetSiteMetadataRecertificationReportPropertiesAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetSiteMetadataRecertificationReportProperties");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<MetadataRecertificationReportProperties>("/tasks/{id}/site/recertification/metadata/properties", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetSiteMetadataRecertificationReportProperties", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get site ownership recertification report properties 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>RecertificationReportProperties</returns>
        public RecertificationReportProperties GetSiteOwnershipRecertificationReportProperties (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<RecertificationReportProperties> localVarResponse = GetSiteOwnershipRecertificationReportPropertiesWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get site ownership recertification report properties 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of RecertificationReportProperties</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< RecertificationReportProperties > GetSiteOwnershipRecertificationReportPropertiesWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetSiteOwnershipRecertificationReportProperties");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< RecertificationReportProperties >("/tasks/{id}/site/recertification/ownership/properties", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetSiteOwnershipRecertificationReportProperties", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get site ownership recertification report properties 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of RecertificationReportProperties</returns>
        public async System.Threading.Tasks.Task<RecertificationReportProperties> GetSiteOwnershipRecertificationReportPropertiesAsync (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<RecertificationReportProperties> localVarResponse = await GetSiteOwnershipRecertificationReportPropertiesAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get site ownership recertification report properties 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (RecertificationReportProperties)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<RecertificationReportProperties>> GetSiteOwnershipRecertificationReportPropertiesAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetSiteOwnershipRecertificationReportProperties");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<RecertificationReportProperties>("/tasks/{id}/site/recertification/ownership/properties", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetSiteOwnershipRecertificationReportProperties", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get site permission recertification permission filters 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>DistinctPageResult</returns>
        public DistinctPageResult GetSitePermissionRecertificatioPermissionFilters (Guid id, string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<DistinctPageResult> localVarResponse = GetSitePermissionRecertificatioPermissionFiltersWithHttpInfo(id, filter, distinct, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get site permission recertification permission filters 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>ApiResponse of DistinctPageResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< DistinctPageResult > GetSitePermissionRecertificatioPermissionFiltersWithHttpInfo (Guid id, string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetSitePermissionRecertificatioPermissionFilters");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (distinct != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "distinct", distinct))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (top != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< DistinctPageResult >("/tasks/{id}/site/recertification/permission/filters", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetSitePermissionRecertificatioPermissionFilters", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get site permission recertification permission filters 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of DistinctPageResult</returns>
        public async System.Threading.Tasks.Task<DistinctPageResult> GetSitePermissionRecertificatioPermissionFiltersAsync (Guid id, string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<DistinctPageResult> localVarResponse = await GetSitePermissionRecertificatioPermissionFiltersAsyncWithHttpInfo(id, filter, distinct, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get site permission recertification permission filters 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of ApiResponse (DistinctPageResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<DistinctPageResult>> GetSitePermissionRecertificatioPermissionFiltersAsyncWithHttpInfo (Guid id, string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetSitePermissionRecertificatioPermissionFilters");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (distinct != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "distinct", distinct))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (top != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<DistinctPageResult>("/tasks/{id}/site/recertification/permission/filters", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetSitePermissionRecertificatioPermissionFilters", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get site permission recertification permission filters with specific version 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>DistinctPageResult</returns>
        public DistinctPageResult GetSitePermissionRecertificatioReportFiltersByVersion (Guid id, long version, string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<DistinctPageResult> localVarResponse = GetSitePermissionRecertificatioReportFiltersByVersionWithHttpInfo(id, version, filter, distinct, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get site permission recertification permission filters with specific version 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>ApiResponse of DistinctPageResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< DistinctPageResult > GetSitePermissionRecertificatioReportFiltersByVersionWithHttpInfo (Guid id, long version, string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetSitePermissionRecertificatioReportFiltersByVersion");

            // verify the required parameter 'version' is set
            if (version == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'version' when calling TasksApi->GetSitePermissionRecertificatioReportFiltersByVersion");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (version != null)
                requestOptions.PathParameters.Add("version", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (distinct != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "distinct", distinct))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (top != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< DistinctPageResult >("/tasks/{id}/site/recertification/permission/filters/{version}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetSitePermissionRecertificatioReportFiltersByVersion", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get site permission recertification permission filters with specific version 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of DistinctPageResult</returns>
        public async System.Threading.Tasks.Task<DistinctPageResult> GetSitePermissionRecertificatioReportFiltersByVersionAsync (Guid id, long version, string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<DistinctPageResult> localVarResponse = await GetSitePermissionRecertificatioReportFiltersByVersionAsyncWithHttpInfo(id, version, filter, distinct, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get site permission recertification permission filters with specific version 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of ApiResponse (DistinctPageResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<DistinctPageResult>> GetSitePermissionRecertificatioReportFiltersByVersionAsyncWithHttpInfo (Guid id, long version, string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetSitePermissionRecertificatioReportFiltersByVersion");

            // verify the required parameter 'version' is set
            if (version == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'version' when calling TasksApi->GetSitePermissionRecertificatioReportFiltersByVersion");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (version != null)
                requestOptions.PathParameters.Add("version", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (distinct != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "distinct", distinct))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (top != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<DistinctPageResult>("/tasks/{id}/site/recertification/permission/filters/{version}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetSitePermissionRecertificatioReportFiltersByVersion", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>DistinctPageResult</returns>
        public DistinctPageResult GetSitePermissionRecertificatioReportFiltersForSPGroup (Guid id, Guid groupid, string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<DistinctPageResult> localVarResponse = GetSitePermissionRecertificatioReportFiltersForSPGroupWithHttpInfo(id, groupid, filter, distinct, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>ApiResponse of DistinctPageResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< DistinctPageResult > GetSitePermissionRecertificatioReportFiltersForSPGroupWithHttpInfo (Guid id, Guid groupid, string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetSitePermissionRecertificatioReportFiltersForSPGroup");

            // verify the required parameter 'groupid' is set
            if (groupid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'groupid' when calling TasksApi->GetSitePermissionRecertificatioReportFiltersForSPGroup");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (groupid != null)
                requestOptions.PathParameters.Add("groupid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(groupid)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (distinct != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "distinct", distinct))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (top != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< DistinctPageResult >("/tasks/{id}/site/recertification/permission/group/{groupid}/filters", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetSitePermissionRecertificatioReportFiltersForSPGroup", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of DistinctPageResult</returns>
        public async System.Threading.Tasks.Task<DistinctPageResult> GetSitePermissionRecertificatioReportFiltersForSPGroupAsync (Guid id, Guid groupid, string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<DistinctPageResult> localVarResponse = await GetSitePermissionRecertificatioReportFiltersForSPGroupAsyncWithHttpInfo(id, groupid, filter, distinct, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of ApiResponse (DistinctPageResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<DistinctPageResult>> GetSitePermissionRecertificatioReportFiltersForSPGroupAsyncWithHttpInfo (Guid id, Guid groupid, string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetSitePermissionRecertificatioReportFiltersForSPGroup");

            // verify the required parameter 'groupid' is set
            if (groupid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'groupid' when calling TasksApi->GetSitePermissionRecertificatioReportFiltersForSPGroup");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (groupid != null)
                requestOptions.PathParameters.Add("groupid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(groupid)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (distinct != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "distinct", distinct))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (top != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<DistinctPageResult>("/tasks/{id}/site/recertification/permission/group/{groupid}/filters", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetSitePermissionRecertificatioReportFiltersForSPGroup", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>DistinctPageResult</returns>
        public DistinctPageResult GetSitePermissionRecertificatioReportFiltersForSPGroupByVersion (Guid id, Guid groupid, long version, string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<DistinctPageResult> localVarResponse = GetSitePermissionRecertificatioReportFiltersForSPGroupByVersionWithHttpInfo(id, groupid, version, filter, distinct, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>ApiResponse of DistinctPageResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< DistinctPageResult > GetSitePermissionRecertificatioReportFiltersForSPGroupByVersionWithHttpInfo (Guid id, Guid groupid, long version, string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetSitePermissionRecertificatioReportFiltersForSPGroupByVersion");

            // verify the required parameter 'groupid' is set
            if (groupid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'groupid' when calling TasksApi->GetSitePermissionRecertificatioReportFiltersForSPGroupByVersion");

            // verify the required parameter 'version' is set
            if (version == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'version' when calling TasksApi->GetSitePermissionRecertificatioReportFiltersForSPGroupByVersion");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (groupid != null)
                requestOptions.PathParameters.Add("groupid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(groupid)); // path parameter
            if (version != null)
                requestOptions.PathParameters.Add("version", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (distinct != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "distinct", distinct))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (top != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< DistinctPageResult >("/tasks/{id}/site/recertification/permission/group/{groupid}/filters/{version}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetSitePermissionRecertificatioReportFiltersForSPGroupByVersion", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of DistinctPageResult</returns>
        public async System.Threading.Tasks.Task<DistinctPageResult> GetSitePermissionRecertificatioReportFiltersForSPGroupByVersionAsync (Guid id, Guid groupid, long version, string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<DistinctPageResult> localVarResponse = await GetSitePermissionRecertificatioReportFiltersForSPGroupByVersionAsyncWithHttpInfo(id, groupid, version, filter, distinct, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of ApiResponse (DistinctPageResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<DistinctPageResult>> GetSitePermissionRecertificatioReportFiltersForSPGroupByVersionAsyncWithHttpInfo (Guid id, Guid groupid, long version, string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetSitePermissionRecertificatioReportFiltersForSPGroupByVersion");

            // verify the required parameter 'groupid' is set
            if (groupid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'groupid' when calling TasksApi->GetSitePermissionRecertificatioReportFiltersForSPGroupByVersion");

            // verify the required parameter 'version' is set
            if (version == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'version' when calling TasksApi->GetSitePermissionRecertificatioReportFiltersForSPGroupByVersion");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (groupid != null)
                requestOptions.PathParameters.Add("groupid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(groupid)); // path parameter
            if (version != null)
                requestOptions.PathParameters.Add("version", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (distinct != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "distinct", distinct))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (top != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<DistinctPageResult>("/tasks/{id}/site/recertification/permission/group/{groupid}/filters/{version}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetSitePermissionRecertificatioReportFiltersForSPGroupByVersion", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get site permission recertification permission levels 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>List&lt;PermissionLevel&gt;</returns>
        public List<PermissionLevel> GetSitePermissionRecertificationPermissionLevels (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<List<PermissionLevel>> localVarResponse = GetSitePermissionRecertificationPermissionLevelsWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get site permission recertification permission levels 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of List&lt;PermissionLevel&gt;</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< List<PermissionLevel> > GetSitePermissionRecertificationPermissionLevelsWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetSitePermissionRecertificationPermissionLevels");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< List<PermissionLevel> >("/tasks/{id}/recertification/permissionlevels", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetSitePermissionRecertificationPermissionLevels", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get site permission recertification permission levels 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of List&lt;PermissionLevel&gt;</returns>
        public async System.Threading.Tasks.Task<List<PermissionLevel>> GetSitePermissionRecertificationPermissionLevelsAsync (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<List<PermissionLevel>> localVarResponse = await GetSitePermissionRecertificationPermissionLevelsAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get site permission recertification permission levels 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (List&lt;PermissionLevel&gt;)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<List<PermissionLevel>>> GetSitePermissionRecertificationPermissionLevelsAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetSitePermissionRecertificationPermissionLevels");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<PermissionLevel>>("/tasks/{id}/recertification/permissionlevels", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetSitePermissionRecertificationPermissionLevels", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get site permission recertification report 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PermissionActionItemPageResult</returns>
        public PermissionActionItemPageResult GetSitePermissionRecertificationReport (Guid id, string filter = null, string orderby = null, Object body = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<PermissionActionItemPageResult> localVarResponse = GetSitePermissionRecertificationReportWithHttpInfo(id, filter, orderby, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get site permission recertification report 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PermissionActionItemPageResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< PermissionActionItemPageResult > GetSitePermissionRecertificationReportWithHttpInfo (Guid id, string filter = null, string orderby = null, Object body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetSitePermissionRecertificationReport");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (orderby != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = body;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< PermissionActionItemPageResult >("/tasks/{id}/site/recertification/permission", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetSitePermissionRecertificationReport", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get site permission recertification report 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of PermissionActionItemPageResult</returns>
        public async System.Threading.Tasks.Task<PermissionActionItemPageResult> GetSitePermissionRecertificationReportAsync (Guid id, string filter = null, string orderby = null, Object body = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<PermissionActionItemPageResult> localVarResponse = await GetSitePermissionRecertificationReportAsyncWithHttpInfo(id, filter, orderby, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get site permission recertification report 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (PermissionActionItemPageResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<PermissionActionItemPageResult>> GetSitePermissionRecertificationReportAsyncWithHttpInfo (Guid id, string filter = null, string orderby = null, Object body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetSitePermissionRecertificationReport");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (orderby != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = body;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<PermissionActionItemPageResult>("/tasks/{id}/site/recertification/permission", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetSitePermissionRecertificationReport", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get site permission recertification report by specific version 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PermissionActionItemPageResult</returns>
        public PermissionActionItemPageResult GetSitePermissionRecertificationReportByVersion (Guid id, long version, string filter = null, string orderby = null, Object body = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<PermissionActionItemPageResult> localVarResponse = GetSitePermissionRecertificationReportByVersionWithHttpInfo(id, version, filter, orderby, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get site permission recertification report by specific version 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PermissionActionItemPageResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< PermissionActionItemPageResult > GetSitePermissionRecertificationReportByVersionWithHttpInfo (Guid id, long version, string filter = null, string orderby = null, Object body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetSitePermissionRecertificationReportByVersion");

            // verify the required parameter 'version' is set
            if (version == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'version' when calling TasksApi->GetSitePermissionRecertificationReportByVersion");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (version != null)
                requestOptions.PathParameters.Add("version", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (orderby != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = body;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< PermissionActionItemPageResult >("/tasks/{id}/site/recertification/permission/{version}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetSitePermissionRecertificationReportByVersion", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get site permission recertification report by specific version 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of PermissionActionItemPageResult</returns>
        public async System.Threading.Tasks.Task<PermissionActionItemPageResult> GetSitePermissionRecertificationReportByVersionAsync (Guid id, long version, string filter = null, string orderby = null, Object body = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<PermissionActionItemPageResult> localVarResponse = await GetSitePermissionRecertificationReportByVersionAsyncWithHttpInfo(id, version, filter, orderby, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get site permission recertification report by specific version 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (PermissionActionItemPageResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<PermissionActionItemPageResult>> GetSitePermissionRecertificationReportByVersionAsyncWithHttpInfo (Guid id, long version, string filter = null, string orderby = null, Object body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetSitePermissionRecertificationReportByVersion");

            // verify the required parameter 'version' is set
            if (version == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'version' when calling TasksApi->GetSitePermissionRecertificationReportByVersion");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (version != null)
                requestOptions.PathParameters.Add("version", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (orderby != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = body;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<PermissionActionItemPageResult>("/tasks/{id}/site/recertification/permission/{version}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetSitePermissionRecertificationReportByVersion", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get site permission recertification group permission items 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PermissionActionItemPageResult</returns>
        public PermissionActionItemPageResult GetSitePermissionRecertificationReportForSPGroup (Guid id, Guid groupid, string filter = null, string orderby = null, Object body = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<PermissionActionItemPageResult> localVarResponse = GetSitePermissionRecertificationReportForSPGroupWithHttpInfo(id, groupid, filter, orderby, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get site permission recertification group permission items 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PermissionActionItemPageResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< PermissionActionItemPageResult > GetSitePermissionRecertificationReportForSPGroupWithHttpInfo (Guid id, Guid groupid, string filter = null, string orderby = null, Object body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetSitePermissionRecertificationReportForSPGroup");

            // verify the required parameter 'groupid' is set
            if (groupid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'groupid' when calling TasksApi->GetSitePermissionRecertificationReportForSPGroup");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (groupid != null)
                requestOptions.PathParameters.Add("groupid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(groupid)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (orderby != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = body;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< PermissionActionItemPageResult >("/tasks/{id}/site/recertification/permission/group/{groupid}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetSitePermissionRecertificationReportForSPGroup", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get site permission recertification group permission items 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of PermissionActionItemPageResult</returns>
        public async System.Threading.Tasks.Task<PermissionActionItemPageResult> GetSitePermissionRecertificationReportForSPGroupAsync (Guid id, Guid groupid, string filter = null, string orderby = null, Object body = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<PermissionActionItemPageResult> localVarResponse = await GetSitePermissionRecertificationReportForSPGroupAsyncWithHttpInfo(id, groupid, filter, orderby, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get site permission recertification group permission items 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (PermissionActionItemPageResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<PermissionActionItemPageResult>> GetSitePermissionRecertificationReportForSPGroupAsyncWithHttpInfo (Guid id, Guid groupid, string filter = null, string orderby = null, Object body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetSitePermissionRecertificationReportForSPGroup");

            // verify the required parameter 'groupid' is set
            if (groupid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'groupid' when calling TasksApi->GetSitePermissionRecertificationReportForSPGroup");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (groupid != null)
                requestOptions.PathParameters.Add("groupid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(groupid)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (orderby != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = body;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<PermissionActionItemPageResult>("/tasks/{id}/site/recertification/permission/group/{groupid}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetSitePermissionRecertificationReportForSPGroup", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get site permission recertification group permission items with specific version with specific version 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PermissionActionItemPageResult</returns>
        public PermissionActionItemPageResult GetSitePermissionRecertificationReportForSPGroupByVersion (Guid id, long version, Guid groupid, string filter = null, string orderby = null, Object body = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<PermissionActionItemPageResult> localVarResponse = GetSitePermissionRecertificationReportForSPGroupByVersionWithHttpInfo(id, version, groupid, filter, orderby, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get site permission recertification group permission items with specific version with specific version 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PermissionActionItemPageResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< PermissionActionItemPageResult > GetSitePermissionRecertificationReportForSPGroupByVersionWithHttpInfo (Guid id, long version, Guid groupid, string filter = null, string orderby = null, Object body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetSitePermissionRecertificationReportForSPGroupByVersion");

            // verify the required parameter 'version' is set
            if (version == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'version' when calling TasksApi->GetSitePermissionRecertificationReportForSPGroupByVersion");

            // verify the required parameter 'groupid' is set
            if (groupid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'groupid' when calling TasksApi->GetSitePermissionRecertificationReportForSPGroupByVersion");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (version != null)
                requestOptions.PathParameters.Add("version", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (groupid != null)
                requestOptions.PathParameters.Add("groupid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(groupid)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (orderby != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = body;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< PermissionActionItemPageResult >("/tasks/{id}/site/recertification/permission/{version}/group/{groupid}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetSitePermissionRecertificationReportForSPGroupByVersion", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get site permission recertification group permission items with specific version with specific version 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of PermissionActionItemPageResult</returns>
        public async System.Threading.Tasks.Task<PermissionActionItemPageResult> GetSitePermissionRecertificationReportForSPGroupByVersionAsync (Guid id, long version, Guid groupid, string filter = null, string orderby = null, Object body = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<PermissionActionItemPageResult> localVarResponse = await GetSitePermissionRecertificationReportForSPGroupByVersionAsyncWithHttpInfo(id, version, groupid, filter, orderby, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get site permission recertification group permission items with specific version with specific version 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="groupid"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (PermissionActionItemPageResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<PermissionActionItemPageResult>> GetSitePermissionRecertificationReportForSPGroupByVersionAsyncWithHttpInfo (Guid id, long version, Guid groupid, string filter = null, string orderby = null, Object body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetSitePermissionRecertificationReportForSPGroupByVersion");

            // verify the required parameter 'version' is set
            if (version == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'version' when calling TasksApi->GetSitePermissionRecertificationReportForSPGroupByVersion");

            // verify the required parameter 'groupid' is set
            if (groupid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'groupid' when calling TasksApi->GetSitePermissionRecertificationReportForSPGroupByVersion");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (version != null)
                requestOptions.PathParameters.Add("version", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (groupid != null)
                requestOptions.PathParameters.Add("groupid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(groupid)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (orderby != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = body;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<PermissionActionItemPageResult>("/tasks/{id}/site/recertification/permission/{version}/group/{groupid}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetSitePermissionRecertificationReportForSPGroupByVersion", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get site permission recertification report properties 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>RecertificationReportProperties</returns>
        public RecertificationReportProperties GetSitePermissionRecertificationReportProperties (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<RecertificationReportProperties> localVarResponse = GetSitePermissionRecertificationReportPropertiesWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get site permission recertification report properties 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of RecertificationReportProperties</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< RecertificationReportProperties > GetSitePermissionRecertificationReportPropertiesWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetSitePermissionRecertificationReportProperties");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< RecertificationReportProperties >("/tasks/{id}/site/recertification/permission/properties", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetSitePermissionRecertificationReportProperties", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get site permission recertification report properties 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of RecertificationReportProperties</returns>
        public async System.Threading.Tasks.Task<RecertificationReportProperties> GetSitePermissionRecertificationReportPropertiesAsync (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<RecertificationReportProperties> localVarResponse = await GetSitePermissionRecertificationReportPropertiesAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get site permission recertification report properties 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (RecertificationReportProperties)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<RecertificationReportProperties>> GetSitePermissionRecertificationReportPropertiesAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetSitePermissionRecertificationReportProperties");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<RecertificationReportProperties>("/tasks/{id}/site/recertification/permission/properties", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetSitePermissionRecertificationReportProperties", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get task by batch id 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchid"></param>
        /// <returns>TaskList</returns>
        public TaskList GetTaskByBatchId (Guid batchid)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<TaskList> localVarResponse = GetTaskByBatchIdWithHttpInfo(batchid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get task by batch id 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchid"></param>
        /// <returns>ApiResponse of TaskList</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< TaskList > GetTaskByBatchIdWithHttpInfo (Guid batchid)
        {
            // verify the required parameter 'batchid' is set
            if (batchid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'batchid' when calling TasksApi->GetTaskByBatchId");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (batchid != null)
                requestOptions.PathParameters.Add("batchid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(batchid)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< TaskList >("/tasks/my/{batchid}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetTaskByBatchId", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get task by batch id 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchid"></param>
        /// <returns>Task of TaskList</returns>
        public async System.Threading.Tasks.Task<TaskList> GetTaskByBatchIdAsync (Guid batchid)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<TaskList> localVarResponse = await GetTaskByBatchIdAsyncWithHttpInfo(batchid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get task by batch id 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchid"></param>
        /// <returns>Task of ApiResponse (TaskList)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<TaskList>> GetTaskByBatchIdAsyncWithHttpInfo (Guid batchid)
        {
            // verify the required parameter 'batchid' is set
            if (batchid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'batchid' when calling TasksApi->GetTaskByBatchId");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (batchid != null)
                requestOptions.PathParameters.Add("batchid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(batchid)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<TaskList>("/tasks/my/{batchid}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetTaskByBatchId", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get my task by id 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiTask</returns>
        public ApiTask GetTaskById (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ApiTask> localVarResponse = GetTaskByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get my task by id 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ApiTask</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< ApiTask > GetTaskByIdWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetTaskById");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< ApiTask >("/tasks/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetTaskById", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get my task by id 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiTask</returns>
        public async System.Threading.Tasks.Task<ApiTask> GetTaskByIdAsync (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ApiTask> localVarResponse = await GetTaskByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get my task by id 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ApiTask)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<ApiTask>> GetTaskByIdAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetTaskById");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ApiTask>("/tasks/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetTaskById", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// promote as owners for group membership recertification 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiUser"> (optional)</param>
        /// <returns></returns>
        public void PromoteAsOwnersForGroupMembershipRecertification (Guid id, List<ApiUser> apiUser = null)
        {
             PromoteAsOwnersForGroupMembershipRecertificationWithHttpInfo(id, apiUser);
        }

        /// <summary>
        /// promote as owners for group membership recertification 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiUser"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> PromoteAsOwnersForGroupMembershipRecertificationWithHttpInfo (Guid id, List<ApiUser> apiUser = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->PromoteAsOwnersForGroupMembershipRecertification");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = apiUser;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post<Object>("/tasks/{id}/group/recertification/membership/promoteasowner", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("PromoteAsOwnersForGroupMembershipRecertification", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// promote as owners for group membership recertification 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiUser"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PromoteAsOwnersForGroupMembershipRecertificationAsync (Guid id, List<ApiUser> apiUser = null)
        {
             await PromoteAsOwnersForGroupMembershipRecertificationAsyncWithHttpInfo(id, apiUser);

        }

        /// <summary>
        /// promote as owners for group membership recertification 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiUser"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> PromoteAsOwnersForGroupMembershipRecertificationAsyncWithHttpInfo (Guid id, List<ApiUser> apiUser = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->PromoteAsOwnersForGroupMembershipRecertification");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = apiUser;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Object>("/tasks/{id}/group/recertification/membership/promoteasowner", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("PromoteAsOwnersForGroupMembershipRecertification", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// reassign task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="user"></param>
        /// <returns></returns>
        public void ReassignTask (Guid id, string user)
        {
             ReassignTaskWithHttpInfo(id, user);
        }

        /// <summary>
        /// reassign task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="user"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> ReassignTaskWithHttpInfo (Guid id, string user)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->ReassignTask");

            // verify the required parameter 'user' is set
            if (user == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'user' when calling TasksApi->ReassignTask");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (user != null)
                requestOptions.PathParameters.Add("user", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(user)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post<Object>("/tasks/{id}/reassignto/{user}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ReassignTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// reassign task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="user"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ReassignTaskAsync (Guid id, string user)
        {
             await ReassignTaskAsyncWithHttpInfo(id, user);

        }

        /// <summary>
        /// reassign task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="user"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> ReassignTaskAsyncWithHttpInfo (Guid id, string user)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->ReassignTask");

            // verify the required parameter 'user' is set
            if (user == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'user' when calling TasksApi->ReassignTask");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (user != null)
                requestOptions.PathParameters.Add("user", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(user)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Object>("/tasks/{id}/reassignto/{user}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ReassignTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// reject task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="commentsParam"> (optional)</param>
        /// <returns></returns>
        public void RejectTask (Guid id, CommentsParam commentsParam = null)
        {
             RejectTaskWithHttpInfo(id, commentsParam);
        }

        /// <summary>
        /// reject task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="commentsParam"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> RejectTaskWithHttpInfo (Guid id, CommentsParam commentsParam = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->RejectTask");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = commentsParam;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post<Object>("/tasks/{id}/reject", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("RejectTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// reject task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="commentsParam"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RejectTaskAsync (Guid id, CommentsParam commentsParam = null)
        {
             await RejectTaskAsyncWithHttpInfo(id, commentsParam);

        }

        /// <summary>
        /// reject task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="commentsParam"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> RejectTaskAsyncWithHttpInfo (Guid id, CommentsParam commentsParam = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->RejectTask");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = commentsParam;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Object>("/tasks/{id}/reject", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("RejectTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// remove users for group membership recertification 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="requestBody"> (optional)</param>
        /// <returns></returns>
        public void RemoveUsersForGroupMembershipRecertification (Guid id, List<Guid> requestBody = null)
        {
             RemoveUsersForGroupMembershipRecertificationWithHttpInfo(id, requestBody);
        }

        /// <summary>
        /// remove users for group membership recertification 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="requestBody"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> RemoveUsersForGroupMembershipRecertificationWithHttpInfo (Guid id, List<Guid> requestBody = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->RemoveUsersForGroupMembershipRecertification");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = requestBody;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post<Object>("/tasks/{id}/group/recertification/membership/removeuser", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("RemoveUsersForGroupMembershipRecertification", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// remove users for group membership recertification 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="requestBody"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveUsersForGroupMembershipRecertificationAsync (Guid id, List<Guid> requestBody = null)
        {
             await RemoveUsersForGroupMembershipRecertificationAsyncWithHttpInfo(id, requestBody);

        }

        /// <summary>
        /// remove users for group membership recertification 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="requestBody"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> RemoveUsersForGroupMembershipRecertificationAsyncWithHttpInfo (Guid id, List<Guid> requestBody = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->RemoveUsersForGroupMembershipRecertification");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = requestBody;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Object>("/tasks/{id}/group/recertification/membership/removeuser", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("RemoveUsersForGroupMembershipRecertification", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// save all changes for change permission task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void ReseAllChangesForChangePermissionTask (Guid id)
        {
             ReseAllChangesForChangePermissionTaskWithHttpInfo(id);
        }

        /// <summary>
        /// save all changes for change permission task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> ReseAllChangesForChangePermissionTaskWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->ReseAllChangesForChangePermissionTask");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post<Object>("/tasks/changepermission/{id}/resetallchange", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ReseAllChangesForChangePermissionTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// save all changes for change permission task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ReseAllChangesForChangePermissionTaskAsync (Guid id)
        {
             await ReseAllChangesForChangePermissionTaskAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// save all changes for change permission task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> ReseAllChangesForChangePermissionTaskAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->ReseAllChangesForChangePermissionTask");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Object>("/tasks/changepermission/{id}/resetallchange", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ReseAllChangesForChangePermissionTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// reset all changes for site/group recertification task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void ResetAllChangesForRecertificationTask (Guid id)
        {
             ResetAllChangesForRecertificationTaskWithHttpInfo(id);
        }

        /// <summary>
        /// reset all changes for site/group recertification task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> ResetAllChangesForRecertificationTaskWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->ResetAllChangesForRecertificationTask");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post<Object>("/tasks/{id}/recertification/resetallchange", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ResetAllChangesForRecertificationTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// reset all changes for site/group recertification task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ResetAllChangesForRecertificationTaskAsync (Guid id)
        {
             await ResetAllChangesForRecertificationTaskAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// reset all changes for site/group recertification task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> ResetAllChangesForRecertificationTaskAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->ResetAllChangesForRecertificationTask");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Object>("/tasks/{id}/recertification/resetallchange", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ResetAllChangesForRecertificationTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// save my changes for change permission task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void ResetMyChangesForChangePermissionTask (Guid id)
        {
             ResetMyChangesForChangePermissionTaskWithHttpInfo(id);
        }

        /// <summary>
        /// save my changes for change permission task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> ResetMyChangesForChangePermissionTaskWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->ResetMyChangesForChangePermissionTask");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post<Object>("/tasks/changepermission/{id}/resetmychange", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ResetMyChangesForChangePermissionTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// save my changes for change permission task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ResetMyChangesForChangePermissionTaskAsync (Guid id)
        {
             await ResetMyChangesForChangePermissionTaskAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// save my changes for change permission task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> ResetMyChangesForChangePermissionTaskAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->ResetMyChangesForChangePermissionTask");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Object>("/tasks/changepermission/{id}/resetmychange", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ResetMyChangesForChangePermissionTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// reset my changes for site/group recertification task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void ResetMyChangesForRecertificationTask (Guid id)
        {
             ResetMyChangesForRecertificationTaskWithHttpInfo(id);
        }

        /// <summary>
        /// reset my changes for site/group recertification task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> ResetMyChangesForRecertificationTaskWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->ResetMyChangesForRecertificationTask");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post<Object>("/tasks/{id}/recertification/resetmychange", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ResetMyChangesForRecertificationTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// reset my changes for site/group recertification task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ResetMyChangesForRecertificationTaskAsync (Guid id)
        {
             await ResetMyChangesForRecertificationTaskAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// reset my changes for site/group recertification task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> ResetMyChangesForRecertificationTaskAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->ResetMyChangesForRecertificationTask");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Object>("/tasks/{id}/recertification/resetmychange", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ResetMyChangesForRecertificationTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// retry error task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="commentsParam"> (optional)</param>
        /// <returns></returns>
        public void RetryErrorTask (Guid id, CommentsParam commentsParam = null)
        {
             RetryErrorTaskWithHttpInfo(id, commentsParam);
        }

        /// <summary>
        /// retry error task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="commentsParam"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> RetryErrorTaskWithHttpInfo (Guid id, CommentsParam commentsParam = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->RetryErrorTask");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = commentsParam;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post<Object>("/tasks/{id}/retry", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("RetryErrorTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// retry error task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="commentsParam"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RetryErrorTaskAsync (Guid id, CommentsParam commentsParam = null)
        {
             await RetryErrorTaskAsyncWithHttpInfo(id, commentsParam);

        }

        /// <summary>
        /// retry error task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="commentsParam"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> RetryErrorTaskAsyncWithHttpInfo (Guid id, CommentsParam commentsParam = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->RetryErrorTask");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = commentsParam;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Object>("/tasks/{id}/retry", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("RetryErrorTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// save change permission actions 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="permissionActionItem"> (optional)</param>
        /// <returns></returns>
        public void SaveChangePermissionActions (Guid id, List<PermissionActionItem> permissionActionItem = null)
        {
             SaveChangePermissionActionsWithHttpInfo(id, permissionActionItem);
        }

        /// <summary>
        /// save change permission actions 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="permissionActionItem"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> SaveChangePermissionActionsWithHttpInfo (Guid id, List<PermissionActionItem> permissionActionItem = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->SaveChangePermissionActions");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = permissionActionItem;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post<Object>("/tasks/changepermission/{id}/permission", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SaveChangePermissionActions", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// save change permission actions 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="permissionActionItem"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SaveChangePermissionActionsAsync (Guid id, List<PermissionActionItem> permissionActionItem = null)
        {
             await SaveChangePermissionActionsAsyncWithHttpInfo(id, permissionActionItem);

        }

        /// <summary>
        /// save change permission actions 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="permissionActionItem"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> SaveChangePermissionActionsAsyncWithHttpInfo (Guid id, List<PermissionActionItem> permissionActionItem = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->SaveChangePermissionActions");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = permissionActionItem;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Object>("/tasks/changepermission/{id}/permission", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SaveChangePermissionActions", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Save clone permission report 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="securitySearchResult"> (optional)</param>
        /// <returns></returns>
        public void SaveClonePermissionReport (Guid id, List<SecuritySearchResult> securitySearchResult = null)
        {
             SaveClonePermissionReportWithHttpInfo(id, securitySearchResult);
        }

        /// <summary>
        /// Save clone permission report 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="securitySearchResult"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> SaveClonePermissionReportWithHttpInfo (Guid id, List<SecuritySearchResult> securitySearchResult = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->SaveClonePermissionReport");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = securitySearchResult;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post<Object>("/tasks/clonepermission/{id}/permission", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SaveClonePermissionReport", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Save clone permission report 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="securitySearchResult"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SaveClonePermissionReportAsync (Guid id, List<SecuritySearchResult> securitySearchResult = null)
        {
             await SaveClonePermissionReportAsyncWithHttpInfo(id, securitySearchResult);

        }

        /// <summary>
        /// Save clone permission report 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="securitySearchResult"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> SaveClonePermissionReportAsyncWithHttpInfo (Guid id, List<SecuritySearchResult> securitySearchResult = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->SaveClonePermissionReport");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = securitySearchResult;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Object>("/tasks/clonepermission/{id}/permission", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SaveClonePermissionReport", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// save manual archive report 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="manuallyArchiveRecordModel"> (optional)</param>
        /// <returns></returns>
        public void SaveGetManualArchiveReport (Guid id, List<ManuallyArchiveRecordModel> manuallyArchiveRecordModel = null)
        {
             SaveGetManualArchiveReportWithHttpInfo(id, manuallyArchiveRecordModel);
        }

        /// <summary>
        /// save manual archive report 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="manuallyArchiveRecordModel"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> SaveGetManualArchiveReportWithHttpInfo (Guid id, List<ManuallyArchiveRecordModel> manuallyArchiveRecordModel = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->SaveGetManualArchiveReport");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = manuallyArchiveRecordModel;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post<Object>("/tasks/{id}/manualarchive", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SaveGetManualArchiveReport", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// save manual archive report 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="manuallyArchiveRecordModel"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SaveGetManualArchiveReportAsync (Guid id, List<ManuallyArchiveRecordModel> manuallyArchiveRecordModel = null)
        {
             await SaveGetManualArchiveReportAsyncWithHttpInfo(id, manuallyArchiveRecordModel);

        }

        /// <summary>
        /// save manual archive report 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="manuallyArchiveRecordModel"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> SaveGetManualArchiveReportAsyncWithHttpInfo (Guid id, List<ManuallyArchiveRecordModel> manuallyArchiveRecordModel = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->SaveGetManualArchiveReport");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = manuallyArchiveRecordModel;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Object>("/tasks/{id}/manualarchive", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SaveGetManualArchiveReport", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// save group permission recertification results 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupPermissionActionItem"> (optional)</param>
        /// <returns></returns>
        public void SaveGroupPermissionRecertificationResults (Guid id, List<GroupPermissionActionItem> groupPermissionActionItem = null)
        {
             SaveGroupPermissionRecertificationResultsWithHttpInfo(id, groupPermissionActionItem);
        }

        /// <summary>
        /// save group permission recertification results 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupPermissionActionItem"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> SaveGroupPermissionRecertificationResultsWithHttpInfo (Guid id, List<GroupPermissionActionItem> groupPermissionActionItem = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->SaveGroupPermissionRecertificationResults");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = groupPermissionActionItem;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post<Object>("/tasks/{id}/group/recertification/permission", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SaveGroupPermissionRecertificationResults", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// save group permission recertification results 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupPermissionActionItem"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SaveGroupPermissionRecertificationResultsAsync (Guid id, List<GroupPermissionActionItem> groupPermissionActionItem = null)
        {
             await SaveGroupPermissionRecertificationResultsAsyncWithHttpInfo(id, groupPermissionActionItem);

        }

        /// <summary>
        /// save group permission recertification results 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupPermissionActionItem"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> SaveGroupPermissionRecertificationResultsAsyncWithHttpInfo (Guid id, List<GroupPermissionActionItem> groupPermissionActionItem = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->SaveGroupPermissionRecertificationResults");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = groupPermissionActionItem;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Object>("/tasks/{id}/group/recertification/permission", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SaveGroupPermissionRecertificationResults", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// save remove permission report 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="securitySearchResult"> (optional)</param>
        /// <returns></returns>
        public void SaveRemovePermissionReport (Guid id, List<SecuritySearchResult> securitySearchResult = null)
        {
             SaveRemovePermissionReportWithHttpInfo(id, securitySearchResult);
        }

        /// <summary>
        /// save remove permission report 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="securitySearchResult"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> SaveRemovePermissionReportWithHttpInfo (Guid id, List<SecuritySearchResult> securitySearchResult = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->SaveRemovePermissionReport");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = securitySearchResult;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post<Object>("/tasks/removepermission/{id}/permission", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SaveRemovePermissionReport", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// save remove permission report 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="securitySearchResult"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SaveRemovePermissionReportAsync (Guid id, List<SecuritySearchResult> securitySearchResult = null)
        {
             await SaveRemovePermissionReportAsyncWithHttpInfo(id, securitySearchResult);

        }

        /// <summary>
        /// save remove permission report 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="securitySearchResult"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> SaveRemovePermissionReportAsyncWithHttpInfo (Guid id, List<SecuritySearchResult> securitySearchResult = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->SaveRemovePermissionReport");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = securitySearchResult;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Object>("/tasks/removepermission/{id}/permission", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SaveRemovePermissionReport", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// save site metadata recertification metadata 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="requestMetadata"> (optional)</param>
        /// <returns></returns>
        public void SaveSiteMetadataRecertificationResult (Guid id, List<RequestMetadata> requestMetadata = null)
        {
             SaveSiteMetadataRecertificationResultWithHttpInfo(id, requestMetadata);
        }

        /// <summary>
        /// save site metadata recertification metadata 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="requestMetadata"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> SaveSiteMetadataRecertificationResultWithHttpInfo (Guid id, List<RequestMetadata> requestMetadata = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->SaveSiteMetadataRecertificationResult");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = requestMetadata;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post<Object>("/tasks/{id}/site/recertification/metadata", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SaveSiteMetadataRecertificationResult", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// save site metadata recertification metadata 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="requestMetadata"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SaveSiteMetadataRecertificationResultAsync (Guid id, List<RequestMetadata> requestMetadata = null)
        {
             await SaveSiteMetadataRecertificationResultAsyncWithHttpInfo(id, requestMetadata);

        }

        /// <summary>
        /// save site metadata recertification metadata 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="requestMetadata"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> SaveSiteMetadataRecertificationResultAsyncWithHttpInfo (Guid id, List<RequestMetadata> requestMetadata = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->SaveSiteMetadataRecertificationResult");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = requestMetadata;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Object>("/tasks/{id}/site/recertification/metadata", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SaveSiteMetadataRecertificationResult", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// save site permission recertification permissions 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="permissionActionItem"> (optional)</param>
        /// <returns></returns>
        public void SaveSitePermissionRecertificationResult (Guid id, List<PermissionActionItem> permissionActionItem = null)
        {
             SaveSitePermissionRecertificationResultWithHttpInfo(id, permissionActionItem);
        }

        /// <summary>
        /// save site permission recertification permissions 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="permissionActionItem"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> SaveSitePermissionRecertificationResultWithHttpInfo (Guid id, List<PermissionActionItem> permissionActionItem = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->SaveSitePermissionRecertificationResult");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = permissionActionItem;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post<Object>("/tasks/{id}/site/recertification/permission", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SaveSitePermissionRecertificationResult", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// save site permission recertification permissions 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="permissionActionItem"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SaveSitePermissionRecertificationResultAsync (Guid id, List<PermissionActionItem> permissionActionItem = null)
        {
             await SaveSitePermissionRecertificationResultAsyncWithHttpInfo(id, permissionActionItem);

        }

        /// <summary>
        /// save site permission recertification permissions 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="permissionActionItem"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> SaveSitePermissionRecertificationResultAsyncWithHttpInfo (Guid id, List<PermissionActionItem> permissionActionItem = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->SaveSitePermissionRecertificationResult");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = permissionActionItem;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Object>("/tasks/{id}/site/recertification/permission", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SaveSitePermissionRecertificationResult", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// skip error task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="commentsParam"> (optional)</param>
        /// <returns></returns>
        public void SkipErrorTask (Guid id, CommentsParam commentsParam = null)
        {
             SkipErrorTaskWithHttpInfo(id, commentsParam);
        }

        /// <summary>
        /// skip error task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="commentsParam"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> SkipErrorTaskWithHttpInfo (Guid id, CommentsParam commentsParam = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->SkipErrorTask");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = commentsParam;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post<Object>("/tasks/{id}/skip", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SkipErrorTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// skip error task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="commentsParam"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SkipErrorTaskAsync (Guid id, CommentsParam commentsParam = null)
        {
             await SkipErrorTaskAsyncWithHttpInfo(id, commentsParam);

        }

        /// <summary>
        /// skip error task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="commentsParam"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> SkipErrorTaskAsyncWithHttpInfo (Guid id, CommentsParam commentsParam = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->SkipErrorTask");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = commentsParam;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Object>("/tasks/{id}/skip", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SkipErrorTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// specify primary and secondary contact when primary contact is deactived 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="primarycontact"> (optional)</param>
        /// <param name="secondarycontact"> (optional)</param>
        /// <param name="primarycontactemail"> (optional)</param>
        /// <param name="secodnarycontactemail"> (optional)</param>
        /// <returns></returns>
        public void SpecifyPrimaryAndSecondaryContactWhenPrimaryContactIsDeactived (Guid id, string primarycontact = null, string secondarycontact = null, Guid? primarycontactemail = null, Guid? secodnarycontactemail = null)
        {
             SpecifyPrimaryAndSecondaryContactWhenPrimaryContactIsDeactivedWithHttpInfo(id, primarycontact, secondarycontact, primarycontactemail, secodnarycontactemail);
        }

        /// <summary>
        /// specify primary and secondary contact when primary contact is deactived 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="primarycontact"> (optional)</param>
        /// <param name="secondarycontact"> (optional)</param>
        /// <param name="primarycontactemail"> (optional)</param>
        /// <param name="secodnarycontactemail"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> SpecifyPrimaryAndSecondaryContactWhenPrimaryContactIsDeactivedWithHttpInfo (Guid id, string primarycontact = null, string secondarycontact = null, Guid? primarycontactemail = null, Guid? secodnarycontactemail = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->SpecifyPrimaryAndSecondaryContactWhenPrimaryContactIsDeactived");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (primarycontact != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "primarycontact", primarycontact))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (secondarycontact != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "secondarycontact", secondarycontact))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (primarycontactemail != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "primarycontactemail", primarycontactemail))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (secodnarycontactemail != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "secodnarycontactemail", secodnarycontactemail))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post<Object>("/tasks/{id}/election/specify/contacts", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SpecifyPrimaryAndSecondaryContactWhenPrimaryContactIsDeactived", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// specify primary and secondary contact when primary contact is deactived 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="primarycontact"> (optional)</param>
        /// <param name="secondarycontact"> (optional)</param>
        /// <param name="primarycontactemail"> (optional)</param>
        /// <param name="secodnarycontactemail"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SpecifyPrimaryAndSecondaryContactWhenPrimaryContactIsDeactivedAsync (Guid id, string primarycontact = null, string secondarycontact = null, Guid? primarycontactemail = null, Guid? secodnarycontactemail = null)
        {
             await SpecifyPrimaryAndSecondaryContactWhenPrimaryContactIsDeactivedAsyncWithHttpInfo(id, primarycontact, secondarycontact, primarycontactemail, secodnarycontactemail);

        }

        /// <summary>
        /// specify primary and secondary contact when primary contact is deactived 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="primarycontact"> (optional)</param>
        /// <param name="secondarycontact"> (optional)</param>
        /// <param name="primarycontactemail"> (optional)</param>
        /// <param name="secodnarycontactemail"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> SpecifyPrimaryAndSecondaryContactWhenPrimaryContactIsDeactivedAsyncWithHttpInfo (Guid id, string primarycontact = null, string secondarycontact = null, Guid? primarycontactemail = null, Guid? secodnarycontactemail = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->SpecifyPrimaryAndSecondaryContactWhenPrimaryContactIsDeactived");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (primarycontact != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "primarycontact", primarycontact))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (secondarycontact != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "secondarycontact", secondarycontact))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (primarycontactemail != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "primarycontactemail", primarycontactemail))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (secodnarycontactemail != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "secodnarycontactemail", secodnarycontactemail))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Object>("/tasks/{id}/election/specify/contacts", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SpecifyPrimaryAndSecondaryContactWhenPrimaryContactIsDeactived", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// specify secondary contact when secondary contact is deactived 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="secondarycontact"> (optional)</param>
        /// <returns></returns>
        public void SpecifySecondaryContactWhenSecondaryContactIsDeactived (Guid id, string secondarycontact = null)
        {
             SpecifySecondaryContactWhenSecondaryContactIsDeactivedWithHttpInfo(id, secondarycontact);
        }

        /// <summary>
        /// specify secondary contact when secondary contact is deactived 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="secondarycontact"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> SpecifySecondaryContactWhenSecondaryContactIsDeactivedWithHttpInfo (Guid id, string secondarycontact = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->SpecifySecondaryContactWhenSecondaryContactIsDeactived");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (secondarycontact != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "secondarycontact", secondarycontact))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post<Object>("/tasks/{id}/election/specify/secondarycontact", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SpecifySecondaryContactWhenSecondaryContactIsDeactived", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// specify secondary contact when secondary contact is deactived 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="secondarycontact"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SpecifySecondaryContactWhenSecondaryContactIsDeactivedAsync (Guid id, string secondarycontact = null)
        {
             await SpecifySecondaryContactWhenSecondaryContactIsDeactivedAsyncWithHttpInfo(id, secondarycontact);

        }

        /// <summary>
        /// specify secondary contact when secondary contact is deactived 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="secondarycontact"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> SpecifySecondaryContactWhenSecondaryContactIsDeactivedAsyncWithHttpInfo (Guid id, string secondarycontact = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->SpecifySecondaryContactWhenSecondaryContactIsDeactived");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (secondarycontact != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "secondarycontact", secondarycontact))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Object>("/tasks/{id}/election/specify/secondarycontact", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SpecifySecondaryContactWhenSecondaryContactIsDeactived", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit archive group auto task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoTaskArchiveRequest"> (optional)</param>
        /// <returns></returns>
        public void SubmitArchiveGroupAutoTask (AutoTaskArchiveRequest autoTaskArchiveRequest = null)
        {
             SubmitArchiveGroupAutoTaskWithHttpInfo(autoTaskArchiveRequest);
        }

        /// <summary>
        /// submit archive group auto task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoTaskArchiveRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> SubmitArchiveGroupAutoTaskWithHttpInfo (AutoTaskArchiveRequest autoTaskArchiveRequest = null)
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = autoTaskArchiveRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post<Object>("/tasks/archivegroup", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitArchiveGroupAutoTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit archive group auto task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoTaskArchiveRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SubmitArchiveGroupAutoTaskAsync (AutoTaskArchiveRequest autoTaskArchiveRequest = null)
        {
             await SubmitArchiveGroupAutoTaskAsyncWithHttpInfo(autoTaskArchiveRequest);

        }

        /// <summary>
        /// submit archive group auto task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoTaskArchiveRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> SubmitArchiveGroupAutoTaskAsyncWithHttpInfo (AutoTaskArchiveRequest autoTaskArchiveRequest = null)
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = autoTaskArchiveRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Object>("/tasks/archivegroup", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitArchiveGroupAutoTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit site archive auto task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoTaskArchiveRequest"> (optional)</param>
        /// <returns></returns>
        public void SubmitArchiveSiteAutoTask (AutoTaskArchiveRequest autoTaskArchiveRequest = null)
        {
             SubmitArchiveSiteAutoTaskWithHttpInfo(autoTaskArchiveRequest);
        }

        /// <summary>
        /// submit site archive auto task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoTaskArchiveRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> SubmitArchiveSiteAutoTaskWithHttpInfo (AutoTaskArchiveRequest autoTaskArchiveRequest = null)
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = autoTaskArchiveRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post<Object>("/tasks/archivesite", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitArchiveSiteAutoTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit site archive auto task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoTaskArchiveRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SubmitArchiveSiteAutoTaskAsync (AutoTaskArchiveRequest autoTaskArchiveRequest = null)
        {
             await SubmitArchiveSiteAutoTaskAsyncWithHttpInfo(autoTaskArchiveRequest);

        }

        /// <summary>
        /// submit site archive auto task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoTaskArchiveRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> SubmitArchiveSiteAutoTaskAsyncWithHttpInfo (AutoTaskArchiveRequest autoTaskArchiveRequest = null)
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = autoTaskArchiveRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Object>("/tasks/archivesite", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitArchiveSiteAutoTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit site policy change auto task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoTaskChangePolicyRequest"> (optional)</param>
        /// <returns></returns>
        public void SubmitChangeSitePolicyAutoTask (AutoTaskChangePolicyRequest autoTaskChangePolicyRequest = null)
        {
             SubmitChangeSitePolicyAutoTaskWithHttpInfo(autoTaskChangePolicyRequest);
        }

        /// <summary>
        /// submit site policy change auto task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoTaskChangePolicyRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> SubmitChangeSitePolicyAutoTaskWithHttpInfo (AutoTaskChangePolicyRequest autoTaskChangePolicyRequest = null)
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = autoTaskChangePolicyRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post<Object>("/tasks/changesitepolicy", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitChangeSitePolicyAutoTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit site policy change auto task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoTaskChangePolicyRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SubmitChangeSitePolicyAutoTaskAsync (AutoTaskChangePolicyRequest autoTaskChangePolicyRequest = null)
        {
             await SubmitChangeSitePolicyAutoTaskAsyncWithHttpInfo(autoTaskChangePolicyRequest);

        }

        /// <summary>
        /// submit site policy change auto task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoTaskChangePolicyRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> SubmitChangeSitePolicyAutoTaskAsyncWithHttpInfo (AutoTaskChangePolicyRequest autoTaskChangePolicyRequest = null)
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = autoTaskChangePolicyRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Object>("/tasks/changesitepolicy", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitChangeSitePolicyAutoTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit group continue access auto task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="commentsParam"> (optional)</param>
        /// <returns></returns>
        public void SubmitContinueAccessGroupAutoTask (Guid? id = null, CommentsParam commentsParam = null)
        {
             SubmitContinueAccessGroupAutoTaskWithHttpInfo(id, commentsParam);
        }

        /// <summary>
        /// submit group continue access auto task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="commentsParam"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> SubmitContinueAccessGroupAutoTaskWithHttpInfo (Guid? id = null, CommentsParam commentsParam = null)
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "id", id))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = commentsParam;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post<Object>("/tasks/continueaccessgroup", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitContinueAccessGroupAutoTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit group continue access auto task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="commentsParam"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SubmitContinueAccessGroupAutoTaskAsync (Guid? id = null, CommentsParam commentsParam = null)
        {
             await SubmitContinueAccessGroupAutoTaskAsyncWithHttpInfo(id, commentsParam);

        }

        /// <summary>
        /// submit group continue access auto task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="commentsParam"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> SubmitContinueAccessGroupAutoTaskAsyncWithHttpInfo (Guid? id = null, CommentsParam commentsParam = null)
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "id", id))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = commentsParam;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Object>("/tasks/continueaccessgroup", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitContinueAccessGroupAutoTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit site continue access auto task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="commentsParam"> (optional)</param>
        /// <returns></returns>
        public void SubmitContinueAccessSiteAutoTask (Guid? id = null, CommentsParam commentsParam = null)
        {
             SubmitContinueAccessSiteAutoTaskWithHttpInfo(id, commentsParam);
        }

        /// <summary>
        /// submit site continue access auto task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="commentsParam"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> SubmitContinueAccessSiteAutoTaskWithHttpInfo (Guid? id = null, CommentsParam commentsParam = null)
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "id", id))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = commentsParam;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post<Object>("/tasks/continueaccesssite", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitContinueAccessSiteAutoTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit site continue access auto task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="commentsParam"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SubmitContinueAccessSiteAutoTaskAsync (Guid? id = null, CommentsParam commentsParam = null)
        {
             await SubmitContinueAccessSiteAutoTaskAsyncWithHttpInfo(id, commentsParam);

        }

        /// <summary>
        /// submit site continue access auto task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="commentsParam"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> SubmitContinueAccessSiteAutoTaskAsyncWithHttpInfo (Guid? id = null, CommentsParam commentsParam = null)
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "id", id))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = commentsParam;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Object>("/tasks/continueaccesssite", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitContinueAccessSiteAutoTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit delete group auto task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoTaskDeleteRequest"> (optional)</param>
        /// <returns></returns>
        public void SubmitDeleteGroupAutoTask (AutoTaskDeleteRequest autoTaskDeleteRequest = null)
        {
             SubmitDeleteGroupAutoTaskWithHttpInfo(autoTaskDeleteRequest);
        }

        /// <summary>
        /// submit delete group auto task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoTaskDeleteRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> SubmitDeleteGroupAutoTaskWithHttpInfo (AutoTaskDeleteRequest autoTaskDeleteRequest = null)
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = autoTaskDeleteRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post<Object>("/tasks/deletegroup", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitDeleteGroupAutoTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit delete group auto task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoTaskDeleteRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SubmitDeleteGroupAutoTaskAsync (AutoTaskDeleteRequest autoTaskDeleteRequest = null)
        {
             await SubmitDeleteGroupAutoTaskAsyncWithHttpInfo(autoTaskDeleteRequest);

        }

        /// <summary>
        /// submit delete group auto task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoTaskDeleteRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> SubmitDeleteGroupAutoTaskAsyncWithHttpInfo (AutoTaskDeleteRequest autoTaskDeleteRequest = null)
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = autoTaskDeleteRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Object>("/tasks/deletegroup", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitDeleteGroupAutoTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit site delete auto task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoTaskDeleteRequest"> (optional)</param>
        /// <returns></returns>
        public void SubmitDeleteSiteAutoTask (AutoTaskDeleteRequest autoTaskDeleteRequest = null)
        {
             SubmitDeleteSiteAutoTaskWithHttpInfo(autoTaskDeleteRequest);
        }

        /// <summary>
        /// submit site delete auto task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoTaskDeleteRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> SubmitDeleteSiteAutoTaskWithHttpInfo (AutoTaskDeleteRequest autoTaskDeleteRequest = null)
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = autoTaskDeleteRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post<Object>("/tasks/deletesite", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitDeleteSiteAutoTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit site delete auto task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoTaskDeleteRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SubmitDeleteSiteAutoTaskAsync (AutoTaskDeleteRequest autoTaskDeleteRequest = null)
        {
             await SubmitDeleteSiteAutoTaskAsyncWithHttpInfo(autoTaskDeleteRequest);

        }

        /// <summary>
        /// submit site delete auto task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoTaskDeleteRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> SubmitDeleteSiteAutoTaskAsyncWithHttpInfo (AutoTaskDeleteRequest autoTaskDeleteRequest = null)
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = autoTaskDeleteRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Object>("/tasks/deletesite", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitDeleteSiteAutoTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit extend group auto task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoTaskExtendRequest"> (optional)</param>
        /// <returns></returns>
        public void SubmitExtendGroupAutoTask (AutoTaskExtendRequest autoTaskExtendRequest = null)
        {
             SubmitExtendGroupAutoTaskWithHttpInfo(autoTaskExtendRequest);
        }

        /// <summary>
        /// submit extend group auto task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoTaskExtendRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> SubmitExtendGroupAutoTaskWithHttpInfo (AutoTaskExtendRequest autoTaskExtendRequest = null)
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = autoTaskExtendRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post<Object>("/tasks/extendgroup", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitExtendGroupAutoTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit extend group auto task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoTaskExtendRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SubmitExtendGroupAutoTaskAsync (AutoTaskExtendRequest autoTaskExtendRequest = null)
        {
             await SubmitExtendGroupAutoTaskAsyncWithHttpInfo(autoTaskExtendRequest);

        }

        /// <summary>
        /// submit extend group auto task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoTaskExtendRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> SubmitExtendGroupAutoTaskAsyncWithHttpInfo (AutoTaskExtendRequest autoTaskExtendRequest = null)
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = autoTaskExtendRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Object>("/tasks/extendgroup", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitExtendGroupAutoTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit site extend auto task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoTaskExtendRequest"> (optional)</param>
        /// <returns></returns>
        public void SubmitExtendSiteAutoTask (AutoTaskExtendRequest autoTaskExtendRequest = null)
        {
             SubmitExtendSiteAutoTaskWithHttpInfo(autoTaskExtendRequest);
        }

        /// <summary>
        /// submit site extend auto task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoTaskExtendRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> SubmitExtendSiteAutoTaskWithHttpInfo (AutoTaskExtendRequest autoTaskExtendRequest = null)
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = autoTaskExtendRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post<Object>("/tasks/extendsite", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitExtendSiteAutoTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit site extend auto task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoTaskExtendRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SubmitExtendSiteAutoTaskAsync (AutoTaskExtendRequest autoTaskExtendRequest = null)
        {
             await SubmitExtendSiteAutoTaskAsyncWithHttpInfo(autoTaskExtendRequest);

        }

        /// <summary>
        /// submit site extend auto task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoTaskExtendRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> SubmitExtendSiteAutoTaskAsyncWithHttpInfo (AutoTaskExtendRequest autoTaskExtendRequest = null)
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = autoTaskExtendRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Object>("/tasks/extendsite", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitExtendSiteAutoTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit site/group recertification task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="commentsParam"> (optional)</param>
        /// <returns></returns>
        public void SubmitRecertificationTask (Guid id, CommentsParam commentsParam = null)
        {
             SubmitRecertificationTaskWithHttpInfo(id, commentsParam);
        }

        /// <summary>
        /// submit site/group recertification task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="commentsParam"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> SubmitRecertificationTaskWithHttpInfo (Guid id, CommentsParam commentsParam = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->SubmitRecertificationTask");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = commentsParam;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post<Object>("/tasks/{id}/submit", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitRecertificationTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit site/group recertification task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="commentsParam"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SubmitRecertificationTaskAsync (Guid id, CommentsParam commentsParam = null)
        {
             await SubmitRecertificationTaskAsyncWithHttpInfo(id, commentsParam);

        }

        /// <summary>
        /// submit site/group recertification task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="commentsParam"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> SubmitRecertificationTaskAsyncWithHttpInfo (Guid id, CommentsParam commentsParam = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->SubmitRecertificationTask");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = commentsParam;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Object>("/tasks/{id}/submit", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitRecertificationTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// view site ownership recertification task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>OwnershipRecertification</returns>
        public OwnershipRecertification ViewSiteOwnershipRecertificationTask (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<OwnershipRecertification> localVarResponse = ViewSiteOwnershipRecertificationTaskWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// view site ownership recertification task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of OwnershipRecertification</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< OwnershipRecertification > ViewSiteOwnershipRecertificationTaskWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->ViewSiteOwnershipRecertificationTask");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< OwnershipRecertification >("/tasks/{id}/site/recertification/ownership", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ViewSiteOwnershipRecertificationTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// view site ownership recertification task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of OwnershipRecertification</returns>
        public async System.Threading.Tasks.Task<OwnershipRecertification> ViewSiteOwnershipRecertificationTaskAsync (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<OwnershipRecertification> localVarResponse = await ViewSiteOwnershipRecertificationTaskAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// view site ownership recertification task 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (OwnershipRecertification)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<OwnershipRecertification>> ViewSiteOwnershipRecertificationTaskAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling TasksApi->ViewSiteOwnershipRecertificationTask");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<OwnershipRecertification>("/tasks/{id}/site/recertification/ownership", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ViewSiteOwnershipRecertificationTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
