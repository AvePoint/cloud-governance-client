/* 
 * Cloud Governance Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Cloud.Governance.Client.Client.OpenAPIDateConverter;

namespace Cloud.Governance.Client.Model
{
    /// <summary>
    /// ElectUserRequestModel
    /// </summary>
    [DataContract]
    public partial class ElectUserRequestModel :  IEquatable<ElectUserRequestModel>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets DurationType
        /// </summary>
        [DataMember(Name="durationType", EmitDefaultValue=false)]
        public ElectionDurationType? DurationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ElectUserRequestModel" /> class.
        /// </summary>
        /// <param name="title">title.</param>
        /// <param name="excludeUsers">excludeUsers.</param>
        /// <param name="enableNotifyTask">enableNotifyTask.</param>
        /// <param name="taskEmailTemplateId">taskEmailTemplateId.</param>
        /// <param name="enableNotifyPrimaryContact">enableNotifyPrimaryContact.</param>
        /// <param name="notifyPrimaryContactTemplateId">notifyPrimaryContactTemplateId.</param>
        /// <param name="enableNotifySecondaryContact">enableNotifySecondaryContact.</param>
        /// <param name="notifySecondaryContactTemplateId">notifySecondaryContactTemplateId.</param>
        /// <param name="duration">duration.</param>
        /// <param name="durationType">durationType.</param>
        /// <param name="isEnableTaskReminder">isEnableTaskReminder.</param>
        /// <param name="taskReminderProfileId">taskReminderProfileId.</param>
        /// <param name="selectedSiteIds">selectedSiteIds.</param>
        public ElectUserRequestModel(string title = default(string), List<ApiUser> excludeUsers = default(List<ApiUser>), bool enableNotifyTask = default(bool), Guid? taskEmailTemplateId = default(Guid?), bool enableNotifyPrimaryContact = default(bool), Guid? notifyPrimaryContactTemplateId = default(Guid?), bool enableNotifySecondaryContact = default(bool), Guid? notifySecondaryContactTemplateId = default(Guid?), int duration = default(int), ElectionDurationType durationType = default(ElectionDurationType), bool isEnableTaskReminder = default(bool), Guid? taskReminderProfileId = default(Guid?), List<string> selectedSiteIds = default(List<string>))
        {
            this.Title = title;
            this.ExcludeUsers = excludeUsers;
            this.EnableNotifyTask = enableNotifyTask;
            this.TaskEmailTemplateId = taskEmailTemplateId;
            this.EnableNotifyPrimaryContact = enableNotifyPrimaryContact;
            this.NotifyPrimaryContactTemplateId = notifyPrimaryContactTemplateId;
            this.EnableNotifySecondaryContact = enableNotifySecondaryContact;
            this.NotifySecondaryContactTemplateId = notifySecondaryContactTemplateId;
            this.Duration = duration;
            this.DurationType = durationType;
            this.IsEnableTaskReminder = isEnableTaskReminder;
            this.TaskReminderProfileId = taskReminderProfileId;
            this.SelectedSiteIds = selectedSiteIds;
        }
        
        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=true)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets ExcludeUsers
        /// </summary>
        [DataMember(Name="excludeUsers", EmitDefaultValue=true)]
        public List<ApiUser> ExcludeUsers { get; set; }

        /// <summary>
        /// Gets or Sets EnableNotifyTask
        /// </summary>
        [DataMember(Name="enableNotifyTask", EmitDefaultValue=false)]
        public bool EnableNotifyTask { get; set; }

        /// <summary>
        /// Gets or Sets TaskEmailTemplateId
        /// </summary>
        [DataMember(Name="taskEmailTemplateId", EmitDefaultValue=true)]
        public Guid? TaskEmailTemplateId { get; set; }

        /// <summary>
        /// Gets or Sets EnableNotifyPrimaryContact
        /// </summary>
        [DataMember(Name="enableNotifyPrimaryContact", EmitDefaultValue=false)]
        public bool EnableNotifyPrimaryContact { get; set; }

        /// <summary>
        /// Gets or Sets NotifyPrimaryContactTemplateId
        /// </summary>
        [DataMember(Name="notifyPrimaryContactTemplateId", EmitDefaultValue=true)]
        public Guid? NotifyPrimaryContactTemplateId { get; set; }

        /// <summary>
        /// Gets or Sets EnableNotifySecondaryContact
        /// </summary>
        [DataMember(Name="enableNotifySecondaryContact", EmitDefaultValue=false)]
        public bool EnableNotifySecondaryContact { get; set; }

        /// <summary>
        /// Gets or Sets NotifySecondaryContactTemplateId
        /// </summary>
        [DataMember(Name="notifySecondaryContactTemplateId", EmitDefaultValue=true)]
        public Guid? NotifySecondaryContactTemplateId { get; set; }

        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public int Duration { get; set; }

        /// <summary>
        /// Gets or Sets IsEnableTaskReminder
        /// </summary>
        [DataMember(Name="isEnableTaskReminder", EmitDefaultValue=false)]
        public bool IsEnableTaskReminder { get; set; }

        /// <summary>
        /// Gets or Sets TaskReminderProfileId
        /// </summary>
        [DataMember(Name="taskReminderProfileId", EmitDefaultValue=true)]
        public Guid? TaskReminderProfileId { get; set; }

        /// <summary>
        /// Gets or Sets SelectedSiteIds
        /// </summary>
        [DataMember(Name="selectedSiteIds", EmitDefaultValue=true)]
        public List<string> SelectedSiteIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ElectUserRequestModel {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  ExcludeUsers: ").Append(ExcludeUsers).Append("\n");
            sb.Append("  EnableNotifyTask: ").Append(EnableNotifyTask).Append("\n");
            sb.Append("  TaskEmailTemplateId: ").Append(TaskEmailTemplateId).Append("\n");
            sb.Append("  EnableNotifyPrimaryContact: ").Append(EnableNotifyPrimaryContact).Append("\n");
            sb.Append("  NotifyPrimaryContactTemplateId: ").Append(NotifyPrimaryContactTemplateId).Append("\n");
            sb.Append("  EnableNotifySecondaryContact: ").Append(EnableNotifySecondaryContact).Append("\n");
            sb.Append("  NotifySecondaryContactTemplateId: ").Append(NotifySecondaryContactTemplateId).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  DurationType: ").Append(DurationType).Append("\n");
            sb.Append("  IsEnableTaskReminder: ").Append(IsEnableTaskReminder).Append("\n");
            sb.Append("  TaskReminderProfileId: ").Append(TaskReminderProfileId).Append("\n");
            sb.Append("  SelectedSiteIds: ").Append(SelectedSiteIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ElectUserRequestModel);
        }

        /// <summary>
        /// Returns true if ElectUserRequestModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ElectUserRequestModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ElectUserRequestModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.ExcludeUsers == input.ExcludeUsers ||
                    this.ExcludeUsers != null &&
                    input.ExcludeUsers != null &&
                    this.ExcludeUsers.SequenceEqual(input.ExcludeUsers)
                ) && 
                (
                    this.EnableNotifyTask == input.EnableNotifyTask ||
                    this.EnableNotifyTask.Equals(input.EnableNotifyTask)
                ) && 
                (
                    this.TaskEmailTemplateId == input.TaskEmailTemplateId ||
                    (this.TaskEmailTemplateId != null &&
                    this.TaskEmailTemplateId.Equals(input.TaskEmailTemplateId))
                ) && 
                (
                    this.EnableNotifyPrimaryContact == input.EnableNotifyPrimaryContact ||
                    this.EnableNotifyPrimaryContact.Equals(input.EnableNotifyPrimaryContact)
                ) && 
                (
                    this.NotifyPrimaryContactTemplateId == input.NotifyPrimaryContactTemplateId ||
                    (this.NotifyPrimaryContactTemplateId != null &&
                    this.NotifyPrimaryContactTemplateId.Equals(input.NotifyPrimaryContactTemplateId))
                ) && 
                (
                    this.EnableNotifySecondaryContact == input.EnableNotifySecondaryContact ||
                    this.EnableNotifySecondaryContact.Equals(input.EnableNotifySecondaryContact)
                ) && 
                (
                    this.NotifySecondaryContactTemplateId == input.NotifySecondaryContactTemplateId ||
                    (this.NotifySecondaryContactTemplateId != null &&
                    this.NotifySecondaryContactTemplateId.Equals(input.NotifySecondaryContactTemplateId))
                ) && 
                (
                    this.Duration == input.Duration ||
                    this.Duration.Equals(input.Duration)
                ) && 
                (
                    this.DurationType == input.DurationType ||
                    this.DurationType.Equals(input.DurationType)
                ) && 
                (
                    this.IsEnableTaskReminder == input.IsEnableTaskReminder ||
                    this.IsEnableTaskReminder.Equals(input.IsEnableTaskReminder)
                ) && 
                (
                    this.TaskReminderProfileId == input.TaskReminderProfileId ||
                    (this.TaskReminderProfileId != null &&
                    this.TaskReminderProfileId.Equals(input.TaskReminderProfileId))
                ) && 
                (
                    this.SelectedSiteIds == input.SelectedSiteIds ||
                    this.SelectedSiteIds != null &&
                    input.SelectedSiteIds != null &&
                    this.SelectedSiteIds.SequenceEqual(input.SelectedSiteIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.ExcludeUsers != null)
                    hashCode = hashCode * 59 + this.ExcludeUsers.GetHashCode();
                hashCode = hashCode * 59 + this.EnableNotifyTask.GetHashCode();
                if (this.TaskEmailTemplateId != null)
                    hashCode = hashCode * 59 + this.TaskEmailTemplateId.GetHashCode();
                hashCode = hashCode * 59 + this.EnableNotifyPrimaryContact.GetHashCode();
                if (this.NotifyPrimaryContactTemplateId != null)
                    hashCode = hashCode * 59 + this.NotifyPrimaryContactTemplateId.GetHashCode();
                hashCode = hashCode * 59 + this.EnableNotifySecondaryContact.GetHashCode();
                if (this.NotifySecondaryContactTemplateId != null)
                    hashCode = hashCode * 59 + this.NotifySecondaryContactTemplateId.GetHashCode();
                hashCode = hashCode * 59 + this.Duration.GetHashCode();
                hashCode = hashCode * 59 + this.DurationType.GetHashCode();
                hashCode = hashCode * 59 + this.IsEnableTaskReminder.GetHashCode();
                if (this.TaskReminderProfileId != null)
                    hashCode = hashCode * 59 + this.TaskReminderProfileId.GetHashCode();
                if (this.SelectedSiteIds != null)
                    hashCode = hashCode * 59 + this.SelectedSiteIds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
