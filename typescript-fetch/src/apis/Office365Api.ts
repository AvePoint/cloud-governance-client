// tslint:disable
/**
 * Cloud Governance Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ApiTermInfoPageResult,
    ApiTermInfoPageResultFromJSON,
    ApiTermInfoPageResultToJSON,
    ApiUserPageResult,
    ApiUserPageResultFromJSON,
    ApiUserPageResultToJSON,
    AzureADGroup,
    AzureADGroupFromJSON,
    AzureADGroupToJSON,
    GuidModel,
    GuidModelFromJSON,
    GuidModelToJSON,
    NodeType,
    NodeTypeFromJSON,
    NodeTypeToJSON,
    PermissionLevel,
    PermissionLevelFromJSON,
    PermissionLevelToJSON,
    SPGroup,
    SPGroupFromJSON,
    SPGroupToJSON,
    SPNodePageResult,
    SPNodePageResultFromJSON,
    SPNodePageResultToJSON,
    SPRoleAssignment,
    SPRoleAssignmentFromJSON,
    SPRoleAssignmentToJSON,
    SiteInfo,
    SiteInfoFromJSON,
    SiteInfoToJSON,
    SiteTemplate,
    SiteTemplateFromJSON,
    SiteTemplateToJSON,
    StringModel,
    StringModelFromJSON,
    StringModelToJSON,
    UserGroupPermissions,
    UserGroupPermissionsFromJSON,
    UserGroupPermissionsToJSON,
    YammerGroup,
    YammerGroupFromJSON,
    YammerGroupToJSON,
} from '../models';

export interface GetGroupInfoRequest {
    tenantid: string;
    id: string;
}

export interface GetGroupMembersRequest {
    email: string;
    top?: number;
    skip?: number;
    search?: string;
}

export interface GetGroupMembersByGroupNameRequest {
    url: string;
    name?: string;
    top?: number;
    skip?: number;
    search?: string;
}

export interface GetGroupOwnersRequest {
    email: string;
    top?: number;
    skip?: number;
    search?: string;
}

export interface GetHubSitesRequest {
    tenantid: string;
}

export interface GetHubSitesFromTenantOfSiteRequest {
    siteUrl?: string;
}

export interface GetPermissionsRequest {
    webUrl: string;
}

export interface GetRoleAssignmentRequest {
    url: string;
    type: NodeType;
}

export interface GetSiteDesignsRequest {
    siteUrl?: string;
}

export interface GetSiteInfoRequest {
    fullUrl: string;
}

export interface GetSitePermissionLevelsRequest {
    uri: string;
}

export interface GetSiteSharePointGroupsRequest {
    uri: string;
}

export interface GetSiteTemplatesRequest {
    languageid: number;
    url?: string;
}

export interface GetYammerGroupRequest {
    networkid: string;
    name: string;
}

export interface LoadContainersRequest {
    serviceid: string;
    top?: number;
    skip?: number;
    search?: string;
}

export interface LoadFoldersRequest {
    listid: string;
    folderorlisturl: string;
    top?: number;
    skip?: number;
    search?: string;
}

export interface LoadItemsRequest {
    listid: string;
    folderorlisturl: string;
    top?: number;
    skip?: number;
    search?: string;
}

export interface LoadListsRequest {
    siteorweburl: string;
    top?: number;
    skip?: number;
    search?: string;
}

export interface LoadManagedMetadataRequest {
    termStoreid: string;
    groupid: string;
    termsetid: string;
    parentid: string;
    admincenterurl: string;
    skip?: number;
    top?: number;
    search?: string;
}

export interface LoadManagedSitesRequest {
    serviceid: string;
    containerid: string;
    isselected: boolean;
    top?: number;
    skip?: number;
    search?: string;
}

export interface LoadWebsRequest {
    serviceid: string;
    siteorwebid: string;
    isselected: boolean;
    issite: boolean;
    siteOrWebUrl: string;
    top?: number;
    skip?: number;
    search?: string;
}

/**
 * no description
 */
export class Office365Api extends runtime.BaseAPI {

    /**
     * get group information
     */
    async getGroupInfoRaw(requestParameters: GetGroupInfoRequest): Promise<runtime.ApiResponse<AzureADGroup>> {
        if (requestParameters.tenantid === null || requestParameters.tenantid === undefined) {
            throw new runtime.RequiredError('tenantid','Required parameter requestParameters.tenantid was null or undefined when calling getGroupInfo.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getGroupInfo.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/office365/groups/{tenantid}/{id}`.replace(`{${"tenantid"}}`, encodeURIComponent(String(requestParameters.tenantid))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AzureADGroupFromJSON(jsonValue));
    }

    /**
     * get group information
     */
    async getGroupInfo(requestParameters: GetGroupInfoRequest): Promise<AzureADGroup> {
        const response = await this.getGroupInfoRaw(requestParameters);
        return await response.value();
    }

    /**
     * get group members by group email
     */
    async getGroupMembersRaw(requestParameters: GetGroupMembersRequest): Promise<runtime.ApiResponse<ApiUserPageResult>> {
        if (requestParameters.email === null || requestParameters.email === undefined) {
            throw new runtime.RequiredError('email','Required parameter requestParameters.email was null or undefined when calling getGroupMembers.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.top !== undefined) {
            queryParameters['top'] = requestParameters.top;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/office365/groups/{email}/members`.replace(`{${"email"}}`, encodeURIComponent(String(requestParameters.email))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiUserPageResultFromJSON(jsonValue));
    }

    /**
     * get group members by group email
     */
    async getGroupMembers(requestParameters: GetGroupMembersRequest): Promise<ApiUserPageResult> {
        const response = await this.getGroupMembersRaw(requestParameters);
        return await response.value();
    }

    /**
     * get group members by group name
     */
    async getGroupMembersByGroupNameRaw(requestParameters: GetGroupMembersByGroupNameRequest): Promise<runtime.ApiResponse<ApiUserPageResult>> {
        if (requestParameters.url === null || requestParameters.url === undefined) {
            throw new runtime.RequiredError('url','Required parameter requestParameters.url was null or undefined when calling getGroupMembersByGroupName.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.url !== undefined) {
            queryParameters['url'] = requestParameters.url;
        }

        if (requestParameters.top !== undefined) {
            queryParameters['top'] = requestParameters.top;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/office365/groups/members`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiUserPageResultFromJSON(jsonValue));
    }

    /**
     * get group members by group name
     */
    async getGroupMembersByGroupName(requestParameters: GetGroupMembersByGroupNameRequest): Promise<ApiUserPageResult> {
        const response = await this.getGroupMembersByGroupNameRaw(requestParameters);
        return await response.value();
    }

    /**
     * get group owners by group email
     */
    async getGroupOwnersRaw(requestParameters: GetGroupOwnersRequest): Promise<runtime.ApiResponse<ApiUserPageResult>> {
        if (requestParameters.email === null || requestParameters.email === undefined) {
            throw new runtime.RequiredError('email','Required parameter requestParameters.email was null or undefined when calling getGroupOwners.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.top !== undefined) {
            queryParameters['top'] = requestParameters.top;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/office365/groups/{email}/owners`.replace(`{${"email"}}`, encodeURIComponent(String(requestParameters.email))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiUserPageResultFromJSON(jsonValue));
    }

    /**
     * get group owners by group email
     */
    async getGroupOwners(requestParameters: GetGroupOwnersRequest): Promise<ApiUserPageResult> {
        const response = await this.getGroupOwnersRaw(requestParameters);
        return await response.value();
    }

    /**
     * get all hubsites from a specific tenant
     */
    async getHubSitesRaw(requestParameters: GetHubSitesRequest): Promise<runtime.ApiResponse<Array<GuidModel>>> {
        if (requestParameters.tenantid === null || requestParameters.tenantid === undefined) {
            throw new runtime.RequiredError('tenantid','Required parameter requestParameters.tenantid was null or undefined when calling getHubSites.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/office365/hubsites/{tenantid}`.replace(`{${"tenantid"}}`, encodeURIComponent(String(requestParameters.tenantid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GuidModelFromJSON));
    }

    /**
     * get all hubsites from a specific tenant
     */
    async getHubSites(requestParameters: GetHubSitesRequest): Promise<Array<GuidModel>> {
        const response = await this.getHubSitesRaw(requestParameters);
        return await response.value();
    }

    /**
     * get all hubsites from site\'s tenant
     */
    async getHubSitesFromTenantOfSiteRaw(requestParameters: GetHubSitesFromTenantOfSiteRequest): Promise<runtime.ApiResponse<Array<GuidModel>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.siteUrl !== undefined) {
            queryParameters['siteUrl'] = requestParameters.siteUrl;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/office365/hubsites`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GuidModelFromJSON));
    }

    /**
     * get all hubsites from site\'s tenant
     */
    async getHubSitesFromTenantOfSite(requestParameters: GetHubSitesFromTenantOfSiteRequest): Promise<Array<GuidModel>> {
        const response = await this.getHubSitesFromTenantOfSiteRaw(requestParameters);
        return await response.value();
    }

    /**
     * get all teams that owner is curernt user
     */
    async getOwnedTeamsRaw(): Promise<runtime.ApiResponse<Array<GuidModel>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/office365/teams/my`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GuidModelFromJSON));
    }

    /**
     * get all teams that owner is curernt user
     */
    async getOwnedTeams(): Promise<Array<GuidModel>> {
        const response = await this.getOwnedTeamsRaw();
        return await response.value();
    }

    /**
     * get web permissions for creating list request by web url
     */
    async getPermissionsRaw(requestParameters: GetPermissionsRequest): Promise<runtime.ApiResponse<UserGroupPermissions>> {
        if (requestParameters.webUrl === null || requestParameters.webUrl === undefined) {
            throw new runtime.RequiredError('webUrl','Required parameter requestParameters.webUrl was null or undefined when calling getPermissions.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.webUrl !== undefined) {
            queryParameters['webUrl'] = requestParameters.webUrl;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/office365/permissions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserGroupPermissionsFromJSON(jsonValue));
    }

    /**
     * get web permissions for creating list request by web url
     */
    async getPermissions(requestParameters: GetPermissionsRequest): Promise<UserGroupPermissions> {
        const response = await this.getPermissionsRaw(requestParameters);
        return await response.value();
    }

    /**
     * get site permimssion role assignment
     */
    async getRoleAssignmentRaw(requestParameters: GetRoleAssignmentRequest): Promise<runtime.ApiResponse<Array<SPRoleAssignment>>> {
        if (requestParameters.url === null || requestParameters.url === undefined) {
            throw new runtime.RequiredError('url','Required parameter requestParameters.url was null or undefined when calling getRoleAssignment.');
        }

        if (requestParameters.type === null || requestParameters.type === undefined) {
            throw new runtime.RequiredError('type','Required parameter requestParameters.type was null or undefined when calling getRoleAssignment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.url !== undefined) {
            queryParameters['url'] = requestParameters.url;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/office365/roleassignment`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SPRoleAssignmentFromJSON));
    }

    /**
     * get site permimssion role assignment
     */
    async getRoleAssignment(requestParameters: GetRoleAssignmentRequest): Promise<Array<SPRoleAssignment>> {
        const response = await this.getRoleAssignmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * get site designs by site url
     */
    async getSiteDesignsRaw(requestParameters: GetSiteDesignsRequest): Promise<runtime.ApiResponse<Array<StringModel>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.siteUrl !== undefined) {
            queryParameters['siteUrl'] = requestParameters.siteUrl;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/office365/sitedesigns`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StringModelFromJSON));
    }

    /**
     * get site designs by site url
     */
    async getSiteDesigns(requestParameters: GetSiteDesignsRequest): Promise<Array<StringModel>> {
        const response = await this.getSiteDesignsRaw(requestParameters);
        return await response.value();
    }

    /**
     * get site collection information with url
     */
    async getSiteInfoRaw(requestParameters: GetSiteInfoRequest): Promise<runtime.ApiResponse<SiteInfo>> {
        if (requestParameters.fullUrl === null || requestParameters.fullUrl === undefined) {
            throw new runtime.RequiredError('fullUrl','Required parameter requestParameters.fullUrl was null or undefined when calling getSiteInfo.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.fullUrl !== undefined) {
            queryParameters['fullUrl'] = requestParameters.fullUrl;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/office365/sites`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SiteInfoFromJSON(jsonValue));
    }

    /**
     * get site collection information with url
     */
    async getSiteInfo(requestParameters: GetSiteInfoRequest): Promise<SiteInfo> {
        const response = await this.getSiteInfoRaw(requestParameters);
        return await response.value();
    }

    /**
     * get site permission levels
     */
    async getSitePermissionLevelsRaw(requestParameters: GetSitePermissionLevelsRequest): Promise<runtime.ApiResponse<Array<PermissionLevel>>> {
        if (requestParameters.uri === null || requestParameters.uri === undefined) {
            throw new runtime.RequiredError('uri','Required parameter requestParameters.uri was null or undefined when calling getSitePermissionLevels.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.uri !== undefined) {
            queryParameters['uri'] = requestParameters.uri;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/office365/sites/permissionlevels`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PermissionLevelFromJSON));
    }

    /**
     * get site permission levels
     */
    async getSitePermissionLevels(requestParameters: GetSitePermissionLevelsRequest): Promise<Array<PermissionLevel>> {
        const response = await this.getSitePermissionLevelsRaw(requestParameters);
        return await response.value();
    }

    /**
     * get site sharePoint groups
     */
    async getSiteSharePointGroupsRaw(requestParameters: GetSiteSharePointGroupsRequest): Promise<runtime.ApiResponse<Array<SPGroup>>> {
        if (requestParameters.uri === null || requestParameters.uri === undefined) {
            throw new runtime.RequiredError('uri','Required parameter requestParameters.uri was null or undefined when calling getSiteSharePointGroups.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.uri !== undefined) {
            queryParameters['uri'] = requestParameters.uri;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/office365/sites/sharepointgroups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SPGroupFromJSON));
    }

    /**
     * get site sharePoint groups
     */
    async getSiteSharePointGroups(requestParameters: GetSiteSharePointGroupsRequest): Promise<Array<SPGroup>> {
        const response = await this.getSiteSharePointGroupsRaw(requestParameters);
        return await response.value();
    }

    /**
     * get site templates with language code identifier
     */
    async getSiteTemplatesRaw(requestParameters: GetSiteTemplatesRequest): Promise<runtime.ApiResponse<Array<SiteTemplate>>> {
        if (requestParameters.languageid === null || requestParameters.languageid === undefined) {
            throw new runtime.RequiredError('languageid','Required parameter requestParameters.languageid was null or undefined when calling getSiteTemplates.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.url !== undefined) {
            queryParameters['url'] = requestParameters.url;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/office365/sites/templates/{languageid}`.replace(`{${"languageid"}}`, encodeURIComponent(String(requestParameters.languageid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SiteTemplateFromJSON));
    }

    /**
     * get site templates with language code identifier
     */
    async getSiteTemplates(requestParameters: GetSiteTemplatesRequest): Promise<Array<SiteTemplate>> {
        const response = await this.getSiteTemplatesRaw(requestParameters);
        return await response.value();
    }

    /**
     * get yammer group
     */
    async getYammerGroupRaw(requestParameters: GetYammerGroupRequest): Promise<runtime.ApiResponse<YammerGroup>> {
        if (requestParameters.networkid === null || requestParameters.networkid === undefined) {
            throw new runtime.RequiredError('networkid','Required parameter requestParameters.networkid was null or undefined when calling getYammerGroup.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling getYammerGroup.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/office365/yammergroup/{networkid}/{name}`.replace(`{${"networkid"}}`, encodeURIComponent(String(requestParameters.networkid))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => YammerGroupFromJSON(jsonValue));
    }

    /**
     * get yammer group
     */
    async getYammerGroup(requestParameters: GetYammerGroupRequest): Promise<YammerGroup> {
        const response = await this.getYammerGroupRaw(requestParameters);
        return await response.value();
    }

    /**
     * load the containers from cloud management
     */
    async loadContainersRaw(requestParameters: LoadContainersRequest): Promise<runtime.ApiResponse<SPNodePageResult>> {
        if (requestParameters.serviceid === null || requestParameters.serviceid === undefined) {
            throw new runtime.RequiredError('serviceid','Required parameter requestParameters.serviceid was null or undefined when calling loadContainers.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.top !== undefined) {
            queryParameters['top'] = requestParameters.top;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/office365/containers/{serviceid}`.replace(`{${"serviceid"}}`, encodeURIComponent(String(requestParameters.serviceid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SPNodePageResultFromJSON(jsonValue));
    }

    /**
     * load the containers from cloud management
     */
    async loadContainers(requestParameters: LoadContainersRequest): Promise<SPNodePageResult> {
        const response = await this.loadContainersRaw(requestParameters);
        return await response.value();
    }

    /**
     * load sharepoint folders
     */
    async loadFoldersRaw(requestParameters: LoadFoldersRequest): Promise<runtime.ApiResponse<SPNodePageResult>> {
        if (requestParameters.listid === null || requestParameters.listid === undefined) {
            throw new runtime.RequiredError('listid','Required parameter requestParameters.listid was null or undefined when calling loadFolders.');
        }

        if (requestParameters.folderorlisturl === null || requestParameters.folderorlisturl === undefined) {
            throw new runtime.RequiredError('folderorlisturl','Required parameter requestParameters.folderorlisturl was null or undefined when calling loadFolders.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.folderorlisturl !== undefined) {
            queryParameters['folderorlisturl'] = requestParameters.folderorlisturl;
        }

        if (requestParameters.top !== undefined) {
            queryParameters['top'] = requestParameters.top;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/office365/folders/{listid}`.replace(`{${"listid"}}`, encodeURIComponent(String(requestParameters.listid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SPNodePageResultFromJSON(jsonValue));
    }

    /**
     * load sharepoint folders
     */
    async loadFolders(requestParameters: LoadFoldersRequest): Promise<SPNodePageResult> {
        const response = await this.loadFoldersRaw(requestParameters);
        return await response.value();
    }

    /**
     * load sharepoint items
     */
    async loadItemsRaw(requestParameters: LoadItemsRequest): Promise<runtime.ApiResponse<SPNodePageResult>> {
        if (requestParameters.listid === null || requestParameters.listid === undefined) {
            throw new runtime.RequiredError('listid','Required parameter requestParameters.listid was null or undefined when calling loadItems.');
        }

        if (requestParameters.folderorlisturl === null || requestParameters.folderorlisturl === undefined) {
            throw new runtime.RequiredError('folderorlisturl','Required parameter requestParameters.folderorlisturl was null or undefined when calling loadItems.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.folderorlisturl !== undefined) {
            queryParameters['folderorlisturl'] = requestParameters.folderorlisturl;
        }

        if (requestParameters.top !== undefined) {
            queryParameters['top'] = requestParameters.top;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/office365/items/{listid}`.replace(`{${"listid"}}`, encodeURIComponent(String(requestParameters.listid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SPNodePageResultFromJSON(jsonValue));
    }

    /**
     * load sharepoint items
     */
    async loadItems(requestParameters: LoadItemsRequest): Promise<SPNodePageResult> {
        const response = await this.loadItemsRaw(requestParameters);
        return await response.value();
    }

    /**
     * load sharepoint lists
     */
    async loadListsRaw(requestParameters: LoadListsRequest): Promise<runtime.ApiResponse<SPNodePageResult>> {
        if (requestParameters.siteorweburl === null || requestParameters.siteorweburl === undefined) {
            throw new runtime.RequiredError('siteorweburl','Required parameter requestParameters.siteorweburl was null or undefined when calling loadLists.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.siteorweburl !== undefined) {
            queryParameters['siteorweburl'] = requestParameters.siteorweburl;
        }

        if (requestParameters.top !== undefined) {
            queryParameters['top'] = requestParameters.top;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/office365/lists`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SPNodePageResultFromJSON(jsonValue));
    }

    /**
     * load sharepoint lists
     */
    async loadLists(requestParameters: LoadListsRequest): Promise<SPNodePageResult> {
        const response = await this.loadListsRaw(requestParameters);
        return await response.value();
    }

    /**
     * load managed metadata terms
     */
    async loadManagedMetadataRaw(requestParameters: LoadManagedMetadataRequest): Promise<runtime.ApiResponse<ApiTermInfoPageResult>> {
        if (requestParameters.termStoreid === null || requestParameters.termStoreid === undefined) {
            throw new runtime.RequiredError('termStoreid','Required parameter requestParameters.termStoreid was null or undefined when calling loadManagedMetadata.');
        }

        if (requestParameters.groupid === null || requestParameters.groupid === undefined) {
            throw new runtime.RequiredError('groupid','Required parameter requestParameters.groupid was null or undefined when calling loadManagedMetadata.');
        }

        if (requestParameters.termsetid === null || requestParameters.termsetid === undefined) {
            throw new runtime.RequiredError('termsetid','Required parameter requestParameters.termsetid was null or undefined when calling loadManagedMetadata.');
        }

        if (requestParameters.parentid === null || requestParameters.parentid === undefined) {
            throw new runtime.RequiredError('parentid','Required parameter requestParameters.parentid was null or undefined when calling loadManagedMetadata.');
        }

        if (requestParameters.admincenterurl === null || requestParameters.admincenterurl === undefined) {
            throw new runtime.RequiredError('admincenterurl','Required parameter requestParameters.admincenterurl was null or undefined when calling loadManagedMetadata.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.admincenterurl !== undefined) {
            queryParameters['admincenterurl'] = requestParameters.admincenterurl;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        if (requestParameters.top !== undefined) {
            queryParameters['top'] = requestParameters.top;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/office365/managedmetadata/{termStoreid}/{groupid}/{termsetid}/{parentid}`.replace(`{${"termStoreid"}}`, encodeURIComponent(String(requestParameters.termStoreid))).replace(`{${"groupid"}}`, encodeURIComponent(String(requestParameters.groupid))).replace(`{${"termsetid"}}`, encodeURIComponent(String(requestParameters.termsetid))).replace(`{${"parentid"}}`, encodeURIComponent(String(requestParameters.parentid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiTermInfoPageResultFromJSON(jsonValue));
    }

    /**
     * load managed metadata terms
     */
    async loadManagedMetadata(requestParameters: LoadManagedMetadataRequest): Promise<ApiTermInfoPageResult> {
        const response = await this.loadManagedMetadataRaw(requestParameters);
        return await response.value();
    }

    /**
     * load sharepoint sites
     */
    async loadManagedSitesRaw(requestParameters: LoadManagedSitesRequest): Promise<runtime.ApiResponse<SPNodePageResult>> {
        if (requestParameters.serviceid === null || requestParameters.serviceid === undefined) {
            throw new runtime.RequiredError('serviceid','Required parameter requestParameters.serviceid was null or undefined when calling loadManagedSites.');
        }

        if (requestParameters.containerid === null || requestParameters.containerid === undefined) {
            throw new runtime.RequiredError('containerid','Required parameter requestParameters.containerid was null or undefined when calling loadManagedSites.');
        }

        if (requestParameters.isselected === null || requestParameters.isselected === undefined) {
            throw new runtime.RequiredError('isselected','Required parameter requestParameters.isselected was null or undefined when calling loadManagedSites.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.top !== undefined) {
            queryParameters['top'] = requestParameters.top;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/office365/managedsites/{serviceid}/{containerid}/{isselected}`.replace(`{${"serviceid"}}`, encodeURIComponent(String(requestParameters.serviceid))).replace(`{${"containerid"}}`, encodeURIComponent(String(requestParameters.containerid))).replace(`{${"isselected"}}`, encodeURIComponent(String(requestParameters.isselected))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SPNodePageResultFromJSON(jsonValue));
    }

    /**
     * load sharepoint sites
     */
    async loadManagedSites(requestParameters: LoadManagedSitesRequest): Promise<SPNodePageResult> {
        const response = await this.loadManagedSitesRaw(requestParameters);
        return await response.value();
    }

    /**
     * load sharepoint webs
     */
    async loadWebsRaw(requestParameters: LoadWebsRequest): Promise<runtime.ApiResponse<SPNodePageResult>> {
        if (requestParameters.serviceid === null || requestParameters.serviceid === undefined) {
            throw new runtime.RequiredError('serviceid','Required parameter requestParameters.serviceid was null or undefined when calling loadWebs.');
        }

        if (requestParameters.siteorwebid === null || requestParameters.siteorwebid === undefined) {
            throw new runtime.RequiredError('siteorwebid','Required parameter requestParameters.siteorwebid was null or undefined when calling loadWebs.');
        }

        if (requestParameters.isselected === null || requestParameters.isselected === undefined) {
            throw new runtime.RequiredError('isselected','Required parameter requestParameters.isselected was null or undefined when calling loadWebs.');
        }

        if (requestParameters.issite === null || requestParameters.issite === undefined) {
            throw new runtime.RequiredError('issite','Required parameter requestParameters.issite was null or undefined when calling loadWebs.');
        }

        if (requestParameters.siteOrWebUrl === null || requestParameters.siteOrWebUrl === undefined) {
            throw new runtime.RequiredError('siteOrWebUrl','Required parameter requestParameters.siteOrWebUrl was null or undefined when calling loadWebs.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.siteOrWebUrl !== undefined) {
            queryParameters['siteOrWebUrl'] = requestParameters.siteOrWebUrl;
        }

        if (requestParameters.top !== undefined) {
            queryParameters['top'] = requestParameters.top;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/office365/webs/{serviceid}/{siteorwebid}/{isselected}/{issite}`.replace(`{${"serviceid"}}`, encodeURIComponent(String(requestParameters.serviceid))).replace(`{${"siteorwebid"}}`, encodeURIComponent(String(requestParameters.siteorwebid))).replace(`{${"isselected"}}`, encodeURIComponent(String(requestParameters.isselected))).replace(`{${"issite"}}`, encodeURIComponent(String(requestParameters.issite))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SPNodePageResultFromJSON(jsonValue));
    }

    /**
     * load sharepoint webs
     */
    async loadWebs(requestParameters: LoadWebsRequest): Promise<SPNodePageResult> {
        const response = await this.loadWebsRaw(requestParameters);
        return await response.value();
    }

}
