// tslint:disable
/**
 * Cloud Governance Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ApiUser,
    ApiUserFromJSON,
    ApiUserToJSON,
    ExternalSharingOptions,
    ExternalSharingOptionsFromJSON,
    ExternalSharingOptionsToJSON,
    SharingEnabledUser,
    SharingEnabledUserFromJSON,
    SharingEnabledUserToJSON,
    StringModel,
    StringModelFromJSON,
    StringModelToJSON,
    UserRelationShip,
    UserRelationShipFromJSON,
    UserRelationShipToJSON,
    UserType,
    UserTypeFromJSON,
    UserTypeToJSON,
} from '../models';

export interface CheckUserExistsInAOSRequest {
    name: string;
}

export interface GetAzureAdUserPropertyValueRequest {
    username: string;
    propertyName: string;
}

export interface GetUpsUserPropertyValueRequest {
    username: string;
    propertyName: string;
}

export interface GetUserBasicPropertyValueRequest {
    name: string;
}

export interface GetUserPhotoRequest {
    username: string;
    size?: string;
}

export interface GetUserRelationshipRequest {
    username: string;
}

export interface GetUsersFromSharePointRequest {
    username?: string;
    requestBody?: Array<string>;
}

export interface ResolveUsersRequest {
    keyword: string;
    userType: UserType;
    sharingOptions: ExternalSharingOptions;
    siteUrlOrTenantId?: string;
}

export interface ResolveUsersWithExternalSharingOptionRequest {
    keyword: string;
    siteUrlOrTenantId: string;
    externalSharingOption: ExternalSharingOptions;
    userType: UserType;
}

export interface SearchUsersRequest {
    keyword: string;
    userType: UserType;
    sharingOptions: ExternalSharingOptions;
    siteUrlOrTenantId?: string;
}

export interface SearchUsersWithExternalSharingOptionRequest {
    keyword: string;
    siteUrlOrTenantId: string;
    externalSharingOption: ExternalSharingOptions;
    userType: UserType;
}

export interface UpdateUserInfoRequest {
    apiUser?: ApiUser;
}

/**
 * no description
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     * check user exists in Aos
     */
    async checkUserExistsInAOSRaw(requestParameters: CheckUserExistsInAOSRequest): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling checkUserExistsInAOS.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/users/avepointonlineservices/validate`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * check user exists in Aos
     */
    async checkUserExistsInAOS(requestParameters: CheckUserExistsInAOSRequest): Promise<boolean> {
        const response = await this.checkUserExistsInAOSRaw(requestParameters);
        return await response.value();
    }

    /**
     * get user\'s property value by property name from azure ad
     */
    async getAzureAdUserPropertyValueRaw(requestParameters: GetAzureAdUserPropertyValueRequest): Promise<runtime.ApiResponse<StringModel>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling getAzureAdUserPropertyValue.');
        }

        if (requestParameters.propertyName === null || requestParameters.propertyName === undefined) {
            throw new runtime.RequiredError('propertyName','Required parameter requestParameters.propertyName was null or undefined when calling getAzureAdUserPropertyValue.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.propertyName !== undefined) {
            queryParameters['propertyName'] = requestParameters.propertyName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/users/{username}/azuread/property`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters.username))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StringModelFromJSON(jsonValue));
    }

    /**
     * get user\'s property value by property name from azure ad
     */
    async getAzureAdUserPropertyValue(requestParameters: GetAzureAdUserPropertyValueRequest): Promise<StringModel> {
        const response = await this.getAzureAdUserPropertyValueRaw(requestParameters);
        return await response.value();
    }

    /**
     * get user\'s property value by property name from user profile service
     */
    async getUpsUserPropertyValueRaw(requestParameters: GetUpsUserPropertyValueRequest): Promise<runtime.ApiResponse<StringModel>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling getUpsUserPropertyValue.');
        }

        if (requestParameters.propertyName === null || requestParameters.propertyName === undefined) {
            throw new runtime.RequiredError('propertyName','Required parameter requestParameters.propertyName was null or undefined when calling getUpsUserPropertyValue.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.propertyName !== undefined) {
            queryParameters['propertyName'] = requestParameters.propertyName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/users/{username}/userprofile/property`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters.username))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StringModelFromJSON(jsonValue));
    }

    /**
     * get user\'s property value by property name from user profile service
     */
    async getUpsUserPropertyValue(requestParameters: GetUpsUserPropertyValueRequest): Promise<StringModel> {
        const response = await this.getUpsUserPropertyValueRaw(requestParameters);
        return await response.value();
    }

    /**
     * get my basic properties, City, Country, Office, Department, JobTitle,State
     */
    async getUserBasicPropertiesRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/users/me/properties`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * get my basic properties, City, Country, Office, Department, JobTitle,State
     */
    async getUserBasicProperties(): Promise<void> {
        await this.getUserBasicPropertiesRaw();
    }

    /**
     * get my basic property value, Department, Email, DisplayName, Manager
     */
    async getUserBasicPropertyValueRaw(requestParameters: GetUserBasicPropertyValueRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling getUserBasicPropertyValue.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/users/me/property/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * get my basic property value, Department, Email, DisplayName, Manager
     */
    async getUserBasicPropertyValue(requestParameters: GetUserBasicPropertyValueRequest): Promise<void> {
        await this.getUserBasicPropertyValueRaw(requestParameters);
    }

    /**
     * get user\'s photo
     */
    async getUserPhotoRaw(requestParameters: GetUserPhotoRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling getUserPhoto.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/users/{username}/photo`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters.username))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * get user\'s photo
     */
    async getUserPhoto(requestParameters: GetUserPhotoRequest): Promise<void> {
        await this.getUserPhotoRaw(requestParameters);
    }

    /**
     * get user relationship
     */
    async getUserRelationshipRaw(requestParameters: GetUserRelationshipRequest): Promise<runtime.ApiResponse<UserRelationShip>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling getUserRelationship.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/users/{username}/relationship`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters.username))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserRelationShipFromJSON(jsonValue));
    }

    /**
     * get user relationship
     */
    async getUserRelationship(requestParameters: GetUserRelationshipRequest): Promise<UserRelationShip> {
        const response = await this.getUserRelationshipRaw(requestParameters);
        return await response.value();
    }

    /**
     * get users from sharepoint
     */
    async getUsersFromSharePointRaw(requestParameters: GetUsersFromSharePointRequest): Promise<runtime.ApiResponse<ApiUser>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.username !== undefined) {
            queryParameters['username'] = requestParameters.username;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/users/sharepoint/validate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiUserFromJSON(jsonValue));
    }

    /**
     * get users from sharepoint
     */
    async getUsersFromSharePoint(requestParameters: GetUsersFromSharePointRequest): Promise<ApiUser> {
        const response = await this.getUsersFromSharePointRaw(requestParameters);
        return await response.value();
    }

    /**
     * resolve users
     */
    async resolveUsersRaw(requestParameters: ResolveUsersRequest): Promise<runtime.ApiResponse<Array<ApiUser>>> {
        if (requestParameters.keyword === null || requestParameters.keyword === undefined) {
            throw new runtime.RequiredError('keyword','Required parameter requestParameters.keyword was null or undefined when calling resolveUsers.');
        }

        if (requestParameters.userType === null || requestParameters.userType === undefined) {
            throw new runtime.RequiredError('userType','Required parameter requestParameters.userType was null or undefined when calling resolveUsers.');
        }

        if (requestParameters.sharingOptions === null || requestParameters.sharingOptions === undefined) {
            throw new runtime.RequiredError('sharingOptions','Required parameter requestParameters.sharingOptions was null or undefined when calling resolveUsers.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.keyword !== undefined) {
            queryParameters['keyword'] = requestParameters.keyword;
        }

        if (requestParameters.userType !== undefined) {
            queryParameters['userType'] = requestParameters.userType;
        }

        if (requestParameters.sharingOptions !== undefined) {
            queryParameters['sharingOptions'] = requestParameters.sharingOptions;
        }

        if (requestParameters.siteUrlOrTenantId !== undefined) {
            queryParameters['siteUrlOrTenantId'] = requestParameters.siteUrlOrTenantId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/users/resolve`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApiUserFromJSON));
    }

    /**
     * resolve users
     */
    async resolveUsers(requestParameters: ResolveUsersRequest): Promise<Array<ApiUser>> {
        const response = await this.resolveUsersRaw(requestParameters);
        return await response.value();
    }

    /**
     * resolve user including external users
     */
    async resolveUsersWithExternalSharingOptionRaw(requestParameters: ResolveUsersWithExternalSharingOptionRequest): Promise<runtime.ApiResponse<Array<SharingEnabledUser>>> {
        if (requestParameters.keyword === null || requestParameters.keyword === undefined) {
            throw new runtime.RequiredError('keyword','Required parameter requestParameters.keyword was null or undefined when calling resolveUsersWithExternalSharingOption.');
        }

        if (requestParameters.siteUrlOrTenantId === null || requestParameters.siteUrlOrTenantId === undefined) {
            throw new runtime.RequiredError('siteUrlOrTenantId','Required parameter requestParameters.siteUrlOrTenantId was null or undefined when calling resolveUsersWithExternalSharingOption.');
        }

        if (requestParameters.externalSharingOption === null || requestParameters.externalSharingOption === undefined) {
            throw new runtime.RequiredError('externalSharingOption','Required parameter requestParameters.externalSharingOption was null or undefined when calling resolveUsersWithExternalSharingOption.');
        }

        if (requestParameters.userType === null || requestParameters.userType === undefined) {
            throw new runtime.RequiredError('userType','Required parameter requestParameters.userType was null or undefined when calling resolveUsersWithExternalSharingOption.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.keyword !== undefined) {
            queryParameters['keyword'] = requestParameters.keyword;
        }

        if (requestParameters.siteUrlOrTenantId !== undefined) {
            queryParameters['siteUrlOrTenantId'] = requestParameters.siteUrlOrTenantId;
        }

        if (requestParameters.userType !== undefined) {
            queryParameters['userType'] = requestParameters.userType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/users/resolve/{externalSharingOption}`.replace(`{${"externalSharingOption"}}`, encodeURIComponent(String(requestParameters.externalSharingOption))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SharingEnabledUserFromJSON));
    }

    /**
     * resolve user including external users
     */
    async resolveUsersWithExternalSharingOption(requestParameters: ResolveUsersWithExternalSharingOptionRequest): Promise<Array<SharingEnabledUser>> {
        const response = await this.resolveUsersWithExternalSharingOptionRaw(requestParameters);
        return await response.value();
    }

    /**
     * search users
     */
    async searchUsersRaw(requestParameters: SearchUsersRequest): Promise<runtime.ApiResponse<Array<ApiUser>>> {
        if (requestParameters.keyword === null || requestParameters.keyword === undefined) {
            throw new runtime.RequiredError('keyword','Required parameter requestParameters.keyword was null or undefined when calling searchUsers.');
        }

        if (requestParameters.userType === null || requestParameters.userType === undefined) {
            throw new runtime.RequiredError('userType','Required parameter requestParameters.userType was null or undefined when calling searchUsers.');
        }

        if (requestParameters.sharingOptions === null || requestParameters.sharingOptions === undefined) {
            throw new runtime.RequiredError('sharingOptions','Required parameter requestParameters.sharingOptions was null or undefined when calling searchUsers.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.keyword !== undefined) {
            queryParameters['keyword'] = requestParameters.keyword;
        }

        if (requestParameters.userType !== undefined) {
            queryParameters['userType'] = requestParameters.userType;
        }

        if (requestParameters.sharingOptions !== undefined) {
            queryParameters['sharingOptions'] = requestParameters.sharingOptions;
        }

        if (requestParameters.siteUrlOrTenantId !== undefined) {
            queryParameters['siteUrlOrTenantId'] = requestParameters.siteUrlOrTenantId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/users/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApiUserFromJSON));
    }

    /**
     * search users
     */
    async searchUsers(requestParameters: SearchUsersRequest): Promise<Array<ApiUser>> {
        const response = await this.searchUsersRaw(requestParameters);
        return await response.value();
    }

    /**
     * search user including external users
     */
    async searchUsersWithExternalSharingOptionRaw(requestParameters: SearchUsersWithExternalSharingOptionRequest): Promise<runtime.ApiResponse<Array<SharingEnabledUser>>> {
        if (requestParameters.keyword === null || requestParameters.keyword === undefined) {
            throw new runtime.RequiredError('keyword','Required parameter requestParameters.keyword was null or undefined when calling searchUsersWithExternalSharingOption.');
        }

        if (requestParameters.siteUrlOrTenantId === null || requestParameters.siteUrlOrTenantId === undefined) {
            throw new runtime.RequiredError('siteUrlOrTenantId','Required parameter requestParameters.siteUrlOrTenantId was null or undefined when calling searchUsersWithExternalSharingOption.');
        }

        if (requestParameters.externalSharingOption === null || requestParameters.externalSharingOption === undefined) {
            throw new runtime.RequiredError('externalSharingOption','Required parameter requestParameters.externalSharingOption was null or undefined when calling searchUsersWithExternalSharingOption.');
        }

        if (requestParameters.userType === null || requestParameters.userType === undefined) {
            throw new runtime.RequiredError('userType','Required parameter requestParameters.userType was null or undefined when calling searchUsersWithExternalSharingOption.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.keyword !== undefined) {
            queryParameters['keyword'] = requestParameters.keyword;
        }

        if (requestParameters.siteUrlOrTenantId !== undefined) {
            queryParameters['siteUrlOrTenantId'] = requestParameters.siteUrlOrTenantId;
        }

        if (requestParameters.userType !== undefined) {
            queryParameters['userType'] = requestParameters.userType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/users/search/{externalSharingOption}`.replace(`{${"externalSharingOption"}}`, encodeURIComponent(String(requestParameters.externalSharingOption))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SharingEnabledUserFromJSON));
    }

    /**
     * search user including external users
     */
    async searchUsersWithExternalSharingOption(requestParameters: SearchUsersWithExternalSharingOptionRequest): Promise<Array<SharingEnabledUser>> {
        const response = await this.searchUsersWithExternalSharingOptionRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateUserInfoRaw(requestParameters: UpdateUserInfoRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiUserToJSON(requestParameters.apiUser),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateUserInfo(requestParameters: UpdateUserInfoRequest): Promise<void> {
        await this.updateUserInfoRaw(requestParameters);
    }

}
