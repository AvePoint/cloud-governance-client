// tslint:disable
/**
 * Cloud Governance Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ApiUser,
    ApiUserFromJSON,
    ApiUserFromJSONTyped,
    ApiUserToJSON,
    DynamicGroupRuleInfo,
    DynamicGroupRuleInfoFromJSON,
    DynamicGroupRuleInfoFromJSONTyped,
    DynamicGroupRuleInfoToJSON,
    GeoLocationBase,
    GeoLocationBaseFromJSON,
    GeoLocationBaseFromJSONTyped,
    GeoLocationBaseToJSON,
    GroupLeasePeriodSettings,
    GroupLeasePeriodSettingsFromJSON,
    GroupLeasePeriodSettingsFromJSONTyped,
    GroupLeasePeriodSettingsToJSON,
    GroupLinks,
    GroupLinksFromJSON,
    GroupLinksFromJSONTyped,
    GroupLinksToJSON,
    HubSiteActionType,
    HubSiteActionTypeFromJSON,
    HubSiteActionTypeFromJSONTyped,
    HubSiteActionTypeToJSON,
    RequestMetadata,
    RequestMetadataFromJSON,
    RequestMetadataFromJSONTyped,
    RequestMetadataToJSON,
    RequestStatus,
    RequestStatusFromJSON,
    RequestStatusFromJSONTyped,
    RequestStatusToJSON,
    RequestTeamsSettings,
    RequestTeamsSettingsFromJSON,
    RequestTeamsSettingsFromJSONTyped,
    RequestTeamsSettingsToJSON,
    ServiceType,
    ServiceTypeFromJSON,
    ServiceTypeFromJSONTyped,
    ServiceTypeToJSON,
    TeamsTemplateSettings,
    TeamsTemplateSettingsFromJSON,
    TeamsTemplateSettingsFromJSONTyped,
    TeamsTemplateSettingsToJSON,
} from './';

/**
 * 
 * @export
 * @interface CreateGroupRequest
 */
export interface CreateGroupRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateGroupRequest
     */
    groupId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateGroupRequest
     */
    groupIdWithoutPrefixSuffix?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateGroupRequest
     */
    groupName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateGroupRequest
     */
    groupNameWithoutPrefixSuffix?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateGroupRequest
     */
    groupEmail?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateGroupRequest
     */
    policy?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateGroupRequest
     */
    groupDescription?: string | null;
    /**
     * 
     * @type {Array<ApiUser>}
     * @memberof CreateGroupRequest
     */
    owners?: Array<ApiUser> | null;
    /**
     * 
     * @type {Array<ApiUser>}
     * @memberof CreateGroupRequest
     */
    members?: Array<ApiUser> | null;
    /**
     * 
     * @type {boolean}
     * @memberof CreateGroupRequest
     */
    privacy?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CreateGroupRequest
     */
    subscribe?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CreateGroupRequest
     */
    outsideSender?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CreateGroupRequest
     */
    enableTeamCollaboration?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CreateGroupRequest
     */
    language?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateGroupRequest
     */
    classification?: string | null;
    /**
     * 
     * @type {GroupLinks}
     * @memberof CreateGroupRequest
     */
    links?: GroupLinks;
    /**
     * 
     * @type {GroupLeasePeriodSettings}
     * @memberof CreateGroupRequest
     */
    leasePeriodSettings?: GroupLeasePeriodSettings;
    /**
     * 
     * @type {RequestTeamsSettings}
     * @memberof CreateGroupRequest
     */
    teamsSettings?: RequestTeamsSettings;
    /**
     * 
     * @type {string}
     * @memberof CreateGroupRequest
     */
    appliedSiteDesignId?: string | null;
    /**
     * 
     * @type {ApiUser}
     * @memberof CreateGroupRequest
     */
    primaryContact?: ApiUser;
    /**
     * 
     * @type {ApiUser}
     * @memberof CreateGroupRequest
     */
    secondaryContact?: ApiUser;
    /**
     * 
     * @type {boolean}
     * @memberof CreateGroupRequest
     */
    enableGroupMembershipHidden?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CreateGroupRequest
     */
    enableAssignedMembership?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CreateGroupRequest
     */
    enableDynamicMembership?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CreateGroupRequest
     */
    enableHubSite?: boolean;
    /**
     * 
     * @type {HubSiteActionType}
     * @memberof CreateGroupRequest
     */
    hubSiteActionType?: HubSiteActionType;
    /**
     * 
     * @type {string}
     * @memberof CreateGroupRequest
     */
    associateHubSiteId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateGroupRequest
     */
    associateHubSiteTitle?: string | null;
    /**
     * 
     * @type {TeamsTemplateSettings}
     * @memberof CreateGroupRequest
     */
    templateSettings?: TeamsTemplateSettings;
    /**
     * 
     * @type {Array<DynamicGroupRuleInfo>}
     * @memberof CreateGroupRequest
     */
    dynamicMembershipRules?: Array<DynamicGroupRuleInfo> | null;
    /**
     * 
     * @type {GeoLocationBase}
     * @memberof CreateGroupRequest
     */
    multiGeoLocation?: GeoLocationBase;
    /**
     * 
     * @type {string}
     * @memberof CreateGroupRequest
     */
    id?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateGroupRequest
     */
    serviceId?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateGroupRequest
     */
    department?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateGroupRequest
     */
    summary?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateGroupRequest
     */
    notesToApprovers?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateGroupRequest
     */
    questionnaireId?: string | null;
    /**
     * 
     * @type {Array<RequestMetadata>}
     * @memberof CreateGroupRequest
     */
    metadatas?: Array<RequestMetadata> | null;
    /**
     * 
     * @type {number}
     * @memberof CreateGroupRequest
     */
    ticketNumber?: number | null;
    /**
     * 
     * @type {ServiceType}
     * @memberof CreateGroupRequest
     */
    type?: ServiceType;
    /**
     * 
     * @type {string}
     * @memberof CreateGroupRequest
     */
    readonly typeDescription?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateGroupRequest
     */
    requester?: string | null;
    /**
     * 
     * @type {RequestStatus}
     * @memberof CreateGroupRequest
     */
    status?: RequestStatus;
    /**
     * 
     * @type {number}
     * @memberof CreateGroupRequest
     */
    readonly progressStatus?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateGroupRequest
     */
    readonly progressStatusDescription?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof CreateGroupRequest
     */
    submittedTime?: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof CreateGroupRequest
     */
    lastUpdated?: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof CreateGroupRequest
     */
    createdTime?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof CreateGroupRequest
     */
    assignTo?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateGroupRequest
     */
    fullPath?: string | null;
}

export function CreateGroupRequestFromJSON(json: any): CreateGroupRequest {
    return CreateGroupRequestFromJSONTyped(json, false);
}

export function CreateGroupRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateGroupRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'groupId': !exists(json, 'groupId') ? undefined : json['groupId'],
        'groupIdWithoutPrefixSuffix': !exists(json, 'groupIdWithoutPrefixSuffix') ? undefined : json['groupIdWithoutPrefixSuffix'],
        'groupName': !exists(json, 'groupName') ? undefined : json['groupName'],
        'groupNameWithoutPrefixSuffix': !exists(json, 'groupNameWithoutPrefixSuffix') ? undefined : json['groupNameWithoutPrefixSuffix'],
        'groupEmail': !exists(json, 'groupEmail') ? undefined : json['groupEmail'],
        'policy': !exists(json, 'policy') ? undefined : json['policy'],
        'groupDescription': !exists(json, 'groupDescription') ? undefined : json['groupDescription'],
        'owners': !exists(json, 'owners') ? undefined : (json['owners'] as Array<any>).map(ApiUserFromJSON),
        'members': !exists(json, 'members') ? undefined : (json['members'] as Array<any>).map(ApiUserFromJSON),
        'privacy': !exists(json, 'privacy') ? undefined : json['privacy'],
        'subscribe': !exists(json, 'subscribe') ? undefined : json['subscribe'],
        'outsideSender': !exists(json, 'outsideSender') ? undefined : json['outsideSender'],
        'enableTeamCollaboration': !exists(json, 'enableTeamCollaboration') ? undefined : json['enableTeamCollaboration'],
        'language': !exists(json, 'language') ? undefined : json['language'],
        'classification': !exists(json, 'classification') ? undefined : json['classification'],
        'links': !exists(json, 'links') ? undefined : GroupLinksFromJSON(json['links']),
        'leasePeriodSettings': !exists(json, 'leasePeriodSettings') ? undefined : GroupLeasePeriodSettingsFromJSON(json['leasePeriodSettings']),
        'teamsSettings': !exists(json, 'teamsSettings') ? undefined : RequestTeamsSettingsFromJSON(json['teamsSettings']),
        'appliedSiteDesignId': !exists(json, 'appliedSiteDesignId') ? undefined : json['appliedSiteDesignId'],
        'primaryContact': !exists(json, 'primaryContact') ? undefined : ApiUserFromJSON(json['primaryContact']),
        'secondaryContact': !exists(json, 'secondaryContact') ? undefined : ApiUserFromJSON(json['secondaryContact']),
        'enableGroupMembershipHidden': !exists(json, 'enableGroupMembershipHidden') ? undefined : json['enableGroupMembershipHidden'],
        'enableAssignedMembership': !exists(json, 'enableAssignedMembership') ? undefined : json['enableAssignedMembership'],
        'enableDynamicMembership': !exists(json, 'enableDynamicMembership') ? undefined : json['enableDynamicMembership'],
        'enableHubSite': !exists(json, 'enableHubSite') ? undefined : json['enableHubSite'],
        'hubSiteActionType': !exists(json, 'hubSiteActionType') ? undefined : HubSiteActionTypeFromJSON(json['hubSiteActionType']),
        'associateHubSiteId': !exists(json, 'associateHubSiteId') ? undefined : json['associateHubSiteId'],
        'associateHubSiteTitle': !exists(json, 'associateHubSiteTitle') ? undefined : json['associateHubSiteTitle'],
        'templateSettings': !exists(json, 'templateSettings') ? undefined : TeamsTemplateSettingsFromJSON(json['templateSettings']),
        'dynamicMembershipRules': !exists(json, 'dynamicMembershipRules') ? undefined : (json['dynamicMembershipRules'] as Array<any>).map(DynamicGroupRuleInfoFromJSON),
        'multiGeoLocation': !exists(json, 'multiGeoLocation') ? undefined : GeoLocationBaseFromJSON(json['multiGeoLocation']),
        'id': !exists(json, 'id') ? undefined : json['id'],
        'serviceId': !exists(json, 'serviceId') ? undefined : json['serviceId'],
        'department': !exists(json, 'department') ? undefined : json['department'],
        'summary': !exists(json, 'summary') ? undefined : json['summary'],
        'notesToApprovers': !exists(json, 'notesToApprovers') ? undefined : json['notesToApprovers'],
        'questionnaireId': !exists(json, 'questionnaireId') ? undefined : json['questionnaireId'],
        'metadatas': !exists(json, 'metadatas') ? undefined : (json['metadatas'] as Array<any>).map(RequestMetadataFromJSON),
        'ticketNumber': !exists(json, 'ticketNumber') ? undefined : json['ticketNumber'],
        'type': !exists(json, 'type') ? undefined : ServiceTypeFromJSON(json['type']),
        'typeDescription': !exists(json, 'typeDescription') ? undefined : json['typeDescription'],
        'requester': !exists(json, 'requester') ? undefined : json['requester'],
        'status': !exists(json, 'status') ? undefined : RequestStatusFromJSON(json['status']),
        'progressStatus': !exists(json, 'progressStatus') ? undefined : json['progressStatus'],
        'progressStatusDescription': !exists(json, 'progressStatusDescription') ? undefined : json['progressStatusDescription'],
        'submittedTime': !exists(json, 'submittedTime') ? undefined : new Date(json['submittedTime']),
        'lastUpdated': !exists(json, 'lastUpdated') ? undefined : new Date(json['lastUpdated']),
        'createdTime': !exists(json, 'createdTime') ? undefined : new Date(json['createdTime']),
        'assignTo': !exists(json, 'assignTo') ? undefined : json['assignTo'],
        'fullPath': !exists(json, 'fullPath') ? undefined : json['fullPath'],
    };
}

export function CreateGroupRequestToJSON(value?: CreateGroupRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'groupId': value.groupId,
        'groupIdWithoutPrefixSuffix': value.groupIdWithoutPrefixSuffix,
        'groupName': value.groupName,
        'groupNameWithoutPrefixSuffix': value.groupNameWithoutPrefixSuffix,
        'groupEmail': value.groupEmail,
        'policy': value.policy,
        'groupDescription': value.groupDescription,
        'owners': value.owners == null ? undefined : (value.owners as Array<any>).map(ApiUserToJSON),
        'members': value.members == null ? undefined : (value.members as Array<any>).map(ApiUserToJSON),
        'privacy': value.privacy,
        'subscribe': value.subscribe,
        'outsideSender': value.outsideSender,
        'enableTeamCollaboration': value.enableTeamCollaboration,
        'language': value.language,
        'classification': value.classification,
        'links': GroupLinksToJSON(value.links),
        'leasePeriodSettings': GroupLeasePeriodSettingsToJSON(value.leasePeriodSettings),
        'teamsSettings': RequestTeamsSettingsToJSON(value.teamsSettings),
        'appliedSiteDesignId': value.appliedSiteDesignId,
        'primaryContact': ApiUserToJSON(value.primaryContact),
        'secondaryContact': ApiUserToJSON(value.secondaryContact),
        'enableGroupMembershipHidden': value.enableGroupMembershipHidden,
        'enableAssignedMembership': value.enableAssignedMembership,
        'enableDynamicMembership': value.enableDynamicMembership,
        'enableHubSite': value.enableHubSite,
        'hubSiteActionType': HubSiteActionTypeToJSON(value.hubSiteActionType),
        'associateHubSiteId': value.associateHubSiteId,
        'associateHubSiteTitle': value.associateHubSiteTitle,
        'templateSettings': TeamsTemplateSettingsToJSON(value.templateSettings),
        'dynamicMembershipRules': value.dynamicMembershipRules == null ? undefined : (value.dynamicMembershipRules as Array<any>).map(DynamicGroupRuleInfoToJSON),
        'multiGeoLocation': GeoLocationBaseToJSON(value.multiGeoLocation),
        'id': value.id,
        'serviceId': value.serviceId,
        'department': value.department,
        'summary': value.summary,
        'notesToApprovers': value.notesToApprovers,
        'questionnaireId': value.questionnaireId,
        'metadatas': value.metadatas == null ? undefined : (value.metadatas as Array<any>).map(RequestMetadataToJSON),
        'ticketNumber': value.ticketNumber,
        'type': ServiceTypeToJSON(value.type),
        'requester': value.requester,
        'status': RequestStatusToJSON(value.status),
        'submittedTime': value.submittedTime == null ? undefined : value.submittedTime.toISOString(),
        'lastUpdated': value.lastUpdated == null ? undefined : value.lastUpdated.toISOString(),
        'createdTime': value.createdTime == null ? undefined : value.createdTime.toISOString(),
        'assignTo': value.assignTo,
        'fullPath': value.fullPath,
    };
}


