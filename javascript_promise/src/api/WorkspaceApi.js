/**
 * Cloud Governance Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.2.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiMyGroup', 'model/AutoImportProfileRef', 'model/ConfirmInformation', 'model/CustomMetadata', 'model/DistinctPageResult', 'model/ExternalSharingOptions', 'model/GroupRenewProfileRef', 'model/MembershipRenewalItemModel', 'model/MySite', 'model/ObjectContactModel', 'model/PermissionActionItem', 'model/PermissionActionItemPageResult', 'model/PermissionLevel', 'model/RenewModel', 'model/RenewProfileRef', 'model/UserParam', 'model/WorkspaceListPageResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiMyGroup'), require('../model/AutoImportProfileRef'), require('../model/ConfirmInformation'), require('../model/CustomMetadata'), require('../model/DistinctPageResult'), require('../model/ExternalSharingOptions'), require('../model/GroupRenewProfileRef'), require('../model/MembershipRenewalItemModel'), require('../model/MySite'), require('../model/ObjectContactModel'), require('../model/PermissionActionItem'), require('../model/PermissionActionItemPageResult'), require('../model/PermissionLevel'), require('../model/RenewModel'), require('../model/RenewProfileRef'), require('../model/UserParam'), require('../model/WorkspaceListPageResult'));
  } else {
    // Browser globals (root is window)
    if (!root.CgClient) {
      root.CgClient = {};
    }
    root.CgClient.WorkspaceApi = factory(root.CgClient.ApiClient, root.CgClient.ApiMyGroup, root.CgClient.AutoImportProfileRef, root.CgClient.ConfirmInformation, root.CgClient.CustomMetadata, root.CgClient.DistinctPageResult, root.CgClient.ExternalSharingOptions, root.CgClient.GroupRenewProfileRef, root.CgClient.MembershipRenewalItemModel, root.CgClient.MySite, root.CgClient.ObjectContactModel, root.CgClient.PermissionActionItem, root.CgClient.PermissionActionItemPageResult, root.CgClient.PermissionLevel, root.CgClient.RenewModel, root.CgClient.RenewProfileRef, root.CgClient.UserParam, root.CgClient.WorkspaceListPageResult);
  }
}(this, function(ApiClient, ApiMyGroup, AutoImportProfileRef, ConfirmInformation, CustomMetadata, DistinctPageResult, ExternalSharingOptions, GroupRenewProfileRef, MembershipRenewalItemModel, MySite, ObjectContactModel, PermissionActionItem, PermissionActionItemPageResult, PermissionLevel, RenewModel, RenewProfileRef, UserParam, WorkspaceListPageResult) {
  'use strict';

  /**
   * Workspace service.
   * @module api/WorkspaceApi
   * @version 1.0
   */

  /**
   * Constructs a new WorkspaceApi. 
   * @alias module:api/WorkspaceApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * confirm auto imported group/teams information
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ConfirmInformation} opts.confirmInformation 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.confirmGorupWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['confirmInformation'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling confirmGorup");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/workspace/groups/{id}/confirm', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * confirm auto imported group/teams information
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ConfirmInformation} opts.confirmInformation 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.confirmGorup = function(id, opts) {
      return this.confirmGorupWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * confirm auto imported group/teams by assigning task to administrator
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.confirmGorupWithUnknowPrimaryContactWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling confirmGorupWithUnknowPrimaryContact");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/workspace/groups/{id}/confirm/assigntoadmincontact', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * confirm auto imported group/teams by assigning task to administrator
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.confirmGorupWithUnknowPrimaryContact = function(id) {
      return this.confirmGorupWithUnknowPrimaryContactWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * confirm auto imported group/teams by assigning task to the specified primary contact
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/UserParam} opts.userParam 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.confirmGroupWithKnowningPrimaryContactWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['userParam'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling confirmGroupWithKnowningPrimaryContact");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/workspace/groups/{id}/confirm/changeprimarycontact', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * confirm auto imported group/teams by assigning task to the specified primary contact
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/UserParam} opts.userParam 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.confirmGroupWithKnowningPrimaryContact = function(id, opts) {
      return this.confirmGroupWithKnowningPrimaryContactWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * confirm auto imported site information
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ConfirmInformation} opts.confirmInformation 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.confirmSiteWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['confirmInformation'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling confirmSite");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/workspace/sites/{id}/confirm', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * confirm auto imported site information
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ConfirmInformation} opts.confirmInformation 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.confirmSite = function(id, opts) {
      return this.confirmSiteWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * confirm auto imported site by assigning task to the specified primary contact
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/UserParam} opts.userParam 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.confirmSiteWitKnowingPrimaryContactWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['userParam'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling confirmSiteWitKnowingPrimaryContact");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/workspace/sites/{id}/confirm/changeprimarycontact', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * confirm auto imported site by assigning task to the specified primary contact
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/UserParam} opts.userParam 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.confirmSiteWitKnowingPrimaryContact = function(id, opts) {
      return this.confirmSiteWitKnowingPrimaryContactWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * confirm auto imported site by assigning task to administrator
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.confirmSiteWithUnknowPrimaryContactWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling confirmSiteWithUnknowPrimaryContact");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/workspace/sites/{id}/confirm/assigntoadmincontact', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * confirm auto imported site by assigning task to administrator
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.confirmSiteWithUnknowPrimaryContact = function(id) {
      return this.confirmSiteWithUnknowPrimaryContactWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get group/teams auto-imported profile information
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AutoImportProfileRef} and HTTP response
     */
    this.getGroupAutoImportProfileWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGroupAutoImportProfile");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = AutoImportProfileRef;
      return this.apiClient.callApi(
        '/workspace/groups/{id}/confirm/settings', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get group/teams auto-imported profile information
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AutoImportProfileRef}
     */
    this.getGroupAutoImportProfile = function(id) {
      return this.getGroupAutoImportProfileWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get group/teams contacts
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ObjectContactModel} and HTTP response
     */
    this.getGroupContactsWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGroupContacts");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ObjectContactModel;
      return this.apiClient.callApi(
        '/workspace/groups/{id}/contacts', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get group/teams contacts
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ObjectContactModel}
     */
    this.getGroupContacts = function(id) {
      return this.getGroupContactsWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get group/teams membership renewal items
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/MembershipRenewalItemModel>} and HTTP response
     */
    this.getGroupMembershipRenewalItemsWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGroupMembershipRenewalItems");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = [MembershipRenewalItemModel];
      return this.apiClient.callApi(
        '/workspace/groups/{id}/renew/membership', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get group/teams membership renewal items
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/MembershipRenewalItemModel>}
     */
    this.getGroupMembershipRenewalItems = function(id) {
      return this.getGroupMembershipRenewalItemsWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get group/teams metadata renewal items
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/CustomMetadata>} and HTTP response
     */
    this.getGroupMetadataRenewalItemsWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGroupMetadataRenewalItems");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = [CustomMetadata];
      return this.apiClient.callApi(
        '/workspace/groups/{id}/renew/metadata', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get group/teams metadata renewal items
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/CustomMetadata>}
     */
    this.getGroupMetadataRenewalItems = function(id) {
      return this.getGroupMetadataRenewalItemsWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get group/teams permission renewal report filters
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DistinctPageResult} and HTTP response
     */
    this.getGroupPermissionRenewalFiltersWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGroupPermissionRenewalFilters");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'filter': opts['filter'],
        'distinct': opts['distinct'],
        'top': opts['top'],
        'skip': opts['skip'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = DistinctPageResult;
      return this.apiClient.callApi(
        '/workspace/groups/{id}/renew/permission/filters', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get group/teams permission renewal report filters
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DistinctPageResult}
     */
    this.getGroupPermissionRenewalFilters = function(id, opts) {
      return this.getGroupPermissionRenewalFiltersWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get group/teams permission renewal sharePoint group report filters
     * @param {String} id 
     * @param {String} groupid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DistinctPageResult} and HTTP response
     */
    this.getGroupPermissionRenewalFiltersForSPGroupWithHttpInfo = function(id, groupid, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGroupPermissionRenewalFiltersForSPGroup");
      }
      // verify the required parameter 'groupid' is set
      if (groupid === undefined || groupid === null) {
        throw new Error("Missing the required parameter 'groupid' when calling getGroupPermissionRenewalFiltersForSPGroup");
      }

      var pathParams = {
        'id': id,
        'groupid': groupid
      };
      var queryParams = {
        'filter': opts['filter'],
        'distinct': opts['distinct'],
        'top': opts['top'],
        'skip': opts['skip'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = DistinctPageResult;
      return this.apiClient.callApi(
        '/workspace/groups/{id}/renew/permission/group/{groupid}/filters', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get group/teams permission renewal sharePoint group report filters
     * @param {String} id 
     * @param {String} groupid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DistinctPageResult}
     */
    this.getGroupPermissionRenewalFiltersForSPGroup = function(id, groupid, opts) {
      return this.getGroupPermissionRenewalFiltersForSPGroupWithHttpInfo(id, groupid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get group/teams permission renewal items
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.search Search for displayName
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PermissionActionItemPageResult} and HTTP response
     */
    this.getGroupPermissionRenewalItemsWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGroupPermissionRenewalItems");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'filter': opts['filter'],
        'orderby': opts['orderby'],
        'search': opts['search'],
        'top': opts['top'],
        'skip': opts['skip'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = PermissionActionItemPageResult;
      return this.apiClient.callApi(
        '/workspace/groups/{id}/renew/permissions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get group/teams permission renewal items
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.search Search for displayName
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PermissionActionItemPageResult}
     */
    this.getGroupPermissionRenewalItems = function(id, opts) {
      return this.getGroupPermissionRenewalItemsWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get sharePoint group members of group/teams permission renewal item
     * @param {String} id 
     * @param {String} groupid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.search Search for displayName
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PermissionActionItemPageResult} and HTTP response
     */
    this.getGroupPermissionRenewalItemsForSPGroupWithHttpInfo = function(id, groupid, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGroupPermissionRenewalItemsForSPGroup");
      }
      // verify the required parameter 'groupid' is set
      if (groupid === undefined || groupid === null) {
        throw new Error("Missing the required parameter 'groupid' when calling getGroupPermissionRenewalItemsForSPGroup");
      }

      var pathParams = {
        'id': id,
        'groupid': groupid
      };
      var queryParams = {
        'filter': opts['filter'],
        'orderby': opts['orderby'],
        'search': opts['search'],
        'top': opts['top'],
        'skip': opts['skip'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = PermissionActionItemPageResult;
      return this.apiClient.callApi(
        '/workspace/groups/{id}/renew/permissions/group/{groupid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get sharePoint group members of group/teams permission renewal item
     * @param {String} id 
     * @param {String} groupid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.search Search for displayName
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PermissionActionItemPageResult}
     */
    this.getGroupPermissionRenewalItemsForSPGroup = function(id, groupid, opts) {
      return this.getGroupPermissionRenewalItemsForSPGroupWithHttpInfo(id, groupid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get group/teams permission level for permission renewal
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PermissionLevel>} and HTTP response
     */
    this.getGroupPermissionRenewalPermissionLevelsWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGroupPermissionRenewalPermissionLevels");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = [PermissionLevel];
      return this.apiClient.callApi(
        '/workspace/groups/{id}/renew/permissionlevels', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get group/teams permission level for permission renewal
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PermissionLevel>}
     */
    this.getGroupPermissionRenewalPermissionLevels = function(id) {
      return this.getGroupPermissionRenewalPermissionLevelsWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get group/teams renewal settings
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GroupRenewProfileRef} and HTTP response
     */
    this.getGroupRenewalProfileSettingsWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGroupRenewalProfileSettings");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = GroupRenewProfileRef;
      return this.apiClient.callApi(
        '/workspace/groups/{id}/renew/settings', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get group/teams renewal settings
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GroupRenewProfileRef}
     */
    this.getGroupRenewalProfileSettings = function(id) {
      return this.getGroupRenewalProfileSettingsWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get group sharing options
     * @param {Object} opts Optional parameters
     * @param {String} opts.emailOrId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ExternalSharingOptions} and HTTP response
     */
    this.getGroupSharingOptionsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
        'emailOrId': opts['emailOrId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ExternalSharingOptions;
      return this.apiClient.callApi(
        '/workspace/groups/sharingoptions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get group sharing options
     * @param {Object} opts Optional parameters
     * @param {String} opts.emailOrId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ExternalSharingOptions}
     */
    this.getGroupSharingOptions = function(opts) {
      return this.getGroupSharingOptionsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get O365 group/teams information
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiMyGroup} and HTTP response
     */
    this.getMyGroupInformationWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getMyGroupInformation");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ApiMyGroup;
      return this.apiClient.callApi(
        '/workspace/groups/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get O365 group/teams information
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiMyGroup}
     */
    this.getMyGroupInformation = function(id) {
      return this.getMyGroupInformationWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MySite} and HTTP response
     */
    this.getMySiteInformationWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getMySiteInformation");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = MySite;
      return this.apiClient.callApi(
        '/workspace/sites/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MySite}
     */
    this.getMySiteInformation = function(id) {
      return this.getMySiteInformationWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get site auto import settings
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AutoImportProfileRef} and HTTP response
     */
    this.getSiteAutoImportProfileWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSiteAutoImportProfile");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = AutoImportProfileRef;
      return this.apiClient.callApi(
        '/workspace/sites/{id}/confirm/settings', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get site auto import settings
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AutoImportProfileRef}
     */
    this.getSiteAutoImportProfile = function(id) {
      return this.getSiteAutoImportProfileWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get site contacts
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ObjectContactModel} and HTTP response
     */
    this.getSiteContactsWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSiteContacts");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ObjectContactModel;
      return this.apiClient.callApi(
        '/workspace/sites/{id}/contacts', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get site contacts
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ObjectContactModel}
     */
    this.getSiteContacts = function(id) {
      return this.getSiteContactsWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get site metadata
     * @param {String} url 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/CustomMetadata>} and HTTP response
     */
    this.getSiteMetadataWithHttpInfo = function(url) {
      var postBody = null;
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling getSiteMetadata");
      }

      var pathParams = {
      };
      var queryParams = {
        'url': url,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = [CustomMetadata];
      return this.apiClient.callApi(
        '/workspace/sites/metadata', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get site metadata
     * @param {String} url 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/CustomMetadata>}
     */
    this.getSiteMetadata = function(url) {
      return this.getSiteMetadataWithHttpInfo(url)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get site metadata renewal items
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/CustomMetadata>} and HTTP response
     */
    this.getSiteMetadataRenewalItemsWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSiteMetadataRenewalItems");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = [CustomMetadata];
      return this.apiClient.callApi(
        '/workspace/sites/{id}/renew/metadata', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get site metadata renewal items
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/CustomMetadata>}
     */
    this.getSiteMetadataRenewalItems = function(id) {
      return this.getSiteMetadataRenewalItemsWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get site permission renewal report filters
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DistinctPageResult} and HTTP response
     */
    this.getSitePermissionRenewalFiltersWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSitePermissionRenewalFilters");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'filter': opts['filter'],
        'distinct': opts['distinct'],
        'top': opts['top'],
        'skip': opts['skip'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = DistinctPageResult;
      return this.apiClient.callApi(
        '/workspace/sites/{id}/renew/permission/filters', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get site permission renewal report filters
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DistinctPageResult}
     */
    this.getSitePermissionRenewalFilters = function(id, opts) {
      return this.getSitePermissionRenewalFiltersWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get site permission renewal sharePoint group report filters
     * @param {String} id 
     * @param {String} groupid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DistinctPageResult} and HTTP response
     */
    this.getSitePermissionRenewalFiltersForSPGroupWithHttpInfo = function(id, groupid, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSitePermissionRenewalFiltersForSPGroup");
      }
      // verify the required parameter 'groupid' is set
      if (groupid === undefined || groupid === null) {
        throw new Error("Missing the required parameter 'groupid' when calling getSitePermissionRenewalFiltersForSPGroup");
      }

      var pathParams = {
        'id': id,
        'groupid': groupid
      };
      var queryParams = {
        'filter': opts['filter'],
        'distinct': opts['distinct'],
        'top': opts['top'],
        'skip': opts['skip'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = DistinctPageResult;
      return this.apiClient.callApi(
        '/workspace/sites/{id}/renew/permission/group/{groupid}/filters', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get site permission renewal sharePoint group report filters
     * @param {String} id 
     * @param {String} groupid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DistinctPageResult}
     */
    this.getSitePermissionRenewalFiltersForSPGroup = function(id, groupid, opts) {
      return this.getSitePermissionRenewalFiltersForSPGroupWithHttpInfo(id, groupid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get site permission renewal items
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.search Search for displayName
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PermissionActionItemPageResult} and HTTP response
     */
    this.getSitePermissionRenewalItemsWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSitePermissionRenewalItems");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'filter': opts['filter'],
        'orderby': opts['orderby'],
        'search': opts['search'],
        'top': opts['top'],
        'skip': opts['skip'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = PermissionActionItemPageResult;
      return this.apiClient.callApi(
        '/workspace/sites/{id}/renew/permissions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get site permission renewal items
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.search Search for displayName
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PermissionActionItemPageResult}
     */
    this.getSitePermissionRenewalItems = function(id, opts) {
      return this.getSitePermissionRenewalItemsWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get sharePoint group members of site permission renewal item
     * @param {String} id 
     * @param {String} groupid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.search Search for displayName
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PermissionActionItemPageResult} and HTTP response
     */
    this.getSitePermissionRenewalItemsForSPGroupWithHttpInfo = function(id, groupid, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSitePermissionRenewalItemsForSPGroup");
      }
      // verify the required parameter 'groupid' is set
      if (groupid === undefined || groupid === null) {
        throw new Error("Missing the required parameter 'groupid' when calling getSitePermissionRenewalItemsForSPGroup");
      }

      var pathParams = {
        'id': id,
        'groupid': groupid
      };
      var queryParams = {
        'filter': opts['filter'],
        'orderby': opts['orderby'],
        'search': opts['search'],
        'top': opts['top'],
        'skip': opts['skip'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = PermissionActionItemPageResult;
      return this.apiClient.callApi(
        '/workspace/sites/{id}/renew/permissions/group/{groupid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get sharePoint group members of site permission renewal item
     * @param {String} id 
     * @param {String} groupid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.search Search for displayName
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PermissionActionItemPageResult}
     */
    this.getSitePermissionRenewalItemsForSPGroup = function(id, groupid, opts) {
      return this.getSitePermissionRenewalItemsForSPGroupWithHttpInfo(id, groupid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get site permission level for permission renewal
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PermissionLevel>} and HTTP response
     */
    this.getSitePermissionRenewalPermissionLevelsWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSitePermissionRenewalPermissionLevels");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = [PermissionLevel];
      return this.apiClient.callApi(
        '/workspace/sites/{id}/renew/permissionlevels', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get site permission level for permission renewal
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PermissionLevel>}
     */
    this.getSitePermissionRenewalPermissionLevels = function(id) {
      return this.getSitePermissionRenewalPermissionLevelsWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get site renewal settings
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RenewProfileRef} and HTTP response
     */
    this.getSiteRenewalProfileSettingsWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSiteRenewalProfileSettings");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = RenewProfileRef;
      return this.apiClient.callApi(
        '/workspace/sites/{id}/renew/settings', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get site renewal settings
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RenewProfileRef}
     */
    this.getSiteRenewalProfileSettings = function(id) {
      return this.getSiteRenewalProfileSettingsWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get site sharing options by site url or id
     * @param {Object} opts Optional parameters
     * @param {String} opts.siteUrlOrId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ExternalSharingOptions} and HTTP response
     */
    this.getSiteSharingOptionsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
        'siteUrlOrId': opts['siteUrlOrId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ExternalSharingOptions;
      return this.apiClient.callApi(
        '/workspace/sites/sharingoptions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get site sharing options by site url or id
     * @param {Object} opts Optional parameters
     * @param {String} opts.siteUrlOrId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ExternalSharingOptions}
     */
    this.getSiteSharingOptions = function(opts) {
      return this.getSiteSharingOptionsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get my workspace filters
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, name, type, siteUrl, groupEmail, primaryContact, primaryContactEmail, phase, isCurrentRenewer, createdTime, status, autoImportProfileId, pendingAction
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> id, name, type, siteUrl, groupEmail, primaryContact, primaryContactEmail, phase, isCurrentRenewer, createdTime, status, autoImportProfileId, pendingAction
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DistinctPageResult} and HTTP response
     */
    this.getWorkspaceFiltersWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
        'filter': opts['filter'],
        'distinct': opts['distinct'],
        'top': opts['top'],
        'skip': opts['skip'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = DistinctPageResult;
      return this.apiClient.callApi(
        '/workspace/my/filters', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get my workspace filters
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, name, type, siteUrl, groupEmail, primaryContact, primaryContactEmail, phase, isCurrentRenewer, createdTime, status, autoImportProfileId, pendingAction
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> id, name, type, siteUrl, groupEmail, primaryContact, primaryContactEmail, phase, isCurrentRenewer, createdTime, status, autoImportProfileId, pendingAction
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DistinctPageResult}
     */
    this.getWorkspaceFilters = function(opts) {
      return this.getWorkspaceFiltersWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get my workspace items
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, name, type, siteUrl, groupEmail, primaryContact, primaryContactEmail, phase, isCurrentRenewer, createdTime, status, autoImportProfileId, pendingAction
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, name, type, siteUrl, groupEmail, primaryContact, primaryContactEmail, phase, isCurrentRenewer, createdTime, status, autoImportProfileId, pendingAction
     * @param {String} opts.search Search for name
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WorkspaceListPageResult} and HTTP response
     */
    this.getWorkspaceItemsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
        'filter': opts['filter'],
        'orderby': opts['orderby'],
        'search': opts['search'],
        'top': opts['top'],
        'skip': opts['skip'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = WorkspaceListPageResult;
      return this.apiClient.callApi(
        '/workspace/my', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get my workspace items
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, name, type, siteUrl, groupEmail, primaryContact, primaryContactEmail, phase, isCurrentRenewer, createdTime, status, autoImportProfileId, pendingAction
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, name, type, siteUrl, groupEmail, primaryContact, primaryContactEmail, phase, isCurrentRenewer, createdTime, status, autoImportProfileId, pendingAction
     * @param {String} opts.search Search for name
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WorkspaceListPageResult}
     */
    this.getWorkspaceItems = function(opts) {
      return this.getWorkspaceItemsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * reassign the group/teams renewal task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.userid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.reassignGroupRenewalTaskWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reassignGroupRenewalTask");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'userid': opts['userid'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/workspace/groups/{id}/renew/reassign', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * reassign the group/teams renewal task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.userid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.reassignGroupRenewalTask = function(id, opts) {
      return this.reassignGroupRenewalTaskWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * reassign the site renewal task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.userid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.reassignSiteRenewalTaskWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reassignSiteRenewalTask");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'userid': opts['userid'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/workspace/sites/{id}/renew/reassign', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * reassign the site renewal task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.userid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.reassignSiteRenewalTask = function(id, opts) {
      return this.reassignSiteRenewalTaskWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * reject the group/teams renewal task
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.rejectGroupRenewalTaskWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling rejectGroupRenewalTask");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/workspace/groups/{id}/renew/reject', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * reject the group/teams renewal task
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.rejectGroupRenewalTask = function(id) {
      return this.rejectGroupRenewalTaskWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * reject the site renewal task
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.rejectSiteRenewalTaskWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling rejectSiteRenewalTask");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/workspace/sites/{id}/renew/reject', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * reject the site renewal task
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.rejectSiteRenewalTask = function(id) {
      return this.rejectSiteRenewalTaskWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * reset your change
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.resetChangeForSiteRenewalWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling resetChangeForSiteRenewal");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/workspace/sites/{id}/renew/reset', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * reset your change
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.resetChangeForSiteRenewal = function(id) {
      return this.resetChangeForSiteRenewalWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * reset your change
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.resetChangesForGroupRenewalWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling resetChangesForGroupRenewal");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/workspace/groups/{id}/renew/reset', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * reset your change
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.resetChangesForGroupRenewal = function(id) {
      return this.resetChangesForGroupRenewalWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * save group/teams permission renewal items
     * @param {String} id 
     * @param {Array.<module:model/PermissionActionItem>} permissionActionItem 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.saveGroupPermissionRenewalItemsWithHttpInfo = function(id, permissionActionItem) {
      var postBody = permissionActionItem;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling saveGroupPermissionRenewalItems");
      }
      // verify the required parameter 'permissionActionItem' is set
      if (permissionActionItem === undefined || permissionActionItem === null) {
        throw new Error("Missing the required parameter 'permissionActionItem' when calling saveGroupPermissionRenewalItems");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/workspace/groups/{id}/renew/permissions', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * save group/teams permission renewal items
     * @param {String} id 
     * @param {Array.<module:model/PermissionActionItem>} permissionActionItem 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.saveGroupPermissionRenewalItems = function(id, permissionActionItem) {
      return this.saveGroupPermissionRenewalItemsWithHttpInfo(id, permissionActionItem)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * save site permission renewal items
     * @param {String} id 
     * @param {Array.<module:model/PermissionActionItem>} permissionActionItem 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.saveSitePermissionRenewalItemsWithHttpInfo = function(id, permissionActionItem) {
      var postBody = permissionActionItem;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling saveSitePermissionRenewalItems");
      }
      // verify the required parameter 'permissionActionItem' is set
      if (permissionActionItem === undefined || permissionActionItem === null) {
        throw new Error("Missing the required parameter 'permissionActionItem' when calling saveSitePermissionRenewalItems");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/workspace/sites/{id}/renew/permissions', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * save site permission renewal items
     * @param {String} id 
     * @param {Array.<module:model/PermissionActionItem>} permissionActionItem 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.saveSitePermissionRenewalItems = function(id, permissionActionItem) {
      return this.saveSitePermissionRenewalItemsWithHttpInfo(id, permissionActionItem)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * submit the group/teams renewal task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/RenewModel} opts.renewModel 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Boolean} and HTTP response
     */
    this.submitGroupRenewalTaskWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['renewModel'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling submitGroupRenewalTask");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'Boolean';
      return this.apiClient.callApi(
        '/workspace/groups/{id}/renew/submit', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * submit the group/teams renewal task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/RenewModel} opts.renewModel 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Boolean}
     */
    this.submitGroupRenewalTask = function(id, opts) {
      return this.submitGroupRenewalTaskWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * submit group/teams renewal task with archive
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.submitGroupRenewalTaskForArchivingWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling submitGroupRenewalTaskForArchiving");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/workspace/groups/{id}/renew/archive', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * submit group/teams renewal task with archive
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.submitGroupRenewalTaskForArchiving = function(id) {
      return this.submitGroupRenewalTaskForArchivingWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * submit group/teams renewal task with deletion
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.submitGroupRenewalTaskForDeletingWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling submitGroupRenewalTaskForDeleting");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/workspace/groups/{id}/renew/delete', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * submit group/teams renewal task with deletion
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.submitGroupRenewalTaskForDeleting = function(id) {
      return this.submitGroupRenewalTaskForDeletingWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * submit the site renewal task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/RenewModel} opts.renewModel 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Boolean} and HTTP response
     */
    this.submitSiteRenewalTaskWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['renewModel'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling submitSiteRenewalTask");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'Boolean';
      return this.apiClient.callApi(
        '/workspace/sites/{id}/renew/submit', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * submit the site renewal task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/RenewModel} opts.renewModel 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Boolean}
     */
    this.submitSiteRenewalTask = function(id, opts) {
      return this.submitSiteRenewalTaskWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * submit site renewal task with deletion
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.submitSiteRenewalTaskForDeletingWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling submitSiteRenewalTaskForDeleting");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/workspace/sites/{id}/renew/delete', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * submit site renewal task with deletion
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.submitSiteRenewalTaskForDeleting = function(id) {
      return this.submitSiteRenewalTaskForDeletingWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * approval site renewal task with archive
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.submitSiteRenewalTaskWithArchivingWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling submitSiteRenewalTaskWithArchiving");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/workspace/sites/{id}/renew/archive', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * approval site renewal task with archive
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.submitSiteRenewalTaskWithArchiving = function(id) {
      return this.submitSiteRenewalTaskWithArchivingWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
