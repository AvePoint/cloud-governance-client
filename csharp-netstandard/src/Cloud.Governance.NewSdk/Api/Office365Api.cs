/* 
 * Cloud Governance Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Cloud.Governance.NewSdk.Client;
using Cloud.Governance.NewSdk.Model;

namespace Cloud.Governance.NewSdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOffice365ApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// get group information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantid"></param>
        /// <param name="id"></param>
        /// <returns>AzureADGroup</returns>
        AzureADGroup GetGroupInfo (string tenantid, string id);

        /// <summary>
        /// get group information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantid"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of AzureADGroup</returns>
        ApiResponse<AzureADGroup> GetGroupInfoWithHttpInfo (string tenantid, string id);
        /// <summary>
        /// get group members by group email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>ApiUserPageResult</returns>
        ApiUserPageResult GetGroupMembers (string email, int? top = null, int? skip = null, string search = null);

        /// <summary>
        /// get group members by group email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>ApiResponse of ApiUserPageResult</returns>
        ApiResponse<ApiUserPageResult> GetGroupMembersWithHttpInfo (string email, int? top = null, int? skip = null, string search = null);
        /// <summary>
        /// get group members by group name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url"></param>
        /// <param name="name"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>ApiUserPageResult</returns>
        ApiUserPageResult GetGroupMembersByGroupName (string url, string name = null, int? top = null, int? skip = null, string search = null);

        /// <summary>
        /// get group members by group name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url"></param>
        /// <param name="name"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>ApiResponse of ApiUserPageResult</returns>
        ApiResponse<ApiUserPageResult> GetGroupMembersByGroupNameWithHttpInfo (string url, string name = null, int? top = null, int? skip = null, string search = null);
        /// <summary>
        /// get group owners by group email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>ApiUserPageResult</returns>
        ApiUserPageResult GetGroupOwners (string email, int? top = null, int? skip = null, string search = null);

        /// <summary>
        /// get group owners by group email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>ApiResponse of ApiUserPageResult</returns>
        ApiResponse<ApiUserPageResult> GetGroupOwnersWithHttpInfo (string email, int? top = null, int? skip = null, string search = null);
        /// <summary>
        /// get all hubsites from a specific tenant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantid"></param>
        /// <returns>List&lt;GuidModel&gt;</returns>
        List<GuidModel> GetHubSites (Guid tenantid);

        /// <summary>
        /// get all hubsites from a specific tenant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantid"></param>
        /// <returns>ApiResponse of List&lt;GuidModel&gt;</returns>
        ApiResponse<List<GuidModel>> GetHubSitesWithHttpInfo (Guid tenantid);
        /// <summary>
        /// get all hubsites from site&#39;s tenant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteUrl">any site url in your tenant (optional)</param>
        /// <returns>List&lt;GuidModel&gt;</returns>
        List<GuidModel> GetHubSitesFromTenantOfSite (string siteUrl = null);

        /// <summary>
        /// get all hubsites from site&#39;s tenant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteUrl">any site url in your tenant (optional)</param>
        /// <returns>ApiResponse of List&lt;GuidModel&gt;</returns>
        ApiResponse<List<GuidModel>> GetHubSitesFromTenantOfSiteWithHttpInfo (string siteUrl = null);
        /// <summary>
        /// get all teams that owner is curernt user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;GuidModel&gt;</returns>
        List<GuidModel> GetOwnedTeams ();

        /// <summary>
        /// get all teams that owner is curernt user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;GuidModel&gt;</returns>
        ApiResponse<List<GuidModel>> GetOwnedTeamsWithHttpInfo ();
        /// <summary>
        /// get web permissions for creating list request by web url
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webUrl"></param>
        /// <returns>UserGroupPermissions</returns>
        UserGroupPermissions GetPermissions (string webUrl);

        /// <summary>
        /// get web permissions for creating list request by web url
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webUrl"></param>
        /// <returns>ApiResponse of UserGroupPermissions</returns>
        ApiResponse<UserGroupPermissions> GetPermissionsWithHttpInfo (string webUrl);
        /// <summary>
        /// get site permimssion role assignment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url"></param>
        /// <param name="type"></param>
        /// <returns>List&lt;SPRoleAssignment&gt;</returns>
        List<SPRoleAssignment> GetRoleAssignment (string url, NodeType type);

        /// <summary>
        /// get site permimssion role assignment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url"></param>
        /// <param name="type"></param>
        /// <returns>ApiResponse of List&lt;SPRoleAssignment&gt;</returns>
        ApiResponse<List<SPRoleAssignment>> GetRoleAssignmentWithHttpInfo (string url, NodeType type);
        /// <summary>
        /// get site designs by site url
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteUrl"> (optional)</param>
        /// <returns>List&lt;StringModel&gt;</returns>
        List<StringModel> GetSiteDesigns (string siteUrl = null);

        /// <summary>
        /// get site designs by site url
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteUrl"> (optional)</param>
        /// <returns>ApiResponse of List&lt;StringModel&gt;</returns>
        ApiResponse<List<StringModel>> GetSiteDesignsWithHttpInfo (string siteUrl = null);
        /// <summary>
        /// get site collection information with url
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullUrl"></param>
        /// <returns>SiteInfo</returns>
        SiteInfo GetSiteInfo (string fullUrl);

        /// <summary>
        /// get site collection information with url
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullUrl"></param>
        /// <returns>ApiResponse of SiteInfo</returns>
        ApiResponse<SiteInfo> GetSiteInfoWithHttpInfo (string fullUrl);
        /// <summary>
        /// get site permission levels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri"></param>
        /// <returns>List&lt;PermissionLevel&gt;</returns>
        List<PermissionLevel> GetSitePermissionLevels (string uri);

        /// <summary>
        /// get site permission levels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri"></param>
        /// <returns>ApiResponse of List&lt;PermissionLevel&gt;</returns>
        ApiResponse<List<PermissionLevel>> GetSitePermissionLevelsWithHttpInfo (string uri);
        /// <summary>
        /// get site sharePoint groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri"></param>
        /// <returns>List&lt;SPGroup&gt;</returns>
        List<SPGroup> GetSiteSharePointGroups (string uri);

        /// <summary>
        /// get site sharePoint groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri"></param>
        /// <returns>ApiResponse of List&lt;SPGroup&gt;</returns>
        ApiResponse<List<SPGroup>> GetSiteSharePointGroupsWithHttpInfo (string uri);
        /// <summary>
        /// get site templates with language code identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="languageid"></param>
        /// <param name="url"> (optional)</param>
        /// <returns>List&lt;SiteTemplate&gt;</returns>
        List<SiteTemplate> GetSiteTemplates (int languageid, string url = null);

        /// <summary>
        /// get site templates with language code identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="languageid"></param>
        /// <param name="url"> (optional)</param>
        /// <returns>ApiResponse of List&lt;SiteTemplate&gt;</returns>
        ApiResponse<List<SiteTemplate>> GetSiteTemplatesWithHttpInfo (int languageid, string url = null);
        /// <summary>
        /// get yammer group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkid"></param>
        /// <param name="name"></param>
        /// <returns>YammerGroup</returns>
        YammerGroup GetYammerGroup (string networkid, string name);

        /// <summary>
        /// get yammer group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkid"></param>
        /// <param name="name"></param>
        /// <returns>ApiResponse of YammerGroup</returns>
        ApiResponse<YammerGroup> GetYammerGroupWithHttpInfo (string networkid, string name);
        /// <summary>
        /// load the containers from cloud management
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceid">If the service is content manager, you need use Serviceid_Source or Serviceid_Destination to load the source or destination tree</param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>SPNodePageResult</returns>
        SPNodePageResult LoadContainers (string serviceid, int? top = null, int? skip = null, string search = null);

        /// <summary>
        /// load the containers from cloud management
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceid">If the service is content manager, you need use Serviceid_Source or Serviceid_Destination to load the source or destination tree</param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>ApiResponse of SPNodePageResult</returns>
        ApiResponse<SPNodePageResult> LoadContainersWithHttpInfo (string serviceid, int? top = null, int? skip = null, string search = null);
        /// <summary>
        /// load sharepoint folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listid"></param>
        /// <param name="folderorlisturl"></param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>SPNodePageResult</returns>
        SPNodePageResult LoadFolders (Guid listid, string folderorlisturl, int? top = null, int? skip = null, string search = null);

        /// <summary>
        /// load sharepoint folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listid"></param>
        /// <param name="folderorlisturl"></param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>ApiResponse of SPNodePageResult</returns>
        ApiResponse<SPNodePageResult> LoadFoldersWithHttpInfo (Guid listid, string folderorlisturl, int? top = null, int? skip = null, string search = null);
        /// <summary>
        /// load sharepoint items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listid"></param>
        /// <param name="folderorlisturl"></param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>SPNodePageResult</returns>
        SPNodePageResult LoadItems (Guid listid, string folderorlisturl, int? top = null, int? skip = null, string search = null);

        /// <summary>
        /// load sharepoint items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listid"></param>
        /// <param name="folderorlisturl"></param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>ApiResponse of SPNodePageResult</returns>
        ApiResponse<SPNodePageResult> LoadItemsWithHttpInfo (Guid listid, string folderorlisturl, int? top = null, int? skip = null, string search = null);
        /// <summary>
        /// load sharepoint lists
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteorweburl"></param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>SPNodePageResult</returns>
        SPNodePageResult LoadLists (string siteorweburl, int? top = null, int? skip = null, string search = null);

        /// <summary>
        /// load sharepoint lists
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteorweburl"></param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>ApiResponse of SPNodePageResult</returns>
        ApiResponse<SPNodePageResult> LoadListsWithHttpInfo (string siteorweburl, int? top = null, int? skip = null, string search = null);
        /// <summary>
        /// load managed metadata terms
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="termStoreid"></param>
        /// <param name="groupid"></param>
        /// <param name="termsetid"></param>
        /// <param name="parentid"></param>
        /// <param name="admincenterurl"></param>
        /// <param name="skip"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>ApiTermInfoPageResult</returns>
        ApiTermInfoPageResult LoadManagedMetadata (Guid termStoreid, Guid groupid, Guid termsetid, Guid parentid, string admincenterurl, int? skip = null, int? top = null, string search = null);

        /// <summary>
        /// load managed metadata terms
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="termStoreid"></param>
        /// <param name="groupid"></param>
        /// <param name="termsetid"></param>
        /// <param name="parentid"></param>
        /// <param name="admincenterurl"></param>
        /// <param name="skip"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>ApiResponse of ApiTermInfoPageResult</returns>
        ApiResponse<ApiTermInfoPageResult> LoadManagedMetadataWithHttpInfo (Guid termStoreid, Guid groupid, Guid termsetid, Guid parentid, string admincenterurl, int? skip = null, int? top = null, string search = null);
        /// <summary>
        /// load sharepoint sites
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceid">If the service is content manager, you need use Serviceid_Source or Serviceid_Destination to load the source or destination tree</param>
        /// <param name="containerid"></param>
        /// <param name="isselected"></param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>SPNodePageResult</returns>
        SPNodePageResult LoadManagedSites (string serviceid, Guid containerid, bool isselected, int? top = null, int? skip = null, string search = null);

        /// <summary>
        /// load sharepoint sites
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceid">If the service is content manager, you need use Serviceid_Source or Serviceid_Destination to load the source or destination tree</param>
        /// <param name="containerid"></param>
        /// <param name="isselected"></param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>ApiResponse of SPNodePageResult</returns>
        ApiResponse<SPNodePageResult> LoadManagedSitesWithHttpInfo (string serviceid, Guid containerid, bool isselected, int? top = null, int? skip = null, string search = null);
        /// <summary>
        /// load sharepoint webs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceid">If the service is content manager, you need use Serviceid_Source or Serviceid_Destination to load the source or destination tree</param>
        /// <param name="siteorwebid"></param>
        /// <param name="isselected"></param>
        /// <param name="issite"></param>
        /// <param name="siteOrWebUrl"></param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>SPNodePageResult</returns>
        SPNodePageResult LoadWebs (string serviceid, Guid siteorwebid, bool isselected, bool issite, string siteOrWebUrl, int? top = null, int? skip = null, string search = null);

        /// <summary>
        /// load sharepoint webs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceid">If the service is content manager, you need use Serviceid_Source or Serviceid_Destination to load the source or destination tree</param>
        /// <param name="siteorwebid"></param>
        /// <param name="isselected"></param>
        /// <param name="issite"></param>
        /// <param name="siteOrWebUrl"></param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>ApiResponse of SPNodePageResult</returns>
        ApiResponse<SPNodePageResult> LoadWebsWithHttpInfo (string serviceid, Guid siteorwebid, bool isselected, bool issite, string siteOrWebUrl, int? top = null, int? skip = null, string search = null);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOffice365ApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// get group information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantid"></param>
        /// <param name="id"></param>
        /// <returns>Task of AzureADGroup</returns>
        System.Threading.Tasks.Task<AzureADGroup> GetGroupInfoAsync (string tenantid, string id);

        /// <summary>
        /// get group information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantid"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (AzureADGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<AzureADGroup>> GetGroupInfoAsyncWithHttpInfo (string tenantid, string id);
        /// <summary>
        /// get group members by group email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>Task of ApiUserPageResult</returns>
        System.Threading.Tasks.Task<ApiUserPageResult> GetGroupMembersAsync (string email, int? top = null, int? skip = null, string search = null);

        /// <summary>
        /// get group members by group email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiUserPageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiUserPageResult>> GetGroupMembersAsyncWithHttpInfo (string email, int? top = null, int? skip = null, string search = null);
        /// <summary>
        /// get group members by group name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url"></param>
        /// <param name="name"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>Task of ApiUserPageResult</returns>
        System.Threading.Tasks.Task<ApiUserPageResult> GetGroupMembersByGroupNameAsync (string url, string name = null, int? top = null, int? skip = null, string search = null);

        /// <summary>
        /// get group members by group name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url"></param>
        /// <param name="name"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiUserPageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiUserPageResult>> GetGroupMembersByGroupNameAsyncWithHttpInfo (string url, string name = null, int? top = null, int? skip = null, string search = null);
        /// <summary>
        /// get group owners by group email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>Task of ApiUserPageResult</returns>
        System.Threading.Tasks.Task<ApiUserPageResult> GetGroupOwnersAsync (string email, int? top = null, int? skip = null, string search = null);

        /// <summary>
        /// get group owners by group email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiUserPageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiUserPageResult>> GetGroupOwnersAsyncWithHttpInfo (string email, int? top = null, int? skip = null, string search = null);
        /// <summary>
        /// get all hubsites from a specific tenant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantid"></param>
        /// <returns>Task of List&lt;GuidModel&gt;</returns>
        System.Threading.Tasks.Task<List<GuidModel>> GetHubSitesAsync (Guid tenantid);

        /// <summary>
        /// get all hubsites from a specific tenant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantid"></param>
        /// <returns>Task of ApiResponse (List&lt;GuidModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GuidModel>>> GetHubSitesAsyncWithHttpInfo (Guid tenantid);
        /// <summary>
        /// get all hubsites from site&#39;s tenant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteUrl">any site url in your tenant (optional)</param>
        /// <returns>Task of List&lt;GuidModel&gt;</returns>
        System.Threading.Tasks.Task<List<GuidModel>> GetHubSitesFromTenantOfSiteAsync (string siteUrl = null);

        /// <summary>
        /// get all hubsites from site&#39;s tenant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteUrl">any site url in your tenant (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GuidModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GuidModel>>> GetHubSitesFromTenantOfSiteAsyncWithHttpInfo (string siteUrl = null);
        /// <summary>
        /// get all teams that owner is curernt user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;GuidModel&gt;</returns>
        System.Threading.Tasks.Task<List<GuidModel>> GetOwnedTeamsAsync ();

        /// <summary>
        /// get all teams that owner is curernt user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;GuidModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GuidModel>>> GetOwnedTeamsAsyncWithHttpInfo ();
        /// <summary>
        /// get web permissions for creating list request by web url
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webUrl"></param>
        /// <returns>Task of UserGroupPermissions</returns>
        System.Threading.Tasks.Task<UserGroupPermissions> GetPermissionsAsync (string webUrl);

        /// <summary>
        /// get web permissions for creating list request by web url
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webUrl"></param>
        /// <returns>Task of ApiResponse (UserGroupPermissions)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserGroupPermissions>> GetPermissionsAsyncWithHttpInfo (string webUrl);
        /// <summary>
        /// get site permimssion role assignment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url"></param>
        /// <param name="type"></param>
        /// <returns>Task of List&lt;SPRoleAssignment&gt;</returns>
        System.Threading.Tasks.Task<List<SPRoleAssignment>> GetRoleAssignmentAsync (string url, NodeType type);

        /// <summary>
        /// get site permimssion role assignment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url"></param>
        /// <param name="type"></param>
        /// <returns>Task of ApiResponse (List&lt;SPRoleAssignment&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SPRoleAssignment>>> GetRoleAssignmentAsyncWithHttpInfo (string url, NodeType type);
        /// <summary>
        /// get site designs by site url
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteUrl"> (optional)</param>
        /// <returns>Task of List&lt;StringModel&gt;</returns>
        System.Threading.Tasks.Task<List<StringModel>> GetSiteDesignsAsync (string siteUrl = null);

        /// <summary>
        /// get site designs by site url
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteUrl"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;StringModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<StringModel>>> GetSiteDesignsAsyncWithHttpInfo (string siteUrl = null);
        /// <summary>
        /// get site collection information with url
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullUrl"></param>
        /// <returns>Task of SiteInfo</returns>
        System.Threading.Tasks.Task<SiteInfo> GetSiteInfoAsync (string fullUrl);

        /// <summary>
        /// get site collection information with url
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullUrl"></param>
        /// <returns>Task of ApiResponse (SiteInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<SiteInfo>> GetSiteInfoAsyncWithHttpInfo (string fullUrl);
        /// <summary>
        /// get site permission levels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri"></param>
        /// <returns>Task of List&lt;PermissionLevel&gt;</returns>
        System.Threading.Tasks.Task<List<PermissionLevel>> GetSitePermissionLevelsAsync (string uri);

        /// <summary>
        /// get site permission levels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri"></param>
        /// <returns>Task of ApiResponse (List&lt;PermissionLevel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PermissionLevel>>> GetSitePermissionLevelsAsyncWithHttpInfo (string uri);
        /// <summary>
        /// get site sharePoint groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri"></param>
        /// <returns>Task of List&lt;SPGroup&gt;</returns>
        System.Threading.Tasks.Task<List<SPGroup>> GetSiteSharePointGroupsAsync (string uri);

        /// <summary>
        /// get site sharePoint groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri"></param>
        /// <returns>Task of ApiResponse (List&lt;SPGroup&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SPGroup>>> GetSiteSharePointGroupsAsyncWithHttpInfo (string uri);
        /// <summary>
        /// get site templates with language code identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="languageid"></param>
        /// <param name="url"> (optional)</param>
        /// <returns>Task of List&lt;SiteTemplate&gt;</returns>
        System.Threading.Tasks.Task<List<SiteTemplate>> GetSiteTemplatesAsync (int languageid, string url = null);

        /// <summary>
        /// get site templates with language code identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="languageid"></param>
        /// <param name="url"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;SiteTemplate&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SiteTemplate>>> GetSiteTemplatesAsyncWithHttpInfo (int languageid, string url = null);
        /// <summary>
        /// get yammer group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkid"></param>
        /// <param name="name"></param>
        /// <returns>Task of YammerGroup</returns>
        System.Threading.Tasks.Task<YammerGroup> GetYammerGroupAsync (string networkid, string name);

        /// <summary>
        /// get yammer group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkid"></param>
        /// <param name="name"></param>
        /// <returns>Task of ApiResponse (YammerGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<YammerGroup>> GetYammerGroupAsyncWithHttpInfo (string networkid, string name);
        /// <summary>
        /// load the containers from cloud management
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceid">If the service is content manager, you need use Serviceid_Source or Serviceid_Destination to load the source or destination tree</param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>Task of SPNodePageResult</returns>
        System.Threading.Tasks.Task<SPNodePageResult> LoadContainersAsync (string serviceid, int? top = null, int? skip = null, string search = null);

        /// <summary>
        /// load the containers from cloud management
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceid">If the service is content manager, you need use Serviceid_Source or Serviceid_Destination to load the source or destination tree</param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>Task of ApiResponse (SPNodePageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SPNodePageResult>> LoadContainersAsyncWithHttpInfo (string serviceid, int? top = null, int? skip = null, string search = null);
        /// <summary>
        /// load sharepoint folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listid"></param>
        /// <param name="folderorlisturl"></param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>Task of SPNodePageResult</returns>
        System.Threading.Tasks.Task<SPNodePageResult> LoadFoldersAsync (Guid listid, string folderorlisturl, int? top = null, int? skip = null, string search = null);

        /// <summary>
        /// load sharepoint folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listid"></param>
        /// <param name="folderorlisturl"></param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>Task of ApiResponse (SPNodePageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SPNodePageResult>> LoadFoldersAsyncWithHttpInfo (Guid listid, string folderorlisturl, int? top = null, int? skip = null, string search = null);
        /// <summary>
        /// load sharepoint items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listid"></param>
        /// <param name="folderorlisturl"></param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>Task of SPNodePageResult</returns>
        System.Threading.Tasks.Task<SPNodePageResult> LoadItemsAsync (Guid listid, string folderorlisturl, int? top = null, int? skip = null, string search = null);

        /// <summary>
        /// load sharepoint items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listid"></param>
        /// <param name="folderorlisturl"></param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>Task of ApiResponse (SPNodePageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SPNodePageResult>> LoadItemsAsyncWithHttpInfo (Guid listid, string folderorlisturl, int? top = null, int? skip = null, string search = null);
        /// <summary>
        /// load sharepoint lists
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteorweburl"></param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>Task of SPNodePageResult</returns>
        System.Threading.Tasks.Task<SPNodePageResult> LoadListsAsync (string siteorweburl, int? top = null, int? skip = null, string search = null);

        /// <summary>
        /// load sharepoint lists
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteorweburl"></param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>Task of ApiResponse (SPNodePageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SPNodePageResult>> LoadListsAsyncWithHttpInfo (string siteorweburl, int? top = null, int? skip = null, string search = null);
        /// <summary>
        /// load managed metadata terms
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="termStoreid"></param>
        /// <param name="groupid"></param>
        /// <param name="termsetid"></param>
        /// <param name="parentid"></param>
        /// <param name="admincenterurl"></param>
        /// <param name="skip"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>Task of ApiTermInfoPageResult</returns>
        System.Threading.Tasks.Task<ApiTermInfoPageResult> LoadManagedMetadataAsync (Guid termStoreid, Guid groupid, Guid termsetid, Guid parentid, string admincenterurl, int? skip = null, int? top = null, string search = null);

        /// <summary>
        /// load managed metadata terms
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="termStoreid"></param>
        /// <param name="groupid"></param>
        /// <param name="termsetid"></param>
        /// <param name="parentid"></param>
        /// <param name="admincenterurl"></param>
        /// <param name="skip"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiTermInfoPageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiTermInfoPageResult>> LoadManagedMetadataAsyncWithHttpInfo (Guid termStoreid, Guid groupid, Guid termsetid, Guid parentid, string admincenterurl, int? skip = null, int? top = null, string search = null);
        /// <summary>
        /// load sharepoint sites
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceid">If the service is content manager, you need use Serviceid_Source or Serviceid_Destination to load the source or destination tree</param>
        /// <param name="containerid"></param>
        /// <param name="isselected"></param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>Task of SPNodePageResult</returns>
        System.Threading.Tasks.Task<SPNodePageResult> LoadManagedSitesAsync (string serviceid, Guid containerid, bool isselected, int? top = null, int? skip = null, string search = null);

        /// <summary>
        /// load sharepoint sites
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceid">If the service is content manager, you need use Serviceid_Source or Serviceid_Destination to load the source or destination tree</param>
        /// <param name="containerid"></param>
        /// <param name="isselected"></param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>Task of ApiResponse (SPNodePageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SPNodePageResult>> LoadManagedSitesAsyncWithHttpInfo (string serviceid, Guid containerid, bool isselected, int? top = null, int? skip = null, string search = null);
        /// <summary>
        /// load sharepoint webs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceid">If the service is content manager, you need use Serviceid_Source or Serviceid_Destination to load the source or destination tree</param>
        /// <param name="siteorwebid"></param>
        /// <param name="isselected"></param>
        /// <param name="issite"></param>
        /// <param name="siteOrWebUrl"></param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>Task of SPNodePageResult</returns>
        System.Threading.Tasks.Task<SPNodePageResult> LoadWebsAsync (string serviceid, Guid siteorwebid, bool isselected, bool issite, string siteOrWebUrl, int? top = null, int? skip = null, string search = null);

        /// <summary>
        /// load sharepoint webs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceid">If the service is content manager, you need use Serviceid_Source or Serviceid_Destination to load the source or destination tree</param>
        /// <param name="siteorwebid"></param>
        /// <param name="isselected"></param>
        /// <param name="issite"></param>
        /// <param name="siteOrWebUrl"></param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>Task of ApiResponse (SPNodePageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SPNodePageResult>> LoadWebsAsyncWithHttpInfo (string serviceid, Guid siteorwebid, bool isselected, bool issite, string siteOrWebUrl, int? top = null, int? skip = null, string search = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOffice365Api : IOffice365ApiSync, IOffice365ApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class Office365Api : IOffice365Api
    {
        private Cloud.Governance.NewSdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="Office365Api"/> class.
        /// </summary>
        /// <returns></returns>
        public Office365Api() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Office365Api"/> class.
        /// </summary>
        /// <returns></returns>
        public Office365Api(String basePath)
        {
            this.Configuration = Cloud.Governance.NewSdk.Client.Configuration.MergeConfigurations(
                Cloud.Governance.NewSdk.Client.GlobalConfiguration.Instance,
                new Cloud.Governance.NewSdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Cloud.Governance.NewSdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Cloud.Governance.NewSdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Cloud.Governance.NewSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Office365Api"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public Office365Api(Cloud.Governance.NewSdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Cloud.Governance.NewSdk.Client.Configuration.MergeConfigurations(
                Cloud.Governance.NewSdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Cloud.Governance.NewSdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Cloud.Governance.NewSdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Cloud.Governance.NewSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Office365Api"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public Office365Api(Cloud.Governance.NewSdk.Client.ISynchronousClient client,Cloud.Governance.NewSdk.Client.IAsynchronousClient asyncClient, Cloud.Governance.NewSdk.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Cloud.Governance.NewSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Cloud.Governance.NewSdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Cloud.Governance.NewSdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Cloud.Governance.NewSdk.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Cloud.Governance.NewSdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// get group information 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantid"></param>
        /// <param name="id"></param>
        /// <returns>AzureADGroup</returns>
        public AzureADGroup GetGroupInfo (string tenantid, string id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<AzureADGroup> localVarResponse = GetGroupInfoWithHttpInfo(tenantid, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get group information 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantid"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of AzureADGroup</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< AzureADGroup > GetGroupInfoWithHttpInfo (string tenantid, string id)
        {
            // verify the required parameter 'tenantid' is set
            if (tenantid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'tenantid' when calling Office365Api->GetGroupInfo");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling Office365Api->GetGroupInfo");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (tenantid != null)
                requestOptions.PathParameters.Add("tenantid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(tenantid)); // path parameter
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< AzureADGroup >("/office365/groups/{tenantid}/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetGroupInfo", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get group information 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantid"></param>
        /// <param name="id"></param>
        /// <returns>Task of AzureADGroup</returns>
        public async System.Threading.Tasks.Task<AzureADGroup> GetGroupInfoAsync (string tenantid, string id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<AzureADGroup> localVarResponse = await GetGroupInfoAsyncWithHttpInfo(tenantid, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get group information 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantid"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (AzureADGroup)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<AzureADGroup>> GetGroupInfoAsyncWithHttpInfo (string tenantid, string id)
        {
            // verify the required parameter 'tenantid' is set
            if (tenantid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'tenantid' when calling Office365Api->GetGroupInfo");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling Office365Api->GetGroupInfo");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (tenantid != null)
                requestOptions.PathParameters.Add("tenantid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(tenantid)); // path parameter
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<AzureADGroup>("/office365/groups/{tenantid}/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetGroupInfo", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get group members by group email 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>ApiUserPageResult</returns>
        public ApiUserPageResult GetGroupMembers (string email, int? top = null, int? skip = null, string search = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ApiUserPageResult> localVarResponse = GetGroupMembersWithHttpInfo(email, top, skip, search);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get group members by group email 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>ApiResponse of ApiUserPageResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< ApiUserPageResult > GetGroupMembersWithHttpInfo (string email, int? top = null, int? skip = null, string search = null)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'email' when calling Office365Api->GetGroupMembers");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (email != null)
                requestOptions.PathParameters.Add("email", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(email)); // path parameter
            if (top != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (search != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "search", search))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< ApiUserPageResult >("/office365/groups/{email}/members", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetGroupMembers", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get group members by group email 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>Task of ApiUserPageResult</returns>
        public async System.Threading.Tasks.Task<ApiUserPageResult> GetGroupMembersAsync (string email, int? top = null, int? skip = null, string search = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ApiUserPageResult> localVarResponse = await GetGroupMembersAsyncWithHttpInfo(email, top, skip, search);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get group members by group email 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiUserPageResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<ApiUserPageResult>> GetGroupMembersAsyncWithHttpInfo (string email, int? top = null, int? skip = null, string search = null)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'email' when calling Office365Api->GetGroupMembers");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (email != null)
                requestOptions.PathParameters.Add("email", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(email)); // path parameter
            if (top != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (search != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "search", search))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ApiUserPageResult>("/office365/groups/{email}/members", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetGroupMembers", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get group members by group name 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url"></param>
        /// <param name="name"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>ApiUserPageResult</returns>
        public ApiUserPageResult GetGroupMembersByGroupName (string url, string name = null, int? top = null, int? skip = null, string search = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ApiUserPageResult> localVarResponse = GetGroupMembersByGroupNameWithHttpInfo(url, name, top, skip, search);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get group members by group name 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url"></param>
        /// <param name="name"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>ApiResponse of ApiUserPageResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< ApiUserPageResult > GetGroupMembersByGroupNameWithHttpInfo (string url, string name = null, int? top = null, int? skip = null, string search = null)
        {
            // verify the required parameter 'url' is set
            if (url == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'url' when calling Office365Api->GetGroupMembersByGroupName");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (name != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "name", name))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (url != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "url", url))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (top != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (search != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "search", search))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< ApiUserPageResult >("/office365/groups/members", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetGroupMembersByGroupName", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get group members by group name 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url"></param>
        /// <param name="name"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>Task of ApiUserPageResult</returns>
        public async System.Threading.Tasks.Task<ApiUserPageResult> GetGroupMembersByGroupNameAsync (string url, string name = null, int? top = null, int? skip = null, string search = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ApiUserPageResult> localVarResponse = await GetGroupMembersByGroupNameAsyncWithHttpInfo(url, name, top, skip, search);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get group members by group name 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url"></param>
        /// <param name="name"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiUserPageResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<ApiUserPageResult>> GetGroupMembersByGroupNameAsyncWithHttpInfo (string url, string name = null, int? top = null, int? skip = null, string search = null)
        {
            // verify the required parameter 'url' is set
            if (url == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'url' when calling Office365Api->GetGroupMembersByGroupName");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (name != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "name", name))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (url != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "url", url))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (top != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (search != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "search", search))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ApiUserPageResult>("/office365/groups/members", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetGroupMembersByGroupName", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get group owners by group email 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>ApiUserPageResult</returns>
        public ApiUserPageResult GetGroupOwners (string email, int? top = null, int? skip = null, string search = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ApiUserPageResult> localVarResponse = GetGroupOwnersWithHttpInfo(email, top, skip, search);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get group owners by group email 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>ApiResponse of ApiUserPageResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< ApiUserPageResult > GetGroupOwnersWithHttpInfo (string email, int? top = null, int? skip = null, string search = null)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'email' when calling Office365Api->GetGroupOwners");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (email != null)
                requestOptions.PathParameters.Add("email", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(email)); // path parameter
            if (top != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (search != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "search", search))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< ApiUserPageResult >("/office365/groups/{email}/owners", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetGroupOwners", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get group owners by group email 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>Task of ApiUserPageResult</returns>
        public async System.Threading.Tasks.Task<ApiUserPageResult> GetGroupOwnersAsync (string email, int? top = null, int? skip = null, string search = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ApiUserPageResult> localVarResponse = await GetGroupOwnersAsyncWithHttpInfo(email, top, skip, search);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get group owners by group email 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiUserPageResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<ApiUserPageResult>> GetGroupOwnersAsyncWithHttpInfo (string email, int? top = null, int? skip = null, string search = null)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'email' when calling Office365Api->GetGroupOwners");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (email != null)
                requestOptions.PathParameters.Add("email", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(email)); // path parameter
            if (top != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (search != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "search", search))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ApiUserPageResult>("/office365/groups/{email}/owners", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetGroupOwners", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get all hubsites from a specific tenant 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantid"></param>
        /// <returns>List&lt;GuidModel&gt;</returns>
        public List<GuidModel> GetHubSites (Guid tenantid)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<List<GuidModel>> localVarResponse = GetHubSitesWithHttpInfo(tenantid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get all hubsites from a specific tenant 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantid"></param>
        /// <returns>ApiResponse of List&lt;GuidModel&gt;</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< List<GuidModel> > GetHubSitesWithHttpInfo (Guid tenantid)
        {
            // verify the required parameter 'tenantid' is set
            if (tenantid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'tenantid' when calling Office365Api->GetHubSites");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (tenantid != null)
                requestOptions.PathParameters.Add("tenantid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(tenantid)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< List<GuidModel> >("/office365/hubsites/{tenantid}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetHubSites", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get all hubsites from a specific tenant 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantid"></param>
        /// <returns>Task of List&lt;GuidModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<GuidModel>> GetHubSitesAsync (Guid tenantid)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<List<GuidModel>> localVarResponse = await GetHubSitesAsyncWithHttpInfo(tenantid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get all hubsites from a specific tenant 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantid"></param>
        /// <returns>Task of ApiResponse (List&lt;GuidModel&gt;)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<List<GuidModel>>> GetHubSitesAsyncWithHttpInfo (Guid tenantid)
        {
            // verify the required parameter 'tenantid' is set
            if (tenantid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'tenantid' when calling Office365Api->GetHubSites");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (tenantid != null)
                requestOptions.PathParameters.Add("tenantid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(tenantid)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<GuidModel>>("/office365/hubsites/{tenantid}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetHubSites", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get all hubsites from site&#39;s tenant 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteUrl">any site url in your tenant (optional)</param>
        /// <returns>List&lt;GuidModel&gt;</returns>
        public List<GuidModel> GetHubSitesFromTenantOfSite (string siteUrl = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<List<GuidModel>> localVarResponse = GetHubSitesFromTenantOfSiteWithHttpInfo(siteUrl);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get all hubsites from site&#39;s tenant 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteUrl">any site url in your tenant (optional)</param>
        /// <returns>ApiResponse of List&lt;GuidModel&gt;</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< List<GuidModel> > GetHubSitesFromTenantOfSiteWithHttpInfo (string siteUrl = null)
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (siteUrl != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "siteUrl", siteUrl))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< List<GuidModel> >("/office365/hubsites", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetHubSitesFromTenantOfSite", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get all hubsites from site&#39;s tenant 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteUrl">any site url in your tenant (optional)</param>
        /// <returns>Task of List&lt;GuidModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<GuidModel>> GetHubSitesFromTenantOfSiteAsync (string siteUrl = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<List<GuidModel>> localVarResponse = await GetHubSitesFromTenantOfSiteAsyncWithHttpInfo(siteUrl);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get all hubsites from site&#39;s tenant 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteUrl">any site url in your tenant (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GuidModel&gt;)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<List<GuidModel>>> GetHubSitesFromTenantOfSiteAsyncWithHttpInfo (string siteUrl = null)
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (siteUrl != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "siteUrl", siteUrl))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<GuidModel>>("/office365/hubsites", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetHubSitesFromTenantOfSite", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get all teams that owner is curernt user 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;GuidModel&gt;</returns>
        public List<GuidModel> GetOwnedTeams ()
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<List<GuidModel>> localVarResponse = GetOwnedTeamsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// get all teams that owner is curernt user 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;GuidModel&gt;</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< List<GuidModel> > GetOwnedTeamsWithHttpInfo ()
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< List<GuidModel> >("/office365/teams/my", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetOwnedTeams", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get all teams that owner is curernt user 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;GuidModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<GuidModel>> GetOwnedTeamsAsync ()
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<List<GuidModel>> localVarResponse = await GetOwnedTeamsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// get all teams that owner is curernt user 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;GuidModel&gt;)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<List<GuidModel>>> GetOwnedTeamsAsyncWithHttpInfo ()
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<GuidModel>>("/office365/teams/my", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetOwnedTeams", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get web permissions for creating list request by web url 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webUrl"></param>
        /// <returns>UserGroupPermissions</returns>
        public UserGroupPermissions GetPermissions (string webUrl)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<UserGroupPermissions> localVarResponse = GetPermissionsWithHttpInfo(webUrl);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get web permissions for creating list request by web url 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webUrl"></param>
        /// <returns>ApiResponse of UserGroupPermissions</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< UserGroupPermissions > GetPermissionsWithHttpInfo (string webUrl)
        {
            // verify the required parameter 'webUrl' is set
            if (webUrl == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'webUrl' when calling Office365Api->GetPermissions");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (webUrl != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "webUrl", webUrl))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< UserGroupPermissions >("/office365/permissions", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetPermissions", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get web permissions for creating list request by web url 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webUrl"></param>
        /// <returns>Task of UserGroupPermissions</returns>
        public async System.Threading.Tasks.Task<UserGroupPermissions> GetPermissionsAsync (string webUrl)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<UserGroupPermissions> localVarResponse = await GetPermissionsAsyncWithHttpInfo(webUrl);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get web permissions for creating list request by web url 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webUrl"></param>
        /// <returns>Task of ApiResponse (UserGroupPermissions)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<UserGroupPermissions>> GetPermissionsAsyncWithHttpInfo (string webUrl)
        {
            // verify the required parameter 'webUrl' is set
            if (webUrl == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'webUrl' when calling Office365Api->GetPermissions");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (webUrl != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "webUrl", webUrl))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<UserGroupPermissions>("/office365/permissions", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetPermissions", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get site permimssion role assignment 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url"></param>
        /// <param name="type"></param>
        /// <returns>List&lt;SPRoleAssignment&gt;</returns>
        public List<SPRoleAssignment> GetRoleAssignment (string url, NodeType type)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<List<SPRoleAssignment>> localVarResponse = GetRoleAssignmentWithHttpInfo(url, type);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get site permimssion role assignment 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url"></param>
        /// <param name="type"></param>
        /// <returns>ApiResponse of List&lt;SPRoleAssignment&gt;</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< List<SPRoleAssignment> > GetRoleAssignmentWithHttpInfo (string url, NodeType type)
        {
            // verify the required parameter 'url' is set
            if (url == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'url' when calling Office365Api->GetRoleAssignment");

            // verify the required parameter 'type' is set
            if (type == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'type' when calling Office365Api->GetRoleAssignment");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (url != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "url", url))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (type != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "type", type))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< List<SPRoleAssignment> >("/office365/roleassignment", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetRoleAssignment", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get site permimssion role assignment 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url"></param>
        /// <param name="type"></param>
        /// <returns>Task of List&lt;SPRoleAssignment&gt;</returns>
        public async System.Threading.Tasks.Task<List<SPRoleAssignment>> GetRoleAssignmentAsync (string url, NodeType type)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<List<SPRoleAssignment>> localVarResponse = await GetRoleAssignmentAsyncWithHttpInfo(url, type);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get site permimssion role assignment 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url"></param>
        /// <param name="type"></param>
        /// <returns>Task of ApiResponse (List&lt;SPRoleAssignment&gt;)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<List<SPRoleAssignment>>> GetRoleAssignmentAsyncWithHttpInfo (string url, NodeType type)
        {
            // verify the required parameter 'url' is set
            if (url == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'url' when calling Office365Api->GetRoleAssignment");

            // verify the required parameter 'type' is set
            if (type == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'type' when calling Office365Api->GetRoleAssignment");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (url != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "url", url))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (type != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "type", type))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<SPRoleAssignment>>("/office365/roleassignment", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetRoleAssignment", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get site designs by site url 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteUrl"> (optional)</param>
        /// <returns>List&lt;StringModel&gt;</returns>
        public List<StringModel> GetSiteDesigns (string siteUrl = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<List<StringModel>> localVarResponse = GetSiteDesignsWithHttpInfo(siteUrl);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get site designs by site url 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteUrl"> (optional)</param>
        /// <returns>ApiResponse of List&lt;StringModel&gt;</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< List<StringModel> > GetSiteDesignsWithHttpInfo (string siteUrl = null)
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (siteUrl != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "siteUrl", siteUrl))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< List<StringModel> >("/office365/sitedesigns", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetSiteDesigns", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get site designs by site url 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteUrl"> (optional)</param>
        /// <returns>Task of List&lt;StringModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<StringModel>> GetSiteDesignsAsync (string siteUrl = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<List<StringModel>> localVarResponse = await GetSiteDesignsAsyncWithHttpInfo(siteUrl);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get site designs by site url 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteUrl"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;StringModel&gt;)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<List<StringModel>>> GetSiteDesignsAsyncWithHttpInfo (string siteUrl = null)
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (siteUrl != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "siteUrl", siteUrl))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<StringModel>>("/office365/sitedesigns", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetSiteDesigns", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get site collection information with url 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullUrl"></param>
        /// <returns>SiteInfo</returns>
        public SiteInfo GetSiteInfo (string fullUrl)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<SiteInfo> localVarResponse = GetSiteInfoWithHttpInfo(fullUrl);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get site collection information with url 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullUrl"></param>
        /// <returns>ApiResponse of SiteInfo</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< SiteInfo > GetSiteInfoWithHttpInfo (string fullUrl)
        {
            // verify the required parameter 'fullUrl' is set
            if (fullUrl == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'fullUrl' when calling Office365Api->GetSiteInfo");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (fullUrl != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "fullUrl", fullUrl))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< SiteInfo >("/office365/sites", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetSiteInfo", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get site collection information with url 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullUrl"></param>
        /// <returns>Task of SiteInfo</returns>
        public async System.Threading.Tasks.Task<SiteInfo> GetSiteInfoAsync (string fullUrl)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<SiteInfo> localVarResponse = await GetSiteInfoAsyncWithHttpInfo(fullUrl);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get site collection information with url 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullUrl"></param>
        /// <returns>Task of ApiResponse (SiteInfo)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<SiteInfo>> GetSiteInfoAsyncWithHttpInfo (string fullUrl)
        {
            // verify the required parameter 'fullUrl' is set
            if (fullUrl == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'fullUrl' when calling Office365Api->GetSiteInfo");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (fullUrl != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "fullUrl", fullUrl))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<SiteInfo>("/office365/sites", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetSiteInfo", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get site permission levels 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri"></param>
        /// <returns>List&lt;PermissionLevel&gt;</returns>
        public List<PermissionLevel> GetSitePermissionLevels (string uri)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<List<PermissionLevel>> localVarResponse = GetSitePermissionLevelsWithHttpInfo(uri);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get site permission levels 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri"></param>
        /// <returns>ApiResponse of List&lt;PermissionLevel&gt;</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< List<PermissionLevel> > GetSitePermissionLevelsWithHttpInfo (string uri)
        {
            // verify the required parameter 'uri' is set
            if (uri == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'uri' when calling Office365Api->GetSitePermissionLevels");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (uri != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "uri", uri))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< List<PermissionLevel> >("/office365/sites/permissionlevels", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetSitePermissionLevels", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get site permission levels 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri"></param>
        /// <returns>Task of List&lt;PermissionLevel&gt;</returns>
        public async System.Threading.Tasks.Task<List<PermissionLevel>> GetSitePermissionLevelsAsync (string uri)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<List<PermissionLevel>> localVarResponse = await GetSitePermissionLevelsAsyncWithHttpInfo(uri);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get site permission levels 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri"></param>
        /// <returns>Task of ApiResponse (List&lt;PermissionLevel&gt;)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<List<PermissionLevel>>> GetSitePermissionLevelsAsyncWithHttpInfo (string uri)
        {
            // verify the required parameter 'uri' is set
            if (uri == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'uri' when calling Office365Api->GetSitePermissionLevels");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (uri != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "uri", uri))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<PermissionLevel>>("/office365/sites/permissionlevels", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetSitePermissionLevels", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get site sharePoint groups 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri"></param>
        /// <returns>List&lt;SPGroup&gt;</returns>
        public List<SPGroup> GetSiteSharePointGroups (string uri)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<List<SPGroup>> localVarResponse = GetSiteSharePointGroupsWithHttpInfo(uri);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get site sharePoint groups 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri"></param>
        /// <returns>ApiResponse of List&lt;SPGroup&gt;</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< List<SPGroup> > GetSiteSharePointGroupsWithHttpInfo (string uri)
        {
            // verify the required parameter 'uri' is set
            if (uri == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'uri' when calling Office365Api->GetSiteSharePointGroups");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (uri != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "uri", uri))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< List<SPGroup> >("/office365/sites/sharepointgroups", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetSiteSharePointGroups", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get site sharePoint groups 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri"></param>
        /// <returns>Task of List&lt;SPGroup&gt;</returns>
        public async System.Threading.Tasks.Task<List<SPGroup>> GetSiteSharePointGroupsAsync (string uri)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<List<SPGroup>> localVarResponse = await GetSiteSharePointGroupsAsyncWithHttpInfo(uri);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get site sharePoint groups 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri"></param>
        /// <returns>Task of ApiResponse (List&lt;SPGroup&gt;)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<List<SPGroup>>> GetSiteSharePointGroupsAsyncWithHttpInfo (string uri)
        {
            // verify the required parameter 'uri' is set
            if (uri == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'uri' when calling Office365Api->GetSiteSharePointGroups");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (uri != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "uri", uri))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<SPGroup>>("/office365/sites/sharepointgroups", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetSiteSharePointGroups", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get site templates with language code identifier 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="languageid"></param>
        /// <param name="url"> (optional)</param>
        /// <returns>List&lt;SiteTemplate&gt;</returns>
        public List<SiteTemplate> GetSiteTemplates (int languageid, string url = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<List<SiteTemplate>> localVarResponse = GetSiteTemplatesWithHttpInfo(languageid, url);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get site templates with language code identifier 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="languageid"></param>
        /// <param name="url"> (optional)</param>
        /// <returns>ApiResponse of List&lt;SiteTemplate&gt;</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< List<SiteTemplate> > GetSiteTemplatesWithHttpInfo (int languageid, string url = null)
        {
            // verify the required parameter 'languageid' is set
            if (languageid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'languageid' when calling Office365Api->GetSiteTemplates");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (languageid != null)
                requestOptions.PathParameters.Add("languageid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(languageid)); // path parameter
            if (url != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "url", url))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< List<SiteTemplate> >("/office365/sites/templates/{languageid}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetSiteTemplates", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get site templates with language code identifier 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="languageid"></param>
        /// <param name="url"> (optional)</param>
        /// <returns>Task of List&lt;SiteTemplate&gt;</returns>
        public async System.Threading.Tasks.Task<List<SiteTemplate>> GetSiteTemplatesAsync (int languageid, string url = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<List<SiteTemplate>> localVarResponse = await GetSiteTemplatesAsyncWithHttpInfo(languageid, url);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get site templates with language code identifier 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="languageid"></param>
        /// <param name="url"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;SiteTemplate&gt;)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<List<SiteTemplate>>> GetSiteTemplatesAsyncWithHttpInfo (int languageid, string url = null)
        {
            // verify the required parameter 'languageid' is set
            if (languageid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'languageid' when calling Office365Api->GetSiteTemplates");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (languageid != null)
                requestOptions.PathParameters.Add("languageid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(languageid)); // path parameter
            if (url != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "url", url))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<SiteTemplate>>("/office365/sites/templates/{languageid}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetSiteTemplates", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get yammer group 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkid"></param>
        /// <param name="name"></param>
        /// <returns>YammerGroup</returns>
        public YammerGroup GetYammerGroup (string networkid, string name)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<YammerGroup> localVarResponse = GetYammerGroupWithHttpInfo(networkid, name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get yammer group 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkid"></param>
        /// <param name="name"></param>
        /// <returns>ApiResponse of YammerGroup</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< YammerGroup > GetYammerGroupWithHttpInfo (string networkid, string name)
        {
            // verify the required parameter 'networkid' is set
            if (networkid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'networkid' when calling Office365Api->GetYammerGroup");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'name' when calling Office365Api->GetYammerGroup");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (networkid != null)
                requestOptions.PathParameters.Add("networkid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(networkid)); // path parameter
            if (name != null)
                requestOptions.PathParameters.Add("name", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< YammerGroup >("/office365/yammergroup/{networkid}/{name}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetYammerGroup", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get yammer group 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkid"></param>
        /// <param name="name"></param>
        /// <returns>Task of YammerGroup</returns>
        public async System.Threading.Tasks.Task<YammerGroup> GetYammerGroupAsync (string networkid, string name)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<YammerGroup> localVarResponse = await GetYammerGroupAsyncWithHttpInfo(networkid, name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get yammer group 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkid"></param>
        /// <param name="name"></param>
        /// <returns>Task of ApiResponse (YammerGroup)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<YammerGroup>> GetYammerGroupAsyncWithHttpInfo (string networkid, string name)
        {
            // verify the required parameter 'networkid' is set
            if (networkid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'networkid' when calling Office365Api->GetYammerGroup");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'name' when calling Office365Api->GetYammerGroup");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (networkid != null)
                requestOptions.PathParameters.Add("networkid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(networkid)); // path parameter
            if (name != null)
                requestOptions.PathParameters.Add("name", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<YammerGroup>("/office365/yammergroup/{networkid}/{name}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetYammerGroup", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// load the containers from cloud management 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceid">If the service is content manager, you need use Serviceid_Source or Serviceid_Destination to load the source or destination tree</param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>SPNodePageResult</returns>
        public SPNodePageResult LoadContainers (string serviceid, int? top = null, int? skip = null, string search = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<SPNodePageResult> localVarResponse = LoadContainersWithHttpInfo(serviceid, top, skip, search);
             return localVarResponse.Data;
        }

        /// <summary>
        /// load the containers from cloud management 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceid">If the service is content manager, you need use Serviceid_Source or Serviceid_Destination to load the source or destination tree</param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>ApiResponse of SPNodePageResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< SPNodePageResult > LoadContainersWithHttpInfo (string serviceid, int? top = null, int? skip = null, string search = null)
        {
            // verify the required parameter 'serviceid' is set
            if (serviceid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'serviceid' when calling Office365Api->LoadContainers");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (serviceid != null)
                requestOptions.PathParameters.Add("serviceid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(serviceid)); // path parameter
            if (top != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (search != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "search", search))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< SPNodePageResult >("/office365/containers/{serviceid}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("LoadContainers", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// load the containers from cloud management 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceid">If the service is content manager, you need use Serviceid_Source or Serviceid_Destination to load the source or destination tree</param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>Task of SPNodePageResult</returns>
        public async System.Threading.Tasks.Task<SPNodePageResult> LoadContainersAsync (string serviceid, int? top = null, int? skip = null, string search = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<SPNodePageResult> localVarResponse = await LoadContainersAsyncWithHttpInfo(serviceid, top, skip, search);
             return localVarResponse.Data;

        }

        /// <summary>
        /// load the containers from cloud management 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceid">If the service is content manager, you need use Serviceid_Source or Serviceid_Destination to load the source or destination tree</param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>Task of ApiResponse (SPNodePageResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<SPNodePageResult>> LoadContainersAsyncWithHttpInfo (string serviceid, int? top = null, int? skip = null, string search = null)
        {
            // verify the required parameter 'serviceid' is set
            if (serviceid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'serviceid' when calling Office365Api->LoadContainers");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (serviceid != null)
                requestOptions.PathParameters.Add("serviceid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(serviceid)); // path parameter
            if (top != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (search != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "search", search))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<SPNodePageResult>("/office365/containers/{serviceid}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("LoadContainers", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// load sharepoint folders 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listid"></param>
        /// <param name="folderorlisturl"></param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>SPNodePageResult</returns>
        public SPNodePageResult LoadFolders (Guid listid, string folderorlisturl, int? top = null, int? skip = null, string search = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<SPNodePageResult> localVarResponse = LoadFoldersWithHttpInfo(listid, folderorlisturl, top, skip, search);
             return localVarResponse.Data;
        }

        /// <summary>
        /// load sharepoint folders 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listid"></param>
        /// <param name="folderorlisturl"></param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>ApiResponse of SPNodePageResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< SPNodePageResult > LoadFoldersWithHttpInfo (Guid listid, string folderorlisturl, int? top = null, int? skip = null, string search = null)
        {
            // verify the required parameter 'listid' is set
            if (listid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'listid' when calling Office365Api->LoadFolders");

            // verify the required parameter 'folderorlisturl' is set
            if (folderorlisturl == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'folderorlisturl' when calling Office365Api->LoadFolders");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (listid != null)
                requestOptions.PathParameters.Add("listid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(listid)); // path parameter
            if (folderorlisturl != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "folderorlisturl", folderorlisturl))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (top != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (search != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "search", search))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< SPNodePageResult >("/office365/folders/{listid}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("LoadFolders", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// load sharepoint folders 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listid"></param>
        /// <param name="folderorlisturl"></param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>Task of SPNodePageResult</returns>
        public async System.Threading.Tasks.Task<SPNodePageResult> LoadFoldersAsync (Guid listid, string folderorlisturl, int? top = null, int? skip = null, string search = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<SPNodePageResult> localVarResponse = await LoadFoldersAsyncWithHttpInfo(listid, folderorlisturl, top, skip, search);
             return localVarResponse.Data;

        }

        /// <summary>
        /// load sharepoint folders 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listid"></param>
        /// <param name="folderorlisturl"></param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>Task of ApiResponse (SPNodePageResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<SPNodePageResult>> LoadFoldersAsyncWithHttpInfo (Guid listid, string folderorlisturl, int? top = null, int? skip = null, string search = null)
        {
            // verify the required parameter 'listid' is set
            if (listid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'listid' when calling Office365Api->LoadFolders");

            // verify the required parameter 'folderorlisturl' is set
            if (folderorlisturl == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'folderorlisturl' when calling Office365Api->LoadFolders");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (listid != null)
                requestOptions.PathParameters.Add("listid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(listid)); // path parameter
            if (folderorlisturl != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "folderorlisturl", folderorlisturl))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (top != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (search != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "search", search))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<SPNodePageResult>("/office365/folders/{listid}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("LoadFolders", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// load sharepoint items 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listid"></param>
        /// <param name="folderorlisturl"></param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>SPNodePageResult</returns>
        public SPNodePageResult LoadItems (Guid listid, string folderorlisturl, int? top = null, int? skip = null, string search = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<SPNodePageResult> localVarResponse = LoadItemsWithHttpInfo(listid, folderorlisturl, top, skip, search);
             return localVarResponse.Data;
        }

        /// <summary>
        /// load sharepoint items 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listid"></param>
        /// <param name="folderorlisturl"></param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>ApiResponse of SPNodePageResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< SPNodePageResult > LoadItemsWithHttpInfo (Guid listid, string folderorlisturl, int? top = null, int? skip = null, string search = null)
        {
            // verify the required parameter 'listid' is set
            if (listid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'listid' when calling Office365Api->LoadItems");

            // verify the required parameter 'folderorlisturl' is set
            if (folderorlisturl == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'folderorlisturl' when calling Office365Api->LoadItems");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (listid != null)
                requestOptions.PathParameters.Add("listid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(listid)); // path parameter
            if (folderorlisturl != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "folderorlisturl", folderorlisturl))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (top != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (search != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "search", search))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< SPNodePageResult >("/office365/items/{listid}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("LoadItems", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// load sharepoint items 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listid"></param>
        /// <param name="folderorlisturl"></param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>Task of SPNodePageResult</returns>
        public async System.Threading.Tasks.Task<SPNodePageResult> LoadItemsAsync (Guid listid, string folderorlisturl, int? top = null, int? skip = null, string search = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<SPNodePageResult> localVarResponse = await LoadItemsAsyncWithHttpInfo(listid, folderorlisturl, top, skip, search);
             return localVarResponse.Data;

        }

        /// <summary>
        /// load sharepoint items 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listid"></param>
        /// <param name="folderorlisturl"></param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>Task of ApiResponse (SPNodePageResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<SPNodePageResult>> LoadItemsAsyncWithHttpInfo (Guid listid, string folderorlisturl, int? top = null, int? skip = null, string search = null)
        {
            // verify the required parameter 'listid' is set
            if (listid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'listid' when calling Office365Api->LoadItems");

            // verify the required parameter 'folderorlisturl' is set
            if (folderorlisturl == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'folderorlisturl' when calling Office365Api->LoadItems");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (listid != null)
                requestOptions.PathParameters.Add("listid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(listid)); // path parameter
            if (folderorlisturl != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "folderorlisturl", folderorlisturl))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (top != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (search != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "search", search))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<SPNodePageResult>("/office365/items/{listid}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("LoadItems", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// load sharepoint lists 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteorweburl"></param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>SPNodePageResult</returns>
        public SPNodePageResult LoadLists (string siteorweburl, int? top = null, int? skip = null, string search = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<SPNodePageResult> localVarResponse = LoadListsWithHttpInfo(siteorweburl, top, skip, search);
             return localVarResponse.Data;
        }

        /// <summary>
        /// load sharepoint lists 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteorweburl"></param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>ApiResponse of SPNodePageResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< SPNodePageResult > LoadListsWithHttpInfo (string siteorweburl, int? top = null, int? skip = null, string search = null)
        {
            // verify the required parameter 'siteorweburl' is set
            if (siteorweburl == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'siteorweburl' when calling Office365Api->LoadLists");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (siteorweburl != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "siteorweburl", siteorweburl))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (top != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (search != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "search", search))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< SPNodePageResult >("/office365/lists", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("LoadLists", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// load sharepoint lists 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteorweburl"></param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>Task of SPNodePageResult</returns>
        public async System.Threading.Tasks.Task<SPNodePageResult> LoadListsAsync (string siteorweburl, int? top = null, int? skip = null, string search = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<SPNodePageResult> localVarResponse = await LoadListsAsyncWithHttpInfo(siteorweburl, top, skip, search);
             return localVarResponse.Data;

        }

        /// <summary>
        /// load sharepoint lists 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteorweburl"></param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>Task of ApiResponse (SPNodePageResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<SPNodePageResult>> LoadListsAsyncWithHttpInfo (string siteorweburl, int? top = null, int? skip = null, string search = null)
        {
            // verify the required parameter 'siteorweburl' is set
            if (siteorweburl == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'siteorweburl' when calling Office365Api->LoadLists");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (siteorweburl != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "siteorweburl", siteorweburl))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (top != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (search != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "search", search))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<SPNodePageResult>("/office365/lists", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("LoadLists", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// load managed metadata terms 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="termStoreid"></param>
        /// <param name="groupid"></param>
        /// <param name="termsetid"></param>
        /// <param name="parentid"></param>
        /// <param name="admincenterurl"></param>
        /// <param name="skip"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>ApiTermInfoPageResult</returns>
        public ApiTermInfoPageResult LoadManagedMetadata (Guid termStoreid, Guid groupid, Guid termsetid, Guid parentid, string admincenterurl, int? skip = null, int? top = null, string search = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ApiTermInfoPageResult> localVarResponse = LoadManagedMetadataWithHttpInfo(termStoreid, groupid, termsetid, parentid, admincenterurl, skip, top, search);
             return localVarResponse.Data;
        }

        /// <summary>
        /// load managed metadata terms 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="termStoreid"></param>
        /// <param name="groupid"></param>
        /// <param name="termsetid"></param>
        /// <param name="parentid"></param>
        /// <param name="admincenterurl"></param>
        /// <param name="skip"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>ApiResponse of ApiTermInfoPageResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< ApiTermInfoPageResult > LoadManagedMetadataWithHttpInfo (Guid termStoreid, Guid groupid, Guid termsetid, Guid parentid, string admincenterurl, int? skip = null, int? top = null, string search = null)
        {
            // verify the required parameter 'termStoreid' is set
            if (termStoreid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'termStoreid' when calling Office365Api->LoadManagedMetadata");

            // verify the required parameter 'groupid' is set
            if (groupid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'groupid' when calling Office365Api->LoadManagedMetadata");

            // verify the required parameter 'termsetid' is set
            if (termsetid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'termsetid' when calling Office365Api->LoadManagedMetadata");

            // verify the required parameter 'parentid' is set
            if (parentid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'parentid' when calling Office365Api->LoadManagedMetadata");

            // verify the required parameter 'admincenterurl' is set
            if (admincenterurl == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'admincenterurl' when calling Office365Api->LoadManagedMetadata");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (termStoreid != null)
                requestOptions.PathParameters.Add("termStoreid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(termStoreid)); // path parameter
            if (groupid != null)
                requestOptions.PathParameters.Add("groupid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(groupid)); // path parameter
            if (termsetid != null)
                requestOptions.PathParameters.Add("termsetid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(termsetid)); // path parameter
            if (parentid != null)
                requestOptions.PathParameters.Add("parentid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(parentid)); // path parameter
            if (admincenterurl != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "admincenterurl", admincenterurl))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (top != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (search != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "search", search))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< ApiTermInfoPageResult >("/office365/managedmetadata/{termStoreid}/{groupid}/{termsetid}/{parentid}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("LoadManagedMetadata", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// load managed metadata terms 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="termStoreid"></param>
        /// <param name="groupid"></param>
        /// <param name="termsetid"></param>
        /// <param name="parentid"></param>
        /// <param name="admincenterurl"></param>
        /// <param name="skip"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>Task of ApiTermInfoPageResult</returns>
        public async System.Threading.Tasks.Task<ApiTermInfoPageResult> LoadManagedMetadataAsync (Guid termStoreid, Guid groupid, Guid termsetid, Guid parentid, string admincenterurl, int? skip = null, int? top = null, string search = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ApiTermInfoPageResult> localVarResponse = await LoadManagedMetadataAsyncWithHttpInfo(termStoreid, groupid, termsetid, parentid, admincenterurl, skip, top, search);
             return localVarResponse.Data;

        }

        /// <summary>
        /// load managed metadata terms 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="termStoreid"></param>
        /// <param name="groupid"></param>
        /// <param name="termsetid"></param>
        /// <param name="parentid"></param>
        /// <param name="admincenterurl"></param>
        /// <param name="skip"> (optional)</param>
        /// <param name="top"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiTermInfoPageResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<ApiTermInfoPageResult>> LoadManagedMetadataAsyncWithHttpInfo (Guid termStoreid, Guid groupid, Guid termsetid, Guid parentid, string admincenterurl, int? skip = null, int? top = null, string search = null)
        {
            // verify the required parameter 'termStoreid' is set
            if (termStoreid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'termStoreid' when calling Office365Api->LoadManagedMetadata");

            // verify the required parameter 'groupid' is set
            if (groupid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'groupid' when calling Office365Api->LoadManagedMetadata");

            // verify the required parameter 'termsetid' is set
            if (termsetid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'termsetid' when calling Office365Api->LoadManagedMetadata");

            // verify the required parameter 'parentid' is set
            if (parentid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'parentid' when calling Office365Api->LoadManagedMetadata");

            // verify the required parameter 'admincenterurl' is set
            if (admincenterurl == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'admincenterurl' when calling Office365Api->LoadManagedMetadata");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (termStoreid != null)
                requestOptions.PathParameters.Add("termStoreid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(termStoreid)); // path parameter
            if (groupid != null)
                requestOptions.PathParameters.Add("groupid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(groupid)); // path parameter
            if (termsetid != null)
                requestOptions.PathParameters.Add("termsetid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(termsetid)); // path parameter
            if (parentid != null)
                requestOptions.PathParameters.Add("parentid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(parentid)); // path parameter
            if (admincenterurl != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "admincenterurl", admincenterurl))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (top != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (search != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "search", search))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ApiTermInfoPageResult>("/office365/managedmetadata/{termStoreid}/{groupid}/{termsetid}/{parentid}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("LoadManagedMetadata", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// load sharepoint sites 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceid">If the service is content manager, you need use Serviceid_Source or Serviceid_Destination to load the source or destination tree</param>
        /// <param name="containerid"></param>
        /// <param name="isselected"></param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>SPNodePageResult</returns>
        public SPNodePageResult LoadManagedSites (string serviceid, Guid containerid, bool isselected, int? top = null, int? skip = null, string search = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<SPNodePageResult> localVarResponse = LoadManagedSitesWithHttpInfo(serviceid, containerid, isselected, top, skip, search);
             return localVarResponse.Data;
        }

        /// <summary>
        /// load sharepoint sites 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceid">If the service is content manager, you need use Serviceid_Source or Serviceid_Destination to load the source or destination tree</param>
        /// <param name="containerid"></param>
        /// <param name="isselected"></param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>ApiResponse of SPNodePageResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< SPNodePageResult > LoadManagedSitesWithHttpInfo (string serviceid, Guid containerid, bool isselected, int? top = null, int? skip = null, string search = null)
        {
            // verify the required parameter 'serviceid' is set
            if (serviceid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'serviceid' when calling Office365Api->LoadManagedSites");

            // verify the required parameter 'containerid' is set
            if (containerid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'containerid' when calling Office365Api->LoadManagedSites");

            // verify the required parameter 'isselected' is set
            if (isselected == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'isselected' when calling Office365Api->LoadManagedSites");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (serviceid != null)
                requestOptions.PathParameters.Add("serviceid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(serviceid)); // path parameter
            if (containerid != null)
                requestOptions.PathParameters.Add("containerid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(containerid)); // path parameter
            if (isselected != null)
                requestOptions.PathParameters.Add("isselected", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(isselected)); // path parameter
            if (top != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (search != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "search", search))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< SPNodePageResult >("/office365/managedsites/{serviceid}/{containerid}/{isselected}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("LoadManagedSites", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// load sharepoint sites 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceid">If the service is content manager, you need use Serviceid_Source or Serviceid_Destination to load the source or destination tree</param>
        /// <param name="containerid"></param>
        /// <param name="isselected"></param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>Task of SPNodePageResult</returns>
        public async System.Threading.Tasks.Task<SPNodePageResult> LoadManagedSitesAsync (string serviceid, Guid containerid, bool isselected, int? top = null, int? skip = null, string search = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<SPNodePageResult> localVarResponse = await LoadManagedSitesAsyncWithHttpInfo(serviceid, containerid, isselected, top, skip, search);
             return localVarResponse.Data;

        }

        /// <summary>
        /// load sharepoint sites 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceid">If the service is content manager, you need use Serviceid_Source or Serviceid_Destination to load the source or destination tree</param>
        /// <param name="containerid"></param>
        /// <param name="isselected"></param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>Task of ApiResponse (SPNodePageResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<SPNodePageResult>> LoadManagedSitesAsyncWithHttpInfo (string serviceid, Guid containerid, bool isselected, int? top = null, int? skip = null, string search = null)
        {
            // verify the required parameter 'serviceid' is set
            if (serviceid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'serviceid' when calling Office365Api->LoadManagedSites");

            // verify the required parameter 'containerid' is set
            if (containerid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'containerid' when calling Office365Api->LoadManagedSites");

            // verify the required parameter 'isselected' is set
            if (isselected == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'isselected' when calling Office365Api->LoadManagedSites");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (serviceid != null)
                requestOptions.PathParameters.Add("serviceid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(serviceid)); // path parameter
            if (containerid != null)
                requestOptions.PathParameters.Add("containerid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(containerid)); // path parameter
            if (isselected != null)
                requestOptions.PathParameters.Add("isselected", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(isselected)); // path parameter
            if (top != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (search != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "search", search))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<SPNodePageResult>("/office365/managedsites/{serviceid}/{containerid}/{isselected}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("LoadManagedSites", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// load sharepoint webs 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceid">If the service is content manager, you need use Serviceid_Source or Serviceid_Destination to load the source or destination tree</param>
        /// <param name="siteorwebid"></param>
        /// <param name="isselected"></param>
        /// <param name="issite"></param>
        /// <param name="siteOrWebUrl"></param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>SPNodePageResult</returns>
        public SPNodePageResult LoadWebs (string serviceid, Guid siteorwebid, bool isselected, bool issite, string siteOrWebUrl, int? top = null, int? skip = null, string search = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<SPNodePageResult> localVarResponse = LoadWebsWithHttpInfo(serviceid, siteorwebid, isselected, issite, siteOrWebUrl, top, skip, search);
             return localVarResponse.Data;
        }

        /// <summary>
        /// load sharepoint webs 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceid">If the service is content manager, you need use Serviceid_Source or Serviceid_Destination to load the source or destination tree</param>
        /// <param name="siteorwebid"></param>
        /// <param name="isselected"></param>
        /// <param name="issite"></param>
        /// <param name="siteOrWebUrl"></param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>ApiResponse of SPNodePageResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< SPNodePageResult > LoadWebsWithHttpInfo (string serviceid, Guid siteorwebid, bool isselected, bool issite, string siteOrWebUrl, int? top = null, int? skip = null, string search = null)
        {
            // verify the required parameter 'serviceid' is set
            if (serviceid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'serviceid' when calling Office365Api->LoadWebs");

            // verify the required parameter 'siteorwebid' is set
            if (siteorwebid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'siteorwebid' when calling Office365Api->LoadWebs");

            // verify the required parameter 'isselected' is set
            if (isselected == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'isselected' when calling Office365Api->LoadWebs");

            // verify the required parameter 'issite' is set
            if (issite == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'issite' when calling Office365Api->LoadWebs");

            // verify the required parameter 'siteOrWebUrl' is set
            if (siteOrWebUrl == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'siteOrWebUrl' when calling Office365Api->LoadWebs");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (serviceid != null)
                requestOptions.PathParameters.Add("serviceid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(serviceid)); // path parameter
            if (siteorwebid != null)
                requestOptions.PathParameters.Add("siteorwebid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(siteorwebid)); // path parameter
            if (isselected != null)
                requestOptions.PathParameters.Add("isselected", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(isselected)); // path parameter
            if (issite != null)
                requestOptions.PathParameters.Add("issite", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(issite)); // path parameter
            if (siteOrWebUrl != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "siteOrWebUrl", siteOrWebUrl))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (top != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (search != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "search", search))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< SPNodePageResult >("/office365/webs/{serviceid}/{siteorwebid}/{isselected}/{issite}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("LoadWebs", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// load sharepoint webs 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceid">If the service is content manager, you need use Serviceid_Source or Serviceid_Destination to load the source or destination tree</param>
        /// <param name="siteorwebid"></param>
        /// <param name="isselected"></param>
        /// <param name="issite"></param>
        /// <param name="siteOrWebUrl"></param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>Task of SPNodePageResult</returns>
        public async System.Threading.Tasks.Task<SPNodePageResult> LoadWebsAsync (string serviceid, Guid siteorwebid, bool isselected, bool issite, string siteOrWebUrl, int? top = null, int? skip = null, string search = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<SPNodePageResult> localVarResponse = await LoadWebsAsyncWithHttpInfo(serviceid, siteorwebid, isselected, issite, siteOrWebUrl, top, skip, search);
             return localVarResponse.Data;

        }

        /// <summary>
        /// load sharepoint webs 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceid">If the service is content manager, you need use Serviceid_Source or Serviceid_Destination to load the source or destination tree</param>
        /// <param name="siteorwebid"></param>
        /// <param name="isselected"></param>
        /// <param name="issite"></param>
        /// <param name="siteOrWebUrl"></param>
        /// <param name="top"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <returns>Task of ApiResponse (SPNodePageResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<SPNodePageResult>> LoadWebsAsyncWithHttpInfo (string serviceid, Guid siteorwebid, bool isselected, bool issite, string siteOrWebUrl, int? top = null, int? skip = null, string search = null)
        {
            // verify the required parameter 'serviceid' is set
            if (serviceid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'serviceid' when calling Office365Api->LoadWebs");

            // verify the required parameter 'siteorwebid' is set
            if (siteorwebid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'siteorwebid' when calling Office365Api->LoadWebs");

            // verify the required parameter 'isselected' is set
            if (isselected == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'isselected' when calling Office365Api->LoadWebs");

            // verify the required parameter 'issite' is set
            if (issite == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'issite' when calling Office365Api->LoadWebs");

            // verify the required parameter 'siteOrWebUrl' is set
            if (siteOrWebUrl == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'siteOrWebUrl' when calling Office365Api->LoadWebs");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (serviceid != null)
                requestOptions.PathParameters.Add("serviceid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(serviceid)); // path parameter
            if (siteorwebid != null)
                requestOptions.PathParameters.Add("siteorwebid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(siteorwebid)); // path parameter
            if (isselected != null)
                requestOptions.PathParameters.Add("isselected", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(isselected)); // path parameter
            if (issite != null)
                requestOptions.PathParameters.Add("issite", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(issite)); // path parameter
            if (siteOrWebUrl != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "siteOrWebUrl", siteOrWebUrl))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (top != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (search != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "search", search))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<SPNodePageResult>("/office365/webs/{serviceid}/{siteorwebid}/{isselected}/{issite}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("LoadWebs", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
