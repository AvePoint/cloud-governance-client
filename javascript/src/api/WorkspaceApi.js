/**
 * Cloud Governance Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiMyGroup from '../model/ApiMyGroup';
import AutoImportProfileRef from '../model/AutoImportProfileRef';
import ConfirmInformation from '../model/ConfirmInformation';
import CustomMetadata from '../model/CustomMetadata';
import DistinctPageResult from '../model/DistinctPageResult';
import ExternalSharingOptions from '../model/ExternalSharingOptions';
import GroupRenewProfileRef from '../model/GroupRenewProfileRef';
import MembershipRenewalItemModel from '../model/MembershipRenewalItemModel';
import MySite from '../model/MySite';
import ObjectContactModel from '../model/ObjectContactModel';
import PermissionActionItem from '../model/PermissionActionItem';
import PermissionActionItemPageResult from '../model/PermissionActionItemPageResult';
import PermissionLevel from '../model/PermissionLevel';
import RenewModel from '../model/RenewModel';
import RenewProfileRef from '../model/RenewProfileRef';
import UserParam from '../model/UserParam';
import WorkspaceList from '../model/WorkspaceList';

/**
* Workspace service.
* @module api/WorkspaceApi
* @version 1.0
*/
export default class WorkspaceApi {

    /**
    * Constructs a new WorkspaceApi. 
    * @alias module:api/WorkspaceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the confirmGorup operation.
     * @callback module:api/WorkspaceApi~confirmGorupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * confirm auto imported group/teams information
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ConfirmInformation} opts.confirmInformation 
     * @param {module:api/WorkspaceApi~confirmGorupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    confirmGorup(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['confirmInformation'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling confirmGorup");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/workspace/groups/{id}/confirm', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the confirmGorupWithUnknowPrimaryContact operation.
     * @callback module:api/WorkspaceApi~confirmGorupWithUnknowPrimaryContactCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * confirm auto imported group/teams by assigning task to administrator
     * @param {String} id 
     * @param {module:api/WorkspaceApi~confirmGorupWithUnknowPrimaryContactCallback} callback The callback function, accepting three arguments: error, data, response
     */
    confirmGorupWithUnknowPrimaryContact(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling confirmGorupWithUnknowPrimaryContact");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/workspace/groups/{id}/confirm/assigntoadmincontact', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the confirmGroupWithKnowningPrimaryContact operation.
     * @callback module:api/WorkspaceApi~confirmGroupWithKnowningPrimaryContactCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * confirm auto imported group/teams by assigning task to the specified primary contact
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/UserParam} opts.userParam 
     * @param {module:api/WorkspaceApi~confirmGroupWithKnowningPrimaryContactCallback} callback The callback function, accepting three arguments: error, data, response
     */
    confirmGroupWithKnowningPrimaryContact(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['userParam'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling confirmGroupWithKnowningPrimaryContact");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/workspace/groups/{id}/confirm/changeprimarycontact', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the confirmSite operation.
     * @callback module:api/WorkspaceApi~confirmSiteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * confirm auto imported site information
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ConfirmInformation} opts.confirmInformation 
     * @param {module:api/WorkspaceApi~confirmSiteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    confirmSite(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['confirmInformation'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling confirmSite");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/workspace/sites/{id}/confirm', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the confirmSiteWitKnowingPrimaryContact operation.
     * @callback module:api/WorkspaceApi~confirmSiteWitKnowingPrimaryContactCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * confirm auto imported site by assigning task to the specified primary contact
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/UserParam} opts.userParam 
     * @param {module:api/WorkspaceApi~confirmSiteWitKnowingPrimaryContactCallback} callback The callback function, accepting three arguments: error, data, response
     */
    confirmSiteWitKnowingPrimaryContact(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['userParam'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling confirmSiteWitKnowingPrimaryContact");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/workspace/sites/{id}/confirm/changeprimarycontact', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the confirmSiteWithUnknowPrimaryContact operation.
     * @callback module:api/WorkspaceApi~confirmSiteWithUnknowPrimaryContactCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * confirm auto imported site by assigning task to administrator
     * @param {String} id 
     * @param {module:api/WorkspaceApi~confirmSiteWithUnknowPrimaryContactCallback} callback The callback function, accepting three arguments: error, data, response
     */
    confirmSiteWithUnknowPrimaryContact(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling confirmSiteWithUnknowPrimaryContact");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/workspace/sites/{id}/confirm/assigntoadmincontact', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupAutoImportProfile operation.
     * @callback module:api/WorkspaceApi~getGroupAutoImportProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AutoImportProfileRef} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get group/teams auto-imported profile information
     * @param {String} id 
     * @param {module:api/WorkspaceApi~getGroupAutoImportProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AutoImportProfileRef}
     */
    getGroupAutoImportProfile(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGroupAutoImportProfile");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = AutoImportProfileRef;
      return this.apiClient.callApi(
        '/workspace/groups/{id}/confirm/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupContacts operation.
     * @callback module:api/WorkspaceApi~getGroupContactsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectContactModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get group/teams contacts
     * @param {String} id 
     * @param {module:api/WorkspaceApi~getGroupContactsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectContactModel}
     */
    getGroupContacts(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGroupContacts");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ObjectContactModel;
      return this.apiClient.callApi(
        '/workspace/groups/{id}/contacts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupMembershipRenewalItems operation.
     * @callback module:api/WorkspaceApi~getGroupMembershipRenewalItemsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MembershipRenewalItemModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get group/teams membership renewal items
     * @param {String} id 
     * @param {module:api/WorkspaceApi~getGroupMembershipRenewalItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MembershipRenewalItemModel>}
     */
    getGroupMembershipRenewalItems(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGroupMembershipRenewalItems");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [MembershipRenewalItemModel];
      return this.apiClient.callApi(
        '/workspace/groups/{id}/renew/membership', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupMetadataRenewalItems operation.
     * @callback module:api/WorkspaceApi~getGroupMetadataRenewalItemsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CustomMetadata>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get group/teams metadata renewal items
     * @param {String} id 
     * @param {module:api/WorkspaceApi~getGroupMetadataRenewalItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CustomMetadata>}
     */
    getGroupMetadataRenewalItems(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGroupMetadataRenewalItems");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CustomMetadata];
      return this.apiClient.callApi(
        '/workspace/groups/{id}/renew/metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupPermissionRenewalFilters operation.
     * @callback module:api/WorkspaceApi~getGroupPermissionRenewalFiltersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DistinctPageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get group/teams permission renewal report filters
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @param {module:api/WorkspaceApi~getGroupPermissionRenewalFiltersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DistinctPageResult}
     */
    getGroupPermissionRenewalFilters(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGroupPermissionRenewalFilters");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter': opts['filter'],
        'distinct': opts['distinct'],
        'top': opts['top'],
        'skip': opts['skip']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = DistinctPageResult;
      return this.apiClient.callApi(
        '/workspace/groups/{id}/renew/permission/filters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupPermissionRenewalFiltersForSPGroup operation.
     * @callback module:api/WorkspaceApi~getGroupPermissionRenewalFiltersForSPGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DistinctPageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get group/teams permission renewal sharePoint group report filters
     * @param {String} id 
     * @param {String} groupid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @param {module:api/WorkspaceApi~getGroupPermissionRenewalFiltersForSPGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DistinctPageResult}
     */
    getGroupPermissionRenewalFiltersForSPGroup(id, groupid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGroupPermissionRenewalFiltersForSPGroup");
      }
      // verify the required parameter 'groupid' is set
      if (groupid === undefined || groupid === null) {
        throw new Error("Missing the required parameter 'groupid' when calling getGroupPermissionRenewalFiltersForSPGroup");
      }

      let pathParams = {
        'id': id,
        'groupid': groupid
      };
      let queryParams = {
        'filter': opts['filter'],
        'distinct': opts['distinct'],
        'top': opts['top'],
        'skip': opts['skip']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = DistinctPageResult;
      return this.apiClient.callApi(
        '/workspace/groups/{id}/renew/permission/group/{groupid}/filters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupPermissionRenewalItems operation.
     * @callback module:api/WorkspaceApi~getGroupPermissionRenewalItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PermissionActionItemPageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get group/teams permission renewal items
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {Object} opts.body 
     * @param {module:api/WorkspaceApi~getGroupPermissionRenewalItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PermissionActionItemPageResult}
     */
    getGroupPermissionRenewalItems(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGroupPermissionRenewalItems");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter': opts['filter'],
        'orderby': opts['orderby']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = PermissionActionItemPageResult;
      return this.apiClient.callApi(
        '/workspace/groups/{id}/renew/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupPermissionRenewalItemsForSPGroup operation.
     * @callback module:api/WorkspaceApi~getGroupPermissionRenewalItemsForSPGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PermissionActionItemPageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get sharePoint group members of group/teams permission renewal item
     * @param {String} id 
     * @param {String} groupid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {Object} opts.body 
     * @param {module:api/WorkspaceApi~getGroupPermissionRenewalItemsForSPGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PermissionActionItemPageResult}
     */
    getGroupPermissionRenewalItemsForSPGroup(id, groupid, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGroupPermissionRenewalItemsForSPGroup");
      }
      // verify the required parameter 'groupid' is set
      if (groupid === undefined || groupid === null) {
        throw new Error("Missing the required parameter 'groupid' when calling getGroupPermissionRenewalItemsForSPGroup");
      }

      let pathParams = {
        'id': id,
        'groupid': groupid
      };
      let queryParams = {
        'filter': opts['filter'],
        'orderby': opts['orderby']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = PermissionActionItemPageResult;
      return this.apiClient.callApi(
        '/workspace/groups/{id}/renew/permissions/group/{groupid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupPermissionRenewalPermissionLevels operation.
     * @callback module:api/WorkspaceApi~getGroupPermissionRenewalPermissionLevelsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PermissionLevel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get group/teams permission level for permission renewal
     * @param {String} id 
     * @param {module:api/WorkspaceApi~getGroupPermissionRenewalPermissionLevelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PermissionLevel>}
     */
    getGroupPermissionRenewalPermissionLevels(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGroupPermissionRenewalPermissionLevels");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [PermissionLevel];
      return this.apiClient.callApi(
        '/workspace/groups/{id}/renew/permissionlevels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupRenewalProfileSettings operation.
     * @callback module:api/WorkspaceApi~getGroupRenewalProfileSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupRenewProfileRef} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get group/teams renewal settings
     * @param {String} id 
     * @param {module:api/WorkspaceApi~getGroupRenewalProfileSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupRenewProfileRef}
     */
    getGroupRenewalProfileSettings(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGroupRenewalProfileSettings");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = GroupRenewProfileRef;
      return this.apiClient.callApi(
        '/workspace/groups/{id}/renew/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupSharingOptions operation.
     * @callback module:api/WorkspaceApi~getGroupSharingOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExternalSharingOptions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get group sharing options
     * @param {Object} opts Optional parameters
     * @param {String} opts.emailOrId 
     * @param {module:api/WorkspaceApi~getGroupSharingOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExternalSharingOptions}
     */
    getGroupSharingOptions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'emailOrId': opts['emailOrId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ExternalSharingOptions;
      return this.apiClient.callApi(
        '/workspace/groups/sharingoptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMyGroupInformation operation.
     * @callback module:api/WorkspaceApi~getMyGroupInformationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiMyGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get O365 group/teams information
     * @param {String} id 
     * @param {module:api/WorkspaceApi~getMyGroupInformationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiMyGroup}
     */
    getMyGroupInformation(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getMyGroupInformation");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ApiMyGroup;
      return this.apiClient.callApi(
        '/workspace/groups/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMySiteInformation operation.
     * @callback module:api/WorkspaceApi~getMySiteInformationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MySite} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/WorkspaceApi~getMySiteInformationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MySite}
     */
    getMySiteInformation(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getMySiteInformation");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = MySite;
      return this.apiClient.callApi(
        '/workspace/sites/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSiteAutoImportProfile operation.
     * @callback module:api/WorkspaceApi~getSiteAutoImportProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AutoImportProfileRef} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get site auto import settings
     * @param {String} id 
     * @param {module:api/WorkspaceApi~getSiteAutoImportProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AutoImportProfileRef}
     */
    getSiteAutoImportProfile(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSiteAutoImportProfile");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = AutoImportProfileRef;
      return this.apiClient.callApi(
        '/workspace/sites/{id}/confirm/settings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSiteContacts operation.
     * @callback module:api/WorkspaceApi~getSiteContactsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectContactModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get site contacts
     * @param {String} id 
     * @param {module:api/WorkspaceApi~getSiteContactsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectContactModel}
     */
    getSiteContacts(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSiteContacts");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ObjectContactModel;
      return this.apiClient.callApi(
        '/workspace/sites/{id}/contacts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSiteMetadata operation.
     * @callback module:api/WorkspaceApi~getSiteMetadataCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CustomMetadata>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get site metadata
     * @param {String} url 
     * @param {module:api/WorkspaceApi~getSiteMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CustomMetadata>}
     */
    getSiteMetadata(url, callback) {
      let postBody = null;
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling getSiteMetadata");
      }

      let pathParams = {
      };
      let queryParams = {
        'url': url
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CustomMetadata];
      return this.apiClient.callApi(
        '/workspace/sites/metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSiteMetadataRenewalItems operation.
     * @callback module:api/WorkspaceApi~getSiteMetadataRenewalItemsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CustomMetadata>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get site metadata renewal items
     * @param {String} id 
     * @param {module:api/WorkspaceApi~getSiteMetadataRenewalItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CustomMetadata>}
     */
    getSiteMetadataRenewalItems(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSiteMetadataRenewalItems");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CustomMetadata];
      return this.apiClient.callApi(
        '/workspace/sites/{id}/renew/metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSitePermissionRenewalFilters operation.
     * @callback module:api/WorkspaceApi~getSitePermissionRenewalFiltersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DistinctPageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get site permission renewal report filters
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @param {module:api/WorkspaceApi~getSitePermissionRenewalFiltersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DistinctPageResult}
     */
    getSitePermissionRenewalFilters(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSitePermissionRenewalFilters");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter': opts['filter'],
        'distinct': opts['distinct'],
        'top': opts['top'],
        'skip': opts['skip']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = DistinctPageResult;
      return this.apiClient.callApi(
        '/workspace/sites/{id}/renew/permission/filters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSitePermissionRenewalFiltersForSPGroup operation.
     * @callback module:api/WorkspaceApi~getSitePermissionRenewalFiltersForSPGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DistinctPageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get site permission renewal sharePoint group report filters
     * @param {String} id 
     * @param {String} groupid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @param {module:api/WorkspaceApi~getSitePermissionRenewalFiltersForSPGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DistinctPageResult}
     */
    getSitePermissionRenewalFiltersForSPGroup(id, groupid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSitePermissionRenewalFiltersForSPGroup");
      }
      // verify the required parameter 'groupid' is set
      if (groupid === undefined || groupid === null) {
        throw new Error("Missing the required parameter 'groupid' when calling getSitePermissionRenewalFiltersForSPGroup");
      }

      let pathParams = {
        'id': id,
        'groupid': groupid
      };
      let queryParams = {
        'filter': opts['filter'],
        'distinct': opts['distinct'],
        'top': opts['top'],
        'skip': opts['skip']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = DistinctPageResult;
      return this.apiClient.callApi(
        '/workspace/sites/{id}/renew/permission/group/{groupid}/filters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSitePermissionRenewalItems operation.
     * @callback module:api/WorkspaceApi~getSitePermissionRenewalItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PermissionActionItemPageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get site permission renewal items
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {Object} opts.body 
     * @param {module:api/WorkspaceApi~getSitePermissionRenewalItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PermissionActionItemPageResult}
     */
    getSitePermissionRenewalItems(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSitePermissionRenewalItems");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter': opts['filter'],
        'orderby': opts['orderby']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = PermissionActionItemPageResult;
      return this.apiClient.callApi(
        '/workspace/sites/{id}/renew/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSitePermissionRenewalItemsForSPGroup operation.
     * @callback module:api/WorkspaceApi~getSitePermissionRenewalItemsForSPGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PermissionActionItemPageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get sharePoint group members of site permission renewal item
     * @param {String} id 
     * @param {String} groupid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {Object} opts.body 
     * @param {module:api/WorkspaceApi~getSitePermissionRenewalItemsForSPGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PermissionActionItemPageResult}
     */
    getSitePermissionRenewalItemsForSPGroup(id, groupid, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSitePermissionRenewalItemsForSPGroup");
      }
      // verify the required parameter 'groupid' is set
      if (groupid === undefined || groupid === null) {
        throw new Error("Missing the required parameter 'groupid' when calling getSitePermissionRenewalItemsForSPGroup");
      }

      let pathParams = {
        'id': id,
        'groupid': groupid
      };
      let queryParams = {
        'filter': opts['filter'],
        'orderby': opts['orderby']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = PermissionActionItemPageResult;
      return this.apiClient.callApi(
        '/workspace/sites/{id}/renew/permissions/group/{groupid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSitePermissionRenewalPermissionLevels operation.
     * @callback module:api/WorkspaceApi~getSitePermissionRenewalPermissionLevelsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PermissionLevel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get site permission level for permission renewal
     * @param {String} id 
     * @param {module:api/WorkspaceApi~getSitePermissionRenewalPermissionLevelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PermissionLevel>}
     */
    getSitePermissionRenewalPermissionLevels(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSitePermissionRenewalPermissionLevels");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [PermissionLevel];
      return this.apiClient.callApi(
        '/workspace/sites/{id}/renew/permissionlevels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSiteRenewalProfileSettings operation.
     * @callback module:api/WorkspaceApi~getSiteRenewalProfileSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RenewProfileRef} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get site renewal settings
     * @param {String} id 
     * @param {module:api/WorkspaceApi~getSiteRenewalProfileSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RenewProfileRef}
     */
    getSiteRenewalProfileSettings(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSiteRenewalProfileSettings");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = RenewProfileRef;
      return this.apiClient.callApi(
        '/workspace/sites/{id}/renew/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSiteSharingOptions operation.
     * @callback module:api/WorkspaceApi~getSiteSharingOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExternalSharingOptions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get site sharing options by site url or id
     * @param {Object} opts Optional parameters
     * @param {String} opts.siteUrlOrId 
     * @param {module:api/WorkspaceApi~getSiteSharingOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExternalSharingOptions}
     */
    getSiteSharingOptions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'siteUrlOrId': opts['siteUrlOrId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ExternalSharingOptions;
      return this.apiClient.callApi(
        '/workspace/sites/sharingoptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWorkspaceFilters operation.
     * @callback module:api/WorkspaceApi~getWorkspaceFiltersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DistinctPageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get my workspace filters
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, name, type, siteUrl, groupEmail, primaryContact, primaryContactEmail, phase, isCurrentRenewer, createdTime, status, autoImportProfileId, pendingAction
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> id, name, type, siteUrl, groupEmail, primaryContact, primaryContactEmail, phase, isCurrentRenewer, createdTime, status, autoImportProfileId, pendingAction
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @param {module:api/WorkspaceApi~getWorkspaceFiltersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DistinctPageResult}
     */
    getWorkspaceFilters(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'distinct': opts['distinct'],
        'top': opts['top'],
        'skip': opts['skip']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = DistinctPageResult;
      return this.apiClient.callApi(
        '/workspace/my/filters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWorkspaceItems operation.
     * @callback module:api/WorkspaceApi~getWorkspaceItemsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WorkspaceList>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get my workspace items
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, name, type, siteUrl, groupEmail, primaryContact, primaryContactEmail, phase, isCurrentRenewer, createdTime, status, autoImportProfileId, pendingAction
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, name, type, siteUrl, groupEmail, primaryContact, primaryContactEmail, phase, isCurrentRenewer, createdTime, status, autoImportProfileId, pendingAction
     * @param {String} opts.search Search for name
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @param {module:api/WorkspaceApi~getWorkspaceItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WorkspaceList>}
     */
    getWorkspaceItems(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'orderby': opts['orderby'],
        'search': opts['search'],
        'top': opts['top'],
        'skip': opts['skip']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [WorkspaceList];
      return this.apiClient.callApi(
        '/workspace/my', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reassignGroupRenewalTask operation.
     * @callback module:api/WorkspaceApi~reassignGroupRenewalTaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * reassign the group/teams renewal task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.userid 
     * @param {module:api/WorkspaceApi~reassignGroupRenewalTaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reassignGroupRenewalTask(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reassignGroupRenewalTask");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'userid': opts['userid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/workspace/groups/{id}/renew/reassign', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reassignSiteRenewalTask operation.
     * @callback module:api/WorkspaceApi~reassignSiteRenewalTaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * reassign the site renewal task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.userid 
     * @param {module:api/WorkspaceApi~reassignSiteRenewalTaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reassignSiteRenewalTask(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reassignSiteRenewalTask");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'userid': opts['userid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/workspace/sites/{id}/renew/reassign', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rejectGroupRenewalTask operation.
     * @callback module:api/WorkspaceApi~rejectGroupRenewalTaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * reject the group/teams renewal task
     * @param {String} id 
     * @param {module:api/WorkspaceApi~rejectGroupRenewalTaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rejectGroupRenewalTask(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling rejectGroupRenewalTask");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/workspace/groups/{id}/renew/reject', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rejectSiteRenewalTask operation.
     * @callback module:api/WorkspaceApi~rejectSiteRenewalTaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * reject the site renewal task
     * @param {String} id 
     * @param {module:api/WorkspaceApi~rejectSiteRenewalTaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rejectSiteRenewalTask(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling rejectSiteRenewalTask");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/workspace/sites/{id}/renew/reject', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resetChangeForSiteRenewal operation.
     * @callback module:api/WorkspaceApi~resetChangeForSiteRenewalCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * reset your change
     * @param {String} id 
     * @param {module:api/WorkspaceApi~resetChangeForSiteRenewalCallback} callback The callback function, accepting three arguments: error, data, response
     */
    resetChangeForSiteRenewal(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling resetChangeForSiteRenewal");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/workspace/sites/{id}/renew/reset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resetChangesForGroupRenewal operation.
     * @callback module:api/WorkspaceApi~resetChangesForGroupRenewalCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * reset your change
     * @param {String} id 
     * @param {module:api/WorkspaceApi~resetChangesForGroupRenewalCallback} callback The callback function, accepting three arguments: error, data, response
     */
    resetChangesForGroupRenewal(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling resetChangesForGroupRenewal");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/workspace/groups/{id}/renew/reset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveGroupPermissionRenewalItems operation.
     * @callback module:api/WorkspaceApi~saveGroupPermissionRenewalItemsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * save group/teams permission renewal items
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PermissionActionItem>} opts.permissionActionItem 
     * @param {module:api/WorkspaceApi~saveGroupPermissionRenewalItemsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    saveGroupPermissionRenewalItems(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['permissionActionItem'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling saveGroupPermissionRenewalItems");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/workspace/groups/{id}/renew/permissions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveSitePermissionRenewalItems operation.
     * @callback module:api/WorkspaceApi~saveSitePermissionRenewalItemsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * save site permission renewal items
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PermissionActionItem>} opts.permissionActionItem 
     * @param {module:api/WorkspaceApi~saveSitePermissionRenewalItemsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    saveSitePermissionRenewalItems(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['permissionActionItem'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling saveSitePermissionRenewalItems");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/workspace/sites/{id}/renew/permissions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitGroupRenewalTask operation.
     * @callback module:api/WorkspaceApi~submitGroupRenewalTaskCallback
     * @param {String} error Error message, if any.
     * @param {Boolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * submit the group/teams renewal task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/RenewModel} opts.renewModel 
     * @param {module:api/WorkspaceApi~submitGroupRenewalTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Boolean}
     */
    submitGroupRenewalTask(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['renewModel'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling submitGroupRenewalTask");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/workspace/groups/{id}/renew/submit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitGroupRenewalTaskForArchiving operation.
     * @callback module:api/WorkspaceApi~submitGroupRenewalTaskForArchivingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * submit group/teams renewal task with archive
     * @param {String} id 
     * @param {module:api/WorkspaceApi~submitGroupRenewalTaskForArchivingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    submitGroupRenewalTaskForArchiving(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling submitGroupRenewalTaskForArchiving");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/workspace/groups/{id}/renew/archive', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitGroupRenewalTaskForDeleting operation.
     * @callback module:api/WorkspaceApi~submitGroupRenewalTaskForDeletingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * submit group/teams renewal task with deletion
     * @param {String} id 
     * @param {module:api/WorkspaceApi~submitGroupRenewalTaskForDeletingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    submitGroupRenewalTaskForDeleting(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling submitGroupRenewalTaskForDeleting");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/workspace/groups/{id}/renew/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitSiteRenewalTask operation.
     * @callback module:api/WorkspaceApi~submitSiteRenewalTaskCallback
     * @param {String} error Error message, if any.
     * @param {Boolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * submit the site renewal task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/RenewModel} opts.renewModel 
     * @param {module:api/WorkspaceApi~submitSiteRenewalTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Boolean}
     */
    submitSiteRenewalTask(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['renewModel'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling submitSiteRenewalTask");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/workspace/sites/{id}/renew/submit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitSiteRenewalTaskForDeleting operation.
     * @callback module:api/WorkspaceApi~submitSiteRenewalTaskForDeletingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * submit site renewal task with deletion
     * @param {String} id 
     * @param {module:api/WorkspaceApi~submitSiteRenewalTaskForDeletingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    submitSiteRenewalTaskForDeleting(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling submitSiteRenewalTaskForDeleting");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/workspace/sites/{id}/renew/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitSiteRenewalTaskWithArchiving operation.
     * @callback module:api/WorkspaceApi~submitSiteRenewalTaskWithArchivingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * approval site renewal task with archive
     * @param {String} id 
     * @param {module:api/WorkspaceApi~submitSiteRenewalTaskWithArchivingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    submitSiteRenewalTaskWithArchiving(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling submitSiteRenewalTaskWithArchiving");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/workspace/sites/{id}/renew/archive', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
