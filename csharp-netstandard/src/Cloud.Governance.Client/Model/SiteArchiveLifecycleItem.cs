/* 
 * Cloud Governance Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Cloud.Governance.Client.Client.OpenAPIDateConverter;

namespace Cloud.Governance.Client.Model
{
    /// <summary>
    /// SiteArchiveLifecycleItem
    /// </summary>
    [DataContract]
    public partial class SiteArchiveLifecycleItem :  IEquatable<SiteArchiveLifecycleItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SiteArchiveLifecycleItem" /> class.
        /// </summary>
        /// <param name="profile">profile.</param>
        /// <param name="isNotifyEnabled">isNotifyEnabled.</param>
        /// <param name="notifyUser">notifyUser.</param>
        /// <param name="notifyTemplate">notifyTemplate.</param>
        /// <param name="isEnabled">isEnabled.</param>
        /// <param name="isDefaultProcess">isDefaultProcess.</param>
        /// <param name="process">process.</param>
        public SiteArchiveLifecycleItem(string profile = default(string), bool isNotifyEnabled = default(bool), List<ApiUser> notifyUser = default(List<ApiUser>), GuidModel notifyTemplate = default(GuidModel), bool isEnabled = default(bool), bool isDefaultProcess = default(bool), GuidModel process = default(GuidModel))
        {
            this.Profile = profile;
            this.IsNotifyEnabled = isNotifyEnabled;
            this.NotifyUser = notifyUser;
            this.NotifyTemplate = notifyTemplate;
            this.IsEnabled = isEnabled;
            this.IsDefaultProcess = isDefaultProcess;
            this.Process = process;
        }
        
        /// <summary>
        /// Gets or Sets Profile
        /// </summary>
        [DataMember(Name="profile", EmitDefaultValue=true)]
        public string Profile { get; set; }

        /// <summary>
        /// Gets or Sets IsNotifyEnabled
        /// </summary>
        [DataMember(Name="isNotifyEnabled", EmitDefaultValue=false)]
        public bool IsNotifyEnabled { get; set; }

        /// <summary>
        /// Gets or Sets NotifyUser
        /// </summary>
        [DataMember(Name="notifyUser", EmitDefaultValue=true)]
        public List<ApiUser> NotifyUser { get; set; }

        /// <summary>
        /// Gets or Sets NotifyTemplate
        /// </summary>
        [DataMember(Name="notifyTemplate", EmitDefaultValue=true)]
        public GuidModel NotifyTemplate { get; set; }

        /// <summary>
        /// Gets or Sets IsEnabled
        /// </summary>
        [DataMember(Name="isEnabled", EmitDefaultValue=false)]
        public bool IsEnabled { get; set; }

        /// <summary>
        /// Gets or Sets IsDefaultProcess
        /// </summary>
        [DataMember(Name="isDefaultProcess", EmitDefaultValue=false)]
        public bool IsDefaultProcess { get; set; }

        /// <summary>
        /// Gets or Sets Process
        /// </summary>
        [DataMember(Name="process", EmitDefaultValue=true)]
        public GuidModel Process { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SiteArchiveLifecycleItem {\n");
            sb.Append("  Profile: ").Append(Profile).Append("\n");
            sb.Append("  IsNotifyEnabled: ").Append(IsNotifyEnabled).Append("\n");
            sb.Append("  NotifyUser: ").Append(NotifyUser).Append("\n");
            sb.Append("  NotifyTemplate: ").Append(NotifyTemplate).Append("\n");
            sb.Append("  IsEnabled: ").Append(IsEnabled).Append("\n");
            sb.Append("  IsDefaultProcess: ").Append(IsDefaultProcess).Append("\n");
            sb.Append("  Process: ").Append(Process).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SiteArchiveLifecycleItem);
        }

        /// <summary>
        /// Returns true if SiteArchiveLifecycleItem instances are equal
        /// </summary>
        /// <param name="input">Instance of SiteArchiveLifecycleItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SiteArchiveLifecycleItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Profile == input.Profile ||
                    (this.Profile != null &&
                    this.Profile.Equals(input.Profile))
                ) && 
                (
                    this.IsNotifyEnabled == input.IsNotifyEnabled ||
                    this.IsNotifyEnabled.Equals(input.IsNotifyEnabled)
                ) && 
                (
                    this.NotifyUser == input.NotifyUser ||
                    this.NotifyUser != null &&
                    input.NotifyUser != null &&
                    this.NotifyUser.SequenceEqual(input.NotifyUser)
                ) && 
                (
                    this.NotifyTemplate == input.NotifyTemplate ||
                    (this.NotifyTemplate != null &&
                    this.NotifyTemplate.Equals(input.NotifyTemplate))
                ) && 
                (
                    this.IsEnabled == input.IsEnabled ||
                    this.IsEnabled.Equals(input.IsEnabled)
                ) && 
                (
                    this.IsDefaultProcess == input.IsDefaultProcess ||
                    this.IsDefaultProcess.Equals(input.IsDefaultProcess)
                ) && 
                (
                    this.Process == input.Process ||
                    (this.Process != null &&
                    this.Process.Equals(input.Process))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Profile != null)
                    hashCode = hashCode * 59 + this.Profile.GetHashCode();
                hashCode = hashCode * 59 + this.IsNotifyEnabled.GetHashCode();
                if (this.NotifyUser != null)
                    hashCode = hashCode * 59 + this.NotifyUser.GetHashCode();
                if (this.NotifyTemplate != null)
                    hashCode = hashCode * 59 + this.NotifyTemplate.GetHashCode();
                hashCode = hashCode * 59 + this.IsEnabled.GetHashCode();
                hashCode = hashCode * 59 + this.IsDefaultProcess.GetHashCode();
                if (this.Process != null)
                    hashCode = hashCode * 59 + this.Process.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
