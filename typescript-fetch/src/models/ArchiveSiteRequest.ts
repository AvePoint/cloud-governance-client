// tslint:disable
/**
 * Cloud Governance Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    RequestMetadata,
    RequestMetadataFromJSON,
    RequestMetadataFromJSONTyped,
    RequestMetadataToJSON,
    RequestStatus,
    RequestStatusFromJSON,
    RequestStatusFromJSONTyped,
    RequestStatusToJSON,
    ServiceType,
    ServiceTypeFromJSON,
    ServiceTypeFromJSONTyped,
    ServiceTypeToJSON,
    SiteLifecycleActionType,
    SiteLifecycleActionTypeFromJSON,
    SiteLifecycleActionTypeFromJSONTyped,
    SiteLifecycleActionTypeToJSON,
} from './';

/**
 * 
 * @export
 * @interface ArchiveSiteRequest
 */
export interface ArchiveSiteRequest {
    /**
     * 
     * @type {SiteLifecycleActionType}
     * @memberof ArchiveSiteRequest
     */
    action?: SiteLifecycleActionType;
    /**
     * 
     * @type {string}
     * @memberof ArchiveSiteRequest
     */
    readonly actionDescription?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArchiveSiteRequest
     */
    siteId?: string;
    /**
     * 
     * @type {string}
     * @memberof ArchiveSiteRequest
     */
    siteUrl?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArchiveSiteRequest
     */
    id?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArchiveSiteRequest
     */
    serviceId?: string;
    /**
     * 
     * @type {string}
     * @memberof ArchiveSiteRequest
     */
    department?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArchiveSiteRequest
     */
    summary?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArchiveSiteRequest
     */
    notesToApprovers?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArchiveSiteRequest
     */
    questionnaireId?: string | null;
    /**
     * 
     * @type {Array<RequestMetadata>}
     * @memberof ArchiveSiteRequest
     */
    metadatas?: Array<RequestMetadata> | null;
    /**
     * 
     * @type {number}
     * @memberof ArchiveSiteRequest
     */
    ticketNumber?: number | null;
    /**
     * 
     * @type {ServiceType}
     * @memberof ArchiveSiteRequest
     */
    type?: ServiceType;
    /**
     * 
     * @type {string}
     * @memberof ArchiveSiteRequest
     */
    readonly typeDescription?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArchiveSiteRequest
     */
    requester?: string | null;
    /**
     * 
     * @type {RequestStatus}
     * @memberof ArchiveSiteRequest
     */
    status?: RequestStatus;
    /**
     * 
     * @type {number}
     * @memberof ArchiveSiteRequest
     */
    readonly progressStatus?: number;
    /**
     * 
     * @type {string}
     * @memberof ArchiveSiteRequest
     */
    readonly progressStatusDescription?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof ArchiveSiteRequest
     */
    submittedTime?: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof ArchiveSiteRequest
     */
    lastUpdated?: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof ArchiveSiteRequest
     */
    createdTime?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof ArchiveSiteRequest
     */
    assignTo?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArchiveSiteRequest
     */
    fullPath?: string | null;
}

export function ArchiveSiteRequestFromJSON(json: any): ArchiveSiteRequest {
    return ArchiveSiteRequestFromJSONTyped(json, false);
}

export function ArchiveSiteRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ArchiveSiteRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'action': !exists(json, 'action') ? undefined : SiteLifecycleActionTypeFromJSON(json['action']),
        'actionDescription': !exists(json, 'actionDescription') ? undefined : json['actionDescription'],
        'siteId': !exists(json, 'siteId') ? undefined : json['siteId'],
        'siteUrl': !exists(json, 'siteUrl') ? undefined : json['siteUrl'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'serviceId': !exists(json, 'serviceId') ? undefined : json['serviceId'],
        'department': !exists(json, 'department') ? undefined : json['department'],
        'summary': !exists(json, 'summary') ? undefined : json['summary'],
        'notesToApprovers': !exists(json, 'notesToApprovers') ? undefined : json['notesToApprovers'],
        'questionnaireId': !exists(json, 'questionnaireId') ? undefined : json['questionnaireId'],
        'metadatas': !exists(json, 'metadatas') ? undefined : (json['metadatas'] as Array<any>).map(RequestMetadataFromJSON),
        'ticketNumber': !exists(json, 'ticketNumber') ? undefined : json['ticketNumber'],
        'type': !exists(json, 'type') ? undefined : ServiceTypeFromJSON(json['type']),
        'typeDescription': !exists(json, 'typeDescription') ? undefined : json['typeDescription'],
        'requester': !exists(json, 'requester') ? undefined : json['requester'],
        'status': !exists(json, 'status') ? undefined : RequestStatusFromJSON(json['status']),
        'progressStatus': !exists(json, 'progressStatus') ? undefined : json['progressStatus'],
        'progressStatusDescription': !exists(json, 'progressStatusDescription') ? undefined : json['progressStatusDescription'],
        'submittedTime': !exists(json, 'submittedTime') ? undefined : new Date(json['submittedTime']),
        'lastUpdated': !exists(json, 'lastUpdated') ? undefined : new Date(json['lastUpdated']),
        'createdTime': !exists(json, 'createdTime') ? undefined : new Date(json['createdTime']),
        'assignTo': !exists(json, 'assignTo') ? undefined : json['assignTo'],
        'fullPath': !exists(json, 'fullPath') ? undefined : json['fullPath'],
    };
}

export function ArchiveSiteRequestToJSON(value?: ArchiveSiteRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'action': SiteLifecycleActionTypeToJSON(value.action),
        'siteId': value.siteId,
        'siteUrl': value.siteUrl,
        'id': value.id,
        'serviceId': value.serviceId,
        'department': value.department,
        'summary': value.summary,
        'notesToApprovers': value.notesToApprovers,
        'questionnaireId': value.questionnaireId,
        'metadatas': value.metadatas == null ? undefined : (value.metadatas as Array<any>).map(RequestMetadataToJSON),
        'ticketNumber': value.ticketNumber,
        'type': ServiceTypeToJSON(value.type),
        'requester': value.requester,
        'status': RequestStatusToJSON(value.status),
        'submittedTime': value.submittedTime == null ? undefined : value.submittedTime.toISOString(),
        'lastUpdated': value.lastUpdated == null ? undefined : value.lastUpdated.toISOString(),
        'createdTime': value.createdTime == null ? undefined : value.createdTime.toISOString(),
        'assignTo': value.assignTo,
        'fullPath': value.fullPath,
    };
}


