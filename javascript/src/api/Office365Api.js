/**
 * Cloud Governance Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiTermInfoPageResult from '../model/ApiTermInfoPageResult';
import ApiUserPageResult from '../model/ApiUserPageResult';
import AzureADGroup from '../model/AzureADGroup';
import GuidModel from '../model/GuidModel';
import NodeType from '../model/NodeType';
import PermissionLevel from '../model/PermissionLevel';
import SPGroup from '../model/SPGroup';
import SPNodePageResult from '../model/SPNodePageResult';
import SPRoleAssignment from '../model/SPRoleAssignment';
import SiteInfo from '../model/SiteInfo';
import SiteTemplate from '../model/SiteTemplate';
import StringModel from '../model/StringModel';
import UserGroupPermissions from '../model/UserGroupPermissions';
import YammerGroup from '../model/YammerGroup';

/**
* Office365 service.
* @module api/Office365Api
* @version 1.0
*/
export default class Office365Api {

    /**
    * Constructs a new Office365Api. 
    * @alias module:api/Office365Api
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getGroupInfo operation.
     * @callback module:api/Office365Api~getGroupInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AzureADGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get group information
     * @param {String} tenantid 
     * @param {String} id 
     * @param {module:api/Office365Api~getGroupInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AzureADGroup}
     */
    getGroupInfo(tenantid, id, callback) {
      let postBody = null;
      // verify the required parameter 'tenantid' is set
      if (tenantid === undefined || tenantid === null) {
        throw new Error("Missing the required parameter 'tenantid' when calling getGroupInfo");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGroupInfo");
      }

      let pathParams = {
        'tenantid': tenantid,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = AzureADGroup;
      return this.apiClient.callApi(
        '/office365/groups/{tenantid}/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupMembers operation.
     * @callback module:api/Office365Api~getGroupMembersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiUserPageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get group members by group email
     * @param {String} email 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.top 
     * @param {Number} opts.skip 
     * @param {String} opts.search 
     * @param {module:api/Office365Api~getGroupMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiUserPageResult}
     */
    getGroupMembers(email, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling getGroupMembers");
      }

      let pathParams = {
        'email': email
      };
      let queryParams = {
        'top': opts['top'],
        'skip': opts['skip'],
        'search': opts['search']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ApiUserPageResult;
      return this.apiClient.callApi(
        '/office365/groups/{email}/members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupMembersByGroupName operation.
     * @callback module:api/Office365Api~getGroupMembersByGroupNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiUserPageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get group members by group name
     * @param {String} url 
     * @param {Object} opts Optional parameters
     * @param {String} opts.name 
     * @param {Number} opts.top 
     * @param {Number} opts.skip 
     * @param {String} opts.search 
     * @param {module:api/Office365Api~getGroupMembersByGroupNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiUserPageResult}
     */
    getGroupMembersByGroupName(url, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling getGroupMembersByGroupName");
      }

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'url': url,
        'top': opts['top'],
        'skip': opts['skip'],
        'search': opts['search']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ApiUserPageResult;
      return this.apiClient.callApi(
        '/office365/groups/members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupOwners operation.
     * @callback module:api/Office365Api~getGroupOwnersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiUserPageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get group owners by group email
     * @param {String} email 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.top 
     * @param {Number} opts.skip 
     * @param {String} opts.search 
     * @param {module:api/Office365Api~getGroupOwnersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiUserPageResult}
     */
    getGroupOwners(email, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling getGroupOwners");
      }

      let pathParams = {
        'email': email
      };
      let queryParams = {
        'top': opts['top'],
        'skip': opts['skip'],
        'search': opts['search']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ApiUserPageResult;
      return this.apiClient.callApi(
        '/office365/groups/{email}/owners', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getHubSites operation.
     * @callback module:api/Office365Api~getHubSitesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GuidModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get all hubsites from a specific tenant
     * @param {String} tenantid 
     * @param {module:api/Office365Api~getHubSitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GuidModel>}
     */
    getHubSites(tenantid, callback) {
      let postBody = null;
      // verify the required parameter 'tenantid' is set
      if (tenantid === undefined || tenantid === null) {
        throw new Error("Missing the required parameter 'tenantid' when calling getHubSites");
      }

      let pathParams = {
        'tenantid': tenantid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [GuidModel];
      return this.apiClient.callApi(
        '/office365/hubsites/{tenantid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getHubSitesFromTenantOfSite operation.
     * @callback module:api/Office365Api~getHubSitesFromTenantOfSiteCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GuidModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get all hubsites from site's tenant
     * @param {Object} opts Optional parameters
     * @param {String} opts.siteUrl any site url in your tenant
     * @param {module:api/Office365Api~getHubSitesFromTenantOfSiteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GuidModel>}
     */
    getHubSitesFromTenantOfSite(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'siteUrl': opts['siteUrl']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [GuidModel];
      return this.apiClient.callApi(
        '/office365/hubsites', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOwnedTeams operation.
     * @callback module:api/Office365Api~getOwnedTeamsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GuidModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get all teams that owner is curernt user
     * @param {module:api/Office365Api~getOwnedTeamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GuidModel>}
     */
    getOwnedTeams(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [GuidModel];
      return this.apiClient.callApi(
        '/office365/teams/my', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPermissions operation.
     * @callback module:api/Office365Api~getPermissionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserGroupPermissions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get web permissions for creating list request by web url
     * @param {String} webUrl 
     * @param {module:api/Office365Api~getPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserGroupPermissions}
     */
    getPermissions(webUrl, callback) {
      let postBody = null;
      // verify the required parameter 'webUrl' is set
      if (webUrl === undefined || webUrl === null) {
        throw new Error("Missing the required parameter 'webUrl' when calling getPermissions");
      }

      let pathParams = {
      };
      let queryParams = {
        'webUrl': webUrl
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = UserGroupPermissions;
      return this.apiClient.callApi(
        '/office365/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRoleAssignment operation.
     * @callback module:api/Office365Api~getRoleAssignmentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SPRoleAssignment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get site permimssion role assignment
     * @param {String} url 
     * @param {module:model/NodeType} type 
     * @param {module:api/Office365Api~getRoleAssignmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SPRoleAssignment>}
     */
    getRoleAssignment(url, type, callback) {
      let postBody = null;
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling getRoleAssignment");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getRoleAssignment");
      }

      let pathParams = {
      };
      let queryParams = {
        'url': url,
        'type': type
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [SPRoleAssignment];
      return this.apiClient.callApi(
        '/office365/roleassignment', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSiteDesigns operation.
     * @callback module:api/Office365Api~getSiteDesignsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/StringModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get site designs by site url
     * @param {Object} opts Optional parameters
     * @param {String} opts.siteUrl 
     * @param {module:api/Office365Api~getSiteDesignsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/StringModel>}
     */
    getSiteDesigns(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'siteUrl': opts['siteUrl']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [StringModel];
      return this.apiClient.callApi(
        '/office365/sitedesigns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSiteInfo operation.
     * @callback module:api/Office365Api~getSiteInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get site collection information with url
     * @param {String} fullUrl 
     * @param {module:api/Office365Api~getSiteInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteInfo}
     */
    getSiteInfo(fullUrl, callback) {
      let postBody = null;
      // verify the required parameter 'fullUrl' is set
      if (fullUrl === undefined || fullUrl === null) {
        throw new Error("Missing the required parameter 'fullUrl' when calling getSiteInfo");
      }

      let pathParams = {
      };
      let queryParams = {
        'fullUrl': fullUrl
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = SiteInfo;
      return this.apiClient.callApi(
        '/office365/sites', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSitePermissionLevels operation.
     * @callback module:api/Office365Api~getSitePermissionLevelsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PermissionLevel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get site permission levels
     * @param {String} uri 
     * @param {module:api/Office365Api~getSitePermissionLevelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PermissionLevel>}
     */
    getSitePermissionLevels(uri, callback) {
      let postBody = null;
      // verify the required parameter 'uri' is set
      if (uri === undefined || uri === null) {
        throw new Error("Missing the required parameter 'uri' when calling getSitePermissionLevels");
      }

      let pathParams = {
      };
      let queryParams = {
        'uri': uri
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [PermissionLevel];
      return this.apiClient.callApi(
        '/office365/sites/permissionlevels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSiteSharePointGroups operation.
     * @callback module:api/Office365Api~getSiteSharePointGroupsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SPGroup>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get site sharePoint groups
     * @param {String} uri 
     * @param {module:api/Office365Api~getSiteSharePointGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SPGroup>}
     */
    getSiteSharePointGroups(uri, callback) {
      let postBody = null;
      // verify the required parameter 'uri' is set
      if (uri === undefined || uri === null) {
        throw new Error("Missing the required parameter 'uri' when calling getSiteSharePointGroups");
      }

      let pathParams = {
      };
      let queryParams = {
        'uri': uri
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [SPGroup];
      return this.apiClient.callApi(
        '/office365/sites/sharepointgroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSiteTemplates operation.
     * @callback module:api/Office365Api~getSiteTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SiteTemplate>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get site templates with language code identifier
     * @param {Number} languageid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.url 
     * @param {module:api/Office365Api~getSiteTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SiteTemplate>}
     */
    getSiteTemplates(languageid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'languageid' is set
      if (languageid === undefined || languageid === null) {
        throw new Error("Missing the required parameter 'languageid' when calling getSiteTemplates");
      }

      let pathParams = {
        'languageid': languageid
      };
      let queryParams = {
        'url': opts['url']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [SiteTemplate];
      return this.apiClient.callApi(
        '/office365/sites/templates/{languageid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getYammerGroup operation.
     * @callback module:api/Office365Api~getYammerGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/YammerGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get yammer group
     * @param {String} networkid 
     * @param {String} name 
     * @param {module:api/Office365Api~getYammerGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/YammerGroup}
     */
    getYammerGroup(networkid, name, callback) {
      let postBody = null;
      // verify the required parameter 'networkid' is set
      if (networkid === undefined || networkid === null) {
        throw new Error("Missing the required parameter 'networkid' when calling getYammerGroup");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getYammerGroup");
      }

      let pathParams = {
        'networkid': networkid,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = YammerGroup;
      return this.apiClient.callApi(
        '/office365/yammergroup/{networkid}/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loadContainers operation.
     * @callback module:api/Office365Api~loadContainersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SPNodePageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * load the containers from cloud management
     * @param {String} serviceid If the service is content manager, you need use Serviceid_Source or Serviceid_Destination to load the source or destination tree
     * @param {Object} opts Optional parameters
     * @param {Number} opts.top 
     * @param {Number} opts.skip 
     * @param {String} opts.search 
     * @param {module:api/Office365Api~loadContainersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SPNodePageResult}
     */
    loadContainers(serviceid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceid' is set
      if (serviceid === undefined || serviceid === null) {
        throw new Error("Missing the required parameter 'serviceid' when calling loadContainers");
      }

      let pathParams = {
        'serviceid': serviceid
      };
      let queryParams = {
        'top': opts['top'],
        'skip': opts['skip'],
        'search': opts['search']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = SPNodePageResult;
      return this.apiClient.callApi(
        '/office365/containers/{serviceid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loadFolders operation.
     * @callback module:api/Office365Api~loadFoldersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SPNodePageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * load sharepoint folders
     * @param {String} listid 
     * @param {String} folderorlisturl 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.top 
     * @param {Number} opts.skip 
     * @param {String} opts.search 
     * @param {module:api/Office365Api~loadFoldersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SPNodePageResult}
     */
    loadFolders(listid, folderorlisturl, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'listid' is set
      if (listid === undefined || listid === null) {
        throw new Error("Missing the required parameter 'listid' when calling loadFolders");
      }
      // verify the required parameter 'folderorlisturl' is set
      if (folderorlisturl === undefined || folderorlisturl === null) {
        throw new Error("Missing the required parameter 'folderorlisturl' when calling loadFolders");
      }

      let pathParams = {
        'listid': listid
      };
      let queryParams = {
        'folderorlisturl': folderorlisturl,
        'top': opts['top'],
        'skip': opts['skip'],
        'search': opts['search']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = SPNodePageResult;
      return this.apiClient.callApi(
        '/office365/folders/{listid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loadItems operation.
     * @callback module:api/Office365Api~loadItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SPNodePageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * load sharepoint items
     * @param {String} listid 
     * @param {String} folderorlisturl 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.top 
     * @param {Number} opts.skip 
     * @param {String} opts.search 
     * @param {module:api/Office365Api~loadItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SPNodePageResult}
     */
    loadItems(listid, folderorlisturl, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'listid' is set
      if (listid === undefined || listid === null) {
        throw new Error("Missing the required parameter 'listid' when calling loadItems");
      }
      // verify the required parameter 'folderorlisturl' is set
      if (folderorlisturl === undefined || folderorlisturl === null) {
        throw new Error("Missing the required parameter 'folderorlisturl' when calling loadItems");
      }

      let pathParams = {
        'listid': listid
      };
      let queryParams = {
        'folderorlisturl': folderorlisturl,
        'top': opts['top'],
        'skip': opts['skip'],
        'search': opts['search']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = SPNodePageResult;
      return this.apiClient.callApi(
        '/office365/items/{listid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loadLists operation.
     * @callback module:api/Office365Api~loadListsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SPNodePageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * load sharepoint lists
     * @param {String} siteorweburl 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.top 
     * @param {Number} opts.skip 
     * @param {String} opts.search 
     * @param {module:api/Office365Api~loadListsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SPNodePageResult}
     */
    loadLists(siteorweburl, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'siteorweburl' is set
      if (siteorweburl === undefined || siteorweburl === null) {
        throw new Error("Missing the required parameter 'siteorweburl' when calling loadLists");
      }

      let pathParams = {
      };
      let queryParams = {
        'siteorweburl': siteorweburl,
        'top': opts['top'],
        'skip': opts['skip'],
        'search': opts['search']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = SPNodePageResult;
      return this.apiClient.callApi(
        '/office365/lists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loadManagedMetadata operation.
     * @callback module:api/Office365Api~loadManagedMetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiTermInfoPageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * load managed metadata terms
     * @param {String} termStoreid 
     * @param {String} groupid 
     * @param {String} termsetid 
     * @param {String} parentid 
     * @param {String} admincenterurl 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip 
     * @param {Number} opts.top 
     * @param {String} opts.search 
     * @param {module:api/Office365Api~loadManagedMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiTermInfoPageResult}
     */
    loadManagedMetadata(termStoreid, groupid, termsetid, parentid, admincenterurl, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'termStoreid' is set
      if (termStoreid === undefined || termStoreid === null) {
        throw new Error("Missing the required parameter 'termStoreid' when calling loadManagedMetadata");
      }
      // verify the required parameter 'groupid' is set
      if (groupid === undefined || groupid === null) {
        throw new Error("Missing the required parameter 'groupid' when calling loadManagedMetadata");
      }
      // verify the required parameter 'termsetid' is set
      if (termsetid === undefined || termsetid === null) {
        throw new Error("Missing the required parameter 'termsetid' when calling loadManagedMetadata");
      }
      // verify the required parameter 'parentid' is set
      if (parentid === undefined || parentid === null) {
        throw new Error("Missing the required parameter 'parentid' when calling loadManagedMetadata");
      }
      // verify the required parameter 'admincenterurl' is set
      if (admincenterurl === undefined || admincenterurl === null) {
        throw new Error("Missing the required parameter 'admincenterurl' when calling loadManagedMetadata");
      }

      let pathParams = {
        'termStoreid': termStoreid,
        'groupid': groupid,
        'termsetid': termsetid,
        'parentid': parentid
      };
      let queryParams = {
        'admincenterurl': admincenterurl,
        'skip': opts['skip'],
        'top': opts['top'],
        'search': opts['search']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ApiTermInfoPageResult;
      return this.apiClient.callApi(
        '/office365/managedmetadata/{termStoreid}/{groupid}/{termsetid}/{parentid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loadManagedSites operation.
     * @callback module:api/Office365Api~loadManagedSitesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SPNodePageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * load sharepoint sites
     * @param {String} serviceid If the service is content manager, you need use Serviceid_Source or Serviceid_Destination to load the source or destination tree
     * @param {String} containerid 
     * @param {Boolean} isselected 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.top 
     * @param {Number} opts.skip 
     * @param {String} opts.search 
     * @param {module:api/Office365Api~loadManagedSitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SPNodePageResult}
     */
    loadManagedSites(serviceid, containerid, isselected, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceid' is set
      if (serviceid === undefined || serviceid === null) {
        throw new Error("Missing the required parameter 'serviceid' when calling loadManagedSites");
      }
      // verify the required parameter 'containerid' is set
      if (containerid === undefined || containerid === null) {
        throw new Error("Missing the required parameter 'containerid' when calling loadManagedSites");
      }
      // verify the required parameter 'isselected' is set
      if (isselected === undefined || isselected === null) {
        throw new Error("Missing the required parameter 'isselected' when calling loadManagedSites");
      }

      let pathParams = {
        'serviceid': serviceid,
        'containerid': containerid,
        'isselected': isselected
      };
      let queryParams = {
        'top': opts['top'],
        'skip': opts['skip'],
        'search': opts['search']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = SPNodePageResult;
      return this.apiClient.callApi(
        '/office365/managedsites/{serviceid}/{containerid}/{isselected}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loadWebs operation.
     * @callback module:api/Office365Api~loadWebsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SPNodePageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * load sharepoint webs
     * @param {String} serviceid If the service is content manager, you need use Serviceid_Source or Serviceid_Destination to load the source or destination tree
     * @param {String} siteorwebid 
     * @param {Boolean} isselected 
     * @param {Boolean} issite 
     * @param {String} siteOrWebUrl 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.top 
     * @param {Number} opts.skip 
     * @param {String} opts.search 
     * @param {module:api/Office365Api~loadWebsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SPNodePageResult}
     */
    loadWebs(serviceid, siteorwebid, isselected, issite, siteOrWebUrl, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceid' is set
      if (serviceid === undefined || serviceid === null) {
        throw new Error("Missing the required parameter 'serviceid' when calling loadWebs");
      }
      // verify the required parameter 'siteorwebid' is set
      if (siteorwebid === undefined || siteorwebid === null) {
        throw new Error("Missing the required parameter 'siteorwebid' when calling loadWebs");
      }
      // verify the required parameter 'isselected' is set
      if (isselected === undefined || isselected === null) {
        throw new Error("Missing the required parameter 'isselected' when calling loadWebs");
      }
      // verify the required parameter 'issite' is set
      if (issite === undefined || issite === null) {
        throw new Error("Missing the required parameter 'issite' when calling loadWebs");
      }
      // verify the required parameter 'siteOrWebUrl' is set
      if (siteOrWebUrl === undefined || siteOrWebUrl === null) {
        throw new Error("Missing the required parameter 'siteOrWebUrl' when calling loadWebs");
      }

      let pathParams = {
        'serviceid': serviceid,
        'siteorwebid': siteorwebid,
        'isselected': isselected,
        'issite': issite
      };
      let queryParams = {
        'siteOrWebUrl': siteOrWebUrl,
        'top': opts['top'],
        'skip': opts['skip'],
        'search': opts['search']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = SPNodePageResult;
      return this.apiClient.callApi(
        '/office365/webs/{serviceid}/{siteorwebid}/{isselected}/{issite}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
