// tslint:disable
/**
 * Cloud Governance Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Terminology,
    TerminologyFromJSON,
    TerminologyFromJSONTyped,
    TerminologyToJSON,
} from './';

/**
 * 
 * @export
 * @interface ApplicationSettings
 */
export interface ApplicationSettings {
    /**
     * 
     * @type {number}
     * @memberof ApplicationSettings
     */
    localeId?: number;
    /**
     * 
     * @type {string}
     * @memberof ApplicationSettings
     */
    locale?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ApplicationSettings
     */
    timezoneId?: number;
    /**
     * 
     * @type {Array<Terminology>}
     * @memberof ApplicationSettings
     */
    terminologies?: Array<Terminology> | null;
}

export function ApplicationSettingsFromJSON(json: any): ApplicationSettings {
    return ApplicationSettingsFromJSONTyped(json, false);
}

export function ApplicationSettingsFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApplicationSettings {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'localeId': !exists(json, 'localeId') ? undefined : json['localeId'],
        'locale': !exists(json, 'locale') ? undefined : json['locale'],
        'timezoneId': !exists(json, 'timezoneId') ? undefined : json['timezoneId'],
        'terminologies': !exists(json, 'terminologies') ? undefined : (json['terminologies'] as Array<any>).map(TerminologyFromJSON),
    };
}

export function ApplicationSettingsToJSON(value?: ApplicationSettings | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'localeId': value.localeId,
        'locale': value.locale,
        'timezoneId': value.timezoneId,
        'terminologies': value.terminologies == null ? undefined : (value.terminologies as Array<any>).map(TerminologyToJSON),
    };
}


