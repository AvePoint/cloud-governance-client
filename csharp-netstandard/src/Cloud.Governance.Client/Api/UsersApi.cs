/* 
 * Cloud Governance Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Cloud.Governance.Client.Client;
using Cloud.Governance.Client.Model;

namespace Cloud.Governance.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// check user exists in Aos
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>bool</returns>
        bool CheckUserExistsInAOS (string name);

        /// <summary>
        /// check user exists in Aos
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of bool</returns>
        ApiResponse<bool> CheckUserExistsInAOSWithHttpInfo (string name);
        /// <summary>
        /// get user&#39;s property value by property name from azure ad
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="propertyName"></param>
        /// <returns>StringModel</returns>
        StringModel GetAzureAdUserPropertyValue (string username, string propertyName);

        /// <summary>
        /// get user&#39;s property value by property name from azure ad
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="propertyName"></param>
        /// <returns>ApiResponse of StringModel</returns>
        ApiResponse<StringModel> GetAzureAdUserPropertyValueWithHttpInfo (string username, string propertyName);
        /// <summary>
        /// get user&#39;s property value by property name from user profile service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="propertyName"></param>
        /// <returns>StringModel</returns>
        StringModel GetUpsUserPropertyValue (string username, string propertyName);

        /// <summary>
        /// get user&#39;s property value by property name from user profile service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="propertyName"></param>
        /// <returns>ApiResponse of StringModel</returns>
        ApiResponse<StringModel> GetUpsUserPropertyValueWithHttpInfo (string username, string propertyName);
        /// <summary>
        /// get my basic properties, City, Country, Office, Department, JobTitle,State
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetUserBasicProperties ();

        /// <summary>
        /// get my basic properties, City, Country, Office, Department, JobTitle,State
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetUserBasicPropertiesWithHttpInfo ();
        /// <summary>
        /// get my basic property value, Department, Email, DisplayName, Manager
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns></returns>
        void GetUserBasicPropertyValue (string name);

        /// <summary>
        /// get my basic property value, Department, Email, DisplayName, Manager
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetUserBasicPropertyValueWithHttpInfo (string name);
        /// <summary>
        /// get user&#39;s photo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="size"> (optional, default to &quot;48x48&quot;)</param>
        /// <returns></returns>
        void GetUserPhoto (string username, string size = default(string));

        /// <summary>
        /// get user&#39;s photo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="size"> (optional, default to &quot;48x48&quot;)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetUserPhotoWithHttpInfo (string username, string size = default(string));
        /// <summary>
        /// get user relationship
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <returns>UserRelationShip</returns>
        UserRelationShip GetUserRelationship (string username);

        /// <summary>
        /// get user relationship
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <returns>ApiResponse of UserRelationShip</returns>
        ApiResponse<UserRelationShip> GetUserRelationshipWithHttpInfo (string username);
        /// <summary>
        /// get users from sharepoint
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"> (optional)</param>
        /// <param name="requestBody"> (optional)</param>
        /// <returns>ApiUser</returns>
        ApiUser GetUsersFromSharePoint (string username = default(string), List<string> requestBody = default(List<string>));

        /// <summary>
        /// get users from sharepoint
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"> (optional)</param>
        /// <param name="requestBody"> (optional)</param>
        /// <returns>ApiResponse of ApiUser</returns>
        ApiResponse<ApiUser> GetUsersFromSharePointWithHttpInfo (string username = default(string), List<string> requestBody = default(List<string>));
        /// <summary>
        /// resolve users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"></param>
        /// <param name="userType">All&#x3D;0, User&#x3D;1, Group&#x3D;2, DistributionList&#x3D;3, UserAndGroup&#x3D;4</param>
        /// <param name="userSource">All&#x3D;0, Local&#x3D;1, Azure&#x3D;2, SharePoint&#x3D;3</param>
        /// <param name="sharingOptions">Disabled&#x3D;0, VerifiedGuestUser&#x3D;1, Anyone&#x3D;2, ExistingGuestUser&#x3D;3</param>
        /// <param name="siteUrlOrTenantId"> (optional, default to &quot;&quot;)</param>
        /// <returns>List&lt;ApiUser&gt;</returns>
        List<ApiUser> ResolveUsers (string keyword, UserType userType, UserSource userSource, ExternalSharingOptions sharingOptions, string siteUrlOrTenantId = default(string));

        /// <summary>
        /// resolve users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"></param>
        /// <param name="userType">All&#x3D;0, User&#x3D;1, Group&#x3D;2, DistributionList&#x3D;3, UserAndGroup&#x3D;4</param>
        /// <param name="userSource">All&#x3D;0, Local&#x3D;1, Azure&#x3D;2, SharePoint&#x3D;3</param>
        /// <param name="sharingOptions">Disabled&#x3D;0, VerifiedGuestUser&#x3D;1, Anyone&#x3D;2, ExistingGuestUser&#x3D;3</param>
        /// <param name="siteUrlOrTenantId"> (optional, default to &quot;&quot;)</param>
        /// <returns>ApiResponse of List&lt;ApiUser&gt;</returns>
        ApiResponse<List<ApiUser>> ResolveUsersWithHttpInfo (string keyword, UserType userType, UserSource userSource, ExternalSharingOptions sharingOptions, string siteUrlOrTenantId = default(string));
        /// <summary>
        /// resolve user including external users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"></param>
        /// <param name="siteUrlOrTenantId"></param>
        /// <param name="externalSharingOption"></param>
        /// <param name="userType">All&#x3D;0, User&#x3D;1, Group&#x3D;2, DistributionList&#x3D;3, UserAndGroup&#x3D;4</param>
        /// <param name="userSource">All&#x3D;0, Local&#x3D;1, Azure&#x3D;2, SharePoint&#x3D;3</param>
        /// <returns>List&lt;SharingEnabledUser&gt;</returns>
        List<SharingEnabledUser> ResolveUsersWithExternalSharingOption (string keyword, string siteUrlOrTenantId, ExternalSharingOptions externalSharingOption, UserType userType, UserSource userSource);

        /// <summary>
        /// resolve user including external users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"></param>
        /// <param name="siteUrlOrTenantId"></param>
        /// <param name="externalSharingOption"></param>
        /// <param name="userType">All&#x3D;0, User&#x3D;1, Group&#x3D;2, DistributionList&#x3D;3, UserAndGroup&#x3D;4</param>
        /// <param name="userSource">All&#x3D;0, Local&#x3D;1, Azure&#x3D;2, SharePoint&#x3D;3</param>
        /// <returns>ApiResponse of List&lt;SharingEnabledUser&gt;</returns>
        ApiResponse<List<SharingEnabledUser>> ResolveUsersWithExternalSharingOptionWithHttpInfo (string keyword, string siteUrlOrTenantId, ExternalSharingOptions externalSharingOption, UserType userType, UserSource userSource);
        /// <summary>
        /// search users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"></param>
        /// <param name="userType">All&#x3D;0, User&#x3D;1, Group&#x3D;2, DistributionList&#x3D;3, UserAndGroup&#x3D;4</param>
        /// <param name="userSource">All&#x3D;0, Local&#x3D;1, Azure&#x3D;2, SharePoint&#x3D;3</param>
        /// <param name="sharingOptions">Disabled&#x3D;0, VerifiedGuestUser&#x3D;1, Anyone&#x3D;2, ExistingGuestUser&#x3D;3</param>
        /// <param name="siteUrlOrTenantId"> (optional, default to &quot;&quot;)</param>
        /// <returns>List&lt;ApiUser&gt;</returns>
        List<ApiUser> SearchUsers (string keyword, UserType userType, UserSource userSource, ExternalSharingOptions sharingOptions, string siteUrlOrTenantId = default(string));

        /// <summary>
        /// search users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"></param>
        /// <param name="userType">All&#x3D;0, User&#x3D;1, Group&#x3D;2, DistributionList&#x3D;3, UserAndGroup&#x3D;4</param>
        /// <param name="userSource">All&#x3D;0, Local&#x3D;1, Azure&#x3D;2, SharePoint&#x3D;3</param>
        /// <param name="sharingOptions">Disabled&#x3D;0, VerifiedGuestUser&#x3D;1, Anyone&#x3D;2, ExistingGuestUser&#x3D;3</param>
        /// <param name="siteUrlOrTenantId"> (optional, default to &quot;&quot;)</param>
        /// <returns>ApiResponse of List&lt;ApiUser&gt;</returns>
        ApiResponse<List<ApiUser>> SearchUsersWithHttpInfo (string keyword, UserType userType, UserSource userSource, ExternalSharingOptions sharingOptions, string siteUrlOrTenantId = default(string));
        /// <summary>
        /// search user including external users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"></param>
        /// <param name="siteUrlOrTenantId"></param>
        /// <param name="externalSharingOption"></param>
        /// <param name="userType">All&#x3D;0, User&#x3D;1, Group&#x3D;2, DistributionList&#x3D;3, UserAndGroup&#x3D;4</param>
        /// <param name="userSource">All&#x3D;0, Local&#x3D;1, Azure&#x3D;2, SharePoint&#x3D;3</param>
        /// <returns>List&lt;SharingEnabledUser&gt;</returns>
        List<SharingEnabledUser> SearchUsersWithExternalSharingOption (string keyword, string siteUrlOrTenantId, ExternalSharingOptions externalSharingOption, UserType userType, UserSource userSource);

        /// <summary>
        /// search user including external users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"></param>
        /// <param name="siteUrlOrTenantId"></param>
        /// <param name="externalSharingOption"></param>
        /// <param name="userType">All&#x3D;0, User&#x3D;1, Group&#x3D;2, DistributionList&#x3D;3, UserAndGroup&#x3D;4</param>
        /// <param name="userSource">All&#x3D;0, Local&#x3D;1, Azure&#x3D;2, SharePoint&#x3D;3</param>
        /// <returns>ApiResponse of List&lt;SharingEnabledUser&gt;</returns>
        ApiResponse<List<SharingEnabledUser>> SearchUsersWithExternalSharingOptionWithHttpInfo (string keyword, string siteUrlOrTenantId, ExternalSharingOptions externalSharingOption, UserType userType, UserSource userSource);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatableApiUser"> (optional)</param>
        /// <returns></returns>
        void UpdateUserInfo (UpdatableApiUser updatableApiUser = default(UpdatableApiUser));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatableApiUser"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateUserInfoWithHttpInfo (UpdatableApiUser updatableApiUser = default(UpdatableApiUser));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// check user exists in Aos
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Task of bool</returns>
        System.Threading.Tasks.Task<bool> CheckUserExistsInAOSAsync (string name);

        /// <summary>
        /// check user exists in Aos
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Task of ApiResponse (bool)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool>> CheckUserExistsInAOSAsyncWithHttpInfo (string name);
        /// <summary>
        /// get user&#39;s property value by property name from azure ad
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="propertyName"></param>
        /// <returns>Task of StringModel</returns>
        System.Threading.Tasks.Task<StringModel> GetAzureAdUserPropertyValueAsync (string username, string propertyName);

        /// <summary>
        /// get user&#39;s property value by property name from azure ad
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="propertyName"></param>
        /// <returns>Task of ApiResponse (StringModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<StringModel>> GetAzureAdUserPropertyValueAsyncWithHttpInfo (string username, string propertyName);
        /// <summary>
        /// get user&#39;s property value by property name from user profile service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="propertyName"></param>
        /// <returns>Task of StringModel</returns>
        System.Threading.Tasks.Task<StringModel> GetUpsUserPropertyValueAsync (string username, string propertyName);

        /// <summary>
        /// get user&#39;s property value by property name from user profile service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="propertyName"></param>
        /// <returns>Task of ApiResponse (StringModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<StringModel>> GetUpsUserPropertyValueAsyncWithHttpInfo (string username, string propertyName);
        /// <summary>
        /// get my basic properties, City, Country, Office, Department, JobTitle,State
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetUserBasicPropertiesAsync ();

        /// <summary>
        /// get my basic properties, City, Country, Office, Department, JobTitle,State
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetUserBasicPropertiesAsyncWithHttpInfo ();
        /// <summary>
        /// get my basic property value, Department, Email, DisplayName, Manager
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetUserBasicPropertyValueAsync (string name);

        /// <summary>
        /// get my basic property value, Department, Email, DisplayName, Manager
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetUserBasicPropertyValueAsyncWithHttpInfo (string name);
        /// <summary>
        /// get user&#39;s photo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="size"> (optional, default to &quot;48x48&quot;)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetUserPhotoAsync (string username, string size = default(string));

        /// <summary>
        /// get user&#39;s photo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="size"> (optional, default to &quot;48x48&quot;)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetUserPhotoAsyncWithHttpInfo (string username, string size = default(string));
        /// <summary>
        /// get user relationship
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <returns>Task of UserRelationShip</returns>
        System.Threading.Tasks.Task<UserRelationShip> GetUserRelationshipAsync (string username);

        /// <summary>
        /// get user relationship
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <returns>Task of ApiResponse (UserRelationShip)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserRelationShip>> GetUserRelationshipAsyncWithHttpInfo (string username);
        /// <summary>
        /// get users from sharepoint
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"> (optional)</param>
        /// <param name="requestBody"> (optional)</param>
        /// <returns>Task of ApiUser</returns>
        System.Threading.Tasks.Task<ApiUser> GetUsersFromSharePointAsync (string username = default(string), List<string> requestBody = default(List<string>));

        /// <summary>
        /// get users from sharepoint
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"> (optional)</param>
        /// <param name="requestBody"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiUser)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiUser>> GetUsersFromSharePointAsyncWithHttpInfo (string username = default(string), List<string> requestBody = default(List<string>));
        /// <summary>
        /// resolve users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"></param>
        /// <param name="userType">All&#x3D;0, User&#x3D;1, Group&#x3D;2, DistributionList&#x3D;3, UserAndGroup&#x3D;4</param>
        /// <param name="userSource">All&#x3D;0, Local&#x3D;1, Azure&#x3D;2, SharePoint&#x3D;3</param>
        /// <param name="sharingOptions">Disabled&#x3D;0, VerifiedGuestUser&#x3D;1, Anyone&#x3D;2, ExistingGuestUser&#x3D;3</param>
        /// <param name="siteUrlOrTenantId"> (optional, default to &quot;&quot;)</param>
        /// <returns>Task of List&lt;ApiUser&gt;</returns>
        System.Threading.Tasks.Task<List<ApiUser>> ResolveUsersAsync (string keyword, UserType userType, UserSource userSource, ExternalSharingOptions sharingOptions, string siteUrlOrTenantId = default(string));

        /// <summary>
        /// resolve users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"></param>
        /// <param name="userType">All&#x3D;0, User&#x3D;1, Group&#x3D;2, DistributionList&#x3D;3, UserAndGroup&#x3D;4</param>
        /// <param name="userSource">All&#x3D;0, Local&#x3D;1, Azure&#x3D;2, SharePoint&#x3D;3</param>
        /// <param name="sharingOptions">Disabled&#x3D;0, VerifiedGuestUser&#x3D;1, Anyone&#x3D;2, ExistingGuestUser&#x3D;3</param>
        /// <param name="siteUrlOrTenantId"> (optional, default to &quot;&quot;)</param>
        /// <returns>Task of ApiResponse (List&lt;ApiUser&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ApiUser>>> ResolveUsersAsyncWithHttpInfo (string keyword, UserType userType, UserSource userSource, ExternalSharingOptions sharingOptions, string siteUrlOrTenantId = default(string));
        /// <summary>
        /// resolve user including external users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"></param>
        /// <param name="siteUrlOrTenantId"></param>
        /// <param name="externalSharingOption"></param>
        /// <param name="userType">All&#x3D;0, User&#x3D;1, Group&#x3D;2, DistributionList&#x3D;3, UserAndGroup&#x3D;4</param>
        /// <param name="userSource">All&#x3D;0, Local&#x3D;1, Azure&#x3D;2, SharePoint&#x3D;3</param>
        /// <returns>Task of List&lt;SharingEnabledUser&gt;</returns>
        System.Threading.Tasks.Task<List<SharingEnabledUser>> ResolveUsersWithExternalSharingOptionAsync (string keyword, string siteUrlOrTenantId, ExternalSharingOptions externalSharingOption, UserType userType, UserSource userSource);

        /// <summary>
        /// resolve user including external users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"></param>
        /// <param name="siteUrlOrTenantId"></param>
        /// <param name="externalSharingOption"></param>
        /// <param name="userType">All&#x3D;0, User&#x3D;1, Group&#x3D;2, DistributionList&#x3D;3, UserAndGroup&#x3D;4</param>
        /// <param name="userSource">All&#x3D;0, Local&#x3D;1, Azure&#x3D;2, SharePoint&#x3D;3</param>
        /// <returns>Task of ApiResponse (List&lt;SharingEnabledUser&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SharingEnabledUser>>> ResolveUsersWithExternalSharingOptionAsyncWithHttpInfo (string keyword, string siteUrlOrTenantId, ExternalSharingOptions externalSharingOption, UserType userType, UserSource userSource);
        /// <summary>
        /// search users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"></param>
        /// <param name="userType">All&#x3D;0, User&#x3D;1, Group&#x3D;2, DistributionList&#x3D;3, UserAndGroup&#x3D;4</param>
        /// <param name="userSource">All&#x3D;0, Local&#x3D;1, Azure&#x3D;2, SharePoint&#x3D;3</param>
        /// <param name="sharingOptions">Disabled&#x3D;0, VerifiedGuestUser&#x3D;1, Anyone&#x3D;2, ExistingGuestUser&#x3D;3</param>
        /// <param name="siteUrlOrTenantId"> (optional, default to &quot;&quot;)</param>
        /// <returns>Task of List&lt;ApiUser&gt;</returns>
        System.Threading.Tasks.Task<List<ApiUser>> SearchUsersAsync (string keyword, UserType userType, UserSource userSource, ExternalSharingOptions sharingOptions, string siteUrlOrTenantId = default(string));

        /// <summary>
        /// search users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"></param>
        /// <param name="userType">All&#x3D;0, User&#x3D;1, Group&#x3D;2, DistributionList&#x3D;3, UserAndGroup&#x3D;4</param>
        /// <param name="userSource">All&#x3D;0, Local&#x3D;1, Azure&#x3D;2, SharePoint&#x3D;3</param>
        /// <param name="sharingOptions">Disabled&#x3D;0, VerifiedGuestUser&#x3D;1, Anyone&#x3D;2, ExistingGuestUser&#x3D;3</param>
        /// <param name="siteUrlOrTenantId"> (optional, default to &quot;&quot;)</param>
        /// <returns>Task of ApiResponse (List&lt;ApiUser&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ApiUser>>> SearchUsersAsyncWithHttpInfo (string keyword, UserType userType, UserSource userSource, ExternalSharingOptions sharingOptions, string siteUrlOrTenantId = default(string));
        /// <summary>
        /// search user including external users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"></param>
        /// <param name="siteUrlOrTenantId"></param>
        /// <param name="externalSharingOption"></param>
        /// <param name="userType">All&#x3D;0, User&#x3D;1, Group&#x3D;2, DistributionList&#x3D;3, UserAndGroup&#x3D;4</param>
        /// <param name="userSource">All&#x3D;0, Local&#x3D;1, Azure&#x3D;2, SharePoint&#x3D;3</param>
        /// <returns>Task of List&lt;SharingEnabledUser&gt;</returns>
        System.Threading.Tasks.Task<List<SharingEnabledUser>> SearchUsersWithExternalSharingOptionAsync (string keyword, string siteUrlOrTenantId, ExternalSharingOptions externalSharingOption, UserType userType, UserSource userSource);

        /// <summary>
        /// search user including external users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"></param>
        /// <param name="siteUrlOrTenantId"></param>
        /// <param name="externalSharingOption"></param>
        /// <param name="userType">All&#x3D;0, User&#x3D;1, Group&#x3D;2, DistributionList&#x3D;3, UserAndGroup&#x3D;4</param>
        /// <param name="userSource">All&#x3D;0, Local&#x3D;1, Azure&#x3D;2, SharePoint&#x3D;3</param>
        /// <returns>Task of ApiResponse (List&lt;SharingEnabledUser&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SharingEnabledUser>>> SearchUsersWithExternalSharingOptionAsyncWithHttpInfo (string keyword, string siteUrlOrTenantId, ExternalSharingOptions externalSharingOption, UserType userType, UserSource userSource);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatableApiUser"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateUserInfoAsync (UpdatableApiUser updatableApiUser = default(UpdatableApiUser));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatableApiUser"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateUserInfoAsyncWithHttpInfo (UpdatableApiUser updatableApiUser = default(UpdatableApiUser));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApi : IUsersApiSync, IUsersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UsersApi : IUsersApi
    {
        private Cloud.Governance.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi(String basePath)
        {
            this.Configuration = Cloud.Governance.Client.Client.Configuration.MergeConfigurations(
                Cloud.Governance.Client.Client.GlobalConfiguration.Instance,
                new Cloud.Governance.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Cloud.Governance.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Cloud.Governance.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Cloud.Governance.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UsersApi(Cloud.Governance.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Cloud.Governance.Client.Client.Configuration.MergeConfigurations(
                Cloud.Governance.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Cloud.Governance.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Cloud.Governance.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Cloud.Governance.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public UsersApi(Cloud.Governance.Client.Client.ISynchronousClient client,Cloud.Governance.Client.Client.IAsynchronousClient asyncClient, Cloud.Governance.Client.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Cloud.Governance.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Cloud.Governance.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Cloud.Governance.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Cloud.Governance.Client.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Cloud.Governance.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// check user exists in Aos 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>bool</returns>
        public bool CheckUserExistsInAOS (string name)
        {
             Cloud.Governance.Client.Client.ApiResponse<bool> localVarResponse = CheckUserExistsInAOSWithHttpInfo(name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// check user exists in Aos 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of bool</returns>
        public Cloud.Governance.Client.Client.ApiResponse< bool > CheckUserExistsInAOSWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new Cloud.Governance.Client.Client.ApiException(400, "Missing required parameter 'name' when calling UsersApi->CheckUserExistsInAOS");

            Cloud.Governance.Client.Client.RequestOptions localVarRequestOptions = new Cloud.Governance.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (name != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "name", name))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (ClientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientId", this.Configuration.GetApiKeyWithPrefix("clientId"));
            }
            // authentication (ClientSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientSecret", this.Configuration.GetApiKeyWithPrefix("clientSecret"));
            }
            // authentication (UserPrincipalName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("userPrincipalName")))
            {
                localVarRequestOptions.HeaderParameters.Add("userPrincipalName", this.Configuration.GetApiKeyWithPrefix("userPrincipalName"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< bool >("/users/avepointonlineservices/validate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckUserExistsInAOS", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// check user exists in Aos 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Task of bool</returns>
        public async System.Threading.Tasks.Task<bool> CheckUserExistsInAOSAsync (string name)
        {
             Cloud.Governance.Client.Client.ApiResponse<bool> localVarResponse = await CheckUserExistsInAOSAsyncWithHttpInfo(name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// check user exists in Aos 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Task of ApiResponse (bool)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.Client.Client.ApiResponse<bool>> CheckUserExistsInAOSAsyncWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new Cloud.Governance.Client.Client.ApiException(400, "Missing required parameter 'name' when calling UsersApi->CheckUserExistsInAOS");


            Cloud.Governance.Client.Client.RequestOptions localVarRequestOptions = new Cloud.Governance.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (name != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "name", name))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (ClientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientId", this.Configuration.GetApiKeyWithPrefix("clientId"));
            }
            // authentication (ClientSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientSecret", this.Configuration.GetApiKeyWithPrefix("clientSecret"));
            }
            // authentication (UserPrincipalName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("userPrincipalName")))
            {
                localVarRequestOptions.HeaderParameters.Add("userPrincipalName", this.Configuration.GetApiKeyWithPrefix("userPrincipalName"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<bool>("/users/avepointonlineservices/validate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckUserExistsInAOS", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// get user&#39;s property value by property name from azure ad 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="propertyName"></param>
        /// <returns>StringModel</returns>
        public StringModel GetAzureAdUserPropertyValue (string username, string propertyName)
        {
             Cloud.Governance.Client.Client.ApiResponse<StringModel> localVarResponse = GetAzureAdUserPropertyValueWithHttpInfo(username, propertyName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get user&#39;s property value by property name from azure ad 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="propertyName"></param>
        /// <returns>ApiResponse of StringModel</returns>
        public Cloud.Governance.Client.Client.ApiResponse< StringModel > GetAzureAdUserPropertyValueWithHttpInfo (string username, string propertyName)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new Cloud.Governance.Client.Client.ApiException(400, "Missing required parameter 'username' when calling UsersApi->GetAzureAdUserPropertyValue");

            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
                throw new Cloud.Governance.Client.Client.ApiException(400, "Missing required parameter 'propertyName' when calling UsersApi->GetAzureAdUserPropertyValue");

            Cloud.Governance.Client.Client.RequestOptions localVarRequestOptions = new Cloud.Governance.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (username != null)
                localVarRequestOptions.PathParameters.Add("username", Cloud.Governance.Client.Client.ClientUtils.ParameterToString(username)); // path parameter
            if (propertyName != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "propertyName", propertyName))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (ClientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientId", this.Configuration.GetApiKeyWithPrefix("clientId"));
            }
            // authentication (ClientSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientSecret", this.Configuration.GetApiKeyWithPrefix("clientSecret"));
            }
            // authentication (UserPrincipalName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("userPrincipalName")))
            {
                localVarRequestOptions.HeaderParameters.Add("userPrincipalName", this.Configuration.GetApiKeyWithPrefix("userPrincipalName"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< StringModel >("/users/{username}/azuread/property", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAzureAdUserPropertyValue", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// get user&#39;s property value by property name from azure ad 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="propertyName"></param>
        /// <returns>Task of StringModel</returns>
        public async System.Threading.Tasks.Task<StringModel> GetAzureAdUserPropertyValueAsync (string username, string propertyName)
        {
             Cloud.Governance.Client.Client.ApiResponse<StringModel> localVarResponse = await GetAzureAdUserPropertyValueAsyncWithHttpInfo(username, propertyName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get user&#39;s property value by property name from azure ad 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="propertyName"></param>
        /// <returns>Task of ApiResponse (StringModel)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.Client.Client.ApiResponse<StringModel>> GetAzureAdUserPropertyValueAsyncWithHttpInfo (string username, string propertyName)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new Cloud.Governance.Client.Client.ApiException(400, "Missing required parameter 'username' when calling UsersApi->GetAzureAdUserPropertyValue");

            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
                throw new Cloud.Governance.Client.Client.ApiException(400, "Missing required parameter 'propertyName' when calling UsersApi->GetAzureAdUserPropertyValue");


            Cloud.Governance.Client.Client.RequestOptions localVarRequestOptions = new Cloud.Governance.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (username != null)
                localVarRequestOptions.PathParameters.Add("username", Cloud.Governance.Client.Client.ClientUtils.ParameterToString(username)); // path parameter
            if (propertyName != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "propertyName", propertyName))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (ClientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientId", this.Configuration.GetApiKeyWithPrefix("clientId"));
            }
            // authentication (ClientSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientSecret", this.Configuration.GetApiKeyWithPrefix("clientSecret"));
            }
            // authentication (UserPrincipalName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("userPrincipalName")))
            {
                localVarRequestOptions.HeaderParameters.Add("userPrincipalName", this.Configuration.GetApiKeyWithPrefix("userPrincipalName"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<StringModel>("/users/{username}/azuread/property", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAzureAdUserPropertyValue", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// get user&#39;s property value by property name from user profile service 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="propertyName"></param>
        /// <returns>StringModel</returns>
        public StringModel GetUpsUserPropertyValue (string username, string propertyName)
        {
             Cloud.Governance.Client.Client.ApiResponse<StringModel> localVarResponse = GetUpsUserPropertyValueWithHttpInfo(username, propertyName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get user&#39;s property value by property name from user profile service 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="propertyName"></param>
        /// <returns>ApiResponse of StringModel</returns>
        public Cloud.Governance.Client.Client.ApiResponse< StringModel > GetUpsUserPropertyValueWithHttpInfo (string username, string propertyName)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new Cloud.Governance.Client.Client.ApiException(400, "Missing required parameter 'username' when calling UsersApi->GetUpsUserPropertyValue");

            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
                throw new Cloud.Governance.Client.Client.ApiException(400, "Missing required parameter 'propertyName' when calling UsersApi->GetUpsUserPropertyValue");

            Cloud.Governance.Client.Client.RequestOptions localVarRequestOptions = new Cloud.Governance.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (username != null)
                localVarRequestOptions.PathParameters.Add("username", Cloud.Governance.Client.Client.ClientUtils.ParameterToString(username)); // path parameter
            if (propertyName != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "propertyName", propertyName))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (ClientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientId", this.Configuration.GetApiKeyWithPrefix("clientId"));
            }
            // authentication (ClientSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientSecret", this.Configuration.GetApiKeyWithPrefix("clientSecret"));
            }
            // authentication (UserPrincipalName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("userPrincipalName")))
            {
                localVarRequestOptions.HeaderParameters.Add("userPrincipalName", this.Configuration.GetApiKeyWithPrefix("userPrincipalName"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< StringModel >("/users/{username}/userprofile/property", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUpsUserPropertyValue", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// get user&#39;s property value by property name from user profile service 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="propertyName"></param>
        /// <returns>Task of StringModel</returns>
        public async System.Threading.Tasks.Task<StringModel> GetUpsUserPropertyValueAsync (string username, string propertyName)
        {
             Cloud.Governance.Client.Client.ApiResponse<StringModel> localVarResponse = await GetUpsUserPropertyValueAsyncWithHttpInfo(username, propertyName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get user&#39;s property value by property name from user profile service 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="propertyName"></param>
        /// <returns>Task of ApiResponse (StringModel)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.Client.Client.ApiResponse<StringModel>> GetUpsUserPropertyValueAsyncWithHttpInfo (string username, string propertyName)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new Cloud.Governance.Client.Client.ApiException(400, "Missing required parameter 'username' when calling UsersApi->GetUpsUserPropertyValue");

            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
                throw new Cloud.Governance.Client.Client.ApiException(400, "Missing required parameter 'propertyName' when calling UsersApi->GetUpsUserPropertyValue");


            Cloud.Governance.Client.Client.RequestOptions localVarRequestOptions = new Cloud.Governance.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (username != null)
                localVarRequestOptions.PathParameters.Add("username", Cloud.Governance.Client.Client.ClientUtils.ParameterToString(username)); // path parameter
            if (propertyName != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "propertyName", propertyName))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (ClientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientId", this.Configuration.GetApiKeyWithPrefix("clientId"));
            }
            // authentication (ClientSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientSecret", this.Configuration.GetApiKeyWithPrefix("clientSecret"));
            }
            // authentication (UserPrincipalName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("userPrincipalName")))
            {
                localVarRequestOptions.HeaderParameters.Add("userPrincipalName", this.Configuration.GetApiKeyWithPrefix("userPrincipalName"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<StringModel>("/users/{username}/userprofile/property", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUpsUserPropertyValue", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// get my basic properties, City, Country, Office, Department, JobTitle,State 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetUserBasicProperties ()
        {
             GetUserBasicPropertiesWithHttpInfo();
        }

        /// <summary>
        /// get my basic properties, City, Country, Office, Department, JobTitle,State 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.Client.Client.ApiResponse<Object> GetUserBasicPropertiesWithHttpInfo ()
        {
            Cloud.Governance.Client.Client.RequestOptions localVarRequestOptions = new Cloud.Governance.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (ClientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientId", this.Configuration.GetApiKeyWithPrefix("clientId"));
            }
            // authentication (ClientSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientSecret", this.Configuration.GetApiKeyWithPrefix("clientSecret"));
            }
            // authentication (UserPrincipalName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("userPrincipalName")))
            {
                localVarRequestOptions.HeaderParameters.Add("userPrincipalName", this.Configuration.GetApiKeyWithPrefix("userPrincipalName"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/users/me/properties", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserBasicProperties", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// get my basic properties, City, Country, Office, Department, JobTitle,State 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetUserBasicPropertiesAsync ()
        {
             await GetUserBasicPropertiesAsyncWithHttpInfo();

        }

        /// <summary>
        /// get my basic properties, City, Country, Office, Department, JobTitle,State 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.Client.Client.ApiResponse<Object>> GetUserBasicPropertiesAsyncWithHttpInfo ()
        {

            Cloud.Governance.Client.Client.RequestOptions localVarRequestOptions = new Cloud.Governance.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            

            // authentication (ClientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientId", this.Configuration.GetApiKeyWithPrefix("clientId"));
            }
            // authentication (ClientSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientSecret", this.Configuration.GetApiKeyWithPrefix("clientSecret"));
            }
            // authentication (UserPrincipalName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("userPrincipalName")))
            {
                localVarRequestOptions.HeaderParameters.Add("userPrincipalName", this.Configuration.GetApiKeyWithPrefix("userPrincipalName"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/users/me/properties", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserBasicProperties", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// get my basic property value, Department, Email, DisplayName, Manager 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns></returns>
        public void GetUserBasicPropertyValue (string name)
        {
             GetUserBasicPropertyValueWithHttpInfo(name);
        }

        /// <summary>
        /// get my basic property value, Department, Email, DisplayName, Manager 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.Client.Client.ApiResponse<Object> GetUserBasicPropertyValueWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new Cloud.Governance.Client.Client.ApiException(400, "Missing required parameter 'name' when calling UsersApi->GetUserBasicPropertyValue");

            Cloud.Governance.Client.Client.RequestOptions localVarRequestOptions = new Cloud.Governance.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (name != null)
                localVarRequestOptions.PathParameters.Add("name", Cloud.Governance.Client.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (ClientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientId", this.Configuration.GetApiKeyWithPrefix("clientId"));
            }
            // authentication (ClientSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientSecret", this.Configuration.GetApiKeyWithPrefix("clientSecret"));
            }
            // authentication (UserPrincipalName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("userPrincipalName")))
            {
                localVarRequestOptions.HeaderParameters.Add("userPrincipalName", this.Configuration.GetApiKeyWithPrefix("userPrincipalName"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/users/me/property/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserBasicPropertyValue", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// get my basic property value, Department, Email, DisplayName, Manager 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetUserBasicPropertyValueAsync (string name)
        {
             await GetUserBasicPropertyValueAsyncWithHttpInfo(name);

        }

        /// <summary>
        /// get my basic property value, Department, Email, DisplayName, Manager 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.Client.Client.ApiResponse<Object>> GetUserBasicPropertyValueAsyncWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new Cloud.Governance.Client.Client.ApiException(400, "Missing required parameter 'name' when calling UsersApi->GetUserBasicPropertyValue");


            Cloud.Governance.Client.Client.RequestOptions localVarRequestOptions = new Cloud.Governance.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (name != null)
                localVarRequestOptions.PathParameters.Add("name", Cloud.Governance.Client.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (ClientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientId", this.Configuration.GetApiKeyWithPrefix("clientId"));
            }
            // authentication (ClientSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientSecret", this.Configuration.GetApiKeyWithPrefix("clientSecret"));
            }
            // authentication (UserPrincipalName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("userPrincipalName")))
            {
                localVarRequestOptions.HeaderParameters.Add("userPrincipalName", this.Configuration.GetApiKeyWithPrefix("userPrincipalName"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/users/me/property/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserBasicPropertyValue", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// get user&#39;s photo 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="size"> (optional, default to &quot;48x48&quot;)</param>
        /// <returns></returns>
        public void GetUserPhoto (string username, string size = default(string))
        {
             GetUserPhotoWithHttpInfo(username, size);
        }

        /// <summary>
        /// get user&#39;s photo 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="size"> (optional, default to &quot;48x48&quot;)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.Client.Client.ApiResponse<Object> GetUserPhotoWithHttpInfo (string username, string size = default(string))
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new Cloud.Governance.Client.Client.ApiException(400, "Missing required parameter 'username' when calling UsersApi->GetUserPhoto");

            Cloud.Governance.Client.Client.RequestOptions localVarRequestOptions = new Cloud.Governance.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (username != null)
                localVarRequestOptions.PathParameters.Add("username", Cloud.Governance.Client.Client.ClientUtils.ParameterToString(username)); // path parameter
            if (size != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "size", size))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (ClientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientId", this.Configuration.GetApiKeyWithPrefix("clientId"));
            }
            // authentication (ClientSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientSecret", this.Configuration.GetApiKeyWithPrefix("clientSecret"));
            }
            // authentication (UserPrincipalName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("userPrincipalName")))
            {
                localVarRequestOptions.HeaderParameters.Add("userPrincipalName", this.Configuration.GetApiKeyWithPrefix("userPrincipalName"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/users/{username}/photo", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserPhoto", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// get user&#39;s photo 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="size"> (optional, default to &quot;48x48&quot;)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetUserPhotoAsync (string username, string size = default(string))
        {
             await GetUserPhotoAsyncWithHttpInfo(username, size);

        }

        /// <summary>
        /// get user&#39;s photo 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="size"> (optional, default to &quot;48x48&quot;)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.Client.Client.ApiResponse<Object>> GetUserPhotoAsyncWithHttpInfo (string username, string size = default(string))
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new Cloud.Governance.Client.Client.ApiException(400, "Missing required parameter 'username' when calling UsersApi->GetUserPhoto");


            Cloud.Governance.Client.Client.RequestOptions localVarRequestOptions = new Cloud.Governance.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (username != null)
                localVarRequestOptions.PathParameters.Add("username", Cloud.Governance.Client.Client.ClientUtils.ParameterToString(username)); // path parameter
            if (size != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "size", size))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (ClientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientId", this.Configuration.GetApiKeyWithPrefix("clientId"));
            }
            // authentication (ClientSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientSecret", this.Configuration.GetApiKeyWithPrefix("clientSecret"));
            }
            // authentication (UserPrincipalName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("userPrincipalName")))
            {
                localVarRequestOptions.HeaderParameters.Add("userPrincipalName", this.Configuration.GetApiKeyWithPrefix("userPrincipalName"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/users/{username}/photo", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserPhoto", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// get user relationship 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <returns>UserRelationShip</returns>
        public UserRelationShip GetUserRelationship (string username)
        {
             Cloud.Governance.Client.Client.ApiResponse<UserRelationShip> localVarResponse = GetUserRelationshipWithHttpInfo(username);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get user relationship 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <returns>ApiResponse of UserRelationShip</returns>
        public Cloud.Governance.Client.Client.ApiResponse< UserRelationShip > GetUserRelationshipWithHttpInfo (string username)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new Cloud.Governance.Client.Client.ApiException(400, "Missing required parameter 'username' when calling UsersApi->GetUserRelationship");

            Cloud.Governance.Client.Client.RequestOptions localVarRequestOptions = new Cloud.Governance.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (username != null)
                localVarRequestOptions.PathParameters.Add("username", Cloud.Governance.Client.Client.ClientUtils.ParameterToString(username)); // path parameter

            // authentication (ClientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientId", this.Configuration.GetApiKeyWithPrefix("clientId"));
            }
            // authentication (ClientSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientSecret", this.Configuration.GetApiKeyWithPrefix("clientSecret"));
            }
            // authentication (UserPrincipalName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("userPrincipalName")))
            {
                localVarRequestOptions.HeaderParameters.Add("userPrincipalName", this.Configuration.GetApiKeyWithPrefix("userPrincipalName"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< UserRelationShip >("/users/{username}/relationship", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// get user relationship 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <returns>Task of UserRelationShip</returns>
        public async System.Threading.Tasks.Task<UserRelationShip> GetUserRelationshipAsync (string username)
        {
             Cloud.Governance.Client.Client.ApiResponse<UserRelationShip> localVarResponse = await GetUserRelationshipAsyncWithHttpInfo(username);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get user relationship 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <returns>Task of ApiResponse (UserRelationShip)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.Client.Client.ApiResponse<UserRelationShip>> GetUserRelationshipAsyncWithHttpInfo (string username)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new Cloud.Governance.Client.Client.ApiException(400, "Missing required parameter 'username' when calling UsersApi->GetUserRelationship");


            Cloud.Governance.Client.Client.RequestOptions localVarRequestOptions = new Cloud.Governance.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (username != null)
                localVarRequestOptions.PathParameters.Add("username", Cloud.Governance.Client.Client.ClientUtils.ParameterToString(username)); // path parameter

            // authentication (ClientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientId", this.Configuration.GetApiKeyWithPrefix("clientId"));
            }
            // authentication (ClientSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientSecret", this.Configuration.GetApiKeyWithPrefix("clientSecret"));
            }
            // authentication (UserPrincipalName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("userPrincipalName")))
            {
                localVarRequestOptions.HeaderParameters.Add("userPrincipalName", this.Configuration.GetApiKeyWithPrefix("userPrincipalName"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<UserRelationShip>("/users/{username}/relationship", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// get users from sharepoint 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"> (optional)</param>
        /// <param name="requestBody"> (optional)</param>
        /// <returns>ApiUser</returns>
        public ApiUser GetUsersFromSharePoint (string username = default(string), List<string> requestBody = default(List<string>))
        {
             Cloud.Governance.Client.Client.ApiResponse<ApiUser> localVarResponse = GetUsersFromSharePointWithHttpInfo(username, requestBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get users from sharepoint 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"> (optional)</param>
        /// <param name="requestBody"> (optional)</param>
        /// <returns>ApiResponse of ApiUser</returns>
        public Cloud.Governance.Client.Client.ApiResponse< ApiUser > GetUsersFromSharePointWithHttpInfo (string username = default(string), List<string> requestBody = default(List<string>))
        {
            Cloud.Governance.Client.Client.RequestOptions localVarRequestOptions = new Cloud.Governance.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (username != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "username", username))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            localVarRequestOptions.Data = requestBody;

            // authentication (ClientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientId", this.Configuration.GetApiKeyWithPrefix("clientId"));
            }
            // authentication (ClientSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientSecret", this.Configuration.GetApiKeyWithPrefix("clientSecret"));
            }
            // authentication (UserPrincipalName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("userPrincipalName")))
            {
                localVarRequestOptions.HeaderParameters.Add("userPrincipalName", this.Configuration.GetApiKeyWithPrefix("userPrincipalName"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< ApiUser >("/users/sharepoint/validate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUsersFromSharePoint", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// get users from sharepoint 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"> (optional)</param>
        /// <param name="requestBody"> (optional)</param>
        /// <returns>Task of ApiUser</returns>
        public async System.Threading.Tasks.Task<ApiUser> GetUsersFromSharePointAsync (string username = default(string), List<string> requestBody = default(List<string>))
        {
             Cloud.Governance.Client.Client.ApiResponse<ApiUser> localVarResponse = await GetUsersFromSharePointAsyncWithHttpInfo(username, requestBody);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get users from sharepoint 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"> (optional)</param>
        /// <param name="requestBody"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiUser)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.Client.Client.ApiResponse<ApiUser>> GetUsersFromSharePointAsyncWithHttpInfo (string username = default(string), List<string> requestBody = default(List<string>))
        {

            Cloud.Governance.Client.Client.RequestOptions localVarRequestOptions = new Cloud.Governance.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (username != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "username", username))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            localVarRequestOptions.Data = requestBody;

            // authentication (ClientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientId", this.Configuration.GetApiKeyWithPrefix("clientId"));
            }
            // authentication (ClientSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientSecret", this.Configuration.GetApiKeyWithPrefix("clientSecret"));
            }
            // authentication (UserPrincipalName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("userPrincipalName")))
            {
                localVarRequestOptions.HeaderParameters.Add("userPrincipalName", this.Configuration.GetApiKeyWithPrefix("userPrincipalName"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiUser>("/users/sharepoint/validate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUsersFromSharePoint", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// resolve users 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"></param>
        /// <param name="userType">All&#x3D;0, User&#x3D;1, Group&#x3D;2, DistributionList&#x3D;3, UserAndGroup&#x3D;4</param>
        /// <param name="userSource">All&#x3D;0, Local&#x3D;1, Azure&#x3D;2, SharePoint&#x3D;3</param>
        /// <param name="sharingOptions">Disabled&#x3D;0, VerifiedGuestUser&#x3D;1, Anyone&#x3D;2, ExistingGuestUser&#x3D;3</param>
        /// <param name="siteUrlOrTenantId"> (optional, default to &quot;&quot;)</param>
        /// <returns>List&lt;ApiUser&gt;</returns>
        public List<ApiUser> ResolveUsers (string keyword, UserType userType, UserSource userSource, ExternalSharingOptions sharingOptions, string siteUrlOrTenantId = default(string))
        {
             Cloud.Governance.Client.Client.ApiResponse<List<ApiUser>> localVarResponse = ResolveUsersWithHttpInfo(keyword, userType, userSource, sharingOptions, siteUrlOrTenantId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// resolve users 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"></param>
        /// <param name="userType">All&#x3D;0, User&#x3D;1, Group&#x3D;2, DistributionList&#x3D;3, UserAndGroup&#x3D;4</param>
        /// <param name="userSource">All&#x3D;0, Local&#x3D;1, Azure&#x3D;2, SharePoint&#x3D;3</param>
        /// <param name="sharingOptions">Disabled&#x3D;0, VerifiedGuestUser&#x3D;1, Anyone&#x3D;2, ExistingGuestUser&#x3D;3</param>
        /// <param name="siteUrlOrTenantId"> (optional, default to &quot;&quot;)</param>
        /// <returns>ApiResponse of List&lt;ApiUser&gt;</returns>
        public Cloud.Governance.Client.Client.ApiResponse< List<ApiUser> > ResolveUsersWithHttpInfo (string keyword, UserType userType, UserSource userSource, ExternalSharingOptions sharingOptions, string siteUrlOrTenantId = default(string))
        {
            // verify the required parameter 'keyword' is set
            if (keyword == null)
                throw new Cloud.Governance.Client.Client.ApiException(400, "Missing required parameter 'keyword' when calling UsersApi->ResolveUsers");

            // verify the required parameter 'userType' is set
            if (userType == null)
                throw new Cloud.Governance.Client.Client.ApiException(400, "Missing required parameter 'userType' when calling UsersApi->ResolveUsers");

            // verify the required parameter 'userSource' is set
            if (userSource == null)
                throw new Cloud.Governance.Client.Client.ApiException(400, "Missing required parameter 'userSource' when calling UsersApi->ResolveUsers");

            // verify the required parameter 'sharingOptions' is set
            if (sharingOptions == null)
                throw new Cloud.Governance.Client.Client.ApiException(400, "Missing required parameter 'sharingOptions' when calling UsersApi->ResolveUsers");

            Cloud.Governance.Client.Client.RequestOptions localVarRequestOptions = new Cloud.Governance.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (keyword != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "keyword", keyword))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (userType != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "userType", userType))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (userSource != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "userSource", userSource))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (sharingOptions != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "sharingOptions", sharingOptions))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (siteUrlOrTenantId != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "siteUrlOrTenantId", siteUrlOrTenantId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (ClientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientId", this.Configuration.GetApiKeyWithPrefix("clientId"));
            }
            // authentication (ClientSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientSecret", this.Configuration.GetApiKeyWithPrefix("clientSecret"));
            }
            // authentication (UserPrincipalName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("userPrincipalName")))
            {
                localVarRequestOptions.HeaderParameters.Add("userPrincipalName", this.Configuration.GetApiKeyWithPrefix("userPrincipalName"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<ApiUser> >("/users/resolve", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResolveUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// resolve users 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"></param>
        /// <param name="userType">All&#x3D;0, User&#x3D;1, Group&#x3D;2, DistributionList&#x3D;3, UserAndGroup&#x3D;4</param>
        /// <param name="userSource">All&#x3D;0, Local&#x3D;1, Azure&#x3D;2, SharePoint&#x3D;3</param>
        /// <param name="sharingOptions">Disabled&#x3D;0, VerifiedGuestUser&#x3D;1, Anyone&#x3D;2, ExistingGuestUser&#x3D;3</param>
        /// <param name="siteUrlOrTenantId"> (optional, default to &quot;&quot;)</param>
        /// <returns>Task of List&lt;ApiUser&gt;</returns>
        public async System.Threading.Tasks.Task<List<ApiUser>> ResolveUsersAsync (string keyword, UserType userType, UserSource userSource, ExternalSharingOptions sharingOptions, string siteUrlOrTenantId = default(string))
        {
             Cloud.Governance.Client.Client.ApiResponse<List<ApiUser>> localVarResponse = await ResolveUsersAsyncWithHttpInfo(keyword, userType, userSource, sharingOptions, siteUrlOrTenantId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// resolve users 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"></param>
        /// <param name="userType">All&#x3D;0, User&#x3D;1, Group&#x3D;2, DistributionList&#x3D;3, UserAndGroup&#x3D;4</param>
        /// <param name="userSource">All&#x3D;0, Local&#x3D;1, Azure&#x3D;2, SharePoint&#x3D;3</param>
        /// <param name="sharingOptions">Disabled&#x3D;0, VerifiedGuestUser&#x3D;1, Anyone&#x3D;2, ExistingGuestUser&#x3D;3</param>
        /// <param name="siteUrlOrTenantId"> (optional, default to &quot;&quot;)</param>
        /// <returns>Task of ApiResponse (List&lt;ApiUser&gt;)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.Client.Client.ApiResponse<List<ApiUser>>> ResolveUsersAsyncWithHttpInfo (string keyword, UserType userType, UserSource userSource, ExternalSharingOptions sharingOptions, string siteUrlOrTenantId = default(string))
        {
            // verify the required parameter 'keyword' is set
            if (keyword == null)
                throw new Cloud.Governance.Client.Client.ApiException(400, "Missing required parameter 'keyword' when calling UsersApi->ResolveUsers");

            // verify the required parameter 'userType' is set
            if (userType == null)
                throw new Cloud.Governance.Client.Client.ApiException(400, "Missing required parameter 'userType' when calling UsersApi->ResolveUsers");

            // verify the required parameter 'userSource' is set
            if (userSource == null)
                throw new Cloud.Governance.Client.Client.ApiException(400, "Missing required parameter 'userSource' when calling UsersApi->ResolveUsers");

            // verify the required parameter 'sharingOptions' is set
            if (sharingOptions == null)
                throw new Cloud.Governance.Client.Client.ApiException(400, "Missing required parameter 'sharingOptions' when calling UsersApi->ResolveUsers");


            Cloud.Governance.Client.Client.RequestOptions localVarRequestOptions = new Cloud.Governance.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (keyword != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "keyword", keyword))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (userType != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "userType", userType))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (userSource != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "userSource", userSource))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (sharingOptions != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "sharingOptions", sharingOptions))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (siteUrlOrTenantId != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "siteUrlOrTenantId", siteUrlOrTenantId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (ClientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientId", this.Configuration.GetApiKeyWithPrefix("clientId"));
            }
            // authentication (ClientSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientSecret", this.Configuration.GetApiKeyWithPrefix("clientSecret"));
            }
            // authentication (UserPrincipalName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("userPrincipalName")))
            {
                localVarRequestOptions.HeaderParameters.Add("userPrincipalName", this.Configuration.GetApiKeyWithPrefix("userPrincipalName"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ApiUser>>("/users/resolve", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResolveUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// resolve user including external users 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"></param>
        /// <param name="siteUrlOrTenantId"></param>
        /// <param name="externalSharingOption"></param>
        /// <param name="userType">All&#x3D;0, User&#x3D;1, Group&#x3D;2, DistributionList&#x3D;3, UserAndGroup&#x3D;4</param>
        /// <param name="userSource">All&#x3D;0, Local&#x3D;1, Azure&#x3D;2, SharePoint&#x3D;3</param>
        /// <returns>List&lt;SharingEnabledUser&gt;</returns>
        public List<SharingEnabledUser> ResolveUsersWithExternalSharingOption (string keyword, string siteUrlOrTenantId, ExternalSharingOptions externalSharingOption, UserType userType, UserSource userSource)
        {
             Cloud.Governance.Client.Client.ApiResponse<List<SharingEnabledUser>> localVarResponse = ResolveUsersWithExternalSharingOptionWithHttpInfo(keyword, siteUrlOrTenantId, externalSharingOption, userType, userSource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// resolve user including external users 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"></param>
        /// <param name="siteUrlOrTenantId"></param>
        /// <param name="externalSharingOption"></param>
        /// <param name="userType">All&#x3D;0, User&#x3D;1, Group&#x3D;2, DistributionList&#x3D;3, UserAndGroup&#x3D;4</param>
        /// <param name="userSource">All&#x3D;0, Local&#x3D;1, Azure&#x3D;2, SharePoint&#x3D;3</param>
        /// <returns>ApiResponse of List&lt;SharingEnabledUser&gt;</returns>
        public Cloud.Governance.Client.Client.ApiResponse< List<SharingEnabledUser> > ResolveUsersWithExternalSharingOptionWithHttpInfo (string keyword, string siteUrlOrTenantId, ExternalSharingOptions externalSharingOption, UserType userType, UserSource userSource)
        {
            // verify the required parameter 'keyword' is set
            if (keyword == null)
                throw new Cloud.Governance.Client.Client.ApiException(400, "Missing required parameter 'keyword' when calling UsersApi->ResolveUsersWithExternalSharingOption");

            // verify the required parameter 'siteUrlOrTenantId' is set
            if (siteUrlOrTenantId == null)
                throw new Cloud.Governance.Client.Client.ApiException(400, "Missing required parameter 'siteUrlOrTenantId' when calling UsersApi->ResolveUsersWithExternalSharingOption");

            // verify the required parameter 'externalSharingOption' is set
            if (externalSharingOption == null)
                throw new Cloud.Governance.Client.Client.ApiException(400, "Missing required parameter 'externalSharingOption' when calling UsersApi->ResolveUsersWithExternalSharingOption");

            // verify the required parameter 'userType' is set
            if (userType == null)
                throw new Cloud.Governance.Client.Client.ApiException(400, "Missing required parameter 'userType' when calling UsersApi->ResolveUsersWithExternalSharingOption");

            // verify the required parameter 'userSource' is set
            if (userSource == null)
                throw new Cloud.Governance.Client.Client.ApiException(400, "Missing required parameter 'userSource' when calling UsersApi->ResolveUsersWithExternalSharingOption");

            Cloud.Governance.Client.Client.RequestOptions localVarRequestOptions = new Cloud.Governance.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (externalSharingOption != null)
                localVarRequestOptions.PathParameters.Add("externalSharingOption", Cloud.Governance.Client.Client.ClientUtils.ParameterToString(externalSharingOption)); // path parameter
            if (keyword != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "keyword", keyword))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (siteUrlOrTenantId != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "siteUrlOrTenantId", siteUrlOrTenantId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (userType != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "userType", userType))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (userSource != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "userSource", userSource))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (ClientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientId", this.Configuration.GetApiKeyWithPrefix("clientId"));
            }
            // authentication (ClientSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientSecret", this.Configuration.GetApiKeyWithPrefix("clientSecret"));
            }
            // authentication (UserPrincipalName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("userPrincipalName")))
            {
                localVarRequestOptions.HeaderParameters.Add("userPrincipalName", this.Configuration.GetApiKeyWithPrefix("userPrincipalName"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<SharingEnabledUser> >("/users/resolve/{externalSharingOption}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResolveUsersWithExternalSharingOption", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// resolve user including external users 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"></param>
        /// <param name="siteUrlOrTenantId"></param>
        /// <param name="externalSharingOption"></param>
        /// <param name="userType">All&#x3D;0, User&#x3D;1, Group&#x3D;2, DistributionList&#x3D;3, UserAndGroup&#x3D;4</param>
        /// <param name="userSource">All&#x3D;0, Local&#x3D;1, Azure&#x3D;2, SharePoint&#x3D;3</param>
        /// <returns>Task of List&lt;SharingEnabledUser&gt;</returns>
        public async System.Threading.Tasks.Task<List<SharingEnabledUser>> ResolveUsersWithExternalSharingOptionAsync (string keyword, string siteUrlOrTenantId, ExternalSharingOptions externalSharingOption, UserType userType, UserSource userSource)
        {
             Cloud.Governance.Client.Client.ApiResponse<List<SharingEnabledUser>> localVarResponse = await ResolveUsersWithExternalSharingOptionAsyncWithHttpInfo(keyword, siteUrlOrTenantId, externalSharingOption, userType, userSource);
             return localVarResponse.Data;

        }

        /// <summary>
        /// resolve user including external users 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"></param>
        /// <param name="siteUrlOrTenantId"></param>
        /// <param name="externalSharingOption"></param>
        /// <param name="userType">All&#x3D;0, User&#x3D;1, Group&#x3D;2, DistributionList&#x3D;3, UserAndGroup&#x3D;4</param>
        /// <param name="userSource">All&#x3D;0, Local&#x3D;1, Azure&#x3D;2, SharePoint&#x3D;3</param>
        /// <returns>Task of ApiResponse (List&lt;SharingEnabledUser&gt;)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.Client.Client.ApiResponse<List<SharingEnabledUser>>> ResolveUsersWithExternalSharingOptionAsyncWithHttpInfo (string keyword, string siteUrlOrTenantId, ExternalSharingOptions externalSharingOption, UserType userType, UserSource userSource)
        {
            // verify the required parameter 'keyword' is set
            if (keyword == null)
                throw new Cloud.Governance.Client.Client.ApiException(400, "Missing required parameter 'keyword' when calling UsersApi->ResolveUsersWithExternalSharingOption");

            // verify the required parameter 'siteUrlOrTenantId' is set
            if (siteUrlOrTenantId == null)
                throw new Cloud.Governance.Client.Client.ApiException(400, "Missing required parameter 'siteUrlOrTenantId' when calling UsersApi->ResolveUsersWithExternalSharingOption");

            // verify the required parameter 'externalSharingOption' is set
            if (externalSharingOption == null)
                throw new Cloud.Governance.Client.Client.ApiException(400, "Missing required parameter 'externalSharingOption' when calling UsersApi->ResolveUsersWithExternalSharingOption");

            // verify the required parameter 'userType' is set
            if (userType == null)
                throw new Cloud.Governance.Client.Client.ApiException(400, "Missing required parameter 'userType' when calling UsersApi->ResolveUsersWithExternalSharingOption");

            // verify the required parameter 'userSource' is set
            if (userSource == null)
                throw new Cloud.Governance.Client.Client.ApiException(400, "Missing required parameter 'userSource' when calling UsersApi->ResolveUsersWithExternalSharingOption");


            Cloud.Governance.Client.Client.RequestOptions localVarRequestOptions = new Cloud.Governance.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (externalSharingOption != null)
                localVarRequestOptions.PathParameters.Add("externalSharingOption", Cloud.Governance.Client.Client.ClientUtils.ParameterToString(externalSharingOption)); // path parameter
            if (keyword != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "keyword", keyword))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (siteUrlOrTenantId != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "siteUrlOrTenantId", siteUrlOrTenantId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (userType != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "userType", userType))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (userSource != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "userSource", userSource))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (ClientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientId", this.Configuration.GetApiKeyWithPrefix("clientId"));
            }
            // authentication (ClientSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientSecret", this.Configuration.GetApiKeyWithPrefix("clientSecret"));
            }
            // authentication (UserPrincipalName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("userPrincipalName")))
            {
                localVarRequestOptions.HeaderParameters.Add("userPrincipalName", this.Configuration.GetApiKeyWithPrefix("userPrincipalName"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SharingEnabledUser>>("/users/resolve/{externalSharingOption}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResolveUsersWithExternalSharingOption", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// search users 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"></param>
        /// <param name="userType">All&#x3D;0, User&#x3D;1, Group&#x3D;2, DistributionList&#x3D;3, UserAndGroup&#x3D;4</param>
        /// <param name="userSource">All&#x3D;0, Local&#x3D;1, Azure&#x3D;2, SharePoint&#x3D;3</param>
        /// <param name="sharingOptions">Disabled&#x3D;0, VerifiedGuestUser&#x3D;1, Anyone&#x3D;2, ExistingGuestUser&#x3D;3</param>
        /// <param name="siteUrlOrTenantId"> (optional, default to &quot;&quot;)</param>
        /// <returns>List&lt;ApiUser&gt;</returns>
        public List<ApiUser> SearchUsers (string keyword, UserType userType, UserSource userSource, ExternalSharingOptions sharingOptions, string siteUrlOrTenantId = default(string))
        {
             Cloud.Governance.Client.Client.ApiResponse<List<ApiUser>> localVarResponse = SearchUsersWithHttpInfo(keyword, userType, userSource, sharingOptions, siteUrlOrTenantId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// search users 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"></param>
        /// <param name="userType">All&#x3D;0, User&#x3D;1, Group&#x3D;2, DistributionList&#x3D;3, UserAndGroup&#x3D;4</param>
        /// <param name="userSource">All&#x3D;0, Local&#x3D;1, Azure&#x3D;2, SharePoint&#x3D;3</param>
        /// <param name="sharingOptions">Disabled&#x3D;0, VerifiedGuestUser&#x3D;1, Anyone&#x3D;2, ExistingGuestUser&#x3D;3</param>
        /// <param name="siteUrlOrTenantId"> (optional, default to &quot;&quot;)</param>
        /// <returns>ApiResponse of List&lt;ApiUser&gt;</returns>
        public Cloud.Governance.Client.Client.ApiResponse< List<ApiUser> > SearchUsersWithHttpInfo (string keyword, UserType userType, UserSource userSource, ExternalSharingOptions sharingOptions, string siteUrlOrTenantId = default(string))
        {
            // verify the required parameter 'keyword' is set
            if (keyword == null)
                throw new Cloud.Governance.Client.Client.ApiException(400, "Missing required parameter 'keyword' when calling UsersApi->SearchUsers");

            // verify the required parameter 'userType' is set
            if (userType == null)
                throw new Cloud.Governance.Client.Client.ApiException(400, "Missing required parameter 'userType' when calling UsersApi->SearchUsers");

            // verify the required parameter 'userSource' is set
            if (userSource == null)
                throw new Cloud.Governance.Client.Client.ApiException(400, "Missing required parameter 'userSource' when calling UsersApi->SearchUsers");

            // verify the required parameter 'sharingOptions' is set
            if (sharingOptions == null)
                throw new Cloud.Governance.Client.Client.ApiException(400, "Missing required parameter 'sharingOptions' when calling UsersApi->SearchUsers");

            Cloud.Governance.Client.Client.RequestOptions localVarRequestOptions = new Cloud.Governance.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (keyword != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "keyword", keyword))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (userType != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "userType", userType))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (userSource != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "userSource", userSource))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (sharingOptions != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "sharingOptions", sharingOptions))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (siteUrlOrTenantId != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "siteUrlOrTenantId", siteUrlOrTenantId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (ClientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientId", this.Configuration.GetApiKeyWithPrefix("clientId"));
            }
            // authentication (ClientSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientSecret", this.Configuration.GetApiKeyWithPrefix("clientSecret"));
            }
            // authentication (UserPrincipalName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("userPrincipalName")))
            {
                localVarRequestOptions.HeaderParameters.Add("userPrincipalName", this.Configuration.GetApiKeyWithPrefix("userPrincipalName"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<ApiUser> >("/users/search", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// search users 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"></param>
        /// <param name="userType">All&#x3D;0, User&#x3D;1, Group&#x3D;2, DistributionList&#x3D;3, UserAndGroup&#x3D;4</param>
        /// <param name="userSource">All&#x3D;0, Local&#x3D;1, Azure&#x3D;2, SharePoint&#x3D;3</param>
        /// <param name="sharingOptions">Disabled&#x3D;0, VerifiedGuestUser&#x3D;1, Anyone&#x3D;2, ExistingGuestUser&#x3D;3</param>
        /// <param name="siteUrlOrTenantId"> (optional, default to &quot;&quot;)</param>
        /// <returns>Task of List&lt;ApiUser&gt;</returns>
        public async System.Threading.Tasks.Task<List<ApiUser>> SearchUsersAsync (string keyword, UserType userType, UserSource userSource, ExternalSharingOptions sharingOptions, string siteUrlOrTenantId = default(string))
        {
             Cloud.Governance.Client.Client.ApiResponse<List<ApiUser>> localVarResponse = await SearchUsersAsyncWithHttpInfo(keyword, userType, userSource, sharingOptions, siteUrlOrTenantId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// search users 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"></param>
        /// <param name="userType">All&#x3D;0, User&#x3D;1, Group&#x3D;2, DistributionList&#x3D;3, UserAndGroup&#x3D;4</param>
        /// <param name="userSource">All&#x3D;0, Local&#x3D;1, Azure&#x3D;2, SharePoint&#x3D;3</param>
        /// <param name="sharingOptions">Disabled&#x3D;0, VerifiedGuestUser&#x3D;1, Anyone&#x3D;2, ExistingGuestUser&#x3D;3</param>
        /// <param name="siteUrlOrTenantId"> (optional, default to &quot;&quot;)</param>
        /// <returns>Task of ApiResponse (List&lt;ApiUser&gt;)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.Client.Client.ApiResponse<List<ApiUser>>> SearchUsersAsyncWithHttpInfo (string keyword, UserType userType, UserSource userSource, ExternalSharingOptions sharingOptions, string siteUrlOrTenantId = default(string))
        {
            // verify the required parameter 'keyword' is set
            if (keyword == null)
                throw new Cloud.Governance.Client.Client.ApiException(400, "Missing required parameter 'keyword' when calling UsersApi->SearchUsers");

            // verify the required parameter 'userType' is set
            if (userType == null)
                throw new Cloud.Governance.Client.Client.ApiException(400, "Missing required parameter 'userType' when calling UsersApi->SearchUsers");

            // verify the required parameter 'userSource' is set
            if (userSource == null)
                throw new Cloud.Governance.Client.Client.ApiException(400, "Missing required parameter 'userSource' when calling UsersApi->SearchUsers");

            // verify the required parameter 'sharingOptions' is set
            if (sharingOptions == null)
                throw new Cloud.Governance.Client.Client.ApiException(400, "Missing required parameter 'sharingOptions' when calling UsersApi->SearchUsers");


            Cloud.Governance.Client.Client.RequestOptions localVarRequestOptions = new Cloud.Governance.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (keyword != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "keyword", keyword))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (userType != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "userType", userType))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (userSource != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "userSource", userSource))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (sharingOptions != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "sharingOptions", sharingOptions))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (siteUrlOrTenantId != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "siteUrlOrTenantId", siteUrlOrTenantId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (ClientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientId", this.Configuration.GetApiKeyWithPrefix("clientId"));
            }
            // authentication (ClientSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientSecret", this.Configuration.GetApiKeyWithPrefix("clientSecret"));
            }
            // authentication (UserPrincipalName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("userPrincipalName")))
            {
                localVarRequestOptions.HeaderParameters.Add("userPrincipalName", this.Configuration.GetApiKeyWithPrefix("userPrincipalName"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ApiUser>>("/users/search", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// search user including external users 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"></param>
        /// <param name="siteUrlOrTenantId"></param>
        /// <param name="externalSharingOption"></param>
        /// <param name="userType">All&#x3D;0, User&#x3D;1, Group&#x3D;2, DistributionList&#x3D;3, UserAndGroup&#x3D;4</param>
        /// <param name="userSource">All&#x3D;0, Local&#x3D;1, Azure&#x3D;2, SharePoint&#x3D;3</param>
        /// <returns>List&lt;SharingEnabledUser&gt;</returns>
        public List<SharingEnabledUser> SearchUsersWithExternalSharingOption (string keyword, string siteUrlOrTenantId, ExternalSharingOptions externalSharingOption, UserType userType, UserSource userSource)
        {
             Cloud.Governance.Client.Client.ApiResponse<List<SharingEnabledUser>> localVarResponse = SearchUsersWithExternalSharingOptionWithHttpInfo(keyword, siteUrlOrTenantId, externalSharingOption, userType, userSource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// search user including external users 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"></param>
        /// <param name="siteUrlOrTenantId"></param>
        /// <param name="externalSharingOption"></param>
        /// <param name="userType">All&#x3D;0, User&#x3D;1, Group&#x3D;2, DistributionList&#x3D;3, UserAndGroup&#x3D;4</param>
        /// <param name="userSource">All&#x3D;0, Local&#x3D;1, Azure&#x3D;2, SharePoint&#x3D;3</param>
        /// <returns>ApiResponse of List&lt;SharingEnabledUser&gt;</returns>
        public Cloud.Governance.Client.Client.ApiResponse< List<SharingEnabledUser> > SearchUsersWithExternalSharingOptionWithHttpInfo (string keyword, string siteUrlOrTenantId, ExternalSharingOptions externalSharingOption, UserType userType, UserSource userSource)
        {
            // verify the required parameter 'keyword' is set
            if (keyword == null)
                throw new Cloud.Governance.Client.Client.ApiException(400, "Missing required parameter 'keyword' when calling UsersApi->SearchUsersWithExternalSharingOption");

            // verify the required parameter 'siteUrlOrTenantId' is set
            if (siteUrlOrTenantId == null)
                throw new Cloud.Governance.Client.Client.ApiException(400, "Missing required parameter 'siteUrlOrTenantId' when calling UsersApi->SearchUsersWithExternalSharingOption");

            // verify the required parameter 'externalSharingOption' is set
            if (externalSharingOption == null)
                throw new Cloud.Governance.Client.Client.ApiException(400, "Missing required parameter 'externalSharingOption' when calling UsersApi->SearchUsersWithExternalSharingOption");

            // verify the required parameter 'userType' is set
            if (userType == null)
                throw new Cloud.Governance.Client.Client.ApiException(400, "Missing required parameter 'userType' when calling UsersApi->SearchUsersWithExternalSharingOption");

            // verify the required parameter 'userSource' is set
            if (userSource == null)
                throw new Cloud.Governance.Client.Client.ApiException(400, "Missing required parameter 'userSource' when calling UsersApi->SearchUsersWithExternalSharingOption");

            Cloud.Governance.Client.Client.RequestOptions localVarRequestOptions = new Cloud.Governance.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (externalSharingOption != null)
                localVarRequestOptions.PathParameters.Add("externalSharingOption", Cloud.Governance.Client.Client.ClientUtils.ParameterToString(externalSharingOption)); // path parameter
            if (keyword != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "keyword", keyword))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (siteUrlOrTenantId != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "siteUrlOrTenantId", siteUrlOrTenantId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (userType != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "userType", userType))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (userSource != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "userSource", userSource))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (ClientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientId", this.Configuration.GetApiKeyWithPrefix("clientId"));
            }
            // authentication (ClientSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientSecret", this.Configuration.GetApiKeyWithPrefix("clientSecret"));
            }
            // authentication (UserPrincipalName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("userPrincipalName")))
            {
                localVarRequestOptions.HeaderParameters.Add("userPrincipalName", this.Configuration.GetApiKeyWithPrefix("userPrincipalName"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<SharingEnabledUser> >("/users/search/{externalSharingOption}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchUsersWithExternalSharingOption", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// search user including external users 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"></param>
        /// <param name="siteUrlOrTenantId"></param>
        /// <param name="externalSharingOption"></param>
        /// <param name="userType">All&#x3D;0, User&#x3D;1, Group&#x3D;2, DistributionList&#x3D;3, UserAndGroup&#x3D;4</param>
        /// <param name="userSource">All&#x3D;0, Local&#x3D;1, Azure&#x3D;2, SharePoint&#x3D;3</param>
        /// <returns>Task of List&lt;SharingEnabledUser&gt;</returns>
        public async System.Threading.Tasks.Task<List<SharingEnabledUser>> SearchUsersWithExternalSharingOptionAsync (string keyword, string siteUrlOrTenantId, ExternalSharingOptions externalSharingOption, UserType userType, UserSource userSource)
        {
             Cloud.Governance.Client.Client.ApiResponse<List<SharingEnabledUser>> localVarResponse = await SearchUsersWithExternalSharingOptionAsyncWithHttpInfo(keyword, siteUrlOrTenantId, externalSharingOption, userType, userSource);
             return localVarResponse.Data;

        }

        /// <summary>
        /// search user including external users 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"></param>
        /// <param name="siteUrlOrTenantId"></param>
        /// <param name="externalSharingOption"></param>
        /// <param name="userType">All&#x3D;0, User&#x3D;1, Group&#x3D;2, DistributionList&#x3D;3, UserAndGroup&#x3D;4</param>
        /// <param name="userSource">All&#x3D;0, Local&#x3D;1, Azure&#x3D;2, SharePoint&#x3D;3</param>
        /// <returns>Task of ApiResponse (List&lt;SharingEnabledUser&gt;)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.Client.Client.ApiResponse<List<SharingEnabledUser>>> SearchUsersWithExternalSharingOptionAsyncWithHttpInfo (string keyword, string siteUrlOrTenantId, ExternalSharingOptions externalSharingOption, UserType userType, UserSource userSource)
        {
            // verify the required parameter 'keyword' is set
            if (keyword == null)
                throw new Cloud.Governance.Client.Client.ApiException(400, "Missing required parameter 'keyword' when calling UsersApi->SearchUsersWithExternalSharingOption");

            // verify the required parameter 'siteUrlOrTenantId' is set
            if (siteUrlOrTenantId == null)
                throw new Cloud.Governance.Client.Client.ApiException(400, "Missing required parameter 'siteUrlOrTenantId' when calling UsersApi->SearchUsersWithExternalSharingOption");

            // verify the required parameter 'externalSharingOption' is set
            if (externalSharingOption == null)
                throw new Cloud.Governance.Client.Client.ApiException(400, "Missing required parameter 'externalSharingOption' when calling UsersApi->SearchUsersWithExternalSharingOption");

            // verify the required parameter 'userType' is set
            if (userType == null)
                throw new Cloud.Governance.Client.Client.ApiException(400, "Missing required parameter 'userType' when calling UsersApi->SearchUsersWithExternalSharingOption");

            // verify the required parameter 'userSource' is set
            if (userSource == null)
                throw new Cloud.Governance.Client.Client.ApiException(400, "Missing required parameter 'userSource' when calling UsersApi->SearchUsersWithExternalSharingOption");


            Cloud.Governance.Client.Client.RequestOptions localVarRequestOptions = new Cloud.Governance.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (externalSharingOption != null)
                localVarRequestOptions.PathParameters.Add("externalSharingOption", Cloud.Governance.Client.Client.ClientUtils.ParameterToString(externalSharingOption)); // path parameter
            if (keyword != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "keyword", keyword))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (siteUrlOrTenantId != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "siteUrlOrTenantId", siteUrlOrTenantId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (userType != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "userType", userType))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (userSource != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "userSource", userSource))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (ClientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientId", this.Configuration.GetApiKeyWithPrefix("clientId"));
            }
            // authentication (ClientSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientSecret", this.Configuration.GetApiKeyWithPrefix("clientSecret"));
            }
            // authentication (UserPrincipalName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("userPrincipalName")))
            {
                localVarRequestOptions.HeaderParameters.Add("userPrincipalName", this.Configuration.GetApiKeyWithPrefix("userPrincipalName"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SharingEnabledUser>>("/users/search/{externalSharingOption}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchUsersWithExternalSharingOption", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatableApiUser"> (optional)</param>
        /// <returns></returns>
        public void UpdateUserInfo (UpdatableApiUser updatableApiUser = default(UpdatableApiUser))
        {
             UpdateUserInfoWithHttpInfo(updatableApiUser);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatableApiUser"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.Client.Client.ApiResponse<Object> UpdateUserInfoWithHttpInfo (UpdatableApiUser updatableApiUser = default(UpdatableApiUser))
        {
            Cloud.Governance.Client.Client.RequestOptions localVarRequestOptions = new Cloud.Governance.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = updatableApiUser;

            // authentication (ClientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientId", this.Configuration.GetApiKeyWithPrefix("clientId"));
            }
            // authentication (ClientSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientSecret", this.Configuration.GetApiKeyWithPrefix("clientSecret"));
            }
            // authentication (UserPrincipalName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("userPrincipalName")))
            {
                localVarRequestOptions.HeaderParameters.Add("userPrincipalName", this.Configuration.GetApiKeyWithPrefix("userPrincipalName"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUserInfo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatableApiUser"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateUserInfoAsync (UpdatableApiUser updatableApiUser = default(UpdatableApiUser))
        {
             await UpdateUserInfoAsyncWithHttpInfo(updatableApiUser);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatableApiUser"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.Client.Client.ApiResponse<Object>> UpdateUserInfoAsyncWithHttpInfo (UpdatableApiUser updatableApiUser = default(UpdatableApiUser))
        {

            Cloud.Governance.Client.Client.RequestOptions localVarRequestOptions = new Cloud.Governance.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = updatableApiUser;

            // authentication (ClientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientId", this.Configuration.GetApiKeyWithPrefix("clientId"));
            }
            // authentication (ClientSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientSecret", this.Configuration.GetApiKeyWithPrefix("clientSecret"));
            }
            // authentication (UserPrincipalName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("userPrincipalName")))
            {
                localVarRequestOptions.HeaderParameters.Add("userPrincipalName", this.Configuration.GetApiKeyWithPrefix("userPrincipalName"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUserInfo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
