/* 
 * Cloud Governance Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Cloud.Governance.NewSdk.Client;
using Cloud.Governance.NewSdk.Api;
using Cloud.Governance.NewSdk.Model;

namespace Cloud.Governance.NewSdk.Test
{
    /// <summary>
    ///  Class for testing UsersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class UsersApiTests : IDisposable
    {
        private UsersApi instance;

        public UsersApiTests()
        {
            instance = new UsersApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of UsersApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' UsersApi
            //Assert.IsType(typeof(UsersApi), instance, "instance is a UsersApi");
        }

        
        /// <summary>
        /// Test CheckUserExistsInAOS
        /// </summary>
        [Fact]
        public void CheckUserExistsInAOSTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //var response = instance.CheckUserExistsInAOS(name);
            //Assert.IsType<bool> (response, "response is bool");
        }
        
        /// <summary>
        /// Test GetAzureAdUserPropertyValue
        /// </summary>
        [Fact]
        public void GetAzureAdUserPropertyValueTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string propertyName = null;
            //var response = instance.GetAzureAdUserPropertyValue(username, propertyName);
            //Assert.IsType<StringModel> (response, "response is StringModel");
        }
        
        /// <summary>
        /// Test GetUpsUserPropertyValue
        /// </summary>
        [Fact]
        public void GetUpsUserPropertyValueTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string propertyName = null;
            //var response = instance.GetUpsUserPropertyValue(username, propertyName);
            //Assert.IsType<StringModel> (response, "response is StringModel");
        }
        
        /// <summary>
        /// Test GetUserBasicProperties
        /// </summary>
        [Fact]
        public void GetUserBasicPropertiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.GetUserBasicProperties();
            
        }
        
        /// <summary>
        /// Test GetUserBasicPropertyValue
        /// </summary>
        [Fact]
        public void GetUserBasicPropertyValueTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.GetUserBasicPropertyValue(name);
            
        }
        
        /// <summary>
        /// Test GetUserPhoto
        /// </summary>
        [Fact]
        public void GetUserPhotoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string size = null;
            //instance.GetUserPhoto(username, size);
            
        }
        
        /// <summary>
        /// Test GetUserRelationship
        /// </summary>
        [Fact]
        public void GetUserRelationshipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //var response = instance.GetUserRelationship(username);
            //Assert.IsType<UserRelationShip> (response, "response is UserRelationShip");
        }
        
        /// <summary>
        /// Test GetUsersFromSharePoint
        /// </summary>
        [Fact]
        public void GetUsersFromSharePointTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //List<string> requestBody = null;
            //var response = instance.GetUsersFromSharePoint(username, requestBody);
            //Assert.IsType<ApiUser> (response, "response is ApiUser");
        }
        
        /// <summary>
        /// Test ResolveUsers
        /// </summary>
        [Fact]
        public void ResolveUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string keyword = null;
            //UserType userType = null;
            //ExternalSharingOptions sharingOptions = null;
            //string siteUrlOrTenantId = null;
            //var response = instance.ResolveUsers(keyword, userType, sharingOptions, siteUrlOrTenantId);
            //Assert.IsType<List<ApiUser>> (response, "response is List<ApiUser>");
        }
        
        /// <summary>
        /// Test ResolveUsersWithExternalSharingOption
        /// </summary>
        [Fact]
        public void ResolveUsersWithExternalSharingOptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string keyword = null;
            //string siteUrlOrTenantId = null;
            //ExternalSharingOptions externalSharingOption = null;
            //UserType userType = null;
            //var response = instance.ResolveUsersWithExternalSharingOption(keyword, siteUrlOrTenantId, externalSharingOption, userType);
            //Assert.IsType<List<SharingEnabledUser>> (response, "response is List<SharingEnabledUser>");
        }
        
        /// <summary>
        /// Test SearchUsers
        /// </summary>
        [Fact]
        public void SearchUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string keyword = null;
            //UserType userType = null;
            //ExternalSharingOptions sharingOptions = null;
            //string siteUrlOrTenantId = null;
            //var response = instance.SearchUsers(keyword, userType, sharingOptions, siteUrlOrTenantId);
            //Assert.IsType<List<ApiUser>> (response, "response is List<ApiUser>");
        }
        
        /// <summary>
        /// Test SearchUsersWithExternalSharingOption
        /// </summary>
        [Fact]
        public void SearchUsersWithExternalSharingOptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string keyword = null;
            //string siteUrlOrTenantId = null;
            //ExternalSharingOptions externalSharingOption = null;
            //UserType userType = null;
            //var response = instance.SearchUsersWithExternalSharingOption(keyword, siteUrlOrTenantId, externalSharingOption, userType);
            //Assert.IsType<List<SharingEnabledUser>> (response, "response is List<SharingEnabledUser>");
        }
        
        /// <summary>
        /// Test UpdateUserInfo
        /// </summary>
        [Fact]
        public void UpdateUserInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ApiUser apiUser = null;
            //instance.UpdateUserInfo(apiUser);
            
        }
        
    }

}
