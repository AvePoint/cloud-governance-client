/* 
 * Cloud Governance Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Cloud.Governance.NewSdk.Client.OpenAPIDateConverter;

namespace Cloud.Governance.NewSdk.Model
{
    /// <summary>
    /// PolicyLifecycleSetting
    /// </summary>
    [DataContract]
    public partial class PolicyLifecycleSetting :  IEquatable<PolicyLifecycleSetting>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PolicyLifecycleSetting" /> class.
        /// </summary>
        /// <param name="archiver">archiver.</param>
        /// <param name="deletion">deletion.</param>
        /// <param name="extension">extension.</param>
        /// <param name="change">change.</param>
        /// <param name="unlock">unlock.</param>
        /// <param name="_lock">_lock.</param>
        /// <param name="quota">quota.</param>
        /// <param name="defaultProcessId">defaultProcessId.</param>
        public PolicyLifecycleSetting(PolicyArchiverLifecycleItem archiver = default(PolicyArchiverLifecycleItem), PolicyDeletionLifecycleItem deletion = default(PolicyDeletionLifecycleItem), PolicyExtensionLifecycleItem extension = default(PolicyExtensionLifecycleItem), PolicyChangeLifecycleItem change = default(PolicyChangeLifecycleItem), PolicyLifecycleItem unlock = default(PolicyLifecycleItem), PolicyLockLifecycleItem _lock = default(PolicyLockLifecycleItem), PolicyQuotaLifecycleItem quota = default(PolicyQuotaLifecycleItem), Guid defaultProcessId = default(Guid))
        {
            this.Archiver = archiver;
            this.Deletion = deletion;
            this.Extension = extension;
            this.Change = change;
            this.Unlock = unlock;
            this.Lock = _lock;
            this.Quota = quota;
            this.DefaultProcessId = defaultProcessId;
        }
        
        /// <summary>
        /// Gets or Sets Archiver
        /// </summary>
        [DataMember(Name="archiver", EmitDefaultValue=false)]
        public PolicyArchiverLifecycleItem Archiver { get; set; }

        /// <summary>
        /// Gets or Sets Deletion
        /// </summary>
        [DataMember(Name="deletion", EmitDefaultValue=false)]
        public PolicyDeletionLifecycleItem Deletion { get; set; }

        /// <summary>
        /// Gets or Sets Extension
        /// </summary>
        [DataMember(Name="extension", EmitDefaultValue=false)]
        public PolicyExtensionLifecycleItem Extension { get; set; }

        /// <summary>
        /// Gets or Sets Change
        /// </summary>
        [DataMember(Name="change", EmitDefaultValue=false)]
        public PolicyChangeLifecycleItem Change { get; set; }

        /// <summary>
        /// Gets or Sets Unlock
        /// </summary>
        [DataMember(Name="unlock", EmitDefaultValue=false)]
        public PolicyLifecycleItem Unlock { get; set; }

        /// <summary>
        /// Gets or Sets Lock
        /// </summary>
        [DataMember(Name="lock", EmitDefaultValue=false)]
        public PolicyLockLifecycleItem Lock { get; set; }

        /// <summary>
        /// Gets or Sets Quota
        /// </summary>
        [DataMember(Name="quota", EmitDefaultValue=false)]
        public PolicyQuotaLifecycleItem Quota { get; set; }

        /// <summary>
        /// Gets or Sets DefaultProcessId
        /// </summary>
        [DataMember(Name="defaultProcessId", EmitDefaultValue=false)]
        public Guid DefaultProcessId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PolicyLifecycleSetting {\n");
            sb.Append("  Archiver: ").Append(Archiver).Append("\n");
            sb.Append("  Deletion: ").Append(Deletion).Append("\n");
            sb.Append("  Extension: ").Append(Extension).Append("\n");
            sb.Append("  Change: ").Append(Change).Append("\n");
            sb.Append("  Unlock: ").Append(Unlock).Append("\n");
            sb.Append("  Lock: ").Append(Lock).Append("\n");
            sb.Append("  Quota: ").Append(Quota).Append("\n");
            sb.Append("  DefaultProcessId: ").Append(DefaultProcessId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PolicyLifecycleSetting);
        }

        /// <summary>
        /// Returns true if PolicyLifecycleSetting instances are equal
        /// </summary>
        /// <param name="input">Instance of PolicyLifecycleSetting to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PolicyLifecycleSetting input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Archiver == input.Archiver ||
                    (this.Archiver != null &&
                    this.Archiver.Equals(input.Archiver))
                ) && 
                (
                    this.Deletion == input.Deletion ||
                    (this.Deletion != null &&
                    this.Deletion.Equals(input.Deletion))
                ) && 
                (
                    this.Extension == input.Extension ||
                    (this.Extension != null &&
                    this.Extension.Equals(input.Extension))
                ) && 
                (
                    this.Change == input.Change ||
                    (this.Change != null &&
                    this.Change.Equals(input.Change))
                ) && 
                (
                    this.Unlock == input.Unlock ||
                    (this.Unlock != null &&
                    this.Unlock.Equals(input.Unlock))
                ) && 
                (
                    this.Lock == input.Lock ||
                    (this.Lock != null &&
                    this.Lock.Equals(input.Lock))
                ) && 
                (
                    this.Quota == input.Quota ||
                    (this.Quota != null &&
                    this.Quota.Equals(input.Quota))
                ) && 
                (
                    this.DefaultProcessId == input.DefaultProcessId ||
                    (this.DefaultProcessId != null &&
                    this.DefaultProcessId.Equals(input.DefaultProcessId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Archiver != null)
                    hashCode = hashCode * 59 + this.Archiver.GetHashCode();
                if (this.Deletion != null)
                    hashCode = hashCode * 59 + this.Deletion.GetHashCode();
                if (this.Extension != null)
                    hashCode = hashCode * 59 + this.Extension.GetHashCode();
                if (this.Change != null)
                    hashCode = hashCode * 59 + this.Change.GetHashCode();
                if (this.Unlock != null)
                    hashCode = hashCode * 59 + this.Unlock.GetHashCode();
                if (this.Lock != null)
                    hashCode = hashCode * 59 + this.Lock.GetHashCode();
                if (this.Quota != null)
                    hashCode = hashCode * 59 + this.Quota.GetHashCode();
                if (this.DefaultProcessId != null)
                    hashCode = hashCode * 59 + this.DefaultProcessId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
