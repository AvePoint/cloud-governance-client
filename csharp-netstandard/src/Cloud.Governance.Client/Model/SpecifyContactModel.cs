/* 
 * Cloud Governance Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Cloud.Governance.Client.Client.OpenAPIDateConverter;

namespace Cloud.Governance.Client.Model
{
    /// <summary>
    /// SpecifyContactModel
    /// </summary>
    [DataContract]
    public partial class SpecifyContactModel :  IEquatable<SpecifyContactModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SpecifyContactModel" /> class.
        /// </summary>
        /// <param name="primaryContact">primaryContact.</param>
        /// <param name="secondaryContact">secondaryContact.</param>
        /// <param name="primaryEmailTemplate">primaryEmailTemplate.</param>
        /// <param name="secondaryEmailTemplate">secondaryEmailTemplate.</param>
        /// <param name="selectedSiteIds">selectedSiteIds.</param>
        /// <param name="isFromTask">isFromTask.</param>
        public SpecifyContactModel(ApiUser primaryContact = default(ApiUser), ApiUser secondaryContact = default(ApiUser), Guid primaryEmailTemplate = default(Guid), Guid secondaryEmailTemplate = default(Guid), List<string> selectedSiteIds = default(List<string>), bool isFromTask = default(bool))
        {
            this.PrimaryContact = primaryContact;
            this.SecondaryContact = secondaryContact;
            this.PrimaryEmailTemplate = primaryEmailTemplate;
            this.SecondaryEmailTemplate = secondaryEmailTemplate;
            this.SelectedSiteIds = selectedSiteIds;
            this.IsFromTask = isFromTask;
        }
        
        /// <summary>
        /// Gets or Sets PrimaryContact
        /// </summary>
        [DataMember(Name="primaryContact", EmitDefaultValue=true)]
        public ApiUser PrimaryContact { get; set; }

        /// <summary>
        /// Gets or Sets SecondaryContact
        /// </summary>
        [DataMember(Name="secondaryContact", EmitDefaultValue=true)]
        public ApiUser SecondaryContact { get; set; }

        /// <summary>
        /// Gets or Sets PrimaryEmailTemplate
        /// </summary>
        [DataMember(Name="primaryEmailTemplate", EmitDefaultValue=false)]
        public Guid PrimaryEmailTemplate { get; set; }

        /// <summary>
        /// Gets or Sets SecondaryEmailTemplate
        /// </summary>
        [DataMember(Name="secondaryEmailTemplate", EmitDefaultValue=false)]
        public Guid SecondaryEmailTemplate { get; set; }

        /// <summary>
        /// Gets or Sets SelectedSiteIds
        /// </summary>
        [DataMember(Name="selectedSiteIds", EmitDefaultValue=true)]
        public List<string> SelectedSiteIds { get; set; }

        /// <summary>
        /// Gets or Sets IsFromTask
        /// </summary>
        [DataMember(Name="isFromTask", EmitDefaultValue=false)]
        public bool IsFromTask { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SpecifyContactModel {\n");
            sb.Append("  PrimaryContact: ").Append(PrimaryContact).Append("\n");
            sb.Append("  SecondaryContact: ").Append(SecondaryContact).Append("\n");
            sb.Append("  PrimaryEmailTemplate: ").Append(PrimaryEmailTemplate).Append("\n");
            sb.Append("  SecondaryEmailTemplate: ").Append(SecondaryEmailTemplate).Append("\n");
            sb.Append("  SelectedSiteIds: ").Append(SelectedSiteIds).Append("\n");
            sb.Append("  IsFromTask: ").Append(IsFromTask).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SpecifyContactModel);
        }

        /// <summary>
        /// Returns true if SpecifyContactModel instances are equal
        /// </summary>
        /// <param name="input">Instance of SpecifyContactModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SpecifyContactModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PrimaryContact == input.PrimaryContact ||
                    (this.PrimaryContact != null &&
                    this.PrimaryContact.Equals(input.PrimaryContact))
                ) && 
                (
                    this.SecondaryContact == input.SecondaryContact ||
                    (this.SecondaryContact != null &&
                    this.SecondaryContact.Equals(input.SecondaryContact))
                ) && 
                (
                    this.PrimaryEmailTemplate == input.PrimaryEmailTemplate ||
                    (this.PrimaryEmailTemplate != null &&
                    this.PrimaryEmailTemplate.Equals(input.PrimaryEmailTemplate))
                ) && 
                (
                    this.SecondaryEmailTemplate == input.SecondaryEmailTemplate ||
                    (this.SecondaryEmailTemplate != null &&
                    this.SecondaryEmailTemplate.Equals(input.SecondaryEmailTemplate))
                ) && 
                (
                    this.SelectedSiteIds == input.SelectedSiteIds ||
                    this.SelectedSiteIds != null &&
                    input.SelectedSiteIds != null &&
                    this.SelectedSiteIds.SequenceEqual(input.SelectedSiteIds)
                ) && 
                (
                    this.IsFromTask == input.IsFromTask ||
                    this.IsFromTask.Equals(input.IsFromTask)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PrimaryContact != null)
                    hashCode = hashCode * 59 + this.PrimaryContact.GetHashCode();
                if (this.SecondaryContact != null)
                    hashCode = hashCode * 59 + this.SecondaryContact.GetHashCode();
                if (this.PrimaryEmailTemplate != null)
                    hashCode = hashCode * 59 + this.PrimaryEmailTemplate.GetHashCode();
                if (this.SecondaryEmailTemplate != null)
                    hashCode = hashCode * 59 + this.SecondaryEmailTemplate.GetHashCode();
                if (this.SelectedSiteIds != null)
                    hashCode = hashCode * 59 + this.SelectedSiteIds.GetHashCode();
                hashCode = hashCode * 59 + this.IsFromTask.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
