/* 
 * Cloud Governance Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Cloud.Governance.Client.Client.OpenAPIDateConverter;

namespace Cloud.Governance.Client.Model
{
    /// <summary>
    /// ServicePermissionSettings
    /// </summary>
    [DataContract]
    public partial class ServicePermissionSettings :  IEquatable<ServicePermissionSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServicePermissionSettings" /> class.
        /// </summary>
        /// <param name="allowAnyUserAccess">allowAnyUserAccess.</param>
        /// <param name="meetAllConditions">meetAllConditions.</param>
        /// <param name="permissionSettings">permissionSettings.</param>
        public ServicePermissionSettings(bool allowAnyUserAccess = default(bool), bool meetAllConditions = default(bool), List<ServicePermissionItem> permissionSettings = default(List<ServicePermissionItem>))
        {
            this.AllowAnyUserAccess = allowAnyUserAccess;
            this.MeetAllConditions = meetAllConditions;
            this.PermissionSettings = permissionSettings;
        }
        
        /// <summary>
        /// Gets or Sets AllowAnyUserAccess
        /// </summary>
        [DataMember(Name="allowAnyUserAccess", EmitDefaultValue=false)]
        public bool AllowAnyUserAccess { get; set; }

        /// <summary>
        /// Gets or Sets MeetAllConditions
        /// </summary>
        [DataMember(Name="meetAllConditions", EmitDefaultValue=false)]
        public bool MeetAllConditions { get; set; }

        /// <summary>
        /// Gets or Sets PermissionSettings
        /// </summary>
        [DataMember(Name="permissionSettings", EmitDefaultValue=true)]
        public List<ServicePermissionItem> PermissionSettings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ServicePermissionSettings {\n");
            sb.Append("  AllowAnyUserAccess: ").Append(AllowAnyUserAccess).Append("\n");
            sb.Append("  MeetAllConditions: ").Append(MeetAllConditions).Append("\n");
            sb.Append("  PermissionSettings: ").Append(PermissionSettings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ServicePermissionSettings);
        }

        /// <summary>
        /// Returns true if ServicePermissionSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of ServicePermissionSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServicePermissionSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllowAnyUserAccess == input.AllowAnyUserAccess ||
                    this.AllowAnyUserAccess.Equals(input.AllowAnyUserAccess)
                ) && 
                (
                    this.MeetAllConditions == input.MeetAllConditions ||
                    this.MeetAllConditions.Equals(input.MeetAllConditions)
                ) && 
                (
                    this.PermissionSettings == input.PermissionSettings ||
                    this.PermissionSettings != null &&
                    input.PermissionSettings != null &&
                    this.PermissionSettings.SequenceEqual(input.PermissionSettings)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.AllowAnyUserAccess.GetHashCode();
                hashCode = hashCode * 59 + this.MeetAllConditions.GetHashCode();
                if (this.PermissionSettings != null)
                    hashCode = hashCode * 59 + this.PermissionSettings.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
