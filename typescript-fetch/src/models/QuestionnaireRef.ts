// tslint:disable
/**
 * Cloud Governance Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Question,
    QuestionFromJSON,
    QuestionFromJSONTyped,
    QuestionToJSON,
    QuestionnaireNode,
    QuestionnaireNodeFromJSON,
    QuestionnaireNodeFromJSONTyped,
    QuestionnaireNodeToJSON,
} from './';

/**
 * 
 * @export
 * @interface QuestionnaireRef
 */
export interface QuestionnaireRef {
    /**
     * 
     * @type {string}
     * @memberof QuestionnaireRef
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof QuestionnaireRef
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof QuestionnaireRef
     */
    description?: string | null;
    /**
     * 
     * @type {Array<Question>}
     * @memberof QuestionnaireRef
     */
    questions?: Array<Question> | null;
    /**
     * 
     * @type {QuestionnaireNode}
     * @memberof QuestionnaireRef
     */
    node?: QuestionnaireNode;
}

export function QuestionnaireRefFromJSON(json: any): QuestionnaireRef {
    return QuestionnaireRefFromJSONTyped(json, false);
}

export function QuestionnaireRefFromJSONTyped(json: any, ignoreDiscriminator: boolean): QuestionnaireRef {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'questions': !exists(json, 'questions') ? undefined : (json['questions'] as Array<any>).map(QuestionFromJSON),
        'node': !exists(json, 'node') ? undefined : QuestionnaireNodeFromJSON(json['node']),
    };
}

export function QuestionnaireRefToJSON(value?: QuestionnaireRef | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'description': value.description,
        'questions': value.questions == null ? undefined : (value.questions as Array<any>).map(QuestionToJSON),
        'node': QuestionnaireNodeToJSON(value.node),
    };
}


