/* 
 * Cloud Governance Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Cloud.Governance.NewSdk.Client;
using Cloud.Governance.NewSdk.Model;

namespace Cloud.Governance.NewSdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRequestsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// cancel request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void CancelRequest (Guid id);

        /// <summary>
        /// cancel request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CancelRequestWithHttpInfo (Guid id);
        /// <summary>
        /// get archive group request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ArchiveGroupRequest</returns>
        ArchiveGroupRequest GetArchiveGroupRequest (Guid id);

        /// <summary>
        /// get archive group request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ArchiveGroupRequest</returns>
        ApiResponse<ArchiveGroupRequest> GetArchiveGroupRequestWithHttpInfo (Guid id);
        /// <summary>
        /// get archive site request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ArchiveSiteRequest</returns>
        ArchiveSiteRequest GetArchiveSiteRequest (Guid id);

        /// <summary>
        /// get archive site request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ArchiveSiteRequest</returns>
        ApiResponse<ArchiveSiteRequest> GetArchiveSiteRequestWithHttpInfo (Guid id);
        /// <summary>
        /// get archive web request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ArchiveWebLifecycleRequest</returns>
        ArchiveWebLifecycleRequest GetArchiveWebRequest (Guid id);

        /// <summary>
        /// get archive web request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ArchiveWebLifecycleRequest</returns>
        ApiResponse<ArchiveWebLifecycleRequest> GetArchiveWebRequestWithHttpInfo (Guid id);
        /// <summary>
        /// get change group policy request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ChangeGroupPolicyRequest</returns>
        ChangeGroupPolicyRequest GetChagneGroupPolicyRequest (Guid id);

        /// <summary>
        /// get change group policy request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ChangeGroupPolicyRequest</returns>
        ApiResponse<ChangeGroupPolicyRequest> GetChagneGroupPolicyRequestWithHttpInfo (Guid id);
        /// <summary>
        /// get change group quota request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ChangeGroupQuotaRequest</returns>
        ChangeGroupQuotaRequest GetChangeGroupQuotaRequest (Guid id);

        /// <summary>
        /// get change group quota request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ChangeGroupQuotaRequest</returns>
        ApiResponse<ChangeGroupQuotaRequest> GetChangeGroupQuotaRequestWithHttpInfo (Guid id);
        /// <summary>
        /// get change group settings request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ChangeGroupSettingRequest</returns>
        ChangeGroupSettingRequest GetChangeGroupSettingRequest (Guid id);

        /// <summary>
        /// get change group settings request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ChangeGroupSettingRequest</returns>
        ApiResponse<ChangeGroupSettingRequest> GetChangeGroupSettingRequestWithHttpInfo (Guid id);
        /// <summary>
        /// get change list settings request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ChangeListSettingRequest</returns>
        ChangeListSettingRequest GetChangeListSettingRequest (Guid id);

        /// <summary>
        /// get change list settings request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ChangeListSettingRequest</returns>
        ApiResponse<ChangeListSettingRequest> GetChangeListSettingRequestWithHttpInfo (Guid id);
        /// <summary>
        /// get change permission request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ChangePermissionRequest</returns>
        ChangePermissionRequest GetChangePermissionRequest (Guid id);

        /// <summary>
        /// get change permission request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ChangePermissionRequest</returns>
        ApiResponse<ChangePermissionRequest> GetChangePermissionRequestWithHttpInfo (Guid id);
        /// <summary>
        /// get change site administrator or contact request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ChangeSiteContactRequest</returns>
        ChangeSiteContactRequest GetChangeSiteContactRequest (Guid id);

        /// <summary>
        /// get change site administrator or contact request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ChangeSiteContactRequest</returns>
        ApiResponse<ChangeSiteContactRequest> GetChangeSiteContactRequestWithHttpInfo (Guid id);
        /// <summary>
        /// get change site policy request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ChangeSitePolicyRequest</returns>
        ChangeSitePolicyRequest GetChangeSitePolicyRequest (Guid id);

        /// <summary>
        /// get change site policy request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ChangeSitePolicyRequest</returns>
        ApiResponse<ChangeSitePolicyRequest> GetChangeSitePolicyRequestWithHttpInfo (Guid id);
        /// <summary>
        /// get change site quota request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ChangeSiteQuotaRequest</returns>
        ChangeSiteQuotaRequest GetChangeSiteQuotaRequest (Guid id);

        /// <summary>
        /// get change site quota request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ChangeSiteQuotaRequest</returns>
        ApiResponse<ChangeSiteQuotaRequest> GetChangeSiteQuotaRequestWithHttpInfo (Guid id);
        /// <summary>
        /// get change site settings request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ChangeSiteSettingRequest</returns>
        ChangeSiteSettingRequest GetChangeSiteSettingRequest (Guid id);

        /// <summary>
        /// get change site settings request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ChangeSiteSettingRequest</returns>
        ApiResponse<ChangeSiteSettingRequest> GetChangeSiteSettingRequestWithHttpInfo (Guid id);
        /// <summary>
        /// get change web contact request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ChangeWebContactRequest</returns>
        ChangeWebContactRequest GetChangeWebContactRequest (Guid id);

        /// <summary>
        /// get change web contact request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ChangeWebContactRequest</returns>
        ApiResponse<ChangeWebContactRequest> GetChangeWebContactRequestWithHttpInfo (Guid id);
        /// <summary>
        /// get change web settings request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ChangeWebSettingRequest</returns>
        ChangeWebSettingRequest GetChangeWebSettingRequest (Guid id);

        /// <summary>
        /// get change web settings request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ChangeWebSettingRequest</returns>
        ApiResponse<ChangeWebSettingRequest> GetChangeWebSettingRequestWithHttpInfo (Guid id);
        /// <summary>
        /// get changed permission items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PermissionChangedActionItemPageResult</returns>
        PermissionChangedActionItemPageResult GetChangedPermissionItems (Guid id, string filter = null, string orderby = null, Object body = null);

        /// <summary>
        /// get changed permission items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PermissionChangedActionItemPageResult</returns>
        ApiResponse<PermissionChangedActionItemPageResult> GetChangedPermissionItemsWithHttpInfo (Guid id, string filter = null, string orderby = null, Object body = null);
        /// <summary>
        /// get clone permission request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ClonePermissionRequest</returns>
        ClonePermissionRequest GetClonePermissionRequest (Guid id);

        /// <summary>
        /// get clone permission request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ClonePermissionRequest</returns>
        ApiResponse<ClonePermissionRequest> GetClonePermissionRequestWithHttpInfo (Guid id);
        /// <summary>
        /// get content move request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ContentMoveRequest</returns>
        ContentMoveRequest GetContentMoveRequest (Guid id);

        /// <summary>
        /// get content move request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ContentMoveRequest</returns>
        ApiResponse<ContentMoveRequest> GetContentMoveRequestWithHttpInfo (Guid id);
        /// <summary>
        /// get create group request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>CreateGroupRequest</returns>
        CreateGroupRequest GetCreateGroupRequest (Guid id);

        /// <summary>
        /// get create group request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of CreateGroupRequest</returns>
        ApiResponse<CreateGroupRequest> GetCreateGroupRequestWithHttpInfo (Guid id);
        /// <summary>
        /// get create list request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>CreateListRequest</returns>
        CreateListRequest GetCreateListRequest (Guid id);

        /// <summary>
        /// get create list request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of CreateListRequest</returns>
        ApiResponse<CreateListRequest> GetCreateListRequestWithHttpInfo (Guid id);
        /// <summary>
        /// get create site request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>CreateSiteRequest</returns>
        CreateSiteRequest GetCreateSiteRequest (Guid id);

        /// <summary>
        /// get create site request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of CreateSiteRequest</returns>
        ApiResponse<CreateSiteRequest> GetCreateSiteRequestWithHttpInfo (Guid id);
        /// <summary>
        /// get create web request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>CreateWebRequest</returns>
        CreateWebRequest GetCreateWebRequest (Guid id);

        /// <summary>
        /// get create web request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of CreateWebRequest</returns>
        ApiResponse<CreateWebRequest> GetCreateWebRequestWithHttpInfo (Guid id);
        /// <summary>
        /// get custom service request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiRequest</returns>
        ApiRequest GetCustomRequest (Guid id);

        /// <summary>
        /// get custom service request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ApiRequest</returns>
        ApiResponse<ApiRequest> GetCustomRequestWithHttpInfo (Guid id);
        /// <summary>
        /// get delete group request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>DeleteGroupRequest</returns>
        DeleteGroupRequest GetDeleteGroupRequest (Guid id);

        /// <summary>
        /// get delete group request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of DeleteGroupRequest</returns>
        ApiResponse<DeleteGroupRequest> GetDeleteGroupRequestWithHttpInfo (Guid id);
        /// <summary>
        /// get delete site request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>DeleteSiteRequest</returns>
        DeleteSiteRequest GetDeleteSiteRequest (Guid id);

        /// <summary>
        /// get delete site request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of DeleteSiteRequest</returns>
        ApiResponse<DeleteSiteRequest> GetDeleteSiteRequestWithHttpInfo (Guid id);
        /// <summary>
        /// get delete web request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>DeleteWebLifecycleRequest</returns>
        DeleteWebLifecycleRequest GetDeleteWebRequest (Guid id);

        /// <summary>
        /// get delete web request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of DeleteWebLifecycleRequest</returns>
        ApiResponse<DeleteWebLifecycleRequest> GetDeleteWebRequestWithHttpInfo (Guid id);
        /// <summary>
        /// get extend group request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ExtendGroupRequest</returns>
        ExtendGroupRequest GetExtendGroupRequest (Guid id);

        /// <summary>
        /// get extend group request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ExtendGroupRequest</returns>
        ApiResponse<ExtendGroupRequest> GetExtendGroupRequestWithHttpInfo (Guid id);
        /// <summary>
        /// get extend site request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ExtendSiteRequest</returns>
        ExtendSiteRequest GetExtendSiteRequest (Guid id);

        /// <summary>
        /// get extend site request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ExtendSiteRequest</returns>
        ApiResponse<ExtendSiteRequest> GetExtendSiteRequestWithHttpInfo (Guid id);
        /// <summary>
        /// get grant permission request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>GrantPermissionRequest</returns>
        GrantPermissionRequest GetGrantPermissionRequest (Guid id);

        /// <summary>
        /// get grant permission request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of GrantPermissionRequest</returns>
        ApiResponse<GrantPermissionRequest> GetGrantPermissionRequestWithHttpInfo (Guid id);
        /// <summary>
        /// get inherited sites for change permissin request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>List&lt;SecuritySearchResult&gt;</returns>
        List<SecuritySearchResult> GetInheritedSitesForChangePermission (Guid id);

        /// <summary>
        /// get inherited sites for change permissin request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of List&lt;SecuritySearchResult&gt;</returns>
        ApiResponse<List<SecuritySearchResult>> GetInheritedSitesForChangePermissionWithHttpInfo (Guid id);
        /// <summary>
        /// get lock site request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>LockSiteRequest</returns>
        LockSiteRequest GetLockSiteReuqest (Guid id);

        /// <summary>
        /// get lock site request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of LockSiteRequest</returns>
        ApiResponse<LockSiteRequest> GetLockSiteReuqestWithHttpInfo (Guid id);
        /// <summary>
        /// get manage permission request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ManagePermissionRequest</returns>
        ManagePermissionRequest GetManagePermissionRequest (Guid id);

        /// <summary>
        /// get manage permission request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ManagePermissionRequest</returns>
        ApiResponse<ManagePermissionRequest> GetManagePermissionRequestWithHttpInfo (Guid id);
        /// <summary>
        /// Get my requests filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, serviceId, serviceName, serviceType, ticketNumber, summary, status, processStatus, modified, submitStatus, assigned, serviceAdmin, enabledCopy (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, serviceId, serviceName, serviceType, ticketNumber, summary, status, processStatus, modified, submitStatus, assigned, serviceAdmin, enabledCopy (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>DistinctPageResult</returns>
        DistinctPageResult GetMyRequestFilters (string filter = null, string distinct = null, int? top = null, int? skip = null);

        /// <summary>
        /// Get my requests filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, serviceId, serviceName, serviceType, ticketNumber, summary, status, processStatus, modified, submitStatus, assigned, serviceAdmin, enabledCopy (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, serviceId, serviceName, serviceType, ticketNumber, summary, status, processStatus, modified, submitStatus, assigned, serviceAdmin, enabledCopy (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>ApiResponse of DistinctPageResult</returns>
        ApiResponse<DistinctPageResult> GetMyRequestFiltersWithHttpInfo (string filter = null, string distinct = null, int? top = null, int? skip = null);
        /// <summary>
        /// get my requests
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, serviceId, serviceName, serviceType, ticketNumber, summary, status, processStatus, modified, submitStatus, assigned, serviceAdmin, enabledCopy (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, serviceId, serviceName, serviceType, ticketNumber, summary, status, processStatus, modified, submitStatus, assigned, serviceAdmin, enabledCopy (optional)</param>
        /// <param name="search">Search for summary (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>RequestListPageResult</returns>
        RequestListPageResult GetMyRequests (string filter = null, string orderby = null, string search = null, int? top = null, int? skip = null);

        /// <summary>
        /// get my requests
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, serviceId, serviceName, serviceType, ticketNumber, summary, status, processStatus, modified, submitStatus, assigned, serviceAdmin, enabledCopy (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, serviceId, serviceName, serviceType, ticketNumber, summary, status, processStatus, modified, submitStatus, assigned, serviceAdmin, enabledCopy (optional)</param>
        /// <param name="search">Search for summary (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>ApiResponse of RequestListPageResult</returns>
        ApiResponse<RequestListPageResult> GetMyRequestsWithHttpInfo (string filter = null, string orderby = null, string search = null, int? top = null, int? skip = null);
        /// <summary>
        /// get request by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiRequest</returns>
        ApiRequest GetRequestById (Guid id);

        /// <summary>
        /// get request by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ApiRequest</returns>
        ApiResponse<ApiRequest> GetRequestByIdWithHttpInfo (Guid id);
        /// <summary>
        /// get restore group request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>RestoreGroupRequest</returns>
        RestoreGroupRequest GetRestoreGroupRequest (Guid id);

        /// <summary>
        /// get restore group request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of RestoreGroupRequest</returns>
        ApiResponse<RestoreGroupRequest> GetRestoreGroupRequestWithHttpInfo (Guid id);
        /// <summary>
        /// get unlock site request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>UnlockSiteRequest</returns>
        UnlockSiteRequest GetUnlockSiteRequest (Guid id);

        /// <summary>
        /// get unlock site request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of UnlockSiteRequest</returns>
        ApiResponse<UnlockSiteRequest> GetUnlockSiteRequestWithHttpInfo (Guid id);
        /// <summary>
        /// submit archive group group request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archiveGroupRequest"> (optional)</param>
        /// <returns>Guid</returns>
        Guid SubmitArchiveGroupRequest (ArchiveGroupRequest archiveGroupRequest = null);

        /// <summary>
        /// submit archive group group request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archiveGroupRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        ApiResponse<Guid> SubmitArchiveGroupRequestWithHttpInfo (ArchiveGroupRequest archiveGroupRequest = null);
        /// <summary>
        /// submit archive site request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archiveSiteRequest"> (optional)</param>
        /// <returns>Guid</returns>
        Guid SubmitArchiveSiteRequest (ArchiveSiteRequest archiveSiteRequest = null);

        /// <summary>
        /// submit archive site request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archiveSiteRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        ApiResponse<Guid> SubmitArchiveSiteRequestWithHttpInfo (ArchiveSiteRequest archiveSiteRequest = null);
        /// <summary>
        /// submit archive web request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archiveWebLifecycleRequest"> (optional)</param>
        /// <returns>Guid</returns>
        Guid SubmitArchiveWebRequest (ArchiveWebLifecycleRequest archiveWebLifecycleRequest = null);

        /// <summary>
        /// submit archive web request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archiveWebLifecycleRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        ApiResponse<Guid> SubmitArchiveWebRequestWithHttpInfo (ArchiveWebLifecycleRequest archiveWebLifecycleRequest = null);
        /// <summary>
        /// submit change group policy request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeGroupPolicyRequest"> (optional)</param>
        /// <returns>Guid</returns>
        Guid SubmitChangeGroupPolicyRequest (ChangeGroupPolicyRequest changeGroupPolicyRequest = null);

        /// <summary>
        /// submit change group policy request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeGroupPolicyRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        ApiResponse<Guid> SubmitChangeGroupPolicyRequestWithHttpInfo (ChangeGroupPolicyRequest changeGroupPolicyRequest = null);
        /// <summary>
        /// submit change group quota request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeGroupQuotaRequest"> (optional)</param>
        /// <returns>Guid</returns>
        Guid SubmitChangeGroupQuotaRequest (ChangeGroupQuotaRequest changeGroupQuotaRequest = null);

        /// <summary>
        /// submit change group quota request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeGroupQuotaRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        ApiResponse<Guid> SubmitChangeGroupQuotaRequestWithHttpInfo (ChangeGroupQuotaRequest changeGroupQuotaRequest = null);
        /// <summary>
        /// submit change group settings request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeGroupSettingRequest"> (optional)</param>
        /// <returns>Guid</returns>
        Guid SubmitChangeGroupSettingRequest (ChangeGroupSettingRequest changeGroupSettingRequest = null);

        /// <summary>
        /// submit change group settings request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeGroupSettingRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        ApiResponse<Guid> SubmitChangeGroupSettingRequestWithHttpInfo (ChangeGroupSettingRequest changeGroupSettingRequest = null);
        /// <summary>
        /// submit change list settings request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeListSettingRequest"> (optional)</param>
        /// <returns>Guid</returns>
        Guid SubmitChangeListSettingRequest (ChangeListSettingRequest changeListSettingRequest = null);

        /// <summary>
        /// submit change list settings request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeListSettingRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        ApiResponse<Guid> SubmitChangeListSettingRequestWithHttpInfo (ChangeListSettingRequest changeListSettingRequest = null);
        /// <summary>
        /// submit change permission request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changePermissionRequest"> (optional)</param>
        /// <returns>Guid</returns>
        Guid SubmitChangePermissionRequest (ChangePermissionRequest changePermissionRequest = null);

        /// <summary>
        /// submit change permission request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changePermissionRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        ApiResponse<Guid> SubmitChangePermissionRequestWithHttpInfo (ChangePermissionRequest changePermissionRequest = null);
        /// <summary>
        /// submit change site administrator or contact request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeSiteContactRequest"> (optional)</param>
        /// <returns>Guid</returns>
        Guid SubmitChangeSiteContactRequest (ChangeSiteContactRequest changeSiteContactRequest = null);

        /// <summary>
        /// submit change site administrator or contact request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeSiteContactRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        ApiResponse<Guid> SubmitChangeSiteContactRequestWithHttpInfo (ChangeSiteContactRequest changeSiteContactRequest = null);
        /// <summary>
        /// submit change site policy request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeSitePolicyRequest"> (optional)</param>
        /// <returns>Guid</returns>
        Guid SubmitChangeSitePolicyRequest (ChangeSitePolicyRequest changeSitePolicyRequest = null);

        /// <summary>
        /// submit change site policy request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeSitePolicyRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        ApiResponse<Guid> SubmitChangeSitePolicyRequestWithHttpInfo (ChangeSitePolicyRequest changeSitePolicyRequest = null);
        /// <summary>
        /// submit change site quota request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeSiteQuotaRequest"> (optional)</param>
        /// <returns>Guid</returns>
        Guid SubmitChangeSiteQuotaRequest (ChangeSiteQuotaRequest changeSiteQuotaRequest = null);

        /// <summary>
        /// submit change site quota request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeSiteQuotaRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        ApiResponse<Guid> SubmitChangeSiteQuotaRequestWithHttpInfo (ChangeSiteQuotaRequest changeSiteQuotaRequest = null);
        /// <summary>
        /// submit change site settings request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeSiteSettingRequest"> (optional)</param>
        /// <returns>Guid</returns>
        Guid SubmitChangeSiteSettingRequest (ChangeSiteSettingRequest changeSiteSettingRequest = null);

        /// <summary>
        /// submit change site settings request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeSiteSettingRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        ApiResponse<Guid> SubmitChangeSiteSettingRequestWithHttpInfo (ChangeSiteSettingRequest changeSiteSettingRequest = null);
        /// <summary>
        /// submit change web contact request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeWebContactRequest"> (optional)</param>
        /// <returns>Guid</returns>
        Guid SubmitChangeWebContactRequest (ChangeWebContactRequest changeWebContactRequest = null);

        /// <summary>
        /// submit change web contact request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeWebContactRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        ApiResponse<Guid> SubmitChangeWebContactRequestWithHttpInfo (ChangeWebContactRequest changeWebContactRequest = null);
        /// <summary>
        /// submit change web settings request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeWebSettingRequest"> (optional)</param>
        /// <returns>Guid</returns>
        Guid SubmitChangeWebSettingRequest (ChangeWebSettingRequest changeWebSettingRequest = null);

        /// <summary>
        /// submit change web settings request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeWebSettingRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        ApiResponse<Guid> SubmitChangeWebSettingRequestWithHttpInfo (ChangeWebSettingRequest changeWebSettingRequest = null);
        /// <summary>
        /// get clone permission request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clonePermissionRequest"> (optional)</param>
        /// <returns>Guid</returns>
        Guid SubmitClonePermissionRequest (ClonePermissionRequest clonePermissionRequest = null);

        /// <summary>
        /// get clone permission request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clonePermissionRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        ApiResponse<Guid> SubmitClonePermissionRequestWithHttpInfo (ClonePermissionRequest clonePermissionRequest = null);
        /// <summary>
        /// submit create content move request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentMoveRequest"> (optional)</param>
        /// <returns>Guid</returns>
        Guid SubmitContentMoveRequest (ContentMoveRequest contentMoveRequest = null);

        /// <summary>
        /// submit create content move request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentMoveRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        ApiResponse<Guid> SubmitContentMoveRequestWithHttpInfo (ContentMoveRequest contentMoveRequest = null);
        /// <summary>
        /// submit create group request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGroupRequest"> (optional)</param>
        /// <returns>Guid</returns>
        Guid SubmitCreateGroupRequest (CreateGroupRequest createGroupRequest = null);

        /// <summary>
        /// submit create group request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGroupRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        ApiResponse<Guid> SubmitCreateGroupRequestWithHttpInfo (CreateGroupRequest createGroupRequest = null);
        /// <summary>
        /// submit create list request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListRequest"> (optional)</param>
        /// <returns>Guid</returns>
        Guid SubmitCreateListRequest (CreateListRequest createListRequest = null);

        /// <summary>
        /// submit create list request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        ApiResponse<Guid> SubmitCreateListRequestWithHttpInfo (CreateListRequest createListRequest = null);
        /// <summary>
        /// submit create site request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSiteRequest"> (optional)</param>
        /// <returns>Guid</returns>
        Guid SubmitCreateSiteRequest (CreateSiteRequest createSiteRequest = null);

        /// <summary>
        /// submit create site request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSiteRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        ApiResponse<Guid> SubmitCreateSiteRequestWithHttpInfo (CreateSiteRequest createSiteRequest = null);
        /// <summary>
        /// submit create web request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebRequest"> (optional)</param>
        /// <returns>Guid</returns>
        Guid SubmitCreateWebRequest (CreateWebRequest createWebRequest = null);

        /// <summary>
        /// submit create web request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        ApiResponse<Guid> SubmitCreateWebRequestWithHttpInfo (CreateWebRequest createWebRequest = null);
        /// <summary>
        /// submit custom service request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiRequest"> (optional)</param>
        /// <returns>Guid</returns>
        Guid SubmitCustomRequest (ApiRequest apiRequest = null);

        /// <summary>
        /// submit custom service request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        ApiResponse<Guid> SubmitCustomRequestWithHttpInfo (ApiRequest apiRequest = null);
        /// <summary>
        /// submit delete group request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteGroupRequest"> (optional)</param>
        /// <returns>Guid</returns>
        Guid SubmitDeleteGroupRequest (DeleteGroupRequest deleteGroupRequest = null);

        /// <summary>
        /// submit delete group request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteGroupRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        ApiResponse<Guid> SubmitDeleteGroupRequestWithHttpInfo (DeleteGroupRequest deleteGroupRequest = null);
        /// <summary>
        /// submit delete site request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteSiteRequest"> (optional)</param>
        /// <returns>Guid</returns>
        Guid SubmitDeleteSiteRequest (DeleteSiteRequest deleteSiteRequest = null);

        /// <summary>
        /// submit delete site request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteSiteRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        ApiResponse<Guid> SubmitDeleteSiteRequestWithHttpInfo (DeleteSiteRequest deleteSiteRequest = null);
        /// <summary>
        /// submit delete web request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteWebLifecycleRequest"> (optional)</param>
        /// <returns>Guid</returns>
        Guid SubmitDeleteWebRequest (DeleteWebLifecycleRequest deleteWebLifecycleRequest = null);

        /// <summary>
        /// submit delete web request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteWebLifecycleRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        ApiResponse<Guid> SubmitDeleteWebRequestWithHttpInfo (DeleteWebLifecycleRequest deleteWebLifecycleRequest = null);
        /// <summary>
        /// submit extend group request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extendGroupRequest"> (optional)</param>
        /// <returns>Guid</returns>
        Guid SubmitExtendGroupRequest (ExtendGroupRequest extendGroupRequest = null);

        /// <summary>
        /// submit extend group request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extendGroupRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        ApiResponse<Guid> SubmitExtendGroupRequestWithHttpInfo (ExtendGroupRequest extendGroupRequest = null);
        /// <summary>
        /// submit extend site request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extendSiteRequest"> (optional)</param>
        /// <returns>Guid</returns>
        Guid SubmitExtendSiteRequest (ExtendSiteRequest extendSiteRequest = null);

        /// <summary>
        /// submit extend site request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extendSiteRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        ApiResponse<Guid> SubmitExtendSiteRequestWithHttpInfo (ExtendSiteRequest extendSiteRequest = null);
        /// <summary>
        /// get submit grant permission request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantPermissionRequest"> (optional)</param>
        /// <returns>Guid</returns>
        Guid SubmitGrantPermissionRequest (GrantPermissionRequest grantPermissionRequest = null);

        /// <summary>
        /// get submit grant permission request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantPermissionRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        ApiResponse<Guid> SubmitGrantPermissionRequestWithHttpInfo (GrantPermissionRequest grantPermissionRequest = null);
        /// <summary>
        /// submit lock site request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lockSiteRequest"> (optional)</param>
        /// <returns>Guid</returns>
        Guid SubmitLockSiteRequest (LockSiteRequest lockSiteRequest = null);

        /// <summary>
        /// submit lock site request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lockSiteRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        ApiResponse<Guid> SubmitLockSiteRequestWithHttpInfo (LockSiteRequest lockSiteRequest = null);
        /// <summary>
        /// submit manage permission request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="managePermissionRequest"> (optional)</param>
        /// <returns>Guid</returns>
        Guid SubmitManagePermimssionRequest (ManagePermissionRequest managePermissionRequest = null);

        /// <summary>
        /// submit manage permission request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="managePermissionRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        ApiResponse<Guid> SubmitManagePermimssionRequestWithHttpInfo (ManagePermissionRequest managePermissionRequest = null);
        /// <summary>
        /// submit restore group request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="restoreGroupRequest"> (optional)</param>
        /// <returns>Guid</returns>
        Guid SubmitRestoreGroupRequest (RestoreGroupRequest restoreGroupRequest = null);

        /// <summary>
        /// submit restore group request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="restoreGroupRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        ApiResponse<Guid> SubmitRestoreGroupRequestWithHttpInfo (RestoreGroupRequest restoreGroupRequest = null);
        /// <summary>
        /// submit unlock site request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unlockSiteRequest"> (optional)</param>
        /// <returns>Guid</returns>
        Guid SubmitUnlockSiteRequest (UnlockSiteRequest unlockSiteRequest = null);

        /// <summary>
        /// submit unlock site request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unlockSiteRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        ApiResponse<Guid> SubmitUnlockSiteRequestWithHttpInfo (UnlockSiteRequest unlockSiteRequest = null);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRequestsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// cancel request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CancelRequestAsync (Guid id);

        /// <summary>
        /// cancel request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CancelRequestAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// get archive group request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ArchiveGroupRequest</returns>
        System.Threading.Tasks.Task<ArchiveGroupRequest> GetArchiveGroupRequestAsync (Guid id);

        /// <summary>
        /// get archive group request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ArchiveGroupRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArchiveGroupRequest>> GetArchiveGroupRequestAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// get archive site request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ArchiveSiteRequest</returns>
        System.Threading.Tasks.Task<ArchiveSiteRequest> GetArchiveSiteRequestAsync (Guid id);

        /// <summary>
        /// get archive site request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ArchiveSiteRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArchiveSiteRequest>> GetArchiveSiteRequestAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// get archive web request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ArchiveWebLifecycleRequest</returns>
        System.Threading.Tasks.Task<ArchiveWebLifecycleRequest> GetArchiveWebRequestAsync (Guid id);

        /// <summary>
        /// get archive web request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ArchiveWebLifecycleRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArchiveWebLifecycleRequest>> GetArchiveWebRequestAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// get change group policy request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ChangeGroupPolicyRequest</returns>
        System.Threading.Tasks.Task<ChangeGroupPolicyRequest> GetChagneGroupPolicyRequestAsync (Guid id);

        /// <summary>
        /// get change group policy request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ChangeGroupPolicyRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChangeGroupPolicyRequest>> GetChagneGroupPolicyRequestAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// get change group quota request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ChangeGroupQuotaRequest</returns>
        System.Threading.Tasks.Task<ChangeGroupQuotaRequest> GetChangeGroupQuotaRequestAsync (Guid id);

        /// <summary>
        /// get change group quota request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ChangeGroupQuotaRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChangeGroupQuotaRequest>> GetChangeGroupQuotaRequestAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// get change group settings request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ChangeGroupSettingRequest</returns>
        System.Threading.Tasks.Task<ChangeGroupSettingRequest> GetChangeGroupSettingRequestAsync (Guid id);

        /// <summary>
        /// get change group settings request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ChangeGroupSettingRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChangeGroupSettingRequest>> GetChangeGroupSettingRequestAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// get change list settings request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ChangeListSettingRequest</returns>
        System.Threading.Tasks.Task<ChangeListSettingRequest> GetChangeListSettingRequestAsync (Guid id);

        /// <summary>
        /// get change list settings request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ChangeListSettingRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChangeListSettingRequest>> GetChangeListSettingRequestAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// get change permission request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ChangePermissionRequest</returns>
        System.Threading.Tasks.Task<ChangePermissionRequest> GetChangePermissionRequestAsync (Guid id);

        /// <summary>
        /// get change permission request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ChangePermissionRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChangePermissionRequest>> GetChangePermissionRequestAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// get change site administrator or contact request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ChangeSiteContactRequest</returns>
        System.Threading.Tasks.Task<ChangeSiteContactRequest> GetChangeSiteContactRequestAsync (Guid id);

        /// <summary>
        /// get change site administrator or contact request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ChangeSiteContactRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChangeSiteContactRequest>> GetChangeSiteContactRequestAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// get change site policy request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ChangeSitePolicyRequest</returns>
        System.Threading.Tasks.Task<ChangeSitePolicyRequest> GetChangeSitePolicyRequestAsync (Guid id);

        /// <summary>
        /// get change site policy request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ChangeSitePolicyRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChangeSitePolicyRequest>> GetChangeSitePolicyRequestAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// get change site quota request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ChangeSiteQuotaRequest</returns>
        System.Threading.Tasks.Task<ChangeSiteQuotaRequest> GetChangeSiteQuotaRequestAsync (Guid id);

        /// <summary>
        /// get change site quota request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ChangeSiteQuotaRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChangeSiteQuotaRequest>> GetChangeSiteQuotaRequestAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// get change site settings request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ChangeSiteSettingRequest</returns>
        System.Threading.Tasks.Task<ChangeSiteSettingRequest> GetChangeSiteSettingRequestAsync (Guid id);

        /// <summary>
        /// get change site settings request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ChangeSiteSettingRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChangeSiteSettingRequest>> GetChangeSiteSettingRequestAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// get change web contact request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ChangeWebContactRequest</returns>
        System.Threading.Tasks.Task<ChangeWebContactRequest> GetChangeWebContactRequestAsync (Guid id);

        /// <summary>
        /// get change web contact request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ChangeWebContactRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChangeWebContactRequest>> GetChangeWebContactRequestAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// get change web settings request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ChangeWebSettingRequest</returns>
        System.Threading.Tasks.Task<ChangeWebSettingRequest> GetChangeWebSettingRequestAsync (Guid id);

        /// <summary>
        /// get change web settings request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ChangeWebSettingRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChangeWebSettingRequest>> GetChangeWebSettingRequestAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// get changed permission items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of PermissionChangedActionItemPageResult</returns>
        System.Threading.Tasks.Task<PermissionChangedActionItemPageResult> GetChangedPermissionItemsAsync (Guid id, string filter = null, string orderby = null, Object body = null);

        /// <summary>
        /// get changed permission items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (PermissionChangedActionItemPageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<PermissionChangedActionItemPageResult>> GetChangedPermissionItemsAsyncWithHttpInfo (Guid id, string filter = null, string orderby = null, Object body = null);
        /// <summary>
        /// get clone permission request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ClonePermissionRequest</returns>
        System.Threading.Tasks.Task<ClonePermissionRequest> GetClonePermissionRequestAsync (Guid id);

        /// <summary>
        /// get clone permission request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ClonePermissionRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClonePermissionRequest>> GetClonePermissionRequestAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// get content move request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ContentMoveRequest</returns>
        System.Threading.Tasks.Task<ContentMoveRequest> GetContentMoveRequestAsync (Guid id);

        /// <summary>
        /// get content move request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ContentMoveRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContentMoveRequest>> GetContentMoveRequestAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// get create group request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of CreateGroupRequest</returns>
        System.Threading.Tasks.Task<CreateGroupRequest> GetCreateGroupRequestAsync (Guid id);

        /// <summary>
        /// get create group request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (CreateGroupRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateGroupRequest>> GetCreateGroupRequestAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// get create list request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of CreateListRequest</returns>
        System.Threading.Tasks.Task<CreateListRequest> GetCreateListRequestAsync (Guid id);

        /// <summary>
        /// get create list request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (CreateListRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateListRequest>> GetCreateListRequestAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// get create site request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of CreateSiteRequest</returns>
        System.Threading.Tasks.Task<CreateSiteRequest> GetCreateSiteRequestAsync (Guid id);

        /// <summary>
        /// get create site request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (CreateSiteRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateSiteRequest>> GetCreateSiteRequestAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// get create web request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of CreateWebRequest</returns>
        System.Threading.Tasks.Task<CreateWebRequest> GetCreateWebRequestAsync (Guid id);

        /// <summary>
        /// get create web request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (CreateWebRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateWebRequest>> GetCreateWebRequestAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// get custom service request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiRequest</returns>
        System.Threading.Tasks.Task<ApiRequest> GetCustomRequestAsync (Guid id);

        /// <summary>
        /// get custom service request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ApiRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiRequest>> GetCustomRequestAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// get delete group request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of DeleteGroupRequest</returns>
        System.Threading.Tasks.Task<DeleteGroupRequest> GetDeleteGroupRequestAsync (Guid id);

        /// <summary>
        /// get delete group request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (DeleteGroupRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteGroupRequest>> GetDeleteGroupRequestAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// get delete site request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of DeleteSiteRequest</returns>
        System.Threading.Tasks.Task<DeleteSiteRequest> GetDeleteSiteRequestAsync (Guid id);

        /// <summary>
        /// get delete site request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (DeleteSiteRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteSiteRequest>> GetDeleteSiteRequestAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// get delete web request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of DeleteWebLifecycleRequest</returns>
        System.Threading.Tasks.Task<DeleteWebLifecycleRequest> GetDeleteWebRequestAsync (Guid id);

        /// <summary>
        /// get delete web request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (DeleteWebLifecycleRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteWebLifecycleRequest>> GetDeleteWebRequestAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// get extend group request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ExtendGroupRequest</returns>
        System.Threading.Tasks.Task<ExtendGroupRequest> GetExtendGroupRequestAsync (Guid id);

        /// <summary>
        /// get extend group request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ExtendGroupRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtendGroupRequest>> GetExtendGroupRequestAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// get extend site request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ExtendSiteRequest</returns>
        System.Threading.Tasks.Task<ExtendSiteRequest> GetExtendSiteRequestAsync (Guid id);

        /// <summary>
        /// get extend site request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ExtendSiteRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtendSiteRequest>> GetExtendSiteRequestAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// get grant permission request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of GrantPermissionRequest</returns>
        System.Threading.Tasks.Task<GrantPermissionRequest> GetGrantPermissionRequestAsync (Guid id);

        /// <summary>
        /// get grant permission request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (GrantPermissionRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<GrantPermissionRequest>> GetGrantPermissionRequestAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// get inherited sites for change permissin request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of List&lt;SecuritySearchResult&gt;</returns>
        System.Threading.Tasks.Task<List<SecuritySearchResult>> GetInheritedSitesForChangePermissionAsync (Guid id);

        /// <summary>
        /// get inherited sites for change permissin request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (List&lt;SecuritySearchResult&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SecuritySearchResult>>> GetInheritedSitesForChangePermissionAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// get lock site request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of LockSiteRequest</returns>
        System.Threading.Tasks.Task<LockSiteRequest> GetLockSiteReuqestAsync (Guid id);

        /// <summary>
        /// get lock site request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (LockSiteRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<LockSiteRequest>> GetLockSiteReuqestAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// get manage permission request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ManagePermissionRequest</returns>
        System.Threading.Tasks.Task<ManagePermissionRequest> GetManagePermissionRequestAsync (Guid id);

        /// <summary>
        /// get manage permission request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ManagePermissionRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<ManagePermissionRequest>> GetManagePermissionRequestAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// Get my requests filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, serviceId, serviceName, serviceType, ticketNumber, summary, status, processStatus, modified, submitStatus, assigned, serviceAdmin, enabledCopy (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, serviceId, serviceName, serviceType, ticketNumber, summary, status, processStatus, modified, submitStatus, assigned, serviceAdmin, enabledCopy (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of DistinctPageResult</returns>
        System.Threading.Tasks.Task<DistinctPageResult> GetMyRequestFiltersAsync (string filter = null, string distinct = null, int? top = null, int? skip = null);

        /// <summary>
        /// Get my requests filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, serviceId, serviceName, serviceType, ticketNumber, summary, status, processStatus, modified, submitStatus, assigned, serviceAdmin, enabledCopy (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, serviceId, serviceName, serviceType, ticketNumber, summary, status, processStatus, modified, submitStatus, assigned, serviceAdmin, enabledCopy (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of ApiResponse (DistinctPageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<DistinctPageResult>> GetMyRequestFiltersAsyncWithHttpInfo (string filter = null, string distinct = null, int? top = null, int? skip = null);
        /// <summary>
        /// get my requests
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, serviceId, serviceName, serviceType, ticketNumber, summary, status, processStatus, modified, submitStatus, assigned, serviceAdmin, enabledCopy (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, serviceId, serviceName, serviceType, ticketNumber, summary, status, processStatus, modified, submitStatus, assigned, serviceAdmin, enabledCopy (optional)</param>
        /// <param name="search">Search for summary (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of RequestListPageResult</returns>
        System.Threading.Tasks.Task<RequestListPageResult> GetMyRequestsAsync (string filter = null, string orderby = null, string search = null, int? top = null, int? skip = null);

        /// <summary>
        /// get my requests
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, serviceId, serviceName, serviceType, ticketNumber, summary, status, processStatus, modified, submitStatus, assigned, serviceAdmin, enabledCopy (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, serviceId, serviceName, serviceType, ticketNumber, summary, status, processStatus, modified, submitStatus, assigned, serviceAdmin, enabledCopy (optional)</param>
        /// <param name="search">Search for summary (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of ApiResponse (RequestListPageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<RequestListPageResult>> GetMyRequestsAsyncWithHttpInfo (string filter = null, string orderby = null, string search = null, int? top = null, int? skip = null);
        /// <summary>
        /// get request by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiRequest</returns>
        System.Threading.Tasks.Task<ApiRequest> GetRequestByIdAsync (Guid id);

        /// <summary>
        /// get request by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ApiRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiRequest>> GetRequestByIdAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// get restore group request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of RestoreGroupRequest</returns>
        System.Threading.Tasks.Task<RestoreGroupRequest> GetRestoreGroupRequestAsync (Guid id);

        /// <summary>
        /// get restore group request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (RestoreGroupRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestoreGroupRequest>> GetRestoreGroupRequestAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// get unlock site request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of UnlockSiteRequest</returns>
        System.Threading.Tasks.Task<UnlockSiteRequest> GetUnlockSiteRequestAsync (Guid id);

        /// <summary>
        /// get unlock site request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (UnlockSiteRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<UnlockSiteRequest>> GetUnlockSiteRequestAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// submit archive group group request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archiveGroupRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        System.Threading.Tasks.Task<Guid> SubmitArchiveGroupRequestAsync (ArchiveGroupRequest archiveGroupRequest = null);

        /// <summary>
        /// submit archive group group request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archiveGroupRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid>> SubmitArchiveGroupRequestAsyncWithHttpInfo (ArchiveGroupRequest archiveGroupRequest = null);
        /// <summary>
        /// submit archive site request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archiveSiteRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        System.Threading.Tasks.Task<Guid> SubmitArchiveSiteRequestAsync (ArchiveSiteRequest archiveSiteRequest = null);

        /// <summary>
        /// submit archive site request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archiveSiteRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid>> SubmitArchiveSiteRequestAsyncWithHttpInfo (ArchiveSiteRequest archiveSiteRequest = null);
        /// <summary>
        /// submit archive web request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archiveWebLifecycleRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        System.Threading.Tasks.Task<Guid> SubmitArchiveWebRequestAsync (ArchiveWebLifecycleRequest archiveWebLifecycleRequest = null);

        /// <summary>
        /// submit archive web request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archiveWebLifecycleRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid>> SubmitArchiveWebRequestAsyncWithHttpInfo (ArchiveWebLifecycleRequest archiveWebLifecycleRequest = null);
        /// <summary>
        /// submit change group policy request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeGroupPolicyRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        System.Threading.Tasks.Task<Guid> SubmitChangeGroupPolicyRequestAsync (ChangeGroupPolicyRequest changeGroupPolicyRequest = null);

        /// <summary>
        /// submit change group policy request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeGroupPolicyRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid>> SubmitChangeGroupPolicyRequestAsyncWithHttpInfo (ChangeGroupPolicyRequest changeGroupPolicyRequest = null);
        /// <summary>
        /// submit change group quota request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeGroupQuotaRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        System.Threading.Tasks.Task<Guid> SubmitChangeGroupQuotaRequestAsync (ChangeGroupQuotaRequest changeGroupQuotaRequest = null);

        /// <summary>
        /// submit change group quota request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeGroupQuotaRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid>> SubmitChangeGroupQuotaRequestAsyncWithHttpInfo (ChangeGroupQuotaRequest changeGroupQuotaRequest = null);
        /// <summary>
        /// submit change group settings request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeGroupSettingRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        System.Threading.Tasks.Task<Guid> SubmitChangeGroupSettingRequestAsync (ChangeGroupSettingRequest changeGroupSettingRequest = null);

        /// <summary>
        /// submit change group settings request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeGroupSettingRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid>> SubmitChangeGroupSettingRequestAsyncWithHttpInfo (ChangeGroupSettingRequest changeGroupSettingRequest = null);
        /// <summary>
        /// submit change list settings request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeListSettingRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        System.Threading.Tasks.Task<Guid> SubmitChangeListSettingRequestAsync (ChangeListSettingRequest changeListSettingRequest = null);

        /// <summary>
        /// submit change list settings request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeListSettingRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid>> SubmitChangeListSettingRequestAsyncWithHttpInfo (ChangeListSettingRequest changeListSettingRequest = null);
        /// <summary>
        /// submit change permission request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changePermissionRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        System.Threading.Tasks.Task<Guid> SubmitChangePermissionRequestAsync (ChangePermissionRequest changePermissionRequest = null);

        /// <summary>
        /// submit change permission request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changePermissionRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid>> SubmitChangePermissionRequestAsyncWithHttpInfo (ChangePermissionRequest changePermissionRequest = null);
        /// <summary>
        /// submit change site administrator or contact request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeSiteContactRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        System.Threading.Tasks.Task<Guid> SubmitChangeSiteContactRequestAsync (ChangeSiteContactRequest changeSiteContactRequest = null);

        /// <summary>
        /// submit change site administrator or contact request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeSiteContactRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid>> SubmitChangeSiteContactRequestAsyncWithHttpInfo (ChangeSiteContactRequest changeSiteContactRequest = null);
        /// <summary>
        /// submit change site policy request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeSitePolicyRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        System.Threading.Tasks.Task<Guid> SubmitChangeSitePolicyRequestAsync (ChangeSitePolicyRequest changeSitePolicyRequest = null);

        /// <summary>
        /// submit change site policy request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeSitePolicyRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid>> SubmitChangeSitePolicyRequestAsyncWithHttpInfo (ChangeSitePolicyRequest changeSitePolicyRequest = null);
        /// <summary>
        /// submit change site quota request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeSiteQuotaRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        System.Threading.Tasks.Task<Guid> SubmitChangeSiteQuotaRequestAsync (ChangeSiteQuotaRequest changeSiteQuotaRequest = null);

        /// <summary>
        /// submit change site quota request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeSiteQuotaRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid>> SubmitChangeSiteQuotaRequestAsyncWithHttpInfo (ChangeSiteQuotaRequest changeSiteQuotaRequest = null);
        /// <summary>
        /// submit change site settings request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeSiteSettingRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        System.Threading.Tasks.Task<Guid> SubmitChangeSiteSettingRequestAsync (ChangeSiteSettingRequest changeSiteSettingRequest = null);

        /// <summary>
        /// submit change site settings request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeSiteSettingRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid>> SubmitChangeSiteSettingRequestAsyncWithHttpInfo (ChangeSiteSettingRequest changeSiteSettingRequest = null);
        /// <summary>
        /// submit change web contact request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeWebContactRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        System.Threading.Tasks.Task<Guid> SubmitChangeWebContactRequestAsync (ChangeWebContactRequest changeWebContactRequest = null);

        /// <summary>
        /// submit change web contact request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeWebContactRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid>> SubmitChangeWebContactRequestAsyncWithHttpInfo (ChangeWebContactRequest changeWebContactRequest = null);
        /// <summary>
        /// submit change web settings request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeWebSettingRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        System.Threading.Tasks.Task<Guid> SubmitChangeWebSettingRequestAsync (ChangeWebSettingRequest changeWebSettingRequest = null);

        /// <summary>
        /// submit change web settings request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeWebSettingRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid>> SubmitChangeWebSettingRequestAsyncWithHttpInfo (ChangeWebSettingRequest changeWebSettingRequest = null);
        /// <summary>
        /// get clone permission request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clonePermissionRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        System.Threading.Tasks.Task<Guid> SubmitClonePermissionRequestAsync (ClonePermissionRequest clonePermissionRequest = null);

        /// <summary>
        /// get clone permission request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clonePermissionRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid>> SubmitClonePermissionRequestAsyncWithHttpInfo (ClonePermissionRequest clonePermissionRequest = null);
        /// <summary>
        /// submit create content move request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentMoveRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        System.Threading.Tasks.Task<Guid> SubmitContentMoveRequestAsync (ContentMoveRequest contentMoveRequest = null);

        /// <summary>
        /// submit create content move request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentMoveRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid>> SubmitContentMoveRequestAsyncWithHttpInfo (ContentMoveRequest contentMoveRequest = null);
        /// <summary>
        /// submit create group request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGroupRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        System.Threading.Tasks.Task<Guid> SubmitCreateGroupRequestAsync (CreateGroupRequest createGroupRequest = null);

        /// <summary>
        /// submit create group request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGroupRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid>> SubmitCreateGroupRequestAsyncWithHttpInfo (CreateGroupRequest createGroupRequest = null);
        /// <summary>
        /// submit create list request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        System.Threading.Tasks.Task<Guid> SubmitCreateListRequestAsync (CreateListRequest createListRequest = null);

        /// <summary>
        /// submit create list request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid>> SubmitCreateListRequestAsyncWithHttpInfo (CreateListRequest createListRequest = null);
        /// <summary>
        /// submit create site request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSiteRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        System.Threading.Tasks.Task<Guid> SubmitCreateSiteRequestAsync (CreateSiteRequest createSiteRequest = null);

        /// <summary>
        /// submit create site request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSiteRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid>> SubmitCreateSiteRequestAsyncWithHttpInfo (CreateSiteRequest createSiteRequest = null);
        /// <summary>
        /// submit create web request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        System.Threading.Tasks.Task<Guid> SubmitCreateWebRequestAsync (CreateWebRequest createWebRequest = null);

        /// <summary>
        /// submit create web request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid>> SubmitCreateWebRequestAsyncWithHttpInfo (CreateWebRequest createWebRequest = null);
        /// <summary>
        /// submit custom service request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        System.Threading.Tasks.Task<Guid> SubmitCustomRequestAsync (ApiRequest apiRequest = null);

        /// <summary>
        /// submit custom service request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid>> SubmitCustomRequestAsyncWithHttpInfo (ApiRequest apiRequest = null);
        /// <summary>
        /// submit delete group request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteGroupRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        System.Threading.Tasks.Task<Guid> SubmitDeleteGroupRequestAsync (DeleteGroupRequest deleteGroupRequest = null);

        /// <summary>
        /// submit delete group request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteGroupRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid>> SubmitDeleteGroupRequestAsyncWithHttpInfo (DeleteGroupRequest deleteGroupRequest = null);
        /// <summary>
        /// submit delete site request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteSiteRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        System.Threading.Tasks.Task<Guid> SubmitDeleteSiteRequestAsync (DeleteSiteRequest deleteSiteRequest = null);

        /// <summary>
        /// submit delete site request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteSiteRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid>> SubmitDeleteSiteRequestAsyncWithHttpInfo (DeleteSiteRequest deleteSiteRequest = null);
        /// <summary>
        /// submit delete web request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteWebLifecycleRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        System.Threading.Tasks.Task<Guid> SubmitDeleteWebRequestAsync (DeleteWebLifecycleRequest deleteWebLifecycleRequest = null);

        /// <summary>
        /// submit delete web request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteWebLifecycleRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid>> SubmitDeleteWebRequestAsyncWithHttpInfo (DeleteWebLifecycleRequest deleteWebLifecycleRequest = null);
        /// <summary>
        /// submit extend group request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extendGroupRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        System.Threading.Tasks.Task<Guid> SubmitExtendGroupRequestAsync (ExtendGroupRequest extendGroupRequest = null);

        /// <summary>
        /// submit extend group request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extendGroupRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid>> SubmitExtendGroupRequestAsyncWithHttpInfo (ExtendGroupRequest extendGroupRequest = null);
        /// <summary>
        /// submit extend site request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extendSiteRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        System.Threading.Tasks.Task<Guid> SubmitExtendSiteRequestAsync (ExtendSiteRequest extendSiteRequest = null);

        /// <summary>
        /// submit extend site request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extendSiteRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid>> SubmitExtendSiteRequestAsyncWithHttpInfo (ExtendSiteRequest extendSiteRequest = null);
        /// <summary>
        /// get submit grant permission request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantPermissionRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        System.Threading.Tasks.Task<Guid> SubmitGrantPermissionRequestAsync (GrantPermissionRequest grantPermissionRequest = null);

        /// <summary>
        /// get submit grant permission request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantPermissionRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid>> SubmitGrantPermissionRequestAsyncWithHttpInfo (GrantPermissionRequest grantPermissionRequest = null);
        /// <summary>
        /// submit lock site request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lockSiteRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        System.Threading.Tasks.Task<Guid> SubmitLockSiteRequestAsync (LockSiteRequest lockSiteRequest = null);

        /// <summary>
        /// submit lock site request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lockSiteRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid>> SubmitLockSiteRequestAsyncWithHttpInfo (LockSiteRequest lockSiteRequest = null);
        /// <summary>
        /// submit manage permission request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="managePermissionRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        System.Threading.Tasks.Task<Guid> SubmitManagePermimssionRequestAsync (ManagePermissionRequest managePermissionRequest = null);

        /// <summary>
        /// submit manage permission request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="managePermissionRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid>> SubmitManagePermimssionRequestAsyncWithHttpInfo (ManagePermissionRequest managePermissionRequest = null);
        /// <summary>
        /// submit restore group request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="restoreGroupRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        System.Threading.Tasks.Task<Guid> SubmitRestoreGroupRequestAsync (RestoreGroupRequest restoreGroupRequest = null);

        /// <summary>
        /// submit restore group request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="restoreGroupRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid>> SubmitRestoreGroupRequestAsyncWithHttpInfo (RestoreGroupRequest restoreGroupRequest = null);
        /// <summary>
        /// submit unlock site request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unlockSiteRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        System.Threading.Tasks.Task<Guid> SubmitUnlockSiteRequestAsync (UnlockSiteRequest unlockSiteRequest = null);

        /// <summary>
        /// submit unlock site request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unlockSiteRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid>> SubmitUnlockSiteRequestAsyncWithHttpInfo (UnlockSiteRequest unlockSiteRequest = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRequestsApi : IRequestsApiSync, IRequestsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RequestsApi : IRequestsApi
    {
        private Cloud.Governance.NewSdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RequestsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RequestsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RequestsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RequestsApi(String basePath)
        {
            this.Configuration = Cloud.Governance.NewSdk.Client.Configuration.MergeConfigurations(
                Cloud.Governance.NewSdk.Client.GlobalConfiguration.Instance,
                new Cloud.Governance.NewSdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Cloud.Governance.NewSdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Cloud.Governance.NewSdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Cloud.Governance.NewSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RequestsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RequestsApi(Cloud.Governance.NewSdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Cloud.Governance.NewSdk.Client.Configuration.MergeConfigurations(
                Cloud.Governance.NewSdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Cloud.Governance.NewSdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Cloud.Governance.NewSdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Cloud.Governance.NewSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RequestsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RequestsApi(Cloud.Governance.NewSdk.Client.ISynchronousClient client,Cloud.Governance.NewSdk.Client.IAsynchronousClient asyncClient, Cloud.Governance.NewSdk.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Cloud.Governance.NewSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Cloud.Governance.NewSdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Cloud.Governance.NewSdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Cloud.Governance.NewSdk.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Cloud.Governance.NewSdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// cancel request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void CancelRequest (Guid id)
        {
             CancelRequestWithHttpInfo(id);
        }

        /// <summary>
        /// cancel request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> CancelRequestWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->CancelRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get<Object>("/requests/{id}/cancel", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CancelRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// cancel request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CancelRequestAsync (Guid id)
        {
             await CancelRequestAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// cancel request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> CancelRequestAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->CancelRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<Object>("/requests/{id}/cancel", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CancelRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get archive group request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ArchiveGroupRequest</returns>
        public ArchiveGroupRequest GetArchiveGroupRequest (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ArchiveGroupRequest> localVarResponse = GetArchiveGroupRequestWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get archive group request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ArchiveGroupRequest</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< ArchiveGroupRequest > GetArchiveGroupRequestWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetArchiveGroupRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< ArchiveGroupRequest >("/requests/archivegroup/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetArchiveGroupRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get archive group request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ArchiveGroupRequest</returns>
        public async System.Threading.Tasks.Task<ArchiveGroupRequest> GetArchiveGroupRequestAsync (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ArchiveGroupRequest> localVarResponse = await GetArchiveGroupRequestAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get archive group request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ArchiveGroupRequest)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<ArchiveGroupRequest>> GetArchiveGroupRequestAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetArchiveGroupRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ArchiveGroupRequest>("/requests/archivegroup/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetArchiveGroupRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get archive site request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ArchiveSiteRequest</returns>
        public ArchiveSiteRequest GetArchiveSiteRequest (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ArchiveSiteRequest> localVarResponse = GetArchiveSiteRequestWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get archive site request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ArchiveSiteRequest</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< ArchiveSiteRequest > GetArchiveSiteRequestWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetArchiveSiteRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< ArchiveSiteRequest >("/requests/archivesite/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetArchiveSiteRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get archive site request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ArchiveSiteRequest</returns>
        public async System.Threading.Tasks.Task<ArchiveSiteRequest> GetArchiveSiteRequestAsync (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ArchiveSiteRequest> localVarResponse = await GetArchiveSiteRequestAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get archive site request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ArchiveSiteRequest)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<ArchiveSiteRequest>> GetArchiveSiteRequestAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetArchiveSiteRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ArchiveSiteRequest>("/requests/archivesite/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetArchiveSiteRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get archive web request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ArchiveWebLifecycleRequest</returns>
        public ArchiveWebLifecycleRequest GetArchiveWebRequest (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ArchiveWebLifecycleRequest> localVarResponse = GetArchiveWebRequestWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get archive web request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ArchiveWebLifecycleRequest</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< ArchiveWebLifecycleRequest > GetArchiveWebRequestWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetArchiveWebRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< ArchiveWebLifecycleRequest >("/requests/archiveweb/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetArchiveWebRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get archive web request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ArchiveWebLifecycleRequest</returns>
        public async System.Threading.Tasks.Task<ArchiveWebLifecycleRequest> GetArchiveWebRequestAsync (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ArchiveWebLifecycleRequest> localVarResponse = await GetArchiveWebRequestAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get archive web request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ArchiveWebLifecycleRequest)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<ArchiveWebLifecycleRequest>> GetArchiveWebRequestAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetArchiveWebRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ArchiveWebLifecycleRequest>("/requests/archiveweb/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetArchiveWebRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get change group policy request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ChangeGroupPolicyRequest</returns>
        public ChangeGroupPolicyRequest GetChagneGroupPolicyRequest (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ChangeGroupPolicyRequest> localVarResponse = GetChagneGroupPolicyRequestWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get change group policy request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ChangeGroupPolicyRequest</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< ChangeGroupPolicyRequest > GetChagneGroupPolicyRequestWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetChagneGroupPolicyRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< ChangeGroupPolicyRequest >("/requests/changegrouppolicy/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChagneGroupPolicyRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get change group policy request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ChangeGroupPolicyRequest</returns>
        public async System.Threading.Tasks.Task<ChangeGroupPolicyRequest> GetChagneGroupPolicyRequestAsync (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ChangeGroupPolicyRequest> localVarResponse = await GetChagneGroupPolicyRequestAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get change group policy request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ChangeGroupPolicyRequest)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<ChangeGroupPolicyRequest>> GetChagneGroupPolicyRequestAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetChagneGroupPolicyRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ChangeGroupPolicyRequest>("/requests/changegrouppolicy/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChagneGroupPolicyRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get change group quota request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ChangeGroupQuotaRequest</returns>
        public ChangeGroupQuotaRequest GetChangeGroupQuotaRequest (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ChangeGroupQuotaRequest> localVarResponse = GetChangeGroupQuotaRequestWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get change group quota request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ChangeGroupQuotaRequest</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< ChangeGroupQuotaRequest > GetChangeGroupQuotaRequestWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetChangeGroupQuotaRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< ChangeGroupQuotaRequest >("/requests/changegroupquota/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChangeGroupQuotaRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get change group quota request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ChangeGroupQuotaRequest</returns>
        public async System.Threading.Tasks.Task<ChangeGroupQuotaRequest> GetChangeGroupQuotaRequestAsync (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ChangeGroupQuotaRequest> localVarResponse = await GetChangeGroupQuotaRequestAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get change group quota request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ChangeGroupQuotaRequest)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<ChangeGroupQuotaRequest>> GetChangeGroupQuotaRequestAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetChangeGroupQuotaRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ChangeGroupQuotaRequest>("/requests/changegroupquota/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChangeGroupQuotaRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get change group settings request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ChangeGroupSettingRequest</returns>
        public ChangeGroupSettingRequest GetChangeGroupSettingRequest (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ChangeGroupSettingRequest> localVarResponse = GetChangeGroupSettingRequestWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get change group settings request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ChangeGroupSettingRequest</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< ChangeGroupSettingRequest > GetChangeGroupSettingRequestWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetChangeGroupSettingRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< ChangeGroupSettingRequest >("/requests/changegroup/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChangeGroupSettingRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get change group settings request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ChangeGroupSettingRequest</returns>
        public async System.Threading.Tasks.Task<ChangeGroupSettingRequest> GetChangeGroupSettingRequestAsync (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ChangeGroupSettingRequest> localVarResponse = await GetChangeGroupSettingRequestAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get change group settings request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ChangeGroupSettingRequest)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<ChangeGroupSettingRequest>> GetChangeGroupSettingRequestAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetChangeGroupSettingRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ChangeGroupSettingRequest>("/requests/changegroup/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChangeGroupSettingRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get change list settings request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ChangeListSettingRequest</returns>
        public ChangeListSettingRequest GetChangeListSettingRequest (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ChangeListSettingRequest> localVarResponse = GetChangeListSettingRequestWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get change list settings request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ChangeListSettingRequest</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< ChangeListSettingRequest > GetChangeListSettingRequestWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetChangeListSettingRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< ChangeListSettingRequest >("/requests/changelistsetting/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChangeListSettingRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get change list settings request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ChangeListSettingRequest</returns>
        public async System.Threading.Tasks.Task<ChangeListSettingRequest> GetChangeListSettingRequestAsync (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ChangeListSettingRequest> localVarResponse = await GetChangeListSettingRequestAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get change list settings request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ChangeListSettingRequest)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<ChangeListSettingRequest>> GetChangeListSettingRequestAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetChangeListSettingRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ChangeListSettingRequest>("/requests/changelistsetting/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChangeListSettingRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get change permission request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ChangePermissionRequest</returns>
        public ChangePermissionRequest GetChangePermissionRequest (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ChangePermissionRequest> localVarResponse = GetChangePermissionRequestWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get change permission request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ChangePermissionRequest</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< ChangePermissionRequest > GetChangePermissionRequestWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetChangePermissionRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< ChangePermissionRequest >("/requests/changepermission/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChangePermissionRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get change permission request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ChangePermissionRequest</returns>
        public async System.Threading.Tasks.Task<ChangePermissionRequest> GetChangePermissionRequestAsync (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ChangePermissionRequest> localVarResponse = await GetChangePermissionRequestAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get change permission request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ChangePermissionRequest)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<ChangePermissionRequest>> GetChangePermissionRequestAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetChangePermissionRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ChangePermissionRequest>("/requests/changepermission/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChangePermissionRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get change site administrator or contact request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ChangeSiteContactRequest</returns>
        public ChangeSiteContactRequest GetChangeSiteContactRequest (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ChangeSiteContactRequest> localVarResponse = GetChangeSiteContactRequestWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get change site administrator or contact request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ChangeSiteContactRequest</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< ChangeSiteContactRequest > GetChangeSiteContactRequestWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetChangeSiteContactRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< ChangeSiteContactRequest >("/requests/changesite/adminorcontact/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChangeSiteContactRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get change site administrator or contact request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ChangeSiteContactRequest</returns>
        public async System.Threading.Tasks.Task<ChangeSiteContactRequest> GetChangeSiteContactRequestAsync (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ChangeSiteContactRequest> localVarResponse = await GetChangeSiteContactRequestAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get change site administrator or contact request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ChangeSiteContactRequest)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<ChangeSiteContactRequest>> GetChangeSiteContactRequestAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetChangeSiteContactRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ChangeSiteContactRequest>("/requests/changesite/adminorcontact/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChangeSiteContactRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get change site policy request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ChangeSitePolicyRequest</returns>
        public ChangeSitePolicyRequest GetChangeSitePolicyRequest (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ChangeSitePolicyRequest> localVarResponse = GetChangeSitePolicyRequestWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get change site policy request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ChangeSitePolicyRequest</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< ChangeSitePolicyRequest > GetChangeSitePolicyRequestWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetChangeSitePolicyRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< ChangeSitePolicyRequest >("/requests/changesitepolicy/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChangeSitePolicyRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get change site policy request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ChangeSitePolicyRequest</returns>
        public async System.Threading.Tasks.Task<ChangeSitePolicyRequest> GetChangeSitePolicyRequestAsync (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ChangeSitePolicyRequest> localVarResponse = await GetChangeSitePolicyRequestAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get change site policy request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ChangeSitePolicyRequest)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<ChangeSitePolicyRequest>> GetChangeSitePolicyRequestAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetChangeSitePolicyRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ChangeSitePolicyRequest>("/requests/changesitepolicy/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChangeSitePolicyRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get change site quota request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ChangeSiteQuotaRequest</returns>
        public ChangeSiteQuotaRequest GetChangeSiteQuotaRequest (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ChangeSiteQuotaRequest> localVarResponse = GetChangeSiteQuotaRequestWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get change site quota request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ChangeSiteQuotaRequest</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< ChangeSiteQuotaRequest > GetChangeSiteQuotaRequestWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetChangeSiteQuotaRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< ChangeSiteQuotaRequest >("/requests/changesitequota/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChangeSiteQuotaRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get change site quota request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ChangeSiteQuotaRequest</returns>
        public async System.Threading.Tasks.Task<ChangeSiteQuotaRequest> GetChangeSiteQuotaRequestAsync (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ChangeSiteQuotaRequest> localVarResponse = await GetChangeSiteQuotaRequestAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get change site quota request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ChangeSiteQuotaRequest)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<ChangeSiteQuotaRequest>> GetChangeSiteQuotaRequestAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetChangeSiteQuotaRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ChangeSiteQuotaRequest>("/requests/changesitequota/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChangeSiteQuotaRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get change site settings request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ChangeSiteSettingRequest</returns>
        public ChangeSiteSettingRequest GetChangeSiteSettingRequest (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ChangeSiteSettingRequest> localVarResponse = GetChangeSiteSettingRequestWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get change site settings request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ChangeSiteSettingRequest</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< ChangeSiteSettingRequest > GetChangeSiteSettingRequestWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetChangeSiteSettingRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< ChangeSiteSettingRequest >("/requests/changesite/setting/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChangeSiteSettingRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get change site settings request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ChangeSiteSettingRequest</returns>
        public async System.Threading.Tasks.Task<ChangeSiteSettingRequest> GetChangeSiteSettingRequestAsync (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ChangeSiteSettingRequest> localVarResponse = await GetChangeSiteSettingRequestAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get change site settings request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ChangeSiteSettingRequest)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<ChangeSiteSettingRequest>> GetChangeSiteSettingRequestAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetChangeSiteSettingRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ChangeSiteSettingRequest>("/requests/changesite/setting/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChangeSiteSettingRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get change web contact request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ChangeWebContactRequest</returns>
        public ChangeWebContactRequest GetChangeWebContactRequest (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ChangeWebContactRequest> localVarResponse = GetChangeWebContactRequestWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get change web contact request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ChangeWebContactRequest</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< ChangeWebContactRequest > GetChangeWebContactRequestWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetChangeWebContactRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< ChangeWebContactRequest >("/requests/changewebcontact/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChangeWebContactRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get change web contact request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ChangeWebContactRequest</returns>
        public async System.Threading.Tasks.Task<ChangeWebContactRequest> GetChangeWebContactRequestAsync (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ChangeWebContactRequest> localVarResponse = await GetChangeWebContactRequestAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get change web contact request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ChangeWebContactRequest)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<ChangeWebContactRequest>> GetChangeWebContactRequestAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetChangeWebContactRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ChangeWebContactRequest>("/requests/changewebcontact/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChangeWebContactRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get change web settings request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ChangeWebSettingRequest</returns>
        public ChangeWebSettingRequest GetChangeWebSettingRequest (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ChangeWebSettingRequest> localVarResponse = GetChangeWebSettingRequestWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get change web settings request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ChangeWebSettingRequest</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< ChangeWebSettingRequest > GetChangeWebSettingRequestWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetChangeWebSettingRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< ChangeWebSettingRequest >("/requests/changewebsettings/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChangeWebSettingRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get change web settings request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ChangeWebSettingRequest</returns>
        public async System.Threading.Tasks.Task<ChangeWebSettingRequest> GetChangeWebSettingRequestAsync (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ChangeWebSettingRequest> localVarResponse = await GetChangeWebSettingRequestAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get change web settings request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ChangeWebSettingRequest)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<ChangeWebSettingRequest>> GetChangeWebSettingRequestAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetChangeWebSettingRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ChangeWebSettingRequest>("/requests/changewebsettings/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChangeWebSettingRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get changed permission items 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PermissionChangedActionItemPageResult</returns>
        public PermissionChangedActionItemPageResult GetChangedPermissionItems (Guid id, string filter = null, string orderby = null, Object body = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<PermissionChangedActionItemPageResult> localVarResponse = GetChangedPermissionItemsWithHttpInfo(id, filter, orderby, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get changed permission items 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PermissionChangedActionItemPageResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< PermissionChangedActionItemPageResult > GetChangedPermissionItemsWithHttpInfo (Guid id, string filter = null, string orderby = null, Object body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetChangedPermissionItems");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (orderby != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = body;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< PermissionChangedActionItemPageResult >("/requests/changepermission/{id}/result", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChangedPermissionItems", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get changed permission items 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of PermissionChangedActionItemPageResult</returns>
        public async System.Threading.Tasks.Task<PermissionChangedActionItemPageResult> GetChangedPermissionItemsAsync (Guid id, string filter = null, string orderby = null, Object body = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<PermissionChangedActionItemPageResult> localVarResponse = await GetChangedPermissionItemsAsyncWithHttpInfo(id, filter, orderby, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get changed permission items 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (PermissionChangedActionItemPageResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<PermissionChangedActionItemPageResult>> GetChangedPermissionItemsAsyncWithHttpInfo (Guid id, string filter = null, string orderby = null, Object body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetChangedPermissionItems");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (orderby != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = body;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<PermissionChangedActionItemPageResult>("/requests/changepermission/{id}/result", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChangedPermissionItems", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get clone permission request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ClonePermissionRequest</returns>
        public ClonePermissionRequest GetClonePermissionRequest (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ClonePermissionRequest> localVarResponse = GetClonePermissionRequestWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get clone permission request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ClonePermissionRequest</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< ClonePermissionRequest > GetClonePermissionRequestWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetClonePermissionRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< ClonePermissionRequest >("/requests/clonepermission/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetClonePermissionRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get clone permission request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ClonePermissionRequest</returns>
        public async System.Threading.Tasks.Task<ClonePermissionRequest> GetClonePermissionRequestAsync (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ClonePermissionRequest> localVarResponse = await GetClonePermissionRequestAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get clone permission request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ClonePermissionRequest)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<ClonePermissionRequest>> GetClonePermissionRequestAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetClonePermissionRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ClonePermissionRequest>("/requests/clonepermission/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetClonePermissionRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get content move request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ContentMoveRequest</returns>
        public ContentMoveRequest GetContentMoveRequest (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ContentMoveRequest> localVarResponse = GetContentMoveRequestWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get content move request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ContentMoveRequest</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< ContentMoveRequest > GetContentMoveRequestWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetContentMoveRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< ContentMoveRequest >("/requests/contentmove/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetContentMoveRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get content move request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ContentMoveRequest</returns>
        public async System.Threading.Tasks.Task<ContentMoveRequest> GetContentMoveRequestAsync (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ContentMoveRequest> localVarResponse = await GetContentMoveRequestAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get content move request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ContentMoveRequest)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<ContentMoveRequest>> GetContentMoveRequestAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetContentMoveRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ContentMoveRequest>("/requests/contentmove/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetContentMoveRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get create group request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>CreateGroupRequest</returns>
        public CreateGroupRequest GetCreateGroupRequest (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<CreateGroupRequest> localVarResponse = GetCreateGroupRequestWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get create group request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of CreateGroupRequest</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< CreateGroupRequest > GetCreateGroupRequestWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetCreateGroupRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< CreateGroupRequest >("/requests/creategroup/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetCreateGroupRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get create group request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of CreateGroupRequest</returns>
        public async System.Threading.Tasks.Task<CreateGroupRequest> GetCreateGroupRequestAsync (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<CreateGroupRequest> localVarResponse = await GetCreateGroupRequestAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get create group request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (CreateGroupRequest)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<CreateGroupRequest>> GetCreateGroupRequestAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetCreateGroupRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<CreateGroupRequest>("/requests/creategroup/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetCreateGroupRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get create list request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>CreateListRequest</returns>
        public CreateListRequest GetCreateListRequest (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<CreateListRequest> localVarResponse = GetCreateListRequestWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get create list request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of CreateListRequest</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< CreateListRequest > GetCreateListRequestWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetCreateListRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< CreateListRequest >("/requests/createlist/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetCreateListRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get create list request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of CreateListRequest</returns>
        public async System.Threading.Tasks.Task<CreateListRequest> GetCreateListRequestAsync (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<CreateListRequest> localVarResponse = await GetCreateListRequestAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get create list request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (CreateListRequest)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<CreateListRequest>> GetCreateListRequestAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetCreateListRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<CreateListRequest>("/requests/createlist/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetCreateListRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get create site request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>CreateSiteRequest</returns>
        public CreateSiteRequest GetCreateSiteRequest (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<CreateSiteRequest> localVarResponse = GetCreateSiteRequestWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get create site request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of CreateSiteRequest</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< CreateSiteRequest > GetCreateSiteRequestWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetCreateSiteRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< CreateSiteRequest >("/requests/createsite/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetCreateSiteRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get create site request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of CreateSiteRequest</returns>
        public async System.Threading.Tasks.Task<CreateSiteRequest> GetCreateSiteRequestAsync (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<CreateSiteRequest> localVarResponse = await GetCreateSiteRequestAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get create site request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (CreateSiteRequest)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<CreateSiteRequest>> GetCreateSiteRequestAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetCreateSiteRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<CreateSiteRequest>("/requests/createsite/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetCreateSiteRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get create web request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>CreateWebRequest</returns>
        public CreateWebRequest GetCreateWebRequest (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<CreateWebRequest> localVarResponse = GetCreateWebRequestWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get create web request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of CreateWebRequest</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< CreateWebRequest > GetCreateWebRequestWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetCreateWebRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< CreateWebRequest >("/requests/createweb/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetCreateWebRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get create web request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of CreateWebRequest</returns>
        public async System.Threading.Tasks.Task<CreateWebRequest> GetCreateWebRequestAsync (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<CreateWebRequest> localVarResponse = await GetCreateWebRequestAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get create web request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (CreateWebRequest)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<CreateWebRequest>> GetCreateWebRequestAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetCreateWebRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<CreateWebRequest>("/requests/createweb/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetCreateWebRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get custom service request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiRequest</returns>
        public ApiRequest GetCustomRequest (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ApiRequest> localVarResponse = GetCustomRequestWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get custom service request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ApiRequest</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< ApiRequest > GetCustomRequestWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetCustomRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< ApiRequest >("/requests/custom/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetCustomRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get custom service request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiRequest</returns>
        public async System.Threading.Tasks.Task<ApiRequest> GetCustomRequestAsync (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ApiRequest> localVarResponse = await GetCustomRequestAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get custom service request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ApiRequest)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<ApiRequest>> GetCustomRequestAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetCustomRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ApiRequest>("/requests/custom/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetCustomRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get delete group request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>DeleteGroupRequest</returns>
        public DeleteGroupRequest GetDeleteGroupRequest (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<DeleteGroupRequest> localVarResponse = GetDeleteGroupRequestWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get delete group request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of DeleteGroupRequest</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< DeleteGroupRequest > GetDeleteGroupRequestWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetDeleteGroupRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< DeleteGroupRequest >("/requests/deletegroup/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetDeleteGroupRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get delete group request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of DeleteGroupRequest</returns>
        public async System.Threading.Tasks.Task<DeleteGroupRequest> GetDeleteGroupRequestAsync (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<DeleteGroupRequest> localVarResponse = await GetDeleteGroupRequestAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get delete group request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (DeleteGroupRequest)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<DeleteGroupRequest>> GetDeleteGroupRequestAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetDeleteGroupRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<DeleteGroupRequest>("/requests/deletegroup/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetDeleteGroupRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get delete site request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>DeleteSiteRequest</returns>
        public DeleteSiteRequest GetDeleteSiteRequest (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<DeleteSiteRequest> localVarResponse = GetDeleteSiteRequestWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get delete site request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of DeleteSiteRequest</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< DeleteSiteRequest > GetDeleteSiteRequestWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetDeleteSiteRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< DeleteSiteRequest >("/requests/deletesite/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetDeleteSiteRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get delete site request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of DeleteSiteRequest</returns>
        public async System.Threading.Tasks.Task<DeleteSiteRequest> GetDeleteSiteRequestAsync (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<DeleteSiteRequest> localVarResponse = await GetDeleteSiteRequestAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get delete site request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (DeleteSiteRequest)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<DeleteSiteRequest>> GetDeleteSiteRequestAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetDeleteSiteRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<DeleteSiteRequest>("/requests/deletesite/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetDeleteSiteRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get delete web request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>DeleteWebLifecycleRequest</returns>
        public DeleteWebLifecycleRequest GetDeleteWebRequest (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<DeleteWebLifecycleRequest> localVarResponse = GetDeleteWebRequestWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get delete web request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of DeleteWebLifecycleRequest</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< DeleteWebLifecycleRequest > GetDeleteWebRequestWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetDeleteWebRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< DeleteWebLifecycleRequest >("/requests/deleteweb/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetDeleteWebRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get delete web request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of DeleteWebLifecycleRequest</returns>
        public async System.Threading.Tasks.Task<DeleteWebLifecycleRequest> GetDeleteWebRequestAsync (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<DeleteWebLifecycleRequest> localVarResponse = await GetDeleteWebRequestAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get delete web request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (DeleteWebLifecycleRequest)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<DeleteWebLifecycleRequest>> GetDeleteWebRequestAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetDeleteWebRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<DeleteWebLifecycleRequest>("/requests/deleteweb/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetDeleteWebRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get extend group request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ExtendGroupRequest</returns>
        public ExtendGroupRequest GetExtendGroupRequest (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ExtendGroupRequest> localVarResponse = GetExtendGroupRequestWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get extend group request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ExtendGroupRequest</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< ExtendGroupRequest > GetExtendGroupRequestWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetExtendGroupRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< ExtendGroupRequest >("/requests/extendgroup/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetExtendGroupRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get extend group request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ExtendGroupRequest</returns>
        public async System.Threading.Tasks.Task<ExtendGroupRequest> GetExtendGroupRequestAsync (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ExtendGroupRequest> localVarResponse = await GetExtendGroupRequestAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get extend group request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ExtendGroupRequest)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<ExtendGroupRequest>> GetExtendGroupRequestAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetExtendGroupRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ExtendGroupRequest>("/requests/extendgroup/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetExtendGroupRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get extend site request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ExtendSiteRequest</returns>
        public ExtendSiteRequest GetExtendSiteRequest (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ExtendSiteRequest> localVarResponse = GetExtendSiteRequestWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get extend site request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ExtendSiteRequest</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< ExtendSiteRequest > GetExtendSiteRequestWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetExtendSiteRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< ExtendSiteRequest >("/requests/extendsite/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetExtendSiteRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get extend site request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ExtendSiteRequest</returns>
        public async System.Threading.Tasks.Task<ExtendSiteRequest> GetExtendSiteRequestAsync (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ExtendSiteRequest> localVarResponse = await GetExtendSiteRequestAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get extend site request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ExtendSiteRequest)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<ExtendSiteRequest>> GetExtendSiteRequestAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetExtendSiteRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ExtendSiteRequest>("/requests/extendsite/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetExtendSiteRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get grant permission request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>GrantPermissionRequest</returns>
        public GrantPermissionRequest GetGrantPermissionRequest (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<GrantPermissionRequest> localVarResponse = GetGrantPermissionRequestWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get grant permission request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of GrantPermissionRequest</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< GrantPermissionRequest > GetGrantPermissionRequestWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetGrantPermissionRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< GrantPermissionRequest >("/requests/grantpermission/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetGrantPermissionRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get grant permission request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of GrantPermissionRequest</returns>
        public async System.Threading.Tasks.Task<GrantPermissionRequest> GetGrantPermissionRequestAsync (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<GrantPermissionRequest> localVarResponse = await GetGrantPermissionRequestAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get grant permission request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (GrantPermissionRequest)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<GrantPermissionRequest>> GetGrantPermissionRequestAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetGrantPermissionRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<GrantPermissionRequest>("/requests/grantpermission/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetGrantPermissionRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get inherited sites for change permissin request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>List&lt;SecuritySearchResult&gt;</returns>
        public List<SecuritySearchResult> GetInheritedSitesForChangePermission (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<List<SecuritySearchResult>> localVarResponse = GetInheritedSitesForChangePermissionWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get inherited sites for change permissin request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of List&lt;SecuritySearchResult&gt;</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< List<SecuritySearchResult> > GetInheritedSitesForChangePermissionWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetInheritedSitesForChangePermission");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< List<SecuritySearchResult> >("/requests/changepermission/{id}/inheritedsites", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetInheritedSitesForChangePermission", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get inherited sites for change permissin request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of List&lt;SecuritySearchResult&gt;</returns>
        public async System.Threading.Tasks.Task<List<SecuritySearchResult>> GetInheritedSitesForChangePermissionAsync (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<List<SecuritySearchResult>> localVarResponse = await GetInheritedSitesForChangePermissionAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get inherited sites for change permissin request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (List&lt;SecuritySearchResult&gt;)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<List<SecuritySearchResult>>> GetInheritedSitesForChangePermissionAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetInheritedSitesForChangePermission");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<SecuritySearchResult>>("/requests/changepermission/{id}/inheritedsites", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetInheritedSitesForChangePermission", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get lock site request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>LockSiteRequest</returns>
        public LockSiteRequest GetLockSiteReuqest (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<LockSiteRequest> localVarResponse = GetLockSiteReuqestWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get lock site request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of LockSiteRequest</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< LockSiteRequest > GetLockSiteReuqestWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetLockSiteReuqest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< LockSiteRequest >("/requests/locksite/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetLockSiteReuqest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get lock site request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of LockSiteRequest</returns>
        public async System.Threading.Tasks.Task<LockSiteRequest> GetLockSiteReuqestAsync (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<LockSiteRequest> localVarResponse = await GetLockSiteReuqestAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get lock site request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (LockSiteRequest)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<LockSiteRequest>> GetLockSiteReuqestAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetLockSiteReuqest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<LockSiteRequest>("/requests/locksite/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetLockSiteReuqest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get manage permission request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ManagePermissionRequest</returns>
        public ManagePermissionRequest GetManagePermissionRequest (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ManagePermissionRequest> localVarResponse = GetManagePermissionRequestWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get manage permission request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ManagePermissionRequest</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< ManagePermissionRequest > GetManagePermissionRequestWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetManagePermissionRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< ManagePermissionRequest >("/requests/managepermission/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetManagePermissionRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get manage permission request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ManagePermissionRequest</returns>
        public async System.Threading.Tasks.Task<ManagePermissionRequest> GetManagePermissionRequestAsync (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ManagePermissionRequest> localVarResponse = await GetManagePermissionRequestAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get manage permission request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ManagePermissionRequest)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<ManagePermissionRequest>> GetManagePermissionRequestAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetManagePermissionRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ManagePermissionRequest>("/requests/managepermission/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetManagePermissionRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get my requests filters 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, serviceId, serviceName, serviceType, ticketNumber, summary, status, processStatus, modified, submitStatus, assigned, serviceAdmin, enabledCopy (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, serviceId, serviceName, serviceType, ticketNumber, summary, status, processStatus, modified, submitStatus, assigned, serviceAdmin, enabledCopy (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>DistinctPageResult</returns>
        public DistinctPageResult GetMyRequestFilters (string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<DistinctPageResult> localVarResponse = GetMyRequestFiltersWithHttpInfo(filter, distinct, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get my requests filters 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, serviceId, serviceName, serviceType, ticketNumber, summary, status, processStatus, modified, submitStatus, assigned, serviceAdmin, enabledCopy (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, serviceId, serviceName, serviceType, ticketNumber, summary, status, processStatus, modified, submitStatus, assigned, serviceAdmin, enabledCopy (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>ApiResponse of DistinctPageResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< DistinctPageResult > GetMyRequestFiltersWithHttpInfo (string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (distinct != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "distinct", distinct))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (top != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< DistinctPageResult >("/requests/my/filters", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetMyRequestFilters", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get my requests filters 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, serviceId, serviceName, serviceType, ticketNumber, summary, status, processStatus, modified, submitStatus, assigned, serviceAdmin, enabledCopy (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, serviceId, serviceName, serviceType, ticketNumber, summary, status, processStatus, modified, submitStatus, assigned, serviceAdmin, enabledCopy (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of DistinctPageResult</returns>
        public async System.Threading.Tasks.Task<DistinctPageResult> GetMyRequestFiltersAsync (string filter = null, string distinct = null, int? top = null, int? skip = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<DistinctPageResult> localVarResponse = await GetMyRequestFiltersAsyncWithHttpInfo(filter, distinct, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get my requests filters 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, serviceId, serviceName, serviceType, ticketNumber, summary, status, processStatus, modified, submitStatus, assigned, serviceAdmin, enabledCopy (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, serviceId, serviceName, serviceType, ticketNumber, summary, status, processStatus, modified, submitStatus, assigned, serviceAdmin, enabledCopy (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of ApiResponse (DistinctPageResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<DistinctPageResult>> GetMyRequestFiltersAsyncWithHttpInfo (string filter = null, string distinct = null, int? top = null, int? skip = null)
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (distinct != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "distinct", distinct))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (top != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<DistinctPageResult>("/requests/my/filters", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetMyRequestFilters", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get my requests 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, serviceId, serviceName, serviceType, ticketNumber, summary, status, processStatus, modified, submitStatus, assigned, serviceAdmin, enabledCopy (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, serviceId, serviceName, serviceType, ticketNumber, summary, status, processStatus, modified, submitStatus, assigned, serviceAdmin, enabledCopy (optional)</param>
        /// <param name="search">Search for summary (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>RequestListPageResult</returns>
        public RequestListPageResult GetMyRequests (string filter = null, string orderby = null, string search = null, int? top = null, int? skip = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<RequestListPageResult> localVarResponse = GetMyRequestsWithHttpInfo(filter, orderby, search, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get my requests 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, serviceId, serviceName, serviceType, ticketNumber, summary, status, processStatus, modified, submitStatus, assigned, serviceAdmin, enabledCopy (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, serviceId, serviceName, serviceType, ticketNumber, summary, status, processStatus, modified, submitStatus, assigned, serviceAdmin, enabledCopy (optional)</param>
        /// <param name="search">Search for summary (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>ApiResponse of RequestListPageResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< RequestListPageResult > GetMyRequestsWithHttpInfo (string filter = null, string orderby = null, string search = null, int? top = null, int? skip = null)
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (orderby != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (search != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "search", search))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (top != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< RequestListPageResult >("/requests/my", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetMyRequests", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get my requests 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, serviceId, serviceName, serviceType, ticketNumber, summary, status, processStatus, modified, submitStatus, assigned, serviceAdmin, enabledCopy (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, serviceId, serviceName, serviceType, ticketNumber, summary, status, processStatus, modified, submitStatus, assigned, serviceAdmin, enabledCopy (optional)</param>
        /// <param name="search">Search for summary (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of RequestListPageResult</returns>
        public async System.Threading.Tasks.Task<RequestListPageResult> GetMyRequestsAsync (string filter = null, string orderby = null, string search = null, int? top = null, int? skip = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<RequestListPageResult> localVarResponse = await GetMyRequestsAsyncWithHttpInfo(filter, orderby, search, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get my requests 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, serviceId, serviceName, serviceType, ticketNumber, summary, status, processStatus, modified, submitStatus, assigned, serviceAdmin, enabledCopy (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, serviceId, serviceName, serviceType, ticketNumber, summary, status, processStatus, modified, submitStatus, assigned, serviceAdmin, enabledCopy (optional)</param>
        /// <param name="search">Search for summary (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of ApiResponse (RequestListPageResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<RequestListPageResult>> GetMyRequestsAsyncWithHttpInfo (string filter = null, string orderby = null, string search = null, int? top = null, int? skip = null)
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (filter != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (orderby != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (search != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "search", search))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (top != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<RequestListPageResult>("/requests/my", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetMyRequests", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get request by id 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiRequest</returns>
        public ApiRequest GetRequestById (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ApiRequest> localVarResponse = GetRequestByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get request by id 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ApiRequest</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< ApiRequest > GetRequestByIdWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetRequestById");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< ApiRequest >("/requests/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetRequestById", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get request by id 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiRequest</returns>
        public async System.Threading.Tasks.Task<ApiRequest> GetRequestByIdAsync (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ApiRequest> localVarResponse = await GetRequestByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get request by id 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ApiRequest)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<ApiRequest>> GetRequestByIdAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetRequestById");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ApiRequest>("/requests/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetRequestById", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get restore group request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>RestoreGroupRequest</returns>
        public RestoreGroupRequest GetRestoreGroupRequest (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<RestoreGroupRequest> localVarResponse = GetRestoreGroupRequestWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get restore group request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of RestoreGroupRequest</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< RestoreGroupRequest > GetRestoreGroupRequestWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetRestoreGroupRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< RestoreGroupRequest >("/requests/restoregroup/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetRestoreGroupRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get restore group request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of RestoreGroupRequest</returns>
        public async System.Threading.Tasks.Task<RestoreGroupRequest> GetRestoreGroupRequestAsync (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<RestoreGroupRequest> localVarResponse = await GetRestoreGroupRequestAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get restore group request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (RestoreGroupRequest)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<RestoreGroupRequest>> GetRestoreGroupRequestAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetRestoreGroupRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<RestoreGroupRequest>("/requests/restoregroup/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetRestoreGroupRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get unlock site request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>UnlockSiteRequest</returns>
        public UnlockSiteRequest GetUnlockSiteRequest (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<UnlockSiteRequest> localVarResponse = GetUnlockSiteRequestWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get unlock site request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of UnlockSiteRequest</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< UnlockSiteRequest > GetUnlockSiteRequestWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetUnlockSiteRequest");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< UnlockSiteRequest >("/requests/unlocksite/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetUnlockSiteRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get unlock site request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of UnlockSiteRequest</returns>
        public async System.Threading.Tasks.Task<UnlockSiteRequest> GetUnlockSiteRequestAsync (Guid id)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<UnlockSiteRequest> localVarResponse = await GetUnlockSiteRequestAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get unlock site request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (UnlockSiteRequest)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<UnlockSiteRequest>> GetUnlockSiteRequestAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling RequestsApi->GetUnlockSiteRequest");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<UnlockSiteRequest>("/requests/unlocksite/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetUnlockSiteRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit archive group group request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archiveGroupRequest"> (optional)</param>
        /// <returns>Guid</returns>
        public Guid SubmitArchiveGroupRequest (ArchiveGroupRequest archiveGroupRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = SubmitArchiveGroupRequestWithHttpInfo(archiveGroupRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// submit archive group group request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archiveGroupRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< Guid > SubmitArchiveGroupRequestWithHttpInfo (ArchiveGroupRequest archiveGroupRequest = null)
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = archiveGroupRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post< Guid >("/requests/archivegroup", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitArchiveGroupRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit archive group group request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archiveGroupRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        public async System.Threading.Tasks.Task<Guid> SubmitArchiveGroupRequestAsync (ArchiveGroupRequest archiveGroupRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = await SubmitArchiveGroupRequestAsyncWithHttpInfo(archiveGroupRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// submit archive group group request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archiveGroupRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Guid>> SubmitArchiveGroupRequestAsyncWithHttpInfo (ArchiveGroupRequest archiveGroupRequest = null)
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = archiveGroupRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Guid>("/requests/archivegroup", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitArchiveGroupRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit archive site request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archiveSiteRequest"> (optional)</param>
        /// <returns>Guid</returns>
        public Guid SubmitArchiveSiteRequest (ArchiveSiteRequest archiveSiteRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = SubmitArchiveSiteRequestWithHttpInfo(archiveSiteRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// submit archive site request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archiveSiteRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< Guid > SubmitArchiveSiteRequestWithHttpInfo (ArchiveSiteRequest archiveSiteRequest = null)
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = archiveSiteRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post< Guid >("/requests/archivesite", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitArchiveSiteRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit archive site request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archiveSiteRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        public async System.Threading.Tasks.Task<Guid> SubmitArchiveSiteRequestAsync (ArchiveSiteRequest archiveSiteRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = await SubmitArchiveSiteRequestAsyncWithHttpInfo(archiveSiteRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// submit archive site request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archiveSiteRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Guid>> SubmitArchiveSiteRequestAsyncWithHttpInfo (ArchiveSiteRequest archiveSiteRequest = null)
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = archiveSiteRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Guid>("/requests/archivesite", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitArchiveSiteRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit archive web request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archiveWebLifecycleRequest"> (optional)</param>
        /// <returns>Guid</returns>
        public Guid SubmitArchiveWebRequest (ArchiveWebLifecycleRequest archiveWebLifecycleRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = SubmitArchiveWebRequestWithHttpInfo(archiveWebLifecycleRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// submit archive web request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archiveWebLifecycleRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< Guid > SubmitArchiveWebRequestWithHttpInfo (ArchiveWebLifecycleRequest archiveWebLifecycleRequest = null)
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = archiveWebLifecycleRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post< Guid >("/requests/archiveweb", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitArchiveWebRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit archive web request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archiveWebLifecycleRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        public async System.Threading.Tasks.Task<Guid> SubmitArchiveWebRequestAsync (ArchiveWebLifecycleRequest archiveWebLifecycleRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = await SubmitArchiveWebRequestAsyncWithHttpInfo(archiveWebLifecycleRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// submit archive web request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archiveWebLifecycleRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Guid>> SubmitArchiveWebRequestAsyncWithHttpInfo (ArchiveWebLifecycleRequest archiveWebLifecycleRequest = null)
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = archiveWebLifecycleRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Guid>("/requests/archiveweb", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitArchiveWebRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit change group policy request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeGroupPolicyRequest"> (optional)</param>
        /// <returns>Guid</returns>
        public Guid SubmitChangeGroupPolicyRequest (ChangeGroupPolicyRequest changeGroupPolicyRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = SubmitChangeGroupPolicyRequestWithHttpInfo(changeGroupPolicyRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// submit change group policy request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeGroupPolicyRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< Guid > SubmitChangeGroupPolicyRequestWithHttpInfo (ChangeGroupPolicyRequest changeGroupPolicyRequest = null)
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = changeGroupPolicyRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post< Guid >("/requests/changegrouppolicy", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitChangeGroupPolicyRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit change group policy request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeGroupPolicyRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        public async System.Threading.Tasks.Task<Guid> SubmitChangeGroupPolicyRequestAsync (ChangeGroupPolicyRequest changeGroupPolicyRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = await SubmitChangeGroupPolicyRequestAsyncWithHttpInfo(changeGroupPolicyRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// submit change group policy request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeGroupPolicyRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Guid>> SubmitChangeGroupPolicyRequestAsyncWithHttpInfo (ChangeGroupPolicyRequest changeGroupPolicyRequest = null)
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = changeGroupPolicyRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Guid>("/requests/changegrouppolicy", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitChangeGroupPolicyRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit change group quota request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeGroupQuotaRequest"> (optional)</param>
        /// <returns>Guid</returns>
        public Guid SubmitChangeGroupQuotaRequest (ChangeGroupQuotaRequest changeGroupQuotaRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = SubmitChangeGroupQuotaRequestWithHttpInfo(changeGroupQuotaRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// submit change group quota request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeGroupQuotaRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< Guid > SubmitChangeGroupQuotaRequestWithHttpInfo (ChangeGroupQuotaRequest changeGroupQuotaRequest = null)
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = changeGroupQuotaRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post< Guid >("/requests/changegroupquota", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitChangeGroupQuotaRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit change group quota request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeGroupQuotaRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        public async System.Threading.Tasks.Task<Guid> SubmitChangeGroupQuotaRequestAsync (ChangeGroupQuotaRequest changeGroupQuotaRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = await SubmitChangeGroupQuotaRequestAsyncWithHttpInfo(changeGroupQuotaRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// submit change group quota request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeGroupQuotaRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Guid>> SubmitChangeGroupQuotaRequestAsyncWithHttpInfo (ChangeGroupQuotaRequest changeGroupQuotaRequest = null)
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = changeGroupQuotaRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Guid>("/requests/changegroupquota", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitChangeGroupQuotaRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit change group settings request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeGroupSettingRequest"> (optional)</param>
        /// <returns>Guid</returns>
        public Guid SubmitChangeGroupSettingRequest (ChangeGroupSettingRequest changeGroupSettingRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = SubmitChangeGroupSettingRequestWithHttpInfo(changeGroupSettingRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// submit change group settings request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeGroupSettingRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< Guid > SubmitChangeGroupSettingRequestWithHttpInfo (ChangeGroupSettingRequest changeGroupSettingRequest = null)
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = changeGroupSettingRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post< Guid >("/requests/changegroup", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitChangeGroupSettingRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit change group settings request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeGroupSettingRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        public async System.Threading.Tasks.Task<Guid> SubmitChangeGroupSettingRequestAsync (ChangeGroupSettingRequest changeGroupSettingRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = await SubmitChangeGroupSettingRequestAsyncWithHttpInfo(changeGroupSettingRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// submit change group settings request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeGroupSettingRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Guid>> SubmitChangeGroupSettingRequestAsyncWithHttpInfo (ChangeGroupSettingRequest changeGroupSettingRequest = null)
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = changeGroupSettingRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Guid>("/requests/changegroup", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitChangeGroupSettingRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit change list settings request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeListSettingRequest"> (optional)</param>
        /// <returns>Guid</returns>
        public Guid SubmitChangeListSettingRequest (ChangeListSettingRequest changeListSettingRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = SubmitChangeListSettingRequestWithHttpInfo(changeListSettingRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// submit change list settings request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeListSettingRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< Guid > SubmitChangeListSettingRequestWithHttpInfo (ChangeListSettingRequest changeListSettingRequest = null)
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = changeListSettingRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post< Guid >("/requests/changelistsetting", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitChangeListSettingRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit change list settings request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeListSettingRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        public async System.Threading.Tasks.Task<Guid> SubmitChangeListSettingRequestAsync (ChangeListSettingRequest changeListSettingRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = await SubmitChangeListSettingRequestAsyncWithHttpInfo(changeListSettingRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// submit change list settings request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeListSettingRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Guid>> SubmitChangeListSettingRequestAsyncWithHttpInfo (ChangeListSettingRequest changeListSettingRequest = null)
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = changeListSettingRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Guid>("/requests/changelistsetting", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitChangeListSettingRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit change permission request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changePermissionRequest"> (optional)</param>
        /// <returns>Guid</returns>
        public Guid SubmitChangePermissionRequest (ChangePermissionRequest changePermissionRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = SubmitChangePermissionRequestWithHttpInfo(changePermissionRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// submit change permission request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changePermissionRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< Guid > SubmitChangePermissionRequestWithHttpInfo (ChangePermissionRequest changePermissionRequest = null)
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = changePermissionRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post< Guid >("/requests/changepermission", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitChangePermissionRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit change permission request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changePermissionRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        public async System.Threading.Tasks.Task<Guid> SubmitChangePermissionRequestAsync (ChangePermissionRequest changePermissionRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = await SubmitChangePermissionRequestAsyncWithHttpInfo(changePermissionRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// submit change permission request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changePermissionRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Guid>> SubmitChangePermissionRequestAsyncWithHttpInfo (ChangePermissionRequest changePermissionRequest = null)
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = changePermissionRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Guid>("/requests/changepermission", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitChangePermissionRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit change site administrator or contact request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeSiteContactRequest"> (optional)</param>
        /// <returns>Guid</returns>
        public Guid SubmitChangeSiteContactRequest (ChangeSiteContactRequest changeSiteContactRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = SubmitChangeSiteContactRequestWithHttpInfo(changeSiteContactRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// submit change site administrator or contact request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeSiteContactRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< Guid > SubmitChangeSiteContactRequestWithHttpInfo (ChangeSiteContactRequest changeSiteContactRequest = null)
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = changeSiteContactRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post< Guid >("/requests/changesite/adminorcontact", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitChangeSiteContactRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit change site administrator or contact request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeSiteContactRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        public async System.Threading.Tasks.Task<Guid> SubmitChangeSiteContactRequestAsync (ChangeSiteContactRequest changeSiteContactRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = await SubmitChangeSiteContactRequestAsyncWithHttpInfo(changeSiteContactRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// submit change site administrator or contact request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeSiteContactRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Guid>> SubmitChangeSiteContactRequestAsyncWithHttpInfo (ChangeSiteContactRequest changeSiteContactRequest = null)
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = changeSiteContactRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Guid>("/requests/changesite/adminorcontact", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitChangeSiteContactRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit change site policy request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeSitePolicyRequest"> (optional)</param>
        /// <returns>Guid</returns>
        public Guid SubmitChangeSitePolicyRequest (ChangeSitePolicyRequest changeSitePolicyRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = SubmitChangeSitePolicyRequestWithHttpInfo(changeSitePolicyRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// submit change site policy request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeSitePolicyRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< Guid > SubmitChangeSitePolicyRequestWithHttpInfo (ChangeSitePolicyRequest changeSitePolicyRequest = null)
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = changeSitePolicyRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post< Guid >("/requests/changesitepolicy", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitChangeSitePolicyRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit change site policy request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeSitePolicyRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        public async System.Threading.Tasks.Task<Guid> SubmitChangeSitePolicyRequestAsync (ChangeSitePolicyRequest changeSitePolicyRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = await SubmitChangeSitePolicyRequestAsyncWithHttpInfo(changeSitePolicyRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// submit change site policy request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeSitePolicyRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Guid>> SubmitChangeSitePolicyRequestAsyncWithHttpInfo (ChangeSitePolicyRequest changeSitePolicyRequest = null)
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = changeSitePolicyRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Guid>("/requests/changesitepolicy", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitChangeSitePolicyRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit change site quota request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeSiteQuotaRequest"> (optional)</param>
        /// <returns>Guid</returns>
        public Guid SubmitChangeSiteQuotaRequest (ChangeSiteQuotaRequest changeSiteQuotaRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = SubmitChangeSiteQuotaRequestWithHttpInfo(changeSiteQuotaRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// submit change site quota request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeSiteQuotaRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< Guid > SubmitChangeSiteQuotaRequestWithHttpInfo (ChangeSiteQuotaRequest changeSiteQuotaRequest = null)
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = changeSiteQuotaRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post< Guid >("/requests/changesitequota", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitChangeSiteQuotaRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit change site quota request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeSiteQuotaRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        public async System.Threading.Tasks.Task<Guid> SubmitChangeSiteQuotaRequestAsync (ChangeSiteQuotaRequest changeSiteQuotaRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = await SubmitChangeSiteQuotaRequestAsyncWithHttpInfo(changeSiteQuotaRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// submit change site quota request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeSiteQuotaRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Guid>> SubmitChangeSiteQuotaRequestAsyncWithHttpInfo (ChangeSiteQuotaRequest changeSiteQuotaRequest = null)
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = changeSiteQuotaRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Guid>("/requests/changesitequota", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitChangeSiteQuotaRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit change site settings request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeSiteSettingRequest"> (optional)</param>
        /// <returns>Guid</returns>
        public Guid SubmitChangeSiteSettingRequest (ChangeSiteSettingRequest changeSiteSettingRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = SubmitChangeSiteSettingRequestWithHttpInfo(changeSiteSettingRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// submit change site settings request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeSiteSettingRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< Guid > SubmitChangeSiteSettingRequestWithHttpInfo (ChangeSiteSettingRequest changeSiteSettingRequest = null)
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = changeSiteSettingRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post< Guid >("/requests/changesite/setting", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitChangeSiteSettingRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit change site settings request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeSiteSettingRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        public async System.Threading.Tasks.Task<Guid> SubmitChangeSiteSettingRequestAsync (ChangeSiteSettingRequest changeSiteSettingRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = await SubmitChangeSiteSettingRequestAsyncWithHttpInfo(changeSiteSettingRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// submit change site settings request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeSiteSettingRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Guid>> SubmitChangeSiteSettingRequestAsyncWithHttpInfo (ChangeSiteSettingRequest changeSiteSettingRequest = null)
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = changeSiteSettingRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Guid>("/requests/changesite/setting", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitChangeSiteSettingRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit change web contact request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeWebContactRequest"> (optional)</param>
        /// <returns>Guid</returns>
        public Guid SubmitChangeWebContactRequest (ChangeWebContactRequest changeWebContactRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = SubmitChangeWebContactRequestWithHttpInfo(changeWebContactRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// submit change web contact request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeWebContactRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< Guid > SubmitChangeWebContactRequestWithHttpInfo (ChangeWebContactRequest changeWebContactRequest = null)
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = changeWebContactRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post< Guid >("/requests/changewebcontact", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitChangeWebContactRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit change web contact request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeWebContactRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        public async System.Threading.Tasks.Task<Guid> SubmitChangeWebContactRequestAsync (ChangeWebContactRequest changeWebContactRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = await SubmitChangeWebContactRequestAsyncWithHttpInfo(changeWebContactRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// submit change web contact request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeWebContactRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Guid>> SubmitChangeWebContactRequestAsyncWithHttpInfo (ChangeWebContactRequest changeWebContactRequest = null)
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = changeWebContactRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Guid>("/requests/changewebcontact", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitChangeWebContactRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit change web settings request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeWebSettingRequest"> (optional)</param>
        /// <returns>Guid</returns>
        public Guid SubmitChangeWebSettingRequest (ChangeWebSettingRequest changeWebSettingRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = SubmitChangeWebSettingRequestWithHttpInfo(changeWebSettingRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// submit change web settings request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeWebSettingRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< Guid > SubmitChangeWebSettingRequestWithHttpInfo (ChangeWebSettingRequest changeWebSettingRequest = null)
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = changeWebSettingRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post< Guid >("/requests/changewebsettings", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitChangeWebSettingRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit change web settings request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeWebSettingRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        public async System.Threading.Tasks.Task<Guid> SubmitChangeWebSettingRequestAsync (ChangeWebSettingRequest changeWebSettingRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = await SubmitChangeWebSettingRequestAsyncWithHttpInfo(changeWebSettingRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// submit change web settings request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeWebSettingRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Guid>> SubmitChangeWebSettingRequestAsyncWithHttpInfo (ChangeWebSettingRequest changeWebSettingRequest = null)
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = changeWebSettingRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Guid>("/requests/changewebsettings", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitChangeWebSettingRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get clone permission request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clonePermissionRequest"> (optional)</param>
        /// <returns>Guid</returns>
        public Guid SubmitClonePermissionRequest (ClonePermissionRequest clonePermissionRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = SubmitClonePermissionRequestWithHttpInfo(clonePermissionRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get clone permission request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clonePermissionRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< Guid > SubmitClonePermissionRequestWithHttpInfo (ClonePermissionRequest clonePermissionRequest = null)
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = clonePermissionRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post< Guid >("/requests/clonepermission", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitClonePermissionRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get clone permission request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clonePermissionRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        public async System.Threading.Tasks.Task<Guid> SubmitClonePermissionRequestAsync (ClonePermissionRequest clonePermissionRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = await SubmitClonePermissionRequestAsyncWithHttpInfo(clonePermissionRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get clone permission request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clonePermissionRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Guid>> SubmitClonePermissionRequestAsyncWithHttpInfo (ClonePermissionRequest clonePermissionRequest = null)
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = clonePermissionRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Guid>("/requests/clonepermission", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitClonePermissionRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit create content move request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentMoveRequest"> (optional)</param>
        /// <returns>Guid</returns>
        public Guid SubmitContentMoveRequest (ContentMoveRequest contentMoveRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = SubmitContentMoveRequestWithHttpInfo(contentMoveRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// submit create content move request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentMoveRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< Guid > SubmitContentMoveRequestWithHttpInfo (ContentMoveRequest contentMoveRequest = null)
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = contentMoveRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post< Guid >("/requests/contentmove", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitContentMoveRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit create content move request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentMoveRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        public async System.Threading.Tasks.Task<Guid> SubmitContentMoveRequestAsync (ContentMoveRequest contentMoveRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = await SubmitContentMoveRequestAsyncWithHttpInfo(contentMoveRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// submit create content move request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentMoveRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Guid>> SubmitContentMoveRequestAsyncWithHttpInfo (ContentMoveRequest contentMoveRequest = null)
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = contentMoveRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Guid>("/requests/contentmove", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitContentMoveRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit create group request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGroupRequest"> (optional)</param>
        /// <returns>Guid</returns>
        public Guid SubmitCreateGroupRequest (CreateGroupRequest createGroupRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = SubmitCreateGroupRequestWithHttpInfo(createGroupRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// submit create group request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGroupRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< Guid > SubmitCreateGroupRequestWithHttpInfo (CreateGroupRequest createGroupRequest = null)
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = createGroupRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post< Guid >("/requests/creategroup", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitCreateGroupRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit create group request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGroupRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        public async System.Threading.Tasks.Task<Guid> SubmitCreateGroupRequestAsync (CreateGroupRequest createGroupRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = await SubmitCreateGroupRequestAsyncWithHttpInfo(createGroupRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// submit create group request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGroupRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Guid>> SubmitCreateGroupRequestAsyncWithHttpInfo (CreateGroupRequest createGroupRequest = null)
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = createGroupRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Guid>("/requests/creategroup", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitCreateGroupRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit create list request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListRequest"> (optional)</param>
        /// <returns>Guid</returns>
        public Guid SubmitCreateListRequest (CreateListRequest createListRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = SubmitCreateListRequestWithHttpInfo(createListRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// submit create list request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< Guid > SubmitCreateListRequestWithHttpInfo (CreateListRequest createListRequest = null)
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = createListRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post< Guid >("/requests/createlist", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitCreateListRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit create list request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        public async System.Threading.Tasks.Task<Guid> SubmitCreateListRequestAsync (CreateListRequest createListRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = await SubmitCreateListRequestAsyncWithHttpInfo(createListRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// submit create list request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Guid>> SubmitCreateListRequestAsyncWithHttpInfo (CreateListRequest createListRequest = null)
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = createListRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Guid>("/requests/createlist", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitCreateListRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit create site request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSiteRequest"> (optional)</param>
        /// <returns>Guid</returns>
        public Guid SubmitCreateSiteRequest (CreateSiteRequest createSiteRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = SubmitCreateSiteRequestWithHttpInfo(createSiteRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// submit create site request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSiteRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< Guid > SubmitCreateSiteRequestWithHttpInfo (CreateSiteRequest createSiteRequest = null)
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = createSiteRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post< Guid >("/requests/createsite", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitCreateSiteRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit create site request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSiteRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        public async System.Threading.Tasks.Task<Guid> SubmitCreateSiteRequestAsync (CreateSiteRequest createSiteRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = await SubmitCreateSiteRequestAsyncWithHttpInfo(createSiteRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// submit create site request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSiteRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Guid>> SubmitCreateSiteRequestAsyncWithHttpInfo (CreateSiteRequest createSiteRequest = null)
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = createSiteRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Guid>("/requests/createsite", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitCreateSiteRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit create web request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebRequest"> (optional)</param>
        /// <returns>Guid</returns>
        public Guid SubmitCreateWebRequest (CreateWebRequest createWebRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = SubmitCreateWebRequestWithHttpInfo(createWebRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// submit create web request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< Guid > SubmitCreateWebRequestWithHttpInfo (CreateWebRequest createWebRequest = null)
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = createWebRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post< Guid >("/requests/createweb", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitCreateWebRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit create web request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        public async System.Threading.Tasks.Task<Guid> SubmitCreateWebRequestAsync (CreateWebRequest createWebRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = await SubmitCreateWebRequestAsyncWithHttpInfo(createWebRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// submit create web request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Guid>> SubmitCreateWebRequestAsyncWithHttpInfo (CreateWebRequest createWebRequest = null)
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = createWebRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Guid>("/requests/createweb", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitCreateWebRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit custom service request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiRequest"> (optional)</param>
        /// <returns>Guid</returns>
        public Guid SubmitCustomRequest (ApiRequest apiRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = SubmitCustomRequestWithHttpInfo(apiRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// submit custom service request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< Guid > SubmitCustomRequestWithHttpInfo (ApiRequest apiRequest = null)
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = apiRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post< Guid >("/requests/custom", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitCustomRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit custom service request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        public async System.Threading.Tasks.Task<Guid> SubmitCustomRequestAsync (ApiRequest apiRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = await SubmitCustomRequestAsyncWithHttpInfo(apiRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// submit custom service request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Guid>> SubmitCustomRequestAsyncWithHttpInfo (ApiRequest apiRequest = null)
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = apiRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Guid>("/requests/custom", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitCustomRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit delete group request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteGroupRequest"> (optional)</param>
        /// <returns>Guid</returns>
        public Guid SubmitDeleteGroupRequest (DeleteGroupRequest deleteGroupRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = SubmitDeleteGroupRequestWithHttpInfo(deleteGroupRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// submit delete group request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteGroupRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< Guid > SubmitDeleteGroupRequestWithHttpInfo (DeleteGroupRequest deleteGroupRequest = null)
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = deleteGroupRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post< Guid >("/requests/deletegroup", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitDeleteGroupRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit delete group request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteGroupRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        public async System.Threading.Tasks.Task<Guid> SubmitDeleteGroupRequestAsync (DeleteGroupRequest deleteGroupRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = await SubmitDeleteGroupRequestAsyncWithHttpInfo(deleteGroupRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// submit delete group request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteGroupRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Guid>> SubmitDeleteGroupRequestAsyncWithHttpInfo (DeleteGroupRequest deleteGroupRequest = null)
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = deleteGroupRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Guid>("/requests/deletegroup", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitDeleteGroupRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit delete site request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteSiteRequest"> (optional)</param>
        /// <returns>Guid</returns>
        public Guid SubmitDeleteSiteRequest (DeleteSiteRequest deleteSiteRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = SubmitDeleteSiteRequestWithHttpInfo(deleteSiteRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// submit delete site request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteSiteRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< Guid > SubmitDeleteSiteRequestWithHttpInfo (DeleteSiteRequest deleteSiteRequest = null)
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = deleteSiteRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post< Guid >("/requests/deletesite", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitDeleteSiteRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit delete site request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteSiteRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        public async System.Threading.Tasks.Task<Guid> SubmitDeleteSiteRequestAsync (DeleteSiteRequest deleteSiteRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = await SubmitDeleteSiteRequestAsyncWithHttpInfo(deleteSiteRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// submit delete site request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteSiteRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Guid>> SubmitDeleteSiteRequestAsyncWithHttpInfo (DeleteSiteRequest deleteSiteRequest = null)
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = deleteSiteRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Guid>("/requests/deletesite", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitDeleteSiteRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit delete web request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteWebLifecycleRequest"> (optional)</param>
        /// <returns>Guid</returns>
        public Guid SubmitDeleteWebRequest (DeleteWebLifecycleRequest deleteWebLifecycleRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = SubmitDeleteWebRequestWithHttpInfo(deleteWebLifecycleRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// submit delete web request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteWebLifecycleRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< Guid > SubmitDeleteWebRequestWithHttpInfo (DeleteWebLifecycleRequest deleteWebLifecycleRequest = null)
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = deleteWebLifecycleRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post< Guid >("/requests/deleteweb", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitDeleteWebRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit delete web request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteWebLifecycleRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        public async System.Threading.Tasks.Task<Guid> SubmitDeleteWebRequestAsync (DeleteWebLifecycleRequest deleteWebLifecycleRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = await SubmitDeleteWebRequestAsyncWithHttpInfo(deleteWebLifecycleRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// submit delete web request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteWebLifecycleRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Guid>> SubmitDeleteWebRequestAsyncWithHttpInfo (DeleteWebLifecycleRequest deleteWebLifecycleRequest = null)
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = deleteWebLifecycleRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Guid>("/requests/deleteweb", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitDeleteWebRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit extend group request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extendGroupRequest"> (optional)</param>
        /// <returns>Guid</returns>
        public Guid SubmitExtendGroupRequest (ExtendGroupRequest extendGroupRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = SubmitExtendGroupRequestWithHttpInfo(extendGroupRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// submit extend group request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extendGroupRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< Guid > SubmitExtendGroupRequestWithHttpInfo (ExtendGroupRequest extendGroupRequest = null)
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = extendGroupRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post< Guid >("/requests/extendgroup", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitExtendGroupRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit extend group request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extendGroupRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        public async System.Threading.Tasks.Task<Guid> SubmitExtendGroupRequestAsync (ExtendGroupRequest extendGroupRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = await SubmitExtendGroupRequestAsyncWithHttpInfo(extendGroupRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// submit extend group request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extendGroupRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Guid>> SubmitExtendGroupRequestAsyncWithHttpInfo (ExtendGroupRequest extendGroupRequest = null)
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = extendGroupRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Guid>("/requests/extendgroup", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitExtendGroupRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit extend site request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extendSiteRequest"> (optional)</param>
        /// <returns>Guid</returns>
        public Guid SubmitExtendSiteRequest (ExtendSiteRequest extendSiteRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = SubmitExtendSiteRequestWithHttpInfo(extendSiteRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// submit extend site request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extendSiteRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< Guid > SubmitExtendSiteRequestWithHttpInfo (ExtendSiteRequest extendSiteRequest = null)
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = extendSiteRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post< Guid >("/requests/extendsite", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitExtendSiteRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit extend site request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extendSiteRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        public async System.Threading.Tasks.Task<Guid> SubmitExtendSiteRequestAsync (ExtendSiteRequest extendSiteRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = await SubmitExtendSiteRequestAsyncWithHttpInfo(extendSiteRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// submit extend site request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extendSiteRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Guid>> SubmitExtendSiteRequestAsyncWithHttpInfo (ExtendSiteRequest extendSiteRequest = null)
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = extendSiteRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Guid>("/requests/extendsite", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitExtendSiteRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get submit grant permission request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantPermissionRequest"> (optional)</param>
        /// <returns>Guid</returns>
        public Guid SubmitGrantPermissionRequest (GrantPermissionRequest grantPermissionRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = SubmitGrantPermissionRequestWithHttpInfo(grantPermissionRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get submit grant permission request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantPermissionRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< Guid > SubmitGrantPermissionRequestWithHttpInfo (GrantPermissionRequest grantPermissionRequest = null)
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = grantPermissionRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post< Guid >("/requests/grantpermission", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitGrantPermissionRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get submit grant permission request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantPermissionRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        public async System.Threading.Tasks.Task<Guid> SubmitGrantPermissionRequestAsync (GrantPermissionRequest grantPermissionRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = await SubmitGrantPermissionRequestAsyncWithHttpInfo(grantPermissionRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get submit grant permission request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantPermissionRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Guid>> SubmitGrantPermissionRequestAsyncWithHttpInfo (GrantPermissionRequest grantPermissionRequest = null)
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = grantPermissionRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Guid>("/requests/grantpermission", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitGrantPermissionRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit lock site request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lockSiteRequest"> (optional)</param>
        /// <returns>Guid</returns>
        public Guid SubmitLockSiteRequest (LockSiteRequest lockSiteRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = SubmitLockSiteRequestWithHttpInfo(lockSiteRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// submit lock site request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lockSiteRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< Guid > SubmitLockSiteRequestWithHttpInfo (LockSiteRequest lockSiteRequest = null)
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = lockSiteRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post< Guid >("/requests/locksite", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitLockSiteRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit lock site request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lockSiteRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        public async System.Threading.Tasks.Task<Guid> SubmitLockSiteRequestAsync (LockSiteRequest lockSiteRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = await SubmitLockSiteRequestAsyncWithHttpInfo(lockSiteRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// submit lock site request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lockSiteRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Guid>> SubmitLockSiteRequestAsyncWithHttpInfo (LockSiteRequest lockSiteRequest = null)
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = lockSiteRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Guid>("/requests/locksite", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitLockSiteRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit manage permission request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="managePermissionRequest"> (optional)</param>
        /// <returns>Guid</returns>
        public Guid SubmitManagePermimssionRequest (ManagePermissionRequest managePermissionRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = SubmitManagePermimssionRequestWithHttpInfo(managePermissionRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// submit manage permission request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="managePermissionRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< Guid > SubmitManagePermimssionRequestWithHttpInfo (ManagePermissionRequest managePermissionRequest = null)
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = managePermissionRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post< Guid >("/requests/managepermission", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitManagePermimssionRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit manage permission request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="managePermissionRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        public async System.Threading.Tasks.Task<Guid> SubmitManagePermimssionRequestAsync (ManagePermissionRequest managePermissionRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = await SubmitManagePermimssionRequestAsyncWithHttpInfo(managePermissionRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// submit manage permission request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="managePermissionRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Guid>> SubmitManagePermimssionRequestAsyncWithHttpInfo (ManagePermissionRequest managePermissionRequest = null)
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = managePermissionRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Guid>("/requests/managepermission", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitManagePermimssionRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit restore group request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="restoreGroupRequest"> (optional)</param>
        /// <returns>Guid</returns>
        public Guid SubmitRestoreGroupRequest (RestoreGroupRequest restoreGroupRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = SubmitRestoreGroupRequestWithHttpInfo(restoreGroupRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// submit restore group request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="restoreGroupRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< Guid > SubmitRestoreGroupRequestWithHttpInfo (RestoreGroupRequest restoreGroupRequest = null)
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = restoreGroupRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post< Guid >("/requests/restoregroup", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitRestoreGroupRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit restore group request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="restoreGroupRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        public async System.Threading.Tasks.Task<Guid> SubmitRestoreGroupRequestAsync (RestoreGroupRequest restoreGroupRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = await SubmitRestoreGroupRequestAsyncWithHttpInfo(restoreGroupRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// submit restore group request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="restoreGroupRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Guid>> SubmitRestoreGroupRequestAsyncWithHttpInfo (RestoreGroupRequest restoreGroupRequest = null)
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = restoreGroupRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Guid>("/requests/restoregroup", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitRestoreGroupRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit unlock site request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unlockSiteRequest"> (optional)</param>
        /// <returns>Guid</returns>
        public Guid SubmitUnlockSiteRequest (UnlockSiteRequest unlockSiteRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = SubmitUnlockSiteRequestWithHttpInfo(unlockSiteRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// submit unlock site request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unlockSiteRequest"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< Guid > SubmitUnlockSiteRequestWithHttpInfo (UnlockSiteRequest unlockSiteRequest = null)
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = unlockSiteRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post< Guid >("/requests/unlocksite", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitUnlockSiteRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// submit unlock site request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unlockSiteRequest"> (optional)</param>
        /// <returns>Task of Guid</returns>
        public async System.Threading.Tasks.Task<Guid> SubmitUnlockSiteRequestAsync (UnlockSiteRequest unlockSiteRequest = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = await SubmitUnlockSiteRequestAsyncWithHttpInfo(unlockSiteRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// submit unlock site request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unlockSiteRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Guid>> SubmitUnlockSiteRequestAsyncWithHttpInfo (UnlockSiteRequest unlockSiteRequest = null)
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = unlockSiteRequest;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Guid>("/requests/unlocksite", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitUnlockSiteRequest", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
