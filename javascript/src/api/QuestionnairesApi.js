/**
 * Cloud Governance Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import QuestionnaireRef from '../model/QuestionnaireRef';
import QuestionnaireRequest from '../model/QuestionnaireRequest';
import ServiceList from '../model/ServiceList';
import WorkspaceType from '../model/WorkspaceType';

/**
* Questionnaires service.
* @module api/QuestionnairesApi
* @version 1.0
*/
export default class QuestionnairesApi {

    /**
    * Constructs a new QuestionnairesApi. 
    * @alias module:api/QuestionnairesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getQuestionnaireById operation.
     * @callback module:api/QuestionnairesApi~getQuestionnaireByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuestionnaireRef} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get questionnaire by id
     * @param {String} id 
     * @param {module:api/QuestionnairesApi~getQuestionnaireByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuestionnaireRef}
     */
    getQuestionnaireById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getQuestionnaireById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = QuestionnaireRef;
      return this.apiClient.callApi(
        '/questionnaires/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitQuestionnaire operation.
     * @callback module:api/QuestionnairesApi~submitQuestionnaireCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ServiceList>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * submit questionnaire
     * @param {Object} opts Optional parameters
     * @param {module:model/QuestionnaireRequest} opts.questionnaireRequest 
     * @param {module:api/QuestionnairesApi~submitQuestionnaireCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ServiceList>}
     */
    submitQuestionnaire(opts, callback) {
      opts = opts || {};
      let postBody = opts['questionnaireRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [ServiceList];
      return this.apiClient.callApi(
        '/questionnaires', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitQuestionnaireInWorkspace operation.
     * @callback module:api/QuestionnairesApi~submitQuestionnaireInWorkspaceCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ServiceList>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * submit questionnaire in workspace
     * @param {module:model/WorkspaceType} objecttype 
     * @param {String} objectid 
     * @param {Object} opts Optional parameters
     * @param {module:model/QuestionnaireRequest} opts.questionnaireRequest 
     * @param {module:api/QuestionnairesApi~submitQuestionnaireInWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ServiceList>}
     */
    submitQuestionnaireInWorkspace(objecttype, objectid, opts, callback) {
      opts = opts || {};
      let postBody = opts['questionnaireRequest'];
      // verify the required parameter 'objecttype' is set
      if (objecttype === undefined || objecttype === null) {
        throw new Error("Missing the required parameter 'objecttype' when calling submitQuestionnaireInWorkspace");
      }
      // verify the required parameter 'objectid' is set
      if (objectid === undefined || objectid === null) {
        throw new Error("Missing the required parameter 'objectid' when calling submitQuestionnaireInWorkspace");
      }

      let pathParams = {
        'objecttype': objecttype,
        'objectid': objectid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [ServiceList];
      return this.apiClient.callApi(
        '/questionnaires/workspace/{objecttype}/{objectid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
