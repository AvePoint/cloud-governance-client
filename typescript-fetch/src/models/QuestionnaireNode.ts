// tslint:disable
/**
 * Cloud Governance Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    JointNode,
    JointNodeFromJSON,
    JointNodeFromJSONTyped,
    JointNodeToJSON,
    QuestionnaireNodeType,
    QuestionnaireNodeTypeFromJSON,
    QuestionnaireNodeTypeFromJSONTyped,
    QuestionnaireNodeTypeToJSON,
} from './';

/**
 * 
 * @export
 * @interface QuestionnaireNode
 */
export interface QuestionnaireNode {
    /**
     * 
     * @type {Array<string>}
     * @memberof QuestionnaireNode
     */
    objectIds?: Array<string> | null;
    /**
     * 
     * @type {QuestionnaireNodeType}
     * @memberof QuestionnaireNode
     */
    type?: QuestionnaireNodeType;
    /**
     * 
     * @type {Array<JointNode>}
     * @memberof QuestionnaireNode
     */
    joints?: Array<JointNode> | null;
    /**
     * 
     * @type {string}
     * @memberof QuestionnaireNode
     */
    msg?: string | null;
}

export function QuestionnaireNodeFromJSON(json: any): QuestionnaireNode {
    return QuestionnaireNodeFromJSONTyped(json, false);
}

export function QuestionnaireNodeFromJSONTyped(json: any, ignoreDiscriminator: boolean): QuestionnaireNode {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'objectIds': !exists(json, 'objectIds') ? undefined : json['objectIds'],
        'type': !exists(json, 'type') ? undefined : QuestionnaireNodeTypeFromJSON(json['type']),
        'joints': !exists(json, 'joints') ? undefined : (json['joints'] as Array<any>).map(JointNodeFromJSON),
        'msg': !exists(json, 'msg') ? undefined : json['msg'],
    };
}

export function QuestionnaireNodeToJSON(value?: QuestionnaireNode | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'objectIds': value.objectIds,
        'type': QuestionnaireNodeTypeToJSON(value.type),
        'joints': value.joints == null ? undefined : (value.joints as Array<any>).map(JointNodeToJSON),
        'msg': value.msg,
    };
}


