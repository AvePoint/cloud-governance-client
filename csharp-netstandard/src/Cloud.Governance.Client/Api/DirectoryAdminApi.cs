/* 
 * Cloud Governance Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Cloud.Governance.Client.Client;
using Cloud.Governance.Client.Model;

namespace Cloud.Governance.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDirectoryAdminApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// apply groups policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applyPolicyRequestModel"> (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> ApplyGroupsPolicy (ApplyPolicyRequestModel applyPolicyRequestModel = default(ApplyPolicyRequestModel));

        /// <summary>
        /// apply groups policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applyPolicyRequestModel"> (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> ApplyGroupsPolicyWithHttpInfo (ApplyPolicyRequestModel applyPolicyRequestModel = default(ApplyPolicyRequestModel));
        /// <summary>
        /// apply sites policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applyPolicyRequestModel"> (optional)</param>
        /// <returns></returns>
        void ApplySitesPolicy (ApplyPolicyRequestModel applyPolicyRequestModel = default(ApplyPolicyRequestModel));

        /// <summary>
        /// apply sites policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applyPolicyRequestModel"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApplySitesPolicyWithHttpInfo (ApplyPolicyRequestModel applyPolicyRequestModel = default(ApplyPolicyRequestModel));
        /// <summary>
        /// apply teams policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applyPolicyRequestModel"> (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> ApplyTeamsPolicy (ApplyPolicyRequestModel applyPolicyRequestModel = default(ApplyPolicyRequestModel));

        /// <summary>
        /// apply teams policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applyPolicyRequestModel"> (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> ApplyTeamsPolicyWithHttpInfo (ApplyPolicyRequestModel applyPolicyRequestModel = default(ApplyPolicyRequestModel));
        /// <summary>
        /// elect sites contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="electUserRequestModel"> (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> ElectContact (ElectUserRequestModel electUserRequestModel = default(ElectUserRequestModel));

        /// <summary>
        /// elect sites contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="electUserRequestModel"> (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> ElectContactWithHttpInfo (ElectUserRequestModel electUserRequestModel = default(ElectUserRequestModel));
        /// <summary>
        /// get all sites contacts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        string GetAllMailContacts ();

        /// <summary>
        /// get all sites contacts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetAllMailContactsWithHttpInfo ();
        /// <summary>
        /// get managed groups filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; groupId, groupName, groupSharing, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; groupId, groupName, groupSharing, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>DistinctPageResult</returns>
        DistinctPageResult GetManagedGroupFilters (string filter = default(string), string distinct = default(string), int? top = default(int?), int? skip = default(int?));

        /// <summary>
        /// get managed groups filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; groupId, groupName, groupSharing, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; groupId, groupName, groupSharing, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>ApiResponse of DistinctPageResult</returns>
        ApiResponse<DistinctPageResult> GetManagedGroupFiltersWithHttpInfo (string filter = default(string), string distinct = default(string), int? top = default(int?), int? skip = default(int?));
        /// <summary>
        /// get all managed groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; groupId, groupName, groupSharing, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; groupId, groupName, groupSharing, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="search">Search for groupName (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>GroupGridModelPageResult</returns>
        GroupGridModelPageResult GetManagedGroups (string filter = default(string), string orderby = default(string), string search = default(string), int? top = default(int?), int? skip = default(int?));

        /// <summary>
        /// get all managed groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; groupId, groupName, groupSharing, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; groupId, groupName, groupSharing, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="search">Search for groupName (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>ApiResponse of GroupGridModelPageResult</returns>
        ApiResponse<GroupGridModelPageResult> GetManagedGroupsWithHttpInfo (string filter = default(string), string orderby = default(string), string search = default(string), int? top = default(int?), int? skip = default(int?));
        /// <summary>
        /// get all managed sites
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, description, title, url, department, policyName, policyId, template, owner, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, additionalAdministrators, additionalAdministratorDisplayNames, createdTime, status, claimStatus, sharing, storageQuota, storageUsed, inactivityThresholdTime, leaseExpirationTime, permissionRecertificationStatus, metadataRecertificationStatus, ownershipRecertificationStatus, geoLocation, hub, phase (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, description, title, url, department, policyName, policyId, template, owner, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, additionalAdministrators, additionalAdministratorDisplayNames, createdTime, status, claimStatus, sharing, storageQuota, storageUsed, inactivityThresholdTime, leaseExpirationTime, permissionRecertificationStatus, metadataRecertificationStatus, ownershipRecertificationStatus, geoLocation, hub, phase (optional)</param>
        /// <param name="search">Search for url (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>SiteListPageResult</returns>
        SiteListPageResult GetManagedSites (string filter = default(string), string orderby = default(string), string search = default(string), int? top = default(int?), int? skip = default(int?));

        /// <summary>
        /// get all managed sites
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, description, title, url, department, policyName, policyId, template, owner, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, additionalAdministrators, additionalAdministratorDisplayNames, createdTime, status, claimStatus, sharing, storageQuota, storageUsed, inactivityThresholdTime, leaseExpirationTime, permissionRecertificationStatus, metadataRecertificationStatus, ownershipRecertificationStatus, geoLocation, hub, phase (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, description, title, url, department, policyName, policyId, template, owner, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, additionalAdministrators, additionalAdministratorDisplayNames, createdTime, status, claimStatus, sharing, storageQuota, storageUsed, inactivityThresholdTime, leaseExpirationTime, permissionRecertificationStatus, metadataRecertificationStatus, ownershipRecertificationStatus, geoLocation, hub, phase (optional)</param>
        /// <param name="search">Search for url (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>ApiResponse of SiteListPageResult</returns>
        ApiResponse<SiteListPageResult> GetManagedSitesWithHttpInfo (string filter = default(string), string orderby = default(string), string search = default(string), int? top = default(int?), int? skip = default(int?));
        /// <summary>
        /// get managed sites filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, description, title, url, department, policyName, policyId, template, owner, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, additionalAdministrators, additionalAdministratorDisplayNames, createdTime, status, claimStatus, sharing, storageQuota, storageUsed, inactivityThresholdTime, leaseExpirationTime, permissionRecertificationStatus, metadataRecertificationStatus, ownershipRecertificationStatus, geoLocation, hub, phase (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, description, title, url, department, policyName, policyId, template, owner, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, additionalAdministrators, additionalAdministratorDisplayNames, createdTime, status, claimStatus, sharing, storageQuota, storageUsed, inactivityThresholdTime, leaseExpirationTime, permissionRecertificationStatus, metadataRecertificationStatus, ownershipRecertificationStatus, geoLocation, hub, phase (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>DistinctPageResult</returns>
        DistinctPageResult GetManagedSitesFilters (string filter = default(string), string distinct = default(string), int? top = default(int?), int? skip = default(int?));

        /// <summary>
        /// get managed sites filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, description, title, url, department, policyName, policyId, template, owner, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, additionalAdministrators, additionalAdministratorDisplayNames, createdTime, status, claimStatus, sharing, storageQuota, storageUsed, inactivityThresholdTime, leaseExpirationTime, permissionRecertificationStatus, metadataRecertificationStatus, ownershipRecertificationStatus, geoLocation, hub, phase (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, description, title, url, department, policyName, policyId, template, owner, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, additionalAdministrators, additionalAdministratorDisplayNames, createdTime, status, claimStatus, sharing, storageQuota, storageUsed, inactivityThresholdTime, leaseExpirationTime, permissionRecertificationStatus, metadataRecertificationStatus, ownershipRecertificationStatus, geoLocation, hub, phase (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>ApiResponse of DistinctPageResult</returns>
        ApiResponse<DistinctPageResult> GetManagedSitesFiltersWithHttpInfo (string filter = default(string), string distinct = default(string), int? top = default(int?), int? skip = default(int?));
        /// <summary>
        /// get managed teams filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; teamsId, teamsName, teamsSharing, enableTeamsArchive, enableTeamsRestore, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; teamsId, teamsName, teamsSharing, enableTeamsArchive, enableTeamsRestore, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>DistinctPageResult</returns>
        DistinctPageResult GetManagedTeamFilters (string filter = default(string), string distinct = default(string), int? top = default(int?), int? skip = default(int?));

        /// <summary>
        /// get managed teams filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; teamsId, teamsName, teamsSharing, enableTeamsArchive, enableTeamsRestore, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; teamsId, teamsName, teamsSharing, enableTeamsArchive, enableTeamsRestore, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>ApiResponse of DistinctPageResult</returns>
        ApiResponse<DistinctPageResult> GetManagedTeamFiltersWithHttpInfo (string filter = default(string), string distinct = default(string), int? top = default(int?), int? skip = default(int?));
        /// <summary>
        /// get all managed teams
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; teamsId, teamsName, teamsSharing, enableTeamsArchive, enableTeamsRestore, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; teamsId, teamsName, teamsSharing, enableTeamsArchive, enableTeamsRestore, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="search">Search for teamsName (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>TeamsGridModelPageResult</returns>
        TeamsGridModelPageResult GetManagedTeams (string filter = default(string), string orderby = default(string), string search = default(string), int? top = default(int?), int? skip = default(int?));

        /// <summary>
        /// get all managed teams
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; teamsId, teamsName, teamsSharing, enableTeamsArchive, enableTeamsRestore, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; teamsId, teamsName, teamsSharing, enableTeamsArchive, enableTeamsRestore, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="search">Search for teamsName (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>ApiResponse of TeamsGridModelPageResult</returns>
        ApiResponse<TeamsGridModelPageResult> GetManagedTeamsWithHttpInfo (string filter = default(string), string orderby = default(string), string search = default(string), int? top = default(int?), int? skip = default(int?));
        /// <summary>
        /// get all managed webs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, description, title, url, template, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, createdTime, status (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, description, title, url, template, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, createdTime, status (optional)</param>
        /// <param name="search">Search for url (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>WebListPageResult</returns>
        WebListPageResult GetManagedWebs (string filter = default(string), string orderby = default(string), string search = default(string), int? top = default(int?), int? skip = default(int?));

        /// <summary>
        /// get all managed webs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, description, title, url, template, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, createdTime, status (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, description, title, url, template, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, createdTime, status (optional)</param>
        /// <param name="search">Search for url (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>ApiResponse of WebListPageResult</returns>
        ApiResponse<WebListPageResult> GetManagedWebsWithHttpInfo (string filter = default(string), string orderby = default(string), string search = default(string), int? top = default(int?), int? skip = default(int?));
        /// <summary>
        /// get managed webs filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, description, title, url, template, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, createdTime, status (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, description, title, url, template, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, createdTime, status (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>DistinctPageResult</returns>
        DistinctPageResult GetManagedWebsFilters (string filter = default(string), string distinct = default(string), int? top = default(int?), int? skip = default(int?));

        /// <summary>
        /// get managed webs filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, description, title, url, template, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, createdTime, status (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, description, title, url, template, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, createdTime, status (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>ApiResponse of DistinctPageResult</returns>
        ApiResponse<DistinctPageResult> GetManagedWebsFiltersWithHttpInfo (string filter = default(string), string distinct = default(string), int? top = default(int?), int? skip = default(int?));
        /// <summary>
        /// specify selected sites contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specifyContactModel"> (optional)</param>
        /// <returns>SpecifyContactResultModel</returns>
        SpecifyContactResultModel SpecifyContact (SpecifyContactModel specifyContactModel = default(SpecifyContactModel));

        /// <summary>
        /// specify selected sites contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specifyContactModel"> (optional)</param>
        /// <returns>ApiResponse of SpecifyContactResultModel</returns>
        ApiResponse<SpecifyContactResultModel> SpecifyContactWithHttpInfo (SpecifyContactModel specifyContactModel = default(SpecifyContactModel));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDirectoryAdminApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// apply groups policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applyPolicyRequestModel"> (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> ApplyGroupsPolicyAsync (ApplyPolicyRequestModel applyPolicyRequestModel = default(ApplyPolicyRequestModel));

        /// <summary>
        /// apply groups policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applyPolicyRequestModel"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> ApplyGroupsPolicyAsyncWithHttpInfo (ApplyPolicyRequestModel applyPolicyRequestModel = default(ApplyPolicyRequestModel));
        /// <summary>
        /// apply sites policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applyPolicyRequestModel"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApplySitesPolicyAsync (ApplyPolicyRequestModel applyPolicyRequestModel = default(ApplyPolicyRequestModel));

        /// <summary>
        /// apply sites policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applyPolicyRequestModel"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApplySitesPolicyAsyncWithHttpInfo (ApplyPolicyRequestModel applyPolicyRequestModel = default(ApplyPolicyRequestModel));
        /// <summary>
        /// apply teams policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applyPolicyRequestModel"> (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> ApplyTeamsPolicyAsync (ApplyPolicyRequestModel applyPolicyRequestModel = default(ApplyPolicyRequestModel));

        /// <summary>
        /// apply teams policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applyPolicyRequestModel"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> ApplyTeamsPolicyAsyncWithHttpInfo (ApplyPolicyRequestModel applyPolicyRequestModel = default(ApplyPolicyRequestModel));
        /// <summary>
        /// elect sites contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="electUserRequestModel"> (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> ElectContactAsync (ElectUserRequestModel electUserRequestModel = default(ElectUserRequestModel));

        /// <summary>
        /// elect sites contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="electUserRequestModel"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> ElectContactAsyncWithHttpInfo (ElectUserRequestModel electUserRequestModel = default(ElectUserRequestModel));
        /// <summary>
        /// get all sites contacts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetAllMailContactsAsync ();

        /// <summary>
        /// get all sites contacts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetAllMailContactsAsyncWithHttpInfo ();
        /// <summary>
        /// get managed groups filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; groupId, groupName, groupSharing, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; groupId, groupName, groupSharing, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of DistinctPageResult</returns>
        System.Threading.Tasks.Task<DistinctPageResult> GetManagedGroupFiltersAsync (string filter = default(string), string distinct = default(string), int? top = default(int?), int? skip = default(int?));

        /// <summary>
        /// get managed groups filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; groupId, groupName, groupSharing, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; groupId, groupName, groupSharing, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of ApiResponse (DistinctPageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<DistinctPageResult>> GetManagedGroupFiltersAsyncWithHttpInfo (string filter = default(string), string distinct = default(string), int? top = default(int?), int? skip = default(int?));
        /// <summary>
        /// get all managed groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; groupId, groupName, groupSharing, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; groupId, groupName, groupSharing, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="search">Search for groupName (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of GroupGridModelPageResult</returns>
        System.Threading.Tasks.Task<GroupGridModelPageResult> GetManagedGroupsAsync (string filter = default(string), string orderby = default(string), string search = default(string), int? top = default(int?), int? skip = default(int?));

        /// <summary>
        /// get all managed groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; groupId, groupName, groupSharing, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; groupId, groupName, groupSharing, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="search">Search for groupName (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of ApiResponse (GroupGridModelPageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupGridModelPageResult>> GetManagedGroupsAsyncWithHttpInfo (string filter = default(string), string orderby = default(string), string search = default(string), int? top = default(int?), int? skip = default(int?));
        /// <summary>
        /// get all managed sites
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, description, title, url, department, policyName, policyId, template, owner, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, additionalAdministrators, additionalAdministratorDisplayNames, createdTime, status, claimStatus, sharing, storageQuota, storageUsed, inactivityThresholdTime, leaseExpirationTime, permissionRecertificationStatus, metadataRecertificationStatus, ownershipRecertificationStatus, geoLocation, hub, phase (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, description, title, url, department, policyName, policyId, template, owner, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, additionalAdministrators, additionalAdministratorDisplayNames, createdTime, status, claimStatus, sharing, storageQuota, storageUsed, inactivityThresholdTime, leaseExpirationTime, permissionRecertificationStatus, metadataRecertificationStatus, ownershipRecertificationStatus, geoLocation, hub, phase (optional)</param>
        /// <param name="search">Search for url (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of SiteListPageResult</returns>
        System.Threading.Tasks.Task<SiteListPageResult> GetManagedSitesAsync (string filter = default(string), string orderby = default(string), string search = default(string), int? top = default(int?), int? skip = default(int?));

        /// <summary>
        /// get all managed sites
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, description, title, url, department, policyName, policyId, template, owner, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, additionalAdministrators, additionalAdministratorDisplayNames, createdTime, status, claimStatus, sharing, storageQuota, storageUsed, inactivityThresholdTime, leaseExpirationTime, permissionRecertificationStatus, metadataRecertificationStatus, ownershipRecertificationStatus, geoLocation, hub, phase (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, description, title, url, department, policyName, policyId, template, owner, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, additionalAdministrators, additionalAdministratorDisplayNames, createdTime, status, claimStatus, sharing, storageQuota, storageUsed, inactivityThresholdTime, leaseExpirationTime, permissionRecertificationStatus, metadataRecertificationStatus, ownershipRecertificationStatus, geoLocation, hub, phase (optional)</param>
        /// <param name="search">Search for url (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of ApiResponse (SiteListPageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SiteListPageResult>> GetManagedSitesAsyncWithHttpInfo (string filter = default(string), string orderby = default(string), string search = default(string), int? top = default(int?), int? skip = default(int?));
        /// <summary>
        /// get managed sites filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, description, title, url, department, policyName, policyId, template, owner, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, additionalAdministrators, additionalAdministratorDisplayNames, createdTime, status, claimStatus, sharing, storageQuota, storageUsed, inactivityThresholdTime, leaseExpirationTime, permissionRecertificationStatus, metadataRecertificationStatus, ownershipRecertificationStatus, geoLocation, hub, phase (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, description, title, url, department, policyName, policyId, template, owner, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, additionalAdministrators, additionalAdministratorDisplayNames, createdTime, status, claimStatus, sharing, storageQuota, storageUsed, inactivityThresholdTime, leaseExpirationTime, permissionRecertificationStatus, metadataRecertificationStatus, ownershipRecertificationStatus, geoLocation, hub, phase (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of DistinctPageResult</returns>
        System.Threading.Tasks.Task<DistinctPageResult> GetManagedSitesFiltersAsync (string filter = default(string), string distinct = default(string), int? top = default(int?), int? skip = default(int?));

        /// <summary>
        /// get managed sites filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, description, title, url, department, policyName, policyId, template, owner, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, additionalAdministrators, additionalAdministratorDisplayNames, createdTime, status, claimStatus, sharing, storageQuota, storageUsed, inactivityThresholdTime, leaseExpirationTime, permissionRecertificationStatus, metadataRecertificationStatus, ownershipRecertificationStatus, geoLocation, hub, phase (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, description, title, url, department, policyName, policyId, template, owner, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, additionalAdministrators, additionalAdministratorDisplayNames, createdTime, status, claimStatus, sharing, storageQuota, storageUsed, inactivityThresholdTime, leaseExpirationTime, permissionRecertificationStatus, metadataRecertificationStatus, ownershipRecertificationStatus, geoLocation, hub, phase (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of ApiResponse (DistinctPageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<DistinctPageResult>> GetManagedSitesFiltersAsyncWithHttpInfo (string filter = default(string), string distinct = default(string), int? top = default(int?), int? skip = default(int?));
        /// <summary>
        /// get managed teams filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; teamsId, teamsName, teamsSharing, enableTeamsArchive, enableTeamsRestore, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; teamsId, teamsName, teamsSharing, enableTeamsArchive, enableTeamsRestore, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of DistinctPageResult</returns>
        System.Threading.Tasks.Task<DistinctPageResult> GetManagedTeamFiltersAsync (string filter = default(string), string distinct = default(string), int? top = default(int?), int? skip = default(int?));

        /// <summary>
        /// get managed teams filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; teamsId, teamsName, teamsSharing, enableTeamsArchive, enableTeamsRestore, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; teamsId, teamsName, teamsSharing, enableTeamsArchive, enableTeamsRestore, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of ApiResponse (DistinctPageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<DistinctPageResult>> GetManagedTeamFiltersAsyncWithHttpInfo (string filter = default(string), string distinct = default(string), int? top = default(int?), int? skip = default(int?));
        /// <summary>
        /// get all managed teams
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; teamsId, teamsName, teamsSharing, enableTeamsArchive, enableTeamsRestore, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; teamsId, teamsName, teamsSharing, enableTeamsArchive, enableTeamsRestore, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="search">Search for teamsName (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of TeamsGridModelPageResult</returns>
        System.Threading.Tasks.Task<TeamsGridModelPageResult> GetManagedTeamsAsync (string filter = default(string), string orderby = default(string), string search = default(string), int? top = default(int?), int? skip = default(int?));

        /// <summary>
        /// get all managed teams
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; teamsId, teamsName, teamsSharing, enableTeamsArchive, enableTeamsRestore, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; teamsId, teamsName, teamsSharing, enableTeamsArchive, enableTeamsRestore, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="search">Search for teamsName (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of ApiResponse (TeamsGridModelPageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamsGridModelPageResult>> GetManagedTeamsAsyncWithHttpInfo (string filter = default(string), string orderby = default(string), string search = default(string), int? top = default(int?), int? skip = default(int?));
        /// <summary>
        /// get all managed webs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, description, title, url, template, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, createdTime, status (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, description, title, url, template, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, createdTime, status (optional)</param>
        /// <param name="search">Search for url (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of WebListPageResult</returns>
        System.Threading.Tasks.Task<WebListPageResult> GetManagedWebsAsync (string filter = default(string), string orderby = default(string), string search = default(string), int? top = default(int?), int? skip = default(int?));

        /// <summary>
        /// get all managed webs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, description, title, url, template, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, createdTime, status (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, description, title, url, template, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, createdTime, status (optional)</param>
        /// <param name="search">Search for url (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of ApiResponse (WebListPageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebListPageResult>> GetManagedWebsAsyncWithHttpInfo (string filter = default(string), string orderby = default(string), string search = default(string), int? top = default(int?), int? skip = default(int?));
        /// <summary>
        /// get managed webs filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, description, title, url, template, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, createdTime, status (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, description, title, url, template, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, createdTime, status (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of DistinctPageResult</returns>
        System.Threading.Tasks.Task<DistinctPageResult> GetManagedWebsFiltersAsync (string filter = default(string), string distinct = default(string), int? top = default(int?), int? skip = default(int?));

        /// <summary>
        /// get managed webs filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, description, title, url, template, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, createdTime, status (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, description, title, url, template, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, createdTime, status (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of ApiResponse (DistinctPageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<DistinctPageResult>> GetManagedWebsFiltersAsyncWithHttpInfo (string filter = default(string), string distinct = default(string), int? top = default(int?), int? skip = default(int?));
        /// <summary>
        /// specify selected sites contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specifyContactModel"> (optional)</param>
        /// <returns>Task of SpecifyContactResultModel</returns>
        System.Threading.Tasks.Task<SpecifyContactResultModel> SpecifyContactAsync (SpecifyContactModel specifyContactModel = default(SpecifyContactModel));

        /// <summary>
        /// specify selected sites contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specifyContactModel"> (optional)</param>
        /// <returns>Task of ApiResponse (SpecifyContactResultModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SpecifyContactResultModel>> SpecifyContactAsyncWithHttpInfo (SpecifyContactModel specifyContactModel = default(SpecifyContactModel));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDirectoryAdminApi : IDirectoryAdminApiSync, IDirectoryAdminApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DirectoryAdminApi : IDirectoryAdminApi
    {
        private Cloud.Governance.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DirectoryAdminApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DirectoryAdminApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DirectoryAdminApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DirectoryAdminApi(String basePath)
        {
            this.Configuration = Cloud.Governance.Client.Client.Configuration.MergeConfigurations(
                Cloud.Governance.Client.Client.GlobalConfiguration.Instance,
                new Cloud.Governance.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Cloud.Governance.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Cloud.Governance.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Cloud.Governance.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DirectoryAdminApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DirectoryAdminApi(Cloud.Governance.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Cloud.Governance.Client.Client.Configuration.MergeConfigurations(
                Cloud.Governance.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Cloud.Governance.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Cloud.Governance.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Cloud.Governance.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DirectoryAdminApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DirectoryAdminApi(Cloud.Governance.Client.Client.ISynchronousClient client,Cloud.Governance.Client.Client.IAsynchronousClient asyncClient, Cloud.Governance.Client.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Cloud.Governance.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Cloud.Governance.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Cloud.Governance.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Cloud.Governance.Client.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Cloud.Governance.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// apply groups policy 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applyPolicyRequestModel"> (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> ApplyGroupsPolicy (ApplyPolicyRequestModel applyPolicyRequestModel = default(ApplyPolicyRequestModel))
        {
             Cloud.Governance.Client.Client.ApiResponse<List<string>> localVarResponse = ApplyGroupsPolicyWithHttpInfo(applyPolicyRequestModel);
             return localVarResponse.Data;
        }

        /// <summary>
        /// apply groups policy 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applyPolicyRequestModel"> (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public Cloud.Governance.Client.Client.ApiResponse< List<string> > ApplyGroupsPolicyWithHttpInfo (ApplyPolicyRequestModel applyPolicyRequestModel = default(ApplyPolicyRequestModel))
        {
            Cloud.Governance.Client.Client.RequestOptions localVarRequestOptions = new Cloud.Governance.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = applyPolicyRequestModel;

            // authentication (ClientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientId", this.Configuration.GetApiKeyWithPrefix("clientId"));
            }
            // authentication (ClientSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientSecret", this.Configuration.GetApiKeyWithPrefix("clientSecret"));
            }
            // authentication (UserPrincipalName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("userPrincipalName")))
            {
                localVarRequestOptions.HeaderParameters.Add("userPrincipalName", this.Configuration.GetApiKeyWithPrefix("userPrincipalName"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< List<string> >("/admin/directory/groups/policy", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplyGroupsPolicy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// apply groups policy 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applyPolicyRequestModel"> (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> ApplyGroupsPolicyAsync (ApplyPolicyRequestModel applyPolicyRequestModel = default(ApplyPolicyRequestModel))
        {
             Cloud.Governance.Client.Client.ApiResponse<List<string>> localVarResponse = await ApplyGroupsPolicyAsyncWithHttpInfo(applyPolicyRequestModel);
             return localVarResponse.Data;

        }

        /// <summary>
        /// apply groups policy 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applyPolicyRequestModel"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.Client.Client.ApiResponse<List<string>>> ApplyGroupsPolicyAsyncWithHttpInfo (ApplyPolicyRequestModel applyPolicyRequestModel = default(ApplyPolicyRequestModel))
        {

            Cloud.Governance.Client.Client.RequestOptions localVarRequestOptions = new Cloud.Governance.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = applyPolicyRequestModel;

            // authentication (ClientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientId", this.Configuration.GetApiKeyWithPrefix("clientId"));
            }
            // authentication (ClientSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientSecret", this.Configuration.GetApiKeyWithPrefix("clientSecret"));
            }
            // authentication (UserPrincipalName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("userPrincipalName")))
            {
                localVarRequestOptions.HeaderParameters.Add("userPrincipalName", this.Configuration.GetApiKeyWithPrefix("userPrincipalName"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<string>>("/admin/directory/groups/policy", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplyGroupsPolicy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// apply sites policy 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applyPolicyRequestModel"> (optional)</param>
        /// <returns></returns>
        public void ApplySitesPolicy (ApplyPolicyRequestModel applyPolicyRequestModel = default(ApplyPolicyRequestModel))
        {
             ApplySitesPolicyWithHttpInfo(applyPolicyRequestModel);
        }

        /// <summary>
        /// apply sites policy 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applyPolicyRequestModel"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.Client.Client.ApiResponse<Object> ApplySitesPolicyWithHttpInfo (ApplyPolicyRequestModel applyPolicyRequestModel = default(ApplyPolicyRequestModel))
        {
            Cloud.Governance.Client.Client.RequestOptions localVarRequestOptions = new Cloud.Governance.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = applyPolicyRequestModel;

            // authentication (ClientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientId", this.Configuration.GetApiKeyWithPrefix("clientId"));
            }
            // authentication (ClientSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientSecret", this.Configuration.GetApiKeyWithPrefix("clientSecret"));
            }
            // authentication (UserPrincipalName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("userPrincipalName")))
            {
                localVarRequestOptions.HeaderParameters.Add("userPrincipalName", this.Configuration.GetApiKeyWithPrefix("userPrincipalName"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/admin/directory/sites/policy", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplySitesPolicy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// apply sites policy 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applyPolicyRequestModel"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApplySitesPolicyAsync (ApplyPolicyRequestModel applyPolicyRequestModel = default(ApplyPolicyRequestModel))
        {
             await ApplySitesPolicyAsyncWithHttpInfo(applyPolicyRequestModel);

        }

        /// <summary>
        /// apply sites policy 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applyPolicyRequestModel"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.Client.Client.ApiResponse<Object>> ApplySitesPolicyAsyncWithHttpInfo (ApplyPolicyRequestModel applyPolicyRequestModel = default(ApplyPolicyRequestModel))
        {

            Cloud.Governance.Client.Client.RequestOptions localVarRequestOptions = new Cloud.Governance.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = applyPolicyRequestModel;

            // authentication (ClientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientId", this.Configuration.GetApiKeyWithPrefix("clientId"));
            }
            // authentication (ClientSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientSecret", this.Configuration.GetApiKeyWithPrefix("clientSecret"));
            }
            // authentication (UserPrincipalName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("userPrincipalName")))
            {
                localVarRequestOptions.HeaderParameters.Add("userPrincipalName", this.Configuration.GetApiKeyWithPrefix("userPrincipalName"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/admin/directory/sites/policy", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplySitesPolicy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// apply teams policy 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applyPolicyRequestModel"> (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> ApplyTeamsPolicy (ApplyPolicyRequestModel applyPolicyRequestModel = default(ApplyPolicyRequestModel))
        {
             Cloud.Governance.Client.Client.ApiResponse<List<string>> localVarResponse = ApplyTeamsPolicyWithHttpInfo(applyPolicyRequestModel);
             return localVarResponse.Data;
        }

        /// <summary>
        /// apply teams policy 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applyPolicyRequestModel"> (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public Cloud.Governance.Client.Client.ApiResponse< List<string> > ApplyTeamsPolicyWithHttpInfo (ApplyPolicyRequestModel applyPolicyRequestModel = default(ApplyPolicyRequestModel))
        {
            Cloud.Governance.Client.Client.RequestOptions localVarRequestOptions = new Cloud.Governance.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = applyPolicyRequestModel;

            // authentication (ClientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientId", this.Configuration.GetApiKeyWithPrefix("clientId"));
            }
            // authentication (ClientSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientSecret", this.Configuration.GetApiKeyWithPrefix("clientSecret"));
            }
            // authentication (UserPrincipalName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("userPrincipalName")))
            {
                localVarRequestOptions.HeaderParameters.Add("userPrincipalName", this.Configuration.GetApiKeyWithPrefix("userPrincipalName"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< List<string> >("/admin/directory/teams/policy", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplyTeamsPolicy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// apply teams policy 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applyPolicyRequestModel"> (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> ApplyTeamsPolicyAsync (ApplyPolicyRequestModel applyPolicyRequestModel = default(ApplyPolicyRequestModel))
        {
             Cloud.Governance.Client.Client.ApiResponse<List<string>> localVarResponse = await ApplyTeamsPolicyAsyncWithHttpInfo(applyPolicyRequestModel);
             return localVarResponse.Data;

        }

        /// <summary>
        /// apply teams policy 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applyPolicyRequestModel"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.Client.Client.ApiResponse<List<string>>> ApplyTeamsPolicyAsyncWithHttpInfo (ApplyPolicyRequestModel applyPolicyRequestModel = default(ApplyPolicyRequestModel))
        {

            Cloud.Governance.Client.Client.RequestOptions localVarRequestOptions = new Cloud.Governance.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = applyPolicyRequestModel;

            // authentication (ClientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientId", this.Configuration.GetApiKeyWithPrefix("clientId"));
            }
            // authentication (ClientSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientSecret", this.Configuration.GetApiKeyWithPrefix("clientSecret"));
            }
            // authentication (UserPrincipalName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("userPrincipalName")))
            {
                localVarRequestOptions.HeaderParameters.Add("userPrincipalName", this.Configuration.GetApiKeyWithPrefix("userPrincipalName"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<string>>("/admin/directory/teams/policy", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplyTeamsPolicy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// elect sites contact 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="electUserRequestModel"> (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> ElectContact (ElectUserRequestModel electUserRequestModel = default(ElectUserRequestModel))
        {
             Cloud.Governance.Client.Client.ApiResponse<List<string>> localVarResponse = ElectContactWithHttpInfo(electUserRequestModel);
             return localVarResponse.Data;
        }

        /// <summary>
        /// elect sites contact 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="electUserRequestModel"> (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public Cloud.Governance.Client.Client.ApiResponse< List<string> > ElectContactWithHttpInfo (ElectUserRequestModel electUserRequestModel = default(ElectUserRequestModel))
        {
            Cloud.Governance.Client.Client.RequestOptions localVarRequestOptions = new Cloud.Governance.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = electUserRequestModel;

            // authentication (ClientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientId", this.Configuration.GetApiKeyWithPrefix("clientId"));
            }
            // authentication (ClientSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientSecret", this.Configuration.GetApiKeyWithPrefix("clientSecret"));
            }
            // authentication (UserPrincipalName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("userPrincipalName")))
            {
                localVarRequestOptions.HeaderParameters.Add("userPrincipalName", this.Configuration.GetApiKeyWithPrefix("userPrincipalName"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< List<string> >("/admin/directory/sites/contact/election", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ElectContact", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// elect sites contact 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="electUserRequestModel"> (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> ElectContactAsync (ElectUserRequestModel electUserRequestModel = default(ElectUserRequestModel))
        {
             Cloud.Governance.Client.Client.ApiResponse<List<string>> localVarResponse = await ElectContactAsyncWithHttpInfo(electUserRequestModel);
             return localVarResponse.Data;

        }

        /// <summary>
        /// elect sites contact 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="electUserRequestModel"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.Client.Client.ApiResponse<List<string>>> ElectContactAsyncWithHttpInfo (ElectUserRequestModel electUserRequestModel = default(ElectUserRequestModel))
        {

            Cloud.Governance.Client.Client.RequestOptions localVarRequestOptions = new Cloud.Governance.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = electUserRequestModel;

            // authentication (ClientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientId", this.Configuration.GetApiKeyWithPrefix("clientId"));
            }
            // authentication (ClientSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientSecret", this.Configuration.GetApiKeyWithPrefix("clientSecret"));
            }
            // authentication (UserPrincipalName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("userPrincipalName")))
            {
                localVarRequestOptions.HeaderParameters.Add("userPrincipalName", this.Configuration.GetApiKeyWithPrefix("userPrincipalName"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<string>>("/admin/directory/sites/contact/election", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ElectContact", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// get all sites contacts 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        public string GetAllMailContacts ()
        {
             Cloud.Governance.Client.Client.ApiResponse<string> localVarResponse = GetAllMailContactsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// get all sites contacts 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        public Cloud.Governance.Client.Client.ApiResponse< string > GetAllMailContactsWithHttpInfo ()
        {
            Cloud.Governance.Client.Client.RequestOptions localVarRequestOptions = new Cloud.Governance.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (ClientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientId", this.Configuration.GetApiKeyWithPrefix("clientId"));
            }
            // authentication (ClientSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientSecret", this.Configuration.GetApiKeyWithPrefix("clientSecret"));
            }
            // authentication (UserPrincipalName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("userPrincipalName")))
            {
                localVarRequestOptions.HeaderParameters.Add("userPrincipalName", this.Configuration.GetApiKeyWithPrefix("userPrincipalName"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< string >("/admin/directory/sites/contact/mail", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllMailContacts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// get all sites contacts 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetAllMailContactsAsync ()
        {
             Cloud.Governance.Client.Client.ApiResponse<string> localVarResponse = await GetAllMailContactsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// get all sites contacts 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.Client.Client.ApiResponse<string>> GetAllMailContactsAsyncWithHttpInfo ()
        {

            Cloud.Governance.Client.Client.RequestOptions localVarRequestOptions = new Cloud.Governance.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            

            // authentication (ClientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientId", this.Configuration.GetApiKeyWithPrefix("clientId"));
            }
            // authentication (ClientSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientSecret", this.Configuration.GetApiKeyWithPrefix("clientSecret"));
            }
            // authentication (UserPrincipalName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("userPrincipalName")))
            {
                localVarRequestOptions.HeaderParameters.Add("userPrincipalName", this.Configuration.GetApiKeyWithPrefix("userPrincipalName"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/admin/directory/sites/contact/mail", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllMailContacts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// get managed groups filters 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; groupId, groupName, groupSharing, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; groupId, groupName, groupSharing, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>DistinctPageResult</returns>
        public DistinctPageResult GetManagedGroupFilters (string filter = default(string), string distinct = default(string), int? top = default(int?), int? skip = default(int?))
        {
             Cloud.Governance.Client.Client.ApiResponse<DistinctPageResult> localVarResponse = GetManagedGroupFiltersWithHttpInfo(filter, distinct, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get managed groups filters 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; groupId, groupName, groupSharing, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; groupId, groupName, groupSharing, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>ApiResponse of DistinctPageResult</returns>
        public Cloud.Governance.Client.Client.ApiResponse< DistinctPageResult > GetManagedGroupFiltersWithHttpInfo (string filter = default(string), string distinct = default(string), int? top = default(int?), int? skip = default(int?))
        {
            Cloud.Governance.Client.Client.RequestOptions localVarRequestOptions = new Cloud.Governance.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (filter != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (distinct != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "distinct", distinct))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (top != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (ClientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientId", this.Configuration.GetApiKeyWithPrefix("clientId"));
            }
            // authentication (ClientSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientSecret", this.Configuration.GetApiKeyWithPrefix("clientSecret"));
            }
            // authentication (UserPrincipalName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("userPrincipalName")))
            {
                localVarRequestOptions.HeaderParameters.Add("userPrincipalName", this.Configuration.GetApiKeyWithPrefix("userPrincipalName"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< DistinctPageResult >("/admin/directory/groups/filters", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetManagedGroupFilters", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// get managed groups filters 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; groupId, groupName, groupSharing, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; groupId, groupName, groupSharing, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of DistinctPageResult</returns>
        public async System.Threading.Tasks.Task<DistinctPageResult> GetManagedGroupFiltersAsync (string filter = default(string), string distinct = default(string), int? top = default(int?), int? skip = default(int?))
        {
             Cloud.Governance.Client.Client.ApiResponse<DistinctPageResult> localVarResponse = await GetManagedGroupFiltersAsyncWithHttpInfo(filter, distinct, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get managed groups filters 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; groupId, groupName, groupSharing, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; groupId, groupName, groupSharing, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of ApiResponse (DistinctPageResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.Client.Client.ApiResponse<DistinctPageResult>> GetManagedGroupFiltersAsyncWithHttpInfo (string filter = default(string), string distinct = default(string), int? top = default(int?), int? skip = default(int?))
        {

            Cloud.Governance.Client.Client.RequestOptions localVarRequestOptions = new Cloud.Governance.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (filter != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (distinct != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "distinct", distinct))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (top != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (ClientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientId", this.Configuration.GetApiKeyWithPrefix("clientId"));
            }
            // authentication (ClientSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientSecret", this.Configuration.GetApiKeyWithPrefix("clientSecret"));
            }
            // authentication (UserPrincipalName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("userPrincipalName")))
            {
                localVarRequestOptions.HeaderParameters.Add("userPrincipalName", this.Configuration.GetApiKeyWithPrefix("userPrincipalName"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DistinctPageResult>("/admin/directory/groups/filters", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetManagedGroupFilters", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// get all managed groups 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; groupId, groupName, groupSharing, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; groupId, groupName, groupSharing, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="search">Search for groupName (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>GroupGridModelPageResult</returns>
        public GroupGridModelPageResult GetManagedGroups (string filter = default(string), string orderby = default(string), string search = default(string), int? top = default(int?), int? skip = default(int?))
        {
             Cloud.Governance.Client.Client.ApiResponse<GroupGridModelPageResult> localVarResponse = GetManagedGroupsWithHttpInfo(filter, orderby, search, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get all managed groups 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; groupId, groupName, groupSharing, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; groupId, groupName, groupSharing, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="search">Search for groupName (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>ApiResponse of GroupGridModelPageResult</returns>
        public Cloud.Governance.Client.Client.ApiResponse< GroupGridModelPageResult > GetManagedGroupsWithHttpInfo (string filter = default(string), string orderby = default(string), string search = default(string), int? top = default(int?), int? skip = default(int?))
        {
            Cloud.Governance.Client.Client.RequestOptions localVarRequestOptions = new Cloud.Governance.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (filter != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (orderby != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (search != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "search", search))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (top != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (ClientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientId", this.Configuration.GetApiKeyWithPrefix("clientId"));
            }
            // authentication (ClientSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientSecret", this.Configuration.GetApiKeyWithPrefix("clientSecret"));
            }
            // authentication (UserPrincipalName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("userPrincipalName")))
            {
                localVarRequestOptions.HeaderParameters.Add("userPrincipalName", this.Configuration.GetApiKeyWithPrefix("userPrincipalName"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< GroupGridModelPageResult >("/admin/directory/groups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetManagedGroups", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// get all managed groups 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; groupId, groupName, groupSharing, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; groupId, groupName, groupSharing, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="search">Search for groupName (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of GroupGridModelPageResult</returns>
        public async System.Threading.Tasks.Task<GroupGridModelPageResult> GetManagedGroupsAsync (string filter = default(string), string orderby = default(string), string search = default(string), int? top = default(int?), int? skip = default(int?))
        {
             Cloud.Governance.Client.Client.ApiResponse<GroupGridModelPageResult> localVarResponse = await GetManagedGroupsAsyncWithHttpInfo(filter, orderby, search, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get all managed groups 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; groupId, groupName, groupSharing, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; groupId, groupName, groupSharing, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="search">Search for groupName (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of ApiResponse (GroupGridModelPageResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.Client.Client.ApiResponse<GroupGridModelPageResult>> GetManagedGroupsAsyncWithHttpInfo (string filter = default(string), string orderby = default(string), string search = default(string), int? top = default(int?), int? skip = default(int?))
        {

            Cloud.Governance.Client.Client.RequestOptions localVarRequestOptions = new Cloud.Governance.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (filter != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (orderby != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (search != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "search", search))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (top != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (ClientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientId", this.Configuration.GetApiKeyWithPrefix("clientId"));
            }
            // authentication (ClientSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientSecret", this.Configuration.GetApiKeyWithPrefix("clientSecret"));
            }
            // authentication (UserPrincipalName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("userPrincipalName")))
            {
                localVarRequestOptions.HeaderParameters.Add("userPrincipalName", this.Configuration.GetApiKeyWithPrefix("userPrincipalName"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GroupGridModelPageResult>("/admin/directory/groups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetManagedGroups", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// get all managed sites 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, description, title, url, department, policyName, policyId, template, owner, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, additionalAdministrators, additionalAdministratorDisplayNames, createdTime, status, claimStatus, sharing, storageQuota, storageUsed, inactivityThresholdTime, leaseExpirationTime, permissionRecertificationStatus, metadataRecertificationStatus, ownershipRecertificationStatus, geoLocation, hub, phase (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, description, title, url, department, policyName, policyId, template, owner, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, additionalAdministrators, additionalAdministratorDisplayNames, createdTime, status, claimStatus, sharing, storageQuota, storageUsed, inactivityThresholdTime, leaseExpirationTime, permissionRecertificationStatus, metadataRecertificationStatus, ownershipRecertificationStatus, geoLocation, hub, phase (optional)</param>
        /// <param name="search">Search for url (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>SiteListPageResult</returns>
        public SiteListPageResult GetManagedSites (string filter = default(string), string orderby = default(string), string search = default(string), int? top = default(int?), int? skip = default(int?))
        {
             Cloud.Governance.Client.Client.ApiResponse<SiteListPageResult> localVarResponse = GetManagedSitesWithHttpInfo(filter, orderby, search, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get all managed sites 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, description, title, url, department, policyName, policyId, template, owner, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, additionalAdministrators, additionalAdministratorDisplayNames, createdTime, status, claimStatus, sharing, storageQuota, storageUsed, inactivityThresholdTime, leaseExpirationTime, permissionRecertificationStatus, metadataRecertificationStatus, ownershipRecertificationStatus, geoLocation, hub, phase (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, description, title, url, department, policyName, policyId, template, owner, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, additionalAdministrators, additionalAdministratorDisplayNames, createdTime, status, claimStatus, sharing, storageQuota, storageUsed, inactivityThresholdTime, leaseExpirationTime, permissionRecertificationStatus, metadataRecertificationStatus, ownershipRecertificationStatus, geoLocation, hub, phase (optional)</param>
        /// <param name="search">Search for url (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>ApiResponse of SiteListPageResult</returns>
        public Cloud.Governance.Client.Client.ApiResponse< SiteListPageResult > GetManagedSitesWithHttpInfo (string filter = default(string), string orderby = default(string), string search = default(string), int? top = default(int?), int? skip = default(int?))
        {
            Cloud.Governance.Client.Client.RequestOptions localVarRequestOptions = new Cloud.Governance.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (filter != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (orderby != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (search != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "search", search))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (top != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (ClientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientId", this.Configuration.GetApiKeyWithPrefix("clientId"));
            }
            // authentication (ClientSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientSecret", this.Configuration.GetApiKeyWithPrefix("clientSecret"));
            }
            // authentication (UserPrincipalName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("userPrincipalName")))
            {
                localVarRequestOptions.HeaderParameters.Add("userPrincipalName", this.Configuration.GetApiKeyWithPrefix("userPrincipalName"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< SiteListPageResult >("/admin/directory/sites", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetManagedSites", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// get all managed sites 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, description, title, url, department, policyName, policyId, template, owner, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, additionalAdministrators, additionalAdministratorDisplayNames, createdTime, status, claimStatus, sharing, storageQuota, storageUsed, inactivityThresholdTime, leaseExpirationTime, permissionRecertificationStatus, metadataRecertificationStatus, ownershipRecertificationStatus, geoLocation, hub, phase (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, description, title, url, department, policyName, policyId, template, owner, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, additionalAdministrators, additionalAdministratorDisplayNames, createdTime, status, claimStatus, sharing, storageQuota, storageUsed, inactivityThresholdTime, leaseExpirationTime, permissionRecertificationStatus, metadataRecertificationStatus, ownershipRecertificationStatus, geoLocation, hub, phase (optional)</param>
        /// <param name="search">Search for url (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of SiteListPageResult</returns>
        public async System.Threading.Tasks.Task<SiteListPageResult> GetManagedSitesAsync (string filter = default(string), string orderby = default(string), string search = default(string), int? top = default(int?), int? skip = default(int?))
        {
             Cloud.Governance.Client.Client.ApiResponse<SiteListPageResult> localVarResponse = await GetManagedSitesAsyncWithHttpInfo(filter, orderby, search, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get all managed sites 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, description, title, url, department, policyName, policyId, template, owner, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, additionalAdministrators, additionalAdministratorDisplayNames, createdTime, status, claimStatus, sharing, storageQuota, storageUsed, inactivityThresholdTime, leaseExpirationTime, permissionRecertificationStatus, metadataRecertificationStatus, ownershipRecertificationStatus, geoLocation, hub, phase (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, description, title, url, department, policyName, policyId, template, owner, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, additionalAdministrators, additionalAdministratorDisplayNames, createdTime, status, claimStatus, sharing, storageQuota, storageUsed, inactivityThresholdTime, leaseExpirationTime, permissionRecertificationStatus, metadataRecertificationStatus, ownershipRecertificationStatus, geoLocation, hub, phase (optional)</param>
        /// <param name="search">Search for url (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of ApiResponse (SiteListPageResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.Client.Client.ApiResponse<SiteListPageResult>> GetManagedSitesAsyncWithHttpInfo (string filter = default(string), string orderby = default(string), string search = default(string), int? top = default(int?), int? skip = default(int?))
        {

            Cloud.Governance.Client.Client.RequestOptions localVarRequestOptions = new Cloud.Governance.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (filter != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (orderby != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (search != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "search", search))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (top != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (ClientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientId", this.Configuration.GetApiKeyWithPrefix("clientId"));
            }
            // authentication (ClientSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientSecret", this.Configuration.GetApiKeyWithPrefix("clientSecret"));
            }
            // authentication (UserPrincipalName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("userPrincipalName")))
            {
                localVarRequestOptions.HeaderParameters.Add("userPrincipalName", this.Configuration.GetApiKeyWithPrefix("userPrincipalName"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SiteListPageResult>("/admin/directory/sites", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetManagedSites", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// get managed sites filters 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, description, title, url, department, policyName, policyId, template, owner, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, additionalAdministrators, additionalAdministratorDisplayNames, createdTime, status, claimStatus, sharing, storageQuota, storageUsed, inactivityThresholdTime, leaseExpirationTime, permissionRecertificationStatus, metadataRecertificationStatus, ownershipRecertificationStatus, geoLocation, hub, phase (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, description, title, url, department, policyName, policyId, template, owner, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, additionalAdministrators, additionalAdministratorDisplayNames, createdTime, status, claimStatus, sharing, storageQuota, storageUsed, inactivityThresholdTime, leaseExpirationTime, permissionRecertificationStatus, metadataRecertificationStatus, ownershipRecertificationStatus, geoLocation, hub, phase (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>DistinctPageResult</returns>
        public DistinctPageResult GetManagedSitesFilters (string filter = default(string), string distinct = default(string), int? top = default(int?), int? skip = default(int?))
        {
             Cloud.Governance.Client.Client.ApiResponse<DistinctPageResult> localVarResponse = GetManagedSitesFiltersWithHttpInfo(filter, distinct, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get managed sites filters 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, description, title, url, department, policyName, policyId, template, owner, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, additionalAdministrators, additionalAdministratorDisplayNames, createdTime, status, claimStatus, sharing, storageQuota, storageUsed, inactivityThresholdTime, leaseExpirationTime, permissionRecertificationStatus, metadataRecertificationStatus, ownershipRecertificationStatus, geoLocation, hub, phase (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, description, title, url, department, policyName, policyId, template, owner, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, additionalAdministrators, additionalAdministratorDisplayNames, createdTime, status, claimStatus, sharing, storageQuota, storageUsed, inactivityThresholdTime, leaseExpirationTime, permissionRecertificationStatus, metadataRecertificationStatus, ownershipRecertificationStatus, geoLocation, hub, phase (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>ApiResponse of DistinctPageResult</returns>
        public Cloud.Governance.Client.Client.ApiResponse< DistinctPageResult > GetManagedSitesFiltersWithHttpInfo (string filter = default(string), string distinct = default(string), int? top = default(int?), int? skip = default(int?))
        {
            Cloud.Governance.Client.Client.RequestOptions localVarRequestOptions = new Cloud.Governance.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (filter != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (distinct != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "distinct", distinct))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (top != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (ClientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientId", this.Configuration.GetApiKeyWithPrefix("clientId"));
            }
            // authentication (ClientSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientSecret", this.Configuration.GetApiKeyWithPrefix("clientSecret"));
            }
            // authentication (UserPrincipalName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("userPrincipalName")))
            {
                localVarRequestOptions.HeaderParameters.Add("userPrincipalName", this.Configuration.GetApiKeyWithPrefix("userPrincipalName"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< DistinctPageResult >("/admin/directory/sites/filters", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetManagedSitesFilters", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// get managed sites filters 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, description, title, url, department, policyName, policyId, template, owner, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, additionalAdministrators, additionalAdministratorDisplayNames, createdTime, status, claimStatus, sharing, storageQuota, storageUsed, inactivityThresholdTime, leaseExpirationTime, permissionRecertificationStatus, metadataRecertificationStatus, ownershipRecertificationStatus, geoLocation, hub, phase (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, description, title, url, department, policyName, policyId, template, owner, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, additionalAdministrators, additionalAdministratorDisplayNames, createdTime, status, claimStatus, sharing, storageQuota, storageUsed, inactivityThresholdTime, leaseExpirationTime, permissionRecertificationStatus, metadataRecertificationStatus, ownershipRecertificationStatus, geoLocation, hub, phase (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of DistinctPageResult</returns>
        public async System.Threading.Tasks.Task<DistinctPageResult> GetManagedSitesFiltersAsync (string filter = default(string), string distinct = default(string), int? top = default(int?), int? skip = default(int?))
        {
             Cloud.Governance.Client.Client.ApiResponse<DistinctPageResult> localVarResponse = await GetManagedSitesFiltersAsyncWithHttpInfo(filter, distinct, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get managed sites filters 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, description, title, url, department, policyName, policyId, template, owner, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, additionalAdministrators, additionalAdministratorDisplayNames, createdTime, status, claimStatus, sharing, storageQuota, storageUsed, inactivityThresholdTime, leaseExpirationTime, permissionRecertificationStatus, metadataRecertificationStatus, ownershipRecertificationStatus, geoLocation, hub, phase (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, description, title, url, department, policyName, policyId, template, owner, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, additionalAdministrators, additionalAdministratorDisplayNames, createdTime, status, claimStatus, sharing, storageQuota, storageUsed, inactivityThresholdTime, leaseExpirationTime, permissionRecertificationStatus, metadataRecertificationStatus, ownershipRecertificationStatus, geoLocation, hub, phase (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of ApiResponse (DistinctPageResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.Client.Client.ApiResponse<DistinctPageResult>> GetManagedSitesFiltersAsyncWithHttpInfo (string filter = default(string), string distinct = default(string), int? top = default(int?), int? skip = default(int?))
        {

            Cloud.Governance.Client.Client.RequestOptions localVarRequestOptions = new Cloud.Governance.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (filter != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (distinct != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "distinct", distinct))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (top != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (ClientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientId", this.Configuration.GetApiKeyWithPrefix("clientId"));
            }
            // authentication (ClientSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientSecret", this.Configuration.GetApiKeyWithPrefix("clientSecret"));
            }
            // authentication (UserPrincipalName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("userPrincipalName")))
            {
                localVarRequestOptions.HeaderParameters.Add("userPrincipalName", this.Configuration.GetApiKeyWithPrefix("userPrincipalName"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DistinctPageResult>("/admin/directory/sites/filters", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetManagedSitesFilters", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// get managed teams filters 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; teamsId, teamsName, teamsSharing, enableTeamsArchive, enableTeamsRestore, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; teamsId, teamsName, teamsSharing, enableTeamsArchive, enableTeamsRestore, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>DistinctPageResult</returns>
        public DistinctPageResult GetManagedTeamFilters (string filter = default(string), string distinct = default(string), int? top = default(int?), int? skip = default(int?))
        {
             Cloud.Governance.Client.Client.ApiResponse<DistinctPageResult> localVarResponse = GetManagedTeamFiltersWithHttpInfo(filter, distinct, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get managed teams filters 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; teamsId, teamsName, teamsSharing, enableTeamsArchive, enableTeamsRestore, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; teamsId, teamsName, teamsSharing, enableTeamsArchive, enableTeamsRestore, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>ApiResponse of DistinctPageResult</returns>
        public Cloud.Governance.Client.Client.ApiResponse< DistinctPageResult > GetManagedTeamFiltersWithHttpInfo (string filter = default(string), string distinct = default(string), int? top = default(int?), int? skip = default(int?))
        {
            Cloud.Governance.Client.Client.RequestOptions localVarRequestOptions = new Cloud.Governance.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (filter != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (distinct != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "distinct", distinct))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (top != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (ClientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientId", this.Configuration.GetApiKeyWithPrefix("clientId"));
            }
            // authentication (ClientSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientSecret", this.Configuration.GetApiKeyWithPrefix("clientSecret"));
            }
            // authentication (UserPrincipalName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("userPrincipalName")))
            {
                localVarRequestOptions.HeaderParameters.Add("userPrincipalName", this.Configuration.GetApiKeyWithPrefix("userPrincipalName"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< DistinctPageResult >("/admin/directory/teams/filters", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetManagedTeamFilters", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// get managed teams filters 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; teamsId, teamsName, teamsSharing, enableTeamsArchive, enableTeamsRestore, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; teamsId, teamsName, teamsSharing, enableTeamsArchive, enableTeamsRestore, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of DistinctPageResult</returns>
        public async System.Threading.Tasks.Task<DistinctPageResult> GetManagedTeamFiltersAsync (string filter = default(string), string distinct = default(string), int? top = default(int?), int? skip = default(int?))
        {
             Cloud.Governance.Client.Client.ApiResponse<DistinctPageResult> localVarResponse = await GetManagedTeamFiltersAsyncWithHttpInfo(filter, distinct, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get managed teams filters 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; teamsId, teamsName, teamsSharing, enableTeamsArchive, enableTeamsRestore, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; teamsId, teamsName, teamsSharing, enableTeamsArchive, enableTeamsRestore, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of ApiResponse (DistinctPageResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.Client.Client.ApiResponse<DistinctPageResult>> GetManagedTeamFiltersAsyncWithHttpInfo (string filter = default(string), string distinct = default(string), int? top = default(int?), int? skip = default(int?))
        {

            Cloud.Governance.Client.Client.RequestOptions localVarRequestOptions = new Cloud.Governance.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (filter != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (distinct != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "distinct", distinct))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (top != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (ClientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientId", this.Configuration.GetApiKeyWithPrefix("clientId"));
            }
            // authentication (ClientSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientSecret", this.Configuration.GetApiKeyWithPrefix("clientSecret"));
            }
            // authentication (UserPrincipalName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("userPrincipalName")))
            {
                localVarRequestOptions.HeaderParameters.Add("userPrincipalName", this.Configuration.GetApiKeyWithPrefix("userPrincipalName"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DistinctPageResult>("/admin/directory/teams/filters", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetManagedTeamFilters", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// get all managed teams 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; teamsId, teamsName, teamsSharing, enableTeamsArchive, enableTeamsRestore, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; teamsId, teamsName, teamsSharing, enableTeamsArchive, enableTeamsRestore, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="search">Search for teamsName (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>TeamsGridModelPageResult</returns>
        public TeamsGridModelPageResult GetManagedTeams (string filter = default(string), string orderby = default(string), string search = default(string), int? top = default(int?), int? skip = default(int?))
        {
             Cloud.Governance.Client.Client.ApiResponse<TeamsGridModelPageResult> localVarResponse = GetManagedTeamsWithHttpInfo(filter, orderby, search, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get all managed teams 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; teamsId, teamsName, teamsSharing, enableTeamsArchive, enableTeamsRestore, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; teamsId, teamsName, teamsSharing, enableTeamsArchive, enableTeamsRestore, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="search">Search for teamsName (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>ApiResponse of TeamsGridModelPageResult</returns>
        public Cloud.Governance.Client.Client.ApiResponse< TeamsGridModelPageResult > GetManagedTeamsWithHttpInfo (string filter = default(string), string orderby = default(string), string search = default(string), int? top = default(int?), int? skip = default(int?))
        {
            Cloud.Governance.Client.Client.RequestOptions localVarRequestOptions = new Cloud.Governance.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (filter != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (orderby != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (search != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "search", search))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (top != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (ClientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientId", this.Configuration.GetApiKeyWithPrefix("clientId"));
            }
            // authentication (ClientSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientSecret", this.Configuration.GetApiKeyWithPrefix("clientSecret"));
            }
            // authentication (UserPrincipalName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("userPrincipalName")))
            {
                localVarRequestOptions.HeaderParameters.Add("userPrincipalName", this.Configuration.GetApiKeyWithPrefix("userPrincipalName"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< TeamsGridModelPageResult >("/admin/directory/teams", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetManagedTeams", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// get all managed teams 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; teamsId, teamsName, teamsSharing, enableTeamsArchive, enableTeamsRestore, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; teamsId, teamsName, teamsSharing, enableTeamsArchive, enableTeamsRestore, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="search">Search for teamsName (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of TeamsGridModelPageResult</returns>
        public async System.Threading.Tasks.Task<TeamsGridModelPageResult> GetManagedTeamsAsync (string filter = default(string), string orderby = default(string), string search = default(string), int? top = default(int?), int? skip = default(int?))
        {
             Cloud.Governance.Client.Client.ApiResponse<TeamsGridModelPageResult> localVarResponse = await GetManagedTeamsAsyncWithHttpInfo(filter, orderby, search, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get all managed teams 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; teamsId, teamsName, teamsSharing, enableTeamsArchive, enableTeamsRestore, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; teamsId, teamsName, teamsSharing, enableTeamsArchive, enableTeamsRestore, id, objectId, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, owners, ownersDisplayName, policyName, policyId, privacy, subscribeMembers, teamsSiteSharing, outsideSenders, language, siteUrl, siteQuota, siteUsage, leaseExpirationTime, createdTime, enableLeaseExtension, enablePolicyChange, enableDeletion, enableSiteQuotaChange, enableLeaseManagement, enableInactivityThreshold, inactivityThresholdTime, classification, enableHiddenMembership, permissionRecertificationStatus, membershipRecertificationStatus, status, hub, geoLocation, phase (optional)</param>
        /// <param name="search">Search for teamsName (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of ApiResponse (TeamsGridModelPageResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.Client.Client.ApiResponse<TeamsGridModelPageResult>> GetManagedTeamsAsyncWithHttpInfo (string filter = default(string), string orderby = default(string), string search = default(string), int? top = default(int?), int? skip = default(int?))
        {

            Cloud.Governance.Client.Client.RequestOptions localVarRequestOptions = new Cloud.Governance.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (filter != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (orderby != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (search != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "search", search))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (top != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (ClientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientId", this.Configuration.GetApiKeyWithPrefix("clientId"));
            }
            // authentication (ClientSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientSecret", this.Configuration.GetApiKeyWithPrefix("clientSecret"));
            }
            // authentication (UserPrincipalName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("userPrincipalName")))
            {
                localVarRequestOptions.HeaderParameters.Add("userPrincipalName", this.Configuration.GetApiKeyWithPrefix("userPrincipalName"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TeamsGridModelPageResult>("/admin/directory/teams", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetManagedTeams", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// get all managed webs 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, description, title, url, template, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, createdTime, status (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, description, title, url, template, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, createdTime, status (optional)</param>
        /// <param name="search">Search for url (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>WebListPageResult</returns>
        public WebListPageResult GetManagedWebs (string filter = default(string), string orderby = default(string), string search = default(string), int? top = default(int?), int? skip = default(int?))
        {
             Cloud.Governance.Client.Client.ApiResponse<WebListPageResult> localVarResponse = GetManagedWebsWithHttpInfo(filter, orderby, search, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get all managed webs 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, description, title, url, template, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, createdTime, status (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, description, title, url, template, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, createdTime, status (optional)</param>
        /// <param name="search">Search for url (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>ApiResponse of WebListPageResult</returns>
        public Cloud.Governance.Client.Client.ApiResponse< WebListPageResult > GetManagedWebsWithHttpInfo (string filter = default(string), string orderby = default(string), string search = default(string), int? top = default(int?), int? skip = default(int?))
        {
            Cloud.Governance.Client.Client.RequestOptions localVarRequestOptions = new Cloud.Governance.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (filter != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (orderby != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (search != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "search", search))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (top != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (ClientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientId", this.Configuration.GetApiKeyWithPrefix("clientId"));
            }
            // authentication (ClientSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientSecret", this.Configuration.GetApiKeyWithPrefix("clientSecret"));
            }
            // authentication (UserPrincipalName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("userPrincipalName")))
            {
                localVarRequestOptions.HeaderParameters.Add("userPrincipalName", this.Configuration.GetApiKeyWithPrefix("userPrincipalName"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< WebListPageResult >("/admin/directory/webs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetManagedWebs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// get all managed webs 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, description, title, url, template, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, createdTime, status (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, description, title, url, template, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, createdTime, status (optional)</param>
        /// <param name="search">Search for url (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of WebListPageResult</returns>
        public async System.Threading.Tasks.Task<WebListPageResult> GetManagedWebsAsync (string filter = default(string), string orderby = default(string), string search = default(string), int? top = default(int?), int? skip = default(int?))
        {
             Cloud.Governance.Client.Client.ApiResponse<WebListPageResult> localVarResponse = await GetManagedWebsAsyncWithHttpInfo(filter, orderby, search, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get all managed webs 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, description, title, url, template, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, createdTime, status (optional)</param>
        /// <param name="orderby">Order by one field, supported fields:&lt;br/&gt; id, description, title, url, template, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, createdTime, status (optional)</param>
        /// <param name="search">Search for url (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of ApiResponse (WebListPageResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.Client.Client.ApiResponse<WebListPageResult>> GetManagedWebsAsyncWithHttpInfo (string filter = default(string), string orderby = default(string), string search = default(string), int? top = default(int?), int? skip = default(int?))
        {

            Cloud.Governance.Client.Client.RequestOptions localVarRequestOptions = new Cloud.Governance.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (filter != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (orderby != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (search != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "search", search))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (top != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (ClientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientId", this.Configuration.GetApiKeyWithPrefix("clientId"));
            }
            // authentication (ClientSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientSecret", this.Configuration.GetApiKeyWithPrefix("clientSecret"));
            }
            // authentication (UserPrincipalName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("userPrincipalName")))
            {
                localVarRequestOptions.HeaderParameters.Add("userPrincipalName", this.Configuration.GetApiKeyWithPrefix("userPrincipalName"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<WebListPageResult>("/admin/directory/webs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetManagedWebs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// get managed webs filters 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, description, title, url, template, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, createdTime, status (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, description, title, url, template, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, createdTime, status (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>DistinctPageResult</returns>
        public DistinctPageResult GetManagedWebsFilters (string filter = default(string), string distinct = default(string), int? top = default(int?), int? skip = default(int?))
        {
             Cloud.Governance.Client.Client.ApiResponse<DistinctPageResult> localVarResponse = GetManagedWebsFiltersWithHttpInfo(filter, distinct, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get managed webs filters 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, description, title, url, template, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, createdTime, status (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, description, title, url, template, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, createdTime, status (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>ApiResponse of DistinctPageResult</returns>
        public Cloud.Governance.Client.Client.ApiResponse< DistinctPageResult > GetManagedWebsFiltersWithHttpInfo (string filter = default(string), string distinct = default(string), int? top = default(int?), int? skip = default(int?))
        {
            Cloud.Governance.Client.Client.RequestOptions localVarRequestOptions = new Cloud.Governance.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (filter != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (distinct != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "distinct", distinct))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (top != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (ClientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientId", this.Configuration.GetApiKeyWithPrefix("clientId"));
            }
            // authentication (ClientSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientSecret", this.Configuration.GetApiKeyWithPrefix("clientSecret"));
            }
            // authentication (UserPrincipalName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("userPrincipalName")))
            {
                localVarRequestOptions.HeaderParameters.Add("userPrincipalName", this.Configuration.GetApiKeyWithPrefix("userPrincipalName"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< DistinctPageResult >("/admin/directory/webs/filters", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetManagedWebsFilters", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// get managed webs filters 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, description, title, url, template, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, createdTime, status (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, description, title, url, template, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, createdTime, status (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of DistinctPageResult</returns>
        public async System.Threading.Tasks.Task<DistinctPageResult> GetManagedWebsFiltersAsync (string filter = default(string), string distinct = default(string), int? top = default(int?), int? skip = default(int?))
        {
             Cloud.Governance.Client.Client.ApiResponse<DistinctPageResult> localVarResponse = await GetManagedWebsFiltersAsyncWithHttpInfo(filter, distinct, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get managed webs filters 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq &#39;value1&#39; and field2 ne &#39;value2&#39;), supported fields :&lt;br/&gt; id, description, title, url, template, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, createdTime, status (optional)</param>
        /// <param name="distinct">Get the unique values for one field, supported fields:&lt;br/&gt; id, description, title, url, template, primaryContact, primaryContactDisplayName, secondaryContact, secondaryContactDisplayName, createdTime, status (optional)</param>
        /// <param name="top"> Define the number of records you want to return, max value is 200, default value is 200 (optional)</param>
        /// <param name="skip"> Define the number of records you want to skip, default value is 0 (optional)</param>
        /// <returns>Task of ApiResponse (DistinctPageResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.Client.Client.ApiResponse<DistinctPageResult>> GetManagedWebsFiltersAsyncWithHttpInfo (string filter = default(string), string distinct = default(string), int? top = default(int?), int? skip = default(int?))
        {

            Cloud.Governance.Client.Client.RequestOptions localVarRequestOptions = new Cloud.Governance.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (filter != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (distinct != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "distinct", distinct))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (top != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "top", top))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var _kvp in Cloud.Governance.Client.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (ClientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientId", this.Configuration.GetApiKeyWithPrefix("clientId"));
            }
            // authentication (ClientSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientSecret", this.Configuration.GetApiKeyWithPrefix("clientSecret"));
            }
            // authentication (UserPrincipalName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("userPrincipalName")))
            {
                localVarRequestOptions.HeaderParameters.Add("userPrincipalName", this.Configuration.GetApiKeyWithPrefix("userPrincipalName"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DistinctPageResult>("/admin/directory/webs/filters", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetManagedWebsFilters", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// specify selected sites contact 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specifyContactModel"> (optional)</param>
        /// <returns>SpecifyContactResultModel</returns>
        public SpecifyContactResultModel SpecifyContact (SpecifyContactModel specifyContactModel = default(SpecifyContactModel))
        {
             Cloud.Governance.Client.Client.ApiResponse<SpecifyContactResultModel> localVarResponse = SpecifyContactWithHttpInfo(specifyContactModel);
             return localVarResponse.Data;
        }

        /// <summary>
        /// specify selected sites contact 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specifyContactModel"> (optional)</param>
        /// <returns>ApiResponse of SpecifyContactResultModel</returns>
        public Cloud.Governance.Client.Client.ApiResponse< SpecifyContactResultModel > SpecifyContactWithHttpInfo (SpecifyContactModel specifyContactModel = default(SpecifyContactModel))
        {
            Cloud.Governance.Client.Client.RequestOptions localVarRequestOptions = new Cloud.Governance.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = specifyContactModel;

            // authentication (ClientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientId", this.Configuration.GetApiKeyWithPrefix("clientId"));
            }
            // authentication (ClientSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientSecret", this.Configuration.GetApiKeyWithPrefix("clientSecret"));
            }
            // authentication (UserPrincipalName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("userPrincipalName")))
            {
                localVarRequestOptions.HeaderParameters.Add("userPrincipalName", this.Configuration.GetApiKeyWithPrefix("userPrincipalName"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< SpecifyContactResultModel >("/admin/directory/sites/contact/specification", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpecifyContact", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// specify selected sites contact 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specifyContactModel"> (optional)</param>
        /// <returns>Task of SpecifyContactResultModel</returns>
        public async System.Threading.Tasks.Task<SpecifyContactResultModel> SpecifyContactAsync (SpecifyContactModel specifyContactModel = default(SpecifyContactModel))
        {
             Cloud.Governance.Client.Client.ApiResponse<SpecifyContactResultModel> localVarResponse = await SpecifyContactAsyncWithHttpInfo(specifyContactModel);
             return localVarResponse.Data;

        }

        /// <summary>
        /// specify selected sites contact 
        /// </summary>
        /// <exception cref="Cloud.Governance.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specifyContactModel"> (optional)</param>
        /// <returns>Task of ApiResponse (SpecifyContactResultModel)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.Client.Client.ApiResponse<SpecifyContactResultModel>> SpecifyContactAsyncWithHttpInfo (SpecifyContactModel specifyContactModel = default(SpecifyContactModel))
        {

            Cloud.Governance.Client.Client.RequestOptions localVarRequestOptions = new Cloud.Governance.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = specifyContactModel;

            // authentication (ClientId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientId", this.Configuration.GetApiKeyWithPrefix("clientId"));
            }
            // authentication (ClientSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("clientSecret", this.Configuration.GetApiKeyWithPrefix("clientSecret"));
            }
            // authentication (UserPrincipalName) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("userPrincipalName")))
            {
                localVarRequestOptions.HeaderParameters.Add("userPrincipalName", this.Configuration.GetApiKeyWithPrefix("userPrincipalName"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SpecifyContactResultModel>("/admin/directory/sites/contact/specification", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpecifyContact", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
