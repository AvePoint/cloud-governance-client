/* 
 * Cloud Governance Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Cloud.Governance.Client.Client.OpenAPIDateConverter;

namespace Cloud.Governance.Client.Model
{
    /// <summary>
    /// QuickRequestManagementViewModel
    /// </summary>
    [DataContract]
    public partial class QuickRequestManagementViewModel :  IEquatable<QuickRequestManagementViewModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QuickRequestManagementViewModel" /> class.
        /// </summary>
        /// <param name="categories">categories.</param>
        /// <param name="services">services.</param>
        /// <param name="isCategoryEnabledSelectAll">isCategoryEnabledSelectAll.</param>
        /// <param name="selectedCategories">selectedCategories.</param>
        /// <param name="isServiceEnabledSelectAll">isServiceEnabledSelectAll.</param>
        /// <param name="selectedServices">selectedServices.</param>
        public QuickRequestManagementViewModel(List<GuidModel> categories = default(List<GuidModel>), List<MultiComboBoxItem> services = default(List<MultiComboBoxItem>), bool isCategoryEnabledSelectAll = default(bool), List<Guid> selectedCategories = default(List<Guid>), bool isServiceEnabledSelectAll = default(bool), List<Guid> selectedServices = default(List<Guid>))
        {
            this.Categories = categories;
            this.Services = services;
            this.IsCategoryEnabledSelectAll = isCategoryEnabledSelectAll;
            this.SelectedCategories = selectedCategories;
            this.IsServiceEnabledSelectAll = isServiceEnabledSelectAll;
            this.SelectedServices = selectedServices;
        }
        
        /// <summary>
        /// Gets or Sets Categories
        /// </summary>
        [DataMember(Name="categories", EmitDefaultValue=true)]
        public List<GuidModel> Categories { get; set; }

        /// <summary>
        /// Gets or Sets Services
        /// </summary>
        [DataMember(Name="services", EmitDefaultValue=true)]
        public List<MultiComboBoxItem> Services { get; set; }

        /// <summary>
        /// Gets or Sets IsCategoryEnabledSelectAll
        /// </summary>
        [DataMember(Name="isCategoryEnabledSelectAll", EmitDefaultValue=false)]
        public bool IsCategoryEnabledSelectAll { get; set; }

        /// <summary>
        /// Gets or Sets SelectedCategories
        /// </summary>
        [DataMember(Name="selectedCategories", EmitDefaultValue=true)]
        public List<Guid> SelectedCategories { get; set; }

        /// <summary>
        /// Gets or Sets IsServiceEnabledSelectAll
        /// </summary>
        [DataMember(Name="isServiceEnabledSelectAll", EmitDefaultValue=false)]
        public bool IsServiceEnabledSelectAll { get; set; }

        /// <summary>
        /// Gets or Sets SelectedServices
        /// </summary>
        [DataMember(Name="selectedServices", EmitDefaultValue=true)]
        public List<Guid> SelectedServices { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QuickRequestManagementViewModel {\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  Services: ").Append(Services).Append("\n");
            sb.Append("  IsCategoryEnabledSelectAll: ").Append(IsCategoryEnabledSelectAll).Append("\n");
            sb.Append("  SelectedCategories: ").Append(SelectedCategories).Append("\n");
            sb.Append("  IsServiceEnabledSelectAll: ").Append(IsServiceEnabledSelectAll).Append("\n");
            sb.Append("  SelectedServices: ").Append(SelectedServices).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QuickRequestManagementViewModel);
        }

        /// <summary>
        /// Returns true if QuickRequestManagementViewModel instances are equal
        /// </summary>
        /// <param name="input">Instance of QuickRequestManagementViewModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QuickRequestManagementViewModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Categories == input.Categories ||
                    this.Categories != null &&
                    input.Categories != null &&
                    this.Categories.SequenceEqual(input.Categories)
                ) && 
                (
                    this.Services == input.Services ||
                    this.Services != null &&
                    input.Services != null &&
                    this.Services.SequenceEqual(input.Services)
                ) && 
                (
                    this.IsCategoryEnabledSelectAll == input.IsCategoryEnabledSelectAll ||
                    this.IsCategoryEnabledSelectAll.Equals(input.IsCategoryEnabledSelectAll)
                ) && 
                (
                    this.SelectedCategories == input.SelectedCategories ||
                    this.SelectedCategories != null &&
                    input.SelectedCategories != null &&
                    this.SelectedCategories.SequenceEqual(input.SelectedCategories)
                ) && 
                (
                    this.IsServiceEnabledSelectAll == input.IsServiceEnabledSelectAll ||
                    this.IsServiceEnabledSelectAll.Equals(input.IsServiceEnabledSelectAll)
                ) && 
                (
                    this.SelectedServices == input.SelectedServices ||
                    this.SelectedServices != null &&
                    input.SelectedServices != null &&
                    this.SelectedServices.SequenceEqual(input.SelectedServices)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Categories != null)
                    hashCode = hashCode * 59 + this.Categories.GetHashCode();
                if (this.Services != null)
                    hashCode = hashCode * 59 + this.Services.GetHashCode();
                hashCode = hashCode * 59 + this.IsCategoryEnabledSelectAll.GetHashCode();
                if (this.SelectedCategories != null)
                    hashCode = hashCode * 59 + this.SelectedCategories.GetHashCode();
                hashCode = hashCode * 59 + this.IsServiceEnabledSelectAll.GetHashCode();
                if (this.SelectedServices != null)
                    hashCode = hashCode * 59 + this.SelectedServices.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
