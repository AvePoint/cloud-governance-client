// tslint:disable
/**
 * Cloud Governance Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    QuestionaireType,
    QuestionaireTypeFromJSON,
    QuestionaireTypeFromJSONTyped,
    QuestionaireTypeToJSON,
    TermsMetadataSettings,
    TermsMetadataSettingsFromJSON,
    TermsMetadataSettingsFromJSONTyped,
    TermsMetadataSettingsToJSON,
} from './';

/**
 * 
 * @export
 * @interface Question
 */
export interface Question {
    /**
     * 
     * @type {string}
     * @memberof Question
     */
    id?: string;
    /**
     * 
     * @type {QuestionaireType}
     * @memberof Question
     */
    type?: QuestionaireType;
    /**
     * 
     * @type {string}
     * @memberof Question
     */
    content?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Question
     */
    contentHtml?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof Question
     */
    values?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof Question
     */
    defaultValue?: string | null;
    /**
     * 
     * @type {TermsMetadataSettings}
     * @memberof Question
     */
    termSettings?: TermsMetadataSettings;
    /**
     * 
     * @type {boolean}
     * @memberof Question
     */
    isMapToMetadata?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Question
     */
    referenceMetadata?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Question
     */
    referenceMetadataName?: string | null;
}

export function QuestionFromJSON(json: any): Question {
    return QuestionFromJSONTyped(json, false);
}

export function QuestionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Question {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'type': !exists(json, 'type') ? undefined : QuestionaireTypeFromJSON(json['type']),
        'content': !exists(json, 'content') ? undefined : json['content'],
        'contentHtml': !exists(json, 'contentHtml') ? undefined : json['contentHtml'],
        'values': !exists(json, 'values') ? undefined : json['values'],
        'defaultValue': !exists(json, 'defaultValue') ? undefined : json['defaultValue'],
        'termSettings': !exists(json, 'termSettings') ? undefined : TermsMetadataSettingsFromJSON(json['termSettings']),
        'isMapToMetadata': !exists(json, 'isMapToMetadata') ? undefined : json['isMapToMetadata'],
        'referenceMetadata': !exists(json, 'referenceMetadata') ? undefined : json['referenceMetadata'],
        'referenceMetadataName': !exists(json, 'referenceMetadataName') ? undefined : json['referenceMetadataName'],
    };
}

export function QuestionToJSON(value?: Question | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'type': QuestionaireTypeToJSON(value.type),
        'content': value.content,
        'contentHtml': value.contentHtml,
        'values': value.values,
        'defaultValue': value.defaultValue,
        'termSettings': TermsMetadataSettingsToJSON(value.termSettings),
        'isMapToMetadata': value.isMapToMetadata,
        'referenceMetadata': value.referenceMetadata,
        'referenceMetadataName': value.referenceMetadataName,
    };
}


