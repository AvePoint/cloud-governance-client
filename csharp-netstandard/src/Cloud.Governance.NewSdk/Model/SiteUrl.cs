/* 
 * Cloud Governance Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Cloud.Governance.NewSdk.Client.OpenAPIDateConverter;

namespace Cloud.Governance.NewSdk.Model
{
    /// <summary>
    /// SiteUrl
    /// </summary>
    [DataContract]
    public partial class SiteUrl :  IEquatable<SiteUrl>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SiteUrl" /> class.
        /// </summary>
        /// <param name="root">root.</param>
        /// <param name="managedPath">managedPath.</param>
        /// <param name="name">name.</param>
        public SiteUrl(string root = default(string), string managedPath = default(string), string name = default(string))
        {
            this.Root = root;
            this.ManagedPath = managedPath;
            this.Name = name;
            this.Root = root;
            this.ManagedPath = managedPath;
            this.Name = name;
        }
        
        /// <summary>
        /// Gets or Sets Root
        /// </summary>
        [DataMember(Name="root", EmitDefaultValue=true)]
        public string Root { get; set; }

        /// <summary>
        /// Gets or Sets ManagedPath
        /// </summary>
        [DataMember(Name="managedPath", EmitDefaultValue=true)]
        public string ManagedPath { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SiteUrl {\n");
            sb.Append("  Root: ").Append(Root).Append("\n");
            sb.Append("  ManagedPath: ").Append(ManagedPath).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SiteUrl);
        }

        /// <summary>
        /// Returns true if SiteUrl instances are equal
        /// </summary>
        /// <param name="input">Instance of SiteUrl to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SiteUrl input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Root == input.Root ||
                    (this.Root != null &&
                    this.Root.Equals(input.Root))
                ) && 
                (
                    this.ManagedPath == input.ManagedPath ||
                    (this.ManagedPath != null &&
                    this.ManagedPath.Equals(input.ManagedPath))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Root != null)
                    hashCode = hashCode * 59 + this.Root.GetHashCode();
                if (this.ManagedPath != null)
                    hashCode = hashCode * 59 + this.ManagedPath.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
