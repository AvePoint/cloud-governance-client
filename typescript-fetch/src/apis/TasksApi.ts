// tslint:disable
/**
 * Cloud Governance Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ApiRequest,
    ApiRequestFromJSON,
    ApiRequestToJSON,
    ApiTask,
    ApiTaskFromJSON,
    ApiTaskToJSON,
    ApiUser,
    ApiUserFromJSON,
    ApiUserToJSON,
    ArchiveGroupRequest,
    ArchiveGroupRequestFromJSON,
    ArchiveGroupRequestToJSON,
    ArchiveSiteRequest,
    ArchiveSiteRequestFromJSON,
    ArchiveSiteRequestToJSON,
    ArchiveWebLifecycleRequest,
    ArchiveWebLifecycleRequestFromJSON,
    ArchiveWebLifecycleRequestToJSON,
    AutoTaskArchiveRequest,
    AutoTaskArchiveRequestFromJSON,
    AutoTaskArchiveRequestToJSON,
    AutoTaskChangePolicyRequest,
    AutoTaskChangePolicyRequestFromJSON,
    AutoTaskChangePolicyRequestToJSON,
    AutoTaskDeleteRequest,
    AutoTaskDeleteRequestFromJSON,
    AutoTaskDeleteRequestToJSON,
    AutoTaskExtendRequest,
    AutoTaskExtendRequestFromJSON,
    AutoTaskExtendRequestToJSON,
    ChangeGroupPolicyRequest,
    ChangeGroupPolicyRequestFromJSON,
    ChangeGroupPolicyRequestToJSON,
    ChangeGroupQuotaRequest,
    ChangeGroupQuotaRequestFromJSON,
    ChangeGroupQuotaRequestToJSON,
    ChangeGroupSettingRequest,
    ChangeGroupSettingRequestFromJSON,
    ChangeGroupSettingRequestToJSON,
    ChangeListSettingRequest,
    ChangeListSettingRequestFromJSON,
    ChangeListSettingRequestToJSON,
    ChangePermissionRequest,
    ChangePermissionRequestFromJSON,
    ChangePermissionRequestToJSON,
    ChangeSiteContactRequest,
    ChangeSiteContactRequestFromJSON,
    ChangeSiteContactRequestToJSON,
    ChangeSitePolicyRequest,
    ChangeSitePolicyRequestFromJSON,
    ChangeSitePolicyRequestToJSON,
    ChangeSiteQuotaRequest,
    ChangeSiteQuotaRequestFromJSON,
    ChangeSiteQuotaRequestToJSON,
    ChangeSiteSettingRequest,
    ChangeSiteSettingRequestFromJSON,
    ChangeSiteSettingRequestToJSON,
    ChangeWebContactRequest,
    ChangeWebContactRequestFromJSON,
    ChangeWebContactRequestToJSON,
    ChangeWebSettingRequest,
    ChangeWebSettingRequestFromJSON,
    ChangeWebSettingRequestToJSON,
    ClonePermissionReportProperty,
    ClonePermissionReportPropertyFromJSON,
    ClonePermissionReportPropertyToJSON,
    ClonePermissionRequest,
    ClonePermissionRequestFromJSON,
    ClonePermissionRequestToJSON,
    ClonePermissionSecuritySearchResultPageResult,
    ClonePermissionSecuritySearchResultPageResultFromJSON,
    ClonePermissionSecuritySearchResultPageResultToJSON,
    CommentsParam,
    CommentsParamFromJSON,
    CommentsParamToJSON,
    ContentMoveRequest,
    ContentMoveRequestFromJSON,
    ContentMoveRequestToJSON,
    CreateGroupRequest,
    CreateGroupRequestFromJSON,
    CreateGroupRequestToJSON,
    CreateListRequest,
    CreateListRequestFromJSON,
    CreateListRequestToJSON,
    CreateSiteRequest,
    CreateSiteRequestFromJSON,
    CreateSiteRequestToJSON,
    CreateWebRequest,
    CreateWebRequestFromJSON,
    CreateWebRequestToJSON,
    CustomMetadata,
    CustomMetadataFromJSON,
    CustomMetadataToJSON,
    DeleteGroupRequest,
    DeleteGroupRequestFromJSON,
    DeleteGroupRequestToJSON,
    DeleteSiteRequest,
    DeleteSiteRequestFromJSON,
    DeleteSiteRequestToJSON,
    DeleteWebLifecycleRequest,
    DeleteWebLifecycleRequestFromJSON,
    DeleteWebLifecycleRequestToJSON,
    DistinctPageResult,
    DistinctPageResultFromJSON,
    DistinctPageResultToJSON,
    ExtendGroupRequest,
    ExtendGroupRequestFromJSON,
    ExtendGroupRequestToJSON,
    ExtendSiteRequest,
    ExtendSiteRequestFromJSON,
    ExtendSiteRequestToJSON,
    GrantPermissionRequest,
    GrantPermissionRequestFromJSON,
    GrantPermissionRequestToJSON,
    GroupPermissionActionItem,
    GroupPermissionActionItemFromJSON,
    GroupPermissionActionItemToJSON,
    GroupPermissionActionItemPageResult,
    GroupPermissionActionItemPageResultFromJSON,
    GroupPermissionActionItemPageResultToJSON,
    LockSiteRequest,
    LockSiteRequestFromJSON,
    LockSiteRequestToJSON,
    ManagePermissionRequest,
    ManagePermissionRequestFromJSON,
    ManagePermissionRequestToJSON,
    ManuallyArchiveRecordModel,
    ManuallyArchiveRecordModelFromJSON,
    ManuallyArchiveRecordModelToJSON,
    ManuallyArchiveRecordModelPageResult,
    ManuallyArchiveRecordModelPageResultFromJSON,
    ManuallyArchiveRecordModelPageResultToJSON,
    MembershipRecertificationItemPageResult,
    MembershipRecertificationItemPageResultFromJSON,
    MembershipRecertificationItemPageResultToJSON,
    MembershipRecertificationReportProperties,
    MembershipRecertificationReportPropertiesFromJSON,
    MembershipRecertificationReportPropertiesToJSON,
    MetadataRecertificationReportProperties,
    MetadataRecertificationReportPropertiesFromJSON,
    MetadataRecertificationReportPropertiesToJSON,
    OwnershipRecertification,
    OwnershipRecertificationFromJSON,
    OwnershipRecertificationToJSON,
    PermissionActionItem,
    PermissionActionItemFromJSON,
    PermissionActionItemToJSON,
    PermissionActionItemPageResult,
    PermissionActionItemPageResultFromJSON,
    PermissionActionItemPageResultToJSON,
    PermissionLevel,
    PermissionLevelFromJSON,
    PermissionLevelToJSON,
    RecertificationReportProperties,
    RecertificationReportPropertiesFromJSON,
    RecertificationReportPropertiesToJSON,
    RequestMetadata,
    RequestMetadataFromJSON,
    RequestMetadataToJSON,
    RestoreGroupRequest,
    RestoreGroupRequestFromJSON,
    RestoreGroupRequestToJSON,
    SecuritySearchResult,
    SecuritySearchResultFromJSON,
    SecuritySearchResultToJSON,
    SecuritySearchResultPageResult,
    SecuritySearchResultPageResultFromJSON,
    SecuritySearchResultPageResultToJSON,
    TaskList,
    TaskListFromJSON,
    TaskListToJSON,
    TaskListPageResult,
    TaskListPageResultFromJSON,
    TaskListPageResultToJSON,
    UnlockSiteRequest,
    UnlockSiteRequestFromJSON,
    UnlockSiteRequestToJSON,
} from '../models';

export interface AddMembersForGroupMembershipRecertificationRequest {
    id: string;
    apiUser?: Array<ApiUser>;
}

export interface AddOwnersForGroupMembershipRecertificationRequest {
    id: string;
    apiUser?: Array<ApiUser>;
}

export interface ApproveTaskRequest {
    id: string;
    commentsParam?: CommentsParam;
}

export interface ClaimElectionTaskRequest {
    id: string;
    secondarycontact?: string;
}

export interface ClaimSiteOwnershipRecertificationTaskRequest {
    id: string;
    secondarycontact: string;
}

export interface DeclineElectionTaskRequest {
    id: string;
}

export interface DeclineSiteOwnershipRecertificationTaskRequest {
    id: string;
}

export interface DemoteAsMembersForGroupMembershipRecertificationRequest {
    id: string;
    apiUser?: Array<ApiUser>;
}

export interface EditArchiveGroupRequestRequest {
    id: string;
    archiveGroupRequest?: ArchiveGroupRequest;
}

export interface EditArchiveSiteRequestRequest {
    id: string;
    archiveSiteRequest?: ArchiveSiteRequest;
}

export interface EditArchiveWebRequestRequest {
    id: string;
    archiveWebLifecycleRequest?: ArchiveWebLifecycleRequest;
}

export interface EditChangeGroupPolicyRequestRequest {
    id: string;
    changeGroupPolicyRequest?: ChangeGroupPolicyRequest;
}

export interface EditChangeGroupQuotaRequestRequest {
    id: string;
    changeGroupQuotaRequest?: ChangeGroupQuotaRequest;
}

export interface EditChangeGroupRequestRequest {
    id: string;
    changeGroupSettingRequest?: ChangeGroupSettingRequest;
}

export interface EditChangeListSettingRequestRequest {
    id: string;
    changeListSettingRequest?: ChangeListSettingRequest;
}

export interface EditChangePermissionRequestRequest {
    id: string;
    changePermissionRequest?: ChangePermissionRequest;
}

export interface EditChangeSiteContactRequestRequest {
    id: string;
    changeSiteContactRequest?: ChangeSiteContactRequest;
}

export interface EditChangeSitePolicyRequestRequest {
    id: string;
    changeSitePolicyRequest?: ChangeSitePolicyRequest;
}

export interface EditChangeSiteQuotaRequestRequest {
    id: string;
    changeSiteQuotaRequest?: ChangeSiteQuotaRequest;
}

export interface EditChangeSiteSettingRequestRequest {
    id: string;
    changeSiteSettingRequest?: ChangeSiteSettingRequest;
}

export interface EditChangeWebContactRequestRequest {
    id: string;
    changeWebContactRequest?: ChangeWebContactRequest;
}

export interface EditChangeWebSettingRequestRequest {
    id: string;
    changeWebSettingRequest?: ChangeWebSettingRequest;
}

export interface EditClonePermissionRequestRequest {
    id: string;
    clonePermissionRequest?: ClonePermissionRequest;
}

export interface EditContentMoveRequestRequest {
    id: string;
    contentMoveRequest?: ContentMoveRequest;
}

export interface EditCreateGroupRequestRequest {
    id: string;
    createGroupRequest?: CreateGroupRequest;
}

export interface EditCreateListRequestRequest {
    id: string;
    createListRequest?: CreateListRequest;
}

export interface EditCreateSiteRequestRequest {
    id: string;
    createSiteRequest?: CreateSiteRequest;
}

export interface EditCreateWebRequestRequest {
    id: string;
    createWebRequest?: CreateWebRequest;
}

export interface EditCustomRequestRequest {
    id: string;
    apiRequest?: ApiRequest;
}

export interface EditDeleteGroupRequestRequest {
    id: string;
    deleteGroupRequest?: DeleteGroupRequest;
}

export interface EditDeleteSiteRequestRequest {
    id: string;
    deleteSiteRequest?: DeleteSiteRequest;
}

export interface EditDeleteWebRequestRequest {
    id: string;
    deleteWebLifecycleRequest?: DeleteWebLifecycleRequest;
}

export interface EditExtendGroupRequestRequest {
    id: string;
    extendGroupRequest?: ExtendGroupRequest;
}

export interface EditExtendSiteRequestRequest {
    id: string;
    extendSiteRequest?: ExtendSiteRequest;
}

export interface EditGrantPermissionRequestRequest {
    id: string;
    grantPermissionRequest?: GrantPermissionRequest;
}

export interface EditLockSiteRequestRequest {
    id: string;
    lockSiteRequest?: LockSiteRequest;
}

export interface EditManagePermissionRequestRequest {
    id: string;
    managePermissionRequest?: ManagePermissionRequest;
}

export interface EditRestoreGroupRequestRequest {
    id: string;
    restoreGroupRequest?: RestoreGroupRequest;
}

export interface EditUnLockSiteRequestRequest {
    id: string;
    unlockSiteRequest?: UnlockSiteRequest;
}

export interface GetChangePermissionReportRequest {
    id: string;
    filter?: string;
    orderby?: string;
    body?: object;
}

export interface GetChangePermissionReportByVersionRequest {
    id: string;
    version: number;
    filter?: string;
    orderby?: string;
    body?: object;
}

export interface GetChangePermissionReportFiltersRequest {
    id: string;
    filter?: string;
    distinct?: string;
    top?: number;
    skip?: number;
}

export interface GetChangePermissionReportFiltersByVersionRequest {
    id: string;
    version: number;
    filter?: string;
    distinct?: string;
    top?: number;
    skip?: number;
}

export interface GetChangePermissionReportFiltersForSPGroupRequest {
    id: string;
    groupid: string;
    filter?: string;
    distinct?: string;
    top?: number;
    skip?: number;
}

export interface GetChangePermissionReportFiltersForSPGroupByVersionRequest {
    id: string;
    groupid: string;
    version: number;
    filter?: string;
    distinct?: string;
    top?: number;
    skip?: number;
}

export interface GetChangePermissionReportForSPGroupRequest {
    id: string;
    groupid: string;
    filter?: string;
    orderby?: string;
    body?: object;
}

export interface GetChangePermissionReportForSPGroupByVersionRequest {
    id: string;
    version: number;
    groupid: string;
    filter?: string;
    orderby?: string;
    body?: object;
}

export interface GetChangePermissionReportPermissionLevelsRequest {
    id: string;
}

export interface GetChangePermissionReportPropertiesRequest {
    id: string;
}

export interface GetClonePermissionReportRequest {
    id: string;
    filter?: string;
    orderby?: string;
    body?: object;
}

export interface GetClonePermissionReportPropertiesRequest {
    id: string;
}

export interface GetGetManualArchiveReportRequest {
    id: string;
    filter?: string;
    orderby?: string;
    body?: object;
}

export interface GetGetManualArchiveReportFiltersRequest {
    id: string;
    filter?: string;
    distinct?: string;
    top?: number;
    skip?: number;
}

export interface GetGroupMembershipRecertificationReportRequest {
    id: string;
    filter?: string;
    orderby?: string;
    body?: object;
}

export interface GetGroupMembershipRecertificationReportByVersionRequest {
    id: string;
    version: number;
    filter?: string;
    orderby?: string;
    body?: object;
}

export interface GetGroupMembershipRecertificationReportFiltersRequest {
    id: string;
    filter?: string;
    distinct?: string;
    top?: number;
    skip?: number;
}

export interface GetGroupMembershipRecertificationReportFiltersByVersionRequest {
    id: string;
    version: number;
    filter?: string;
    distinct?: string;
    top?: number;
    skip?: number;
}

export interface GetGroupMembershipRecertificationReportPropertiesRequest {
    id: string;
}

export interface GetGroupPermissionRecertificationReportRequest {
    id: string;
    filter?: string;
    orderby?: string;
    body?: object;
}

export interface GetGroupPermissionRecertificationReportByVersionRequest {
    id: string;
    version: number;
    filter?: string;
    orderby?: string;
    body?: object;
}

export interface GetGroupPermissionRecertificationReportFiltersRequest {
    id: string;
    filter?: string;
    distinct?: string;
    top?: number;
    skip?: number;
}

export interface GetGroupPermissionRecertificationReportFiltersForSPGroupRequest {
    id: string;
    groupid: string;
    filter?: string;
    distinct?: string;
    top?: number;
    skip?: number;
}

export interface GetGroupPermissionRecertificationReportForSPGroupRequest {
    id: string;
    groupid: string;
    filter?: string;
    orderby?: string;
    body?: object;
}

export interface GetGroupPermissionRecertificationReportPropertiesRequest {
    id: string;
}

export interface GetMyTaskFiltersRequest {
    isconfirmtask?: boolean;
    filter?: string;
    distinct?: string;
    top?: number;
    skip?: number;
}

export interface GetMyTasksRequest {
    isconfirmtask?: boolean;
    filter?: string;
    orderby?: string;
    search?: string;
    top?: number;
    skip?: number;
}

export interface GetRemovePermissionReportRequest {
    id: string;
    filter?: string;
    orderby?: string;
    body?: object;
}

export interface GetRemovePermissionReportPropertiesRequest {
    id: string;
}

export interface GetSiteMetadataRecertificationReportRequest {
    id: string;
}

export interface GetSiteMetadataRecertificationReportPropertiesRequest {
    id: string;
}

export interface GetSiteOwnershipRecertificationReportPropertiesRequest {
    id: string;
}

export interface GetSitePermissionRecertificatioPermissionFiltersRequest {
    id: string;
    filter?: string;
    distinct?: string;
    top?: number;
    skip?: number;
}

export interface GetSitePermissionRecertificatioReportFiltersByVersionRequest {
    id: string;
    version: number;
    filter?: string;
    distinct?: string;
    top?: number;
    skip?: number;
}

export interface GetSitePermissionRecertificatioReportFiltersForSPGroupRequest {
    id: string;
    groupid: string;
    filter?: string;
    distinct?: string;
    top?: number;
    skip?: number;
}

export interface GetSitePermissionRecertificatioReportFiltersForSPGroupByVersionRequest {
    id: string;
    groupid: string;
    version: number;
    filter?: string;
    distinct?: string;
    top?: number;
    skip?: number;
}

export interface GetSitePermissionRecertificationPermissionLevelsRequest {
    id: string;
}

export interface GetSitePermissionRecertificationReportRequest {
    id: string;
    filter?: string;
    orderby?: string;
    body?: object;
}

export interface GetSitePermissionRecertificationReportByVersionRequest {
    id: string;
    version: number;
    filter?: string;
    orderby?: string;
    body?: object;
}

export interface GetSitePermissionRecertificationReportForSPGroupRequest {
    id: string;
    groupid: string;
    filter?: string;
    orderby?: string;
    body?: object;
}

export interface GetSitePermissionRecertificationReportForSPGroupByVersionRequest {
    id: string;
    version: number;
    groupid: string;
    filter?: string;
    orderby?: string;
    body?: object;
}

export interface GetSitePermissionRecertificationReportPropertiesRequest {
    id: string;
}

export interface GetTaskByBatchIdRequest {
    batchid: string;
}

export interface GetTaskByIdRequest {
    id: string;
}

export interface PromoteAsOwnersForGroupMembershipRecertificationRequest {
    id: string;
    apiUser?: Array<ApiUser>;
}

export interface ReassignTaskRequest {
    id: string;
    user: string;
}

export interface RejectTaskRequest {
    id: string;
    commentsParam?: CommentsParam;
}

export interface RemoveUsersForGroupMembershipRecertificationRequest {
    id: string;
    requestBody?: Array<string>;
}

export interface ReseAllChangesForChangePermissionTaskRequest {
    id: string;
}

export interface ResetAllChangesForRecertificationTaskRequest {
    id: string;
}

export interface ResetMyChangesForChangePermissionTaskRequest {
    id: string;
}

export interface ResetMyChangesForRecertificationTaskRequest {
    id: string;
}

export interface RetryErrorTaskRequest {
    id: string;
    commentsParam?: CommentsParam;
}

export interface SaveChangePermissionActionsRequest {
    id: string;
    permissionActionItem?: Array<PermissionActionItem>;
}

export interface SaveClonePermissionReportRequest {
    id: string;
    securitySearchResult?: Array<SecuritySearchResult>;
}

export interface SaveGetManualArchiveReportRequest {
    id: string;
    manuallyArchiveRecordModel?: Array<ManuallyArchiveRecordModel>;
}

export interface SaveGroupPermissionRecertificationResultsRequest {
    id: string;
    groupPermissionActionItem?: Array<GroupPermissionActionItem>;
}

export interface SaveRemovePermissionReportRequest {
    id: string;
    securitySearchResult?: Array<SecuritySearchResult>;
}

export interface SaveSiteMetadataRecertificationResultRequest {
    id: string;
    requestMetadata?: Array<RequestMetadata>;
}

export interface SaveSitePermissionRecertificationResultRequest {
    id: string;
    permissionActionItem?: Array<PermissionActionItem>;
}

export interface SkipErrorTaskRequest {
    id: string;
    commentsParam?: CommentsParam;
}

export interface SpecifyPrimaryAndSecondaryContactWhenPrimaryContactIsDeactivedRequest {
    id: string;
    primarycontact?: string;
    secondarycontact?: string;
    primarycontactemail?: string;
    secodnarycontactemail?: string;
}

export interface SpecifySecondaryContactWhenSecondaryContactIsDeactivedRequest {
    id: string;
    secondarycontact?: string;
}

export interface SubmitArchiveGroupAutoTaskRequest {
    autoTaskArchiveRequest?: AutoTaskArchiveRequest;
}

export interface SubmitArchiveSiteAutoTaskRequest {
    autoTaskArchiveRequest?: AutoTaskArchiveRequest;
}

export interface SubmitChangeSitePolicyAutoTaskRequest {
    autoTaskChangePolicyRequest?: AutoTaskChangePolicyRequest;
}

export interface SubmitContinueAccessGroupAutoTaskRequest {
    id?: string;
    commentsParam?: CommentsParam;
}

export interface SubmitContinueAccessSiteAutoTaskRequest {
    id?: string;
    commentsParam?: CommentsParam;
}

export interface SubmitDeleteGroupAutoTaskRequest {
    autoTaskDeleteRequest?: AutoTaskDeleteRequest;
}

export interface SubmitDeleteSiteAutoTaskRequest {
    autoTaskDeleteRequest?: AutoTaskDeleteRequest;
}

export interface SubmitExtendGroupAutoTaskRequest {
    autoTaskExtendRequest?: AutoTaskExtendRequest;
}

export interface SubmitExtendSiteAutoTaskRequest {
    autoTaskExtendRequest?: AutoTaskExtendRequest;
}

export interface SubmitRecertificationTaskRequest {
    id: string;
    commentsParam?: CommentsParam;
}

export interface ViewSiteOwnershipRecertificationTaskRequest {
    id: string;
}

/**
 * no description
 */
export class TasksApi extends runtime.BaseAPI {

    /**
     * add members for group membership recertification
     */
    async addMembersForGroupMembershipRecertificationRaw(requestParameters: AddMembersForGroupMembershipRecertificationRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling addMembersForGroupMembershipRecertification.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/group/recertification/membership/members`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.apiUser.map(ApiUserToJSON),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * add members for group membership recertification
     */
    async addMembersForGroupMembershipRecertification(requestParameters: AddMembersForGroupMembershipRecertificationRequest): Promise<void> {
        await this.addMembersForGroupMembershipRecertificationRaw(requestParameters);
    }

    /**
     * add owners for group membership recertification
     */
    async addOwnersForGroupMembershipRecertificationRaw(requestParameters: AddOwnersForGroupMembershipRecertificationRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling addOwnersForGroupMembershipRecertification.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/group/recertification/membership/owners`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.apiUser.map(ApiUserToJSON),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * add owners for group membership recertification
     */
    async addOwnersForGroupMembershipRecertification(requestParameters: AddOwnersForGroupMembershipRecertificationRequest): Promise<void> {
        await this.addOwnersForGroupMembershipRecertificationRaw(requestParameters);
    }

    /**
     * approve task
     */
    async approveTaskRaw(requestParameters: ApproveTaskRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling approveTask.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/approve`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CommentsParamToJSON(requestParameters.commentsParam),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * approve task
     */
    async approveTask(requestParameters: ApproveTaskRequest): Promise<void> {
        await this.approveTaskRaw(requestParameters);
    }

    /**
     * claim election task
     */
    async claimElectionTaskRaw(requestParameters: ClaimElectionTaskRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling claimElectionTask.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.secondarycontact !== undefined) {
            queryParameters['secondarycontact'] = requestParameters.secondarycontact;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/election/claim`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * claim election task
     */
    async claimElectionTask(requestParameters: ClaimElectionTaskRequest): Promise<void> {
        await this.claimElectionTaskRaw(requestParameters);
    }

    /**
     * claim site ownership recertification task
     */
    async claimSiteOwnershipRecertificationTaskRaw(requestParameters: ClaimSiteOwnershipRecertificationTaskRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling claimSiteOwnershipRecertificationTask.');
        }

        if (requestParameters.secondarycontact === null || requestParameters.secondarycontact === undefined) {
            throw new runtime.RequiredError('secondarycontact','Required parameter requestParameters.secondarycontact was null or undefined when calling claimSiteOwnershipRecertificationTask.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/site/recertification/ownership/claim/{secondarycontact}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"secondarycontact"}}`, encodeURIComponent(String(requestParameters.secondarycontact))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * claim site ownership recertification task
     */
    async claimSiteOwnershipRecertificationTask(requestParameters: ClaimSiteOwnershipRecertificationTaskRequest): Promise<void> {
        await this.claimSiteOwnershipRecertificationTaskRaw(requestParameters);
    }

    /**
     * decline election task
     */
    async declineElectionTaskRaw(requestParameters: DeclineElectionTaskRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling declineElectionTask.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/election/decline`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * decline election task
     */
    async declineElectionTask(requestParameters: DeclineElectionTaskRequest): Promise<void> {
        await this.declineElectionTaskRaw(requestParameters);
    }

    /**
     * decline site ownership recertification task
     */
    async declineSiteOwnershipRecertificationTaskRaw(requestParameters: DeclineSiteOwnershipRecertificationTaskRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling declineSiteOwnershipRecertificationTask.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/site/recertification/ownership/decline`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * decline site ownership recertification task
     */
    async declineSiteOwnershipRecertificationTask(requestParameters: DeclineSiteOwnershipRecertificationTaskRequest): Promise<void> {
        await this.declineSiteOwnershipRecertificationTaskRaw(requestParameters);
    }

    /**
     * demote as members for group membership recertification
     */
    async demoteAsMembersForGroupMembershipRecertificationRaw(requestParameters: DemoteAsMembersForGroupMembershipRecertificationRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling demoteAsMembersForGroupMembershipRecertification.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/group/recertification/membership/demoteasmember`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.apiUser.map(ApiUserToJSON),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * demote as members for group membership recertification
     */
    async demoteAsMembersForGroupMembershipRecertification(requestParameters: DemoteAsMembersForGroupMembershipRecertificationRequest): Promise<void> {
        await this.demoteAsMembersForGroupMembershipRecertificationRaw(requestParameters);
    }

    /**
     * edit archive group request in task
     */
    async editArchiveGroupRequestRaw(requestParameters: EditArchiveGroupRequestRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling editArchiveGroupRequest.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/archivegroup`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ArchiveGroupRequestToJSON(requestParameters.archiveGroupRequest),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * edit archive group request in task
     */
    async editArchiveGroupRequest(requestParameters: EditArchiveGroupRequestRequest): Promise<void> {
        await this.editArchiveGroupRequestRaw(requestParameters);
    }

    /**
     * edit archive site request in task
     */
    async editArchiveSiteRequestRaw(requestParameters: EditArchiveSiteRequestRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling editArchiveSiteRequest.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/archivesite`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ArchiveSiteRequestToJSON(requestParameters.archiveSiteRequest),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * edit archive site request in task
     */
    async editArchiveSiteRequest(requestParameters: EditArchiveSiteRequestRequest): Promise<void> {
        await this.editArchiveSiteRequestRaw(requestParameters);
    }

    /**
     * edit archive web request in task
     */
    async editArchiveWebRequestRaw(requestParameters: EditArchiveWebRequestRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling editArchiveWebRequest.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/archiveweb`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ArchiveWebLifecycleRequestToJSON(requestParameters.archiveWebLifecycleRequest),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * edit archive web request in task
     */
    async editArchiveWebRequest(requestParameters: EditArchiveWebRequestRequest): Promise<void> {
        await this.editArchiveWebRequestRaw(requestParameters);
    }

    /**
     * edit change group policy request in task
     */
    async editChangeGroupPolicyRequestRaw(requestParameters: EditChangeGroupPolicyRequestRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling editChangeGroupPolicyRequest.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/changegrouppolicy`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeGroupPolicyRequestToJSON(requestParameters.changeGroupPolicyRequest),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * edit change group policy request in task
     */
    async editChangeGroupPolicyRequest(requestParameters: EditChangeGroupPolicyRequestRequest): Promise<void> {
        await this.editChangeGroupPolicyRequestRaw(requestParameters);
    }

    /**
     * edit change group quota request in task
     */
    async editChangeGroupQuotaRequestRaw(requestParameters: EditChangeGroupQuotaRequestRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling editChangeGroupQuotaRequest.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/changegroupquota`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeGroupQuotaRequestToJSON(requestParameters.changeGroupQuotaRequest),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * edit change group quota request in task
     */
    async editChangeGroupQuotaRequest(requestParameters: EditChangeGroupQuotaRequestRequest): Promise<void> {
        await this.editChangeGroupQuotaRequestRaw(requestParameters);
    }

    /**
     * edit create change group request in task
     */
    async editChangeGroupRequestRaw(requestParameters: EditChangeGroupRequestRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling editChangeGroupRequest.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/changegroup`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeGroupSettingRequestToJSON(requestParameters.changeGroupSettingRequest),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * edit create change group request in task
     */
    async editChangeGroupRequest(requestParameters: EditChangeGroupRequestRequest): Promise<void> {
        await this.editChangeGroupRequestRaw(requestParameters);
    }

    /**
     * edit change list setting request in task
     */
    async editChangeListSettingRequestRaw(requestParameters: EditChangeListSettingRequestRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling editChangeListSettingRequest.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/changelistsetting`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeListSettingRequestToJSON(requestParameters.changeListSettingRequest),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * edit change list setting request in task
     */
    async editChangeListSettingRequest(requestParameters: EditChangeListSettingRequestRequest): Promise<void> {
        await this.editChangeListSettingRequestRaw(requestParameters);
    }

    /**
     * edit change permission request in task
     */
    async editChangePermissionRequestRaw(requestParameters: EditChangePermissionRequestRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling editChangePermissionRequest.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/changepermission`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangePermissionRequestToJSON(requestParameters.changePermissionRequest),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * edit change permission request in task
     */
    async editChangePermissionRequest(requestParameters: EditChangePermissionRequestRequest): Promise<void> {
        await this.editChangePermissionRequestRaw(requestParameters);
    }

    /**
     * edit change site administrator/contact request in task
     */
    async editChangeSiteContactRequestRaw(requestParameters: EditChangeSiteContactRequestRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling editChangeSiteContactRequest.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/changesite/adminorcontact`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeSiteContactRequestToJSON(requestParameters.changeSiteContactRequest),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * edit change site administrator/contact request in task
     */
    async editChangeSiteContactRequest(requestParameters: EditChangeSiteContactRequestRequest): Promise<void> {
        await this.editChangeSiteContactRequestRaw(requestParameters);
    }

    /**
     * edit change site policy request in task
     */
    async editChangeSitePolicyRequestRaw(requestParameters: EditChangeSitePolicyRequestRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling editChangeSitePolicyRequest.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/changesitepolicy`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeSitePolicyRequestToJSON(requestParameters.changeSitePolicyRequest),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * edit change site policy request in task
     */
    async editChangeSitePolicyRequest(requestParameters: EditChangeSitePolicyRequestRequest): Promise<void> {
        await this.editChangeSitePolicyRequestRaw(requestParameters);
    }

    /**
     * edit change site quota request in task
     */
    async editChangeSiteQuotaRequestRaw(requestParameters: EditChangeSiteQuotaRequestRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling editChangeSiteQuotaRequest.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/changesitequota`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeSiteQuotaRequestToJSON(requestParameters.changeSiteQuotaRequest),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * edit change site quota request in task
     */
    async editChangeSiteQuotaRequest(requestParameters: EditChangeSiteQuotaRequestRequest): Promise<void> {
        await this.editChangeSiteQuotaRequestRaw(requestParameters);
    }

    /**
     * edit change site setting request in task
     */
    async editChangeSiteSettingRequestRaw(requestParameters: EditChangeSiteSettingRequestRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling editChangeSiteSettingRequest.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/changesite/setting`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeSiteSettingRequestToJSON(requestParameters.changeSiteSettingRequest),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * edit change site setting request in task
     */
    async editChangeSiteSettingRequest(requestParameters: EditChangeSiteSettingRequestRequest): Promise<void> {
        await this.editChangeSiteSettingRequestRaw(requestParameters);
    }

    /**
     * edit change web contact request in task
     */
    async editChangeWebContactRequestRaw(requestParameters: EditChangeWebContactRequestRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling editChangeWebContactRequest.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/changewebcontact`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeWebContactRequestToJSON(requestParameters.changeWebContactRequest),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * edit change web contact request in task
     */
    async editChangeWebContactRequest(requestParameters: EditChangeWebContactRequestRequest): Promise<void> {
        await this.editChangeWebContactRequestRaw(requestParameters);
    }

    /**
     * edit change web setting request in task
     */
    async editChangeWebSettingRequestRaw(requestParameters: EditChangeWebSettingRequestRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling editChangeWebSettingRequest.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/changewebsettings`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeWebSettingRequestToJSON(requestParameters.changeWebSettingRequest),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * edit change web setting request in task
     */
    async editChangeWebSettingRequest(requestParameters: EditChangeWebSettingRequestRequest): Promise<void> {
        await this.editChangeWebSettingRequestRaw(requestParameters);
    }

    /**
     * edit clone permission request in task
     */
    async editClonePermissionRequestRaw(requestParameters: EditClonePermissionRequestRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling editClonePermissionRequest.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/clonepermission`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ClonePermissionRequestToJSON(requestParameters.clonePermissionRequest),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * edit clone permission request in task
     */
    async editClonePermissionRequest(requestParameters: EditClonePermissionRequestRequest): Promise<void> {
        await this.editClonePermissionRequestRaw(requestParameters);
    }

    /**
     * edit content move request in task
     */
    async editContentMoveRequestRaw(requestParameters: EditContentMoveRequestRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling editContentMoveRequest.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/contentmove`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ContentMoveRequestToJSON(requestParameters.contentMoveRequest),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * edit content move request in task
     */
    async editContentMoveRequest(requestParameters: EditContentMoveRequestRequest): Promise<void> {
        await this.editContentMoveRequestRaw(requestParameters);
    }

    /**
     * edit create site group request in task
     */
    async editCreateGroupRequestRaw(requestParameters: EditCreateGroupRequestRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling editCreateGroupRequest.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/creategroup`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreateGroupRequestToJSON(requestParameters.createGroupRequest),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * edit create site group request in task
     */
    async editCreateGroupRequest(requestParameters: EditCreateGroupRequestRequest): Promise<void> {
        await this.editCreateGroupRequestRaw(requestParameters);
    }

    /**
     * edit create list request in task
     */
    async editCreateListRequestRaw(requestParameters: EditCreateListRequestRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling editCreateListRequest.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/createlist`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreateListRequestToJSON(requestParameters.createListRequest),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * edit create list request in task
     */
    async editCreateListRequest(requestParameters: EditCreateListRequestRequest): Promise<void> {
        await this.editCreateListRequestRaw(requestParameters);
    }

    /**
     * edit create site request in task
     */
    async editCreateSiteRequestRaw(requestParameters: EditCreateSiteRequestRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling editCreateSiteRequest.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/createsite`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreateSiteRequestToJSON(requestParameters.createSiteRequest),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * edit create site request in task
     */
    async editCreateSiteRequest(requestParameters: EditCreateSiteRequestRequest): Promise<void> {
        await this.editCreateSiteRequestRaw(requestParameters);
    }

    /**
     * edit create web request in task
     */
    async editCreateWebRequestRaw(requestParameters: EditCreateWebRequestRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling editCreateWebRequest.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/createweb`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreateWebRequestToJSON(requestParameters.createWebRequest),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * edit create web request in task
     */
    async editCreateWebRequest(requestParameters: EditCreateWebRequestRequest): Promise<void> {
        await this.editCreateWebRequestRaw(requestParameters);
    }

    /**
     * edit custom request in task
     */
    async editCustomRequestRaw(requestParameters: EditCustomRequestRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling editCustomRequest.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/custom`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ApiRequestToJSON(requestParameters.apiRequest),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * edit custom request in task
     */
    async editCustomRequest(requestParameters: EditCustomRequestRequest): Promise<void> {
        await this.editCustomRequestRaw(requestParameters);
    }

    /**
     * edit delete change group request in task
     */
    async editDeleteGroupRequestRaw(requestParameters: EditDeleteGroupRequestRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling editDeleteGroupRequest.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/deletegroup`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteGroupRequestToJSON(requestParameters.deleteGroupRequest),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * edit delete change group request in task
     */
    async editDeleteGroupRequest(requestParameters: EditDeleteGroupRequestRequest): Promise<void> {
        await this.editDeleteGroupRequestRaw(requestParameters);
    }

    /**
     * edit delete site request in task
     */
    async editDeleteSiteRequestRaw(requestParameters: EditDeleteSiteRequestRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling editDeleteSiteRequest.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/deletesite`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteSiteRequestToJSON(requestParameters.deleteSiteRequest),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * edit delete site request in task
     */
    async editDeleteSiteRequest(requestParameters: EditDeleteSiteRequestRequest): Promise<void> {
        await this.editDeleteSiteRequestRaw(requestParameters);
    }

    /**
     * edit delete web request in task
     */
    async editDeleteWebRequestRaw(requestParameters: EditDeleteWebRequestRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling editDeleteWebRequest.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/deleteweb`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteWebLifecycleRequestToJSON(requestParameters.deleteWebLifecycleRequest),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * edit delete web request in task
     */
    async editDeleteWebRequest(requestParameters: EditDeleteWebRequestRequest): Promise<void> {
        await this.editDeleteWebRequestRaw(requestParameters);
    }

    /**
     * edit extend group request in task
     */
    async editExtendGroupRequestRaw(requestParameters: EditExtendGroupRequestRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling editExtendGroupRequest.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/extendgroup`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ExtendGroupRequestToJSON(requestParameters.extendGroupRequest),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * edit extend group request in task
     */
    async editExtendGroupRequest(requestParameters: EditExtendGroupRequestRequest): Promise<void> {
        await this.editExtendGroupRequestRaw(requestParameters);
    }

    /**
     * edit extend site request in task
     */
    async editExtendSiteRequestRaw(requestParameters: EditExtendSiteRequestRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling editExtendSiteRequest.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/extendsite`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ExtendSiteRequestToJSON(requestParameters.extendSiteRequest),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * edit extend site request in task
     */
    async editExtendSiteRequest(requestParameters: EditExtendSiteRequestRequest): Promise<void> {
        await this.editExtendSiteRequestRaw(requestParameters);
    }

    /**
     * edit grant permission request in task
     */
    async editGrantPermissionRequestRaw(requestParameters: EditGrantPermissionRequestRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling editGrantPermissionRequest.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/grantpermission`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GrantPermissionRequestToJSON(requestParameters.grantPermissionRequest),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * edit grant permission request in task
     */
    async editGrantPermissionRequest(requestParameters: EditGrantPermissionRequestRequest): Promise<void> {
        await this.editGrantPermissionRequestRaw(requestParameters);
    }

    /**
     * edit lock site request in task
     */
    async editLockSiteRequestRaw(requestParameters: EditLockSiteRequestRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling editLockSiteRequest.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/locksite`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: LockSiteRequestToJSON(requestParameters.lockSiteRequest),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * edit lock site request in task
     */
    async editLockSiteRequest(requestParameters: EditLockSiteRequestRequest): Promise<void> {
        await this.editLockSiteRequestRaw(requestParameters);
    }

    /**
     * edit manage permission request in task
     */
    async editManagePermissionRequestRaw(requestParameters: EditManagePermissionRequestRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling editManagePermissionRequest.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/managepermission`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ManagePermissionRequestToJSON(requestParameters.managePermissionRequest),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * edit manage permission request in task
     */
    async editManagePermissionRequest(requestParameters: EditManagePermissionRequestRequest): Promise<void> {
        await this.editManagePermissionRequestRaw(requestParameters);
    }

    /**
     * edit restore group request in task
     */
    async editRestoreGroupRequestRaw(requestParameters: EditRestoreGroupRequestRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling editRestoreGroupRequest.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/restoregroup`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RestoreGroupRequestToJSON(requestParameters.restoreGroupRequest),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * edit restore group request in task
     */
    async editRestoreGroupRequest(requestParameters: EditRestoreGroupRequestRequest): Promise<void> {
        await this.editRestoreGroupRequestRaw(requestParameters);
    }

    /**
     * edit unlock site request in task
     */
    async editUnLockSiteRequestRaw(requestParameters: EditUnLockSiteRequestRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling editUnLockSiteRequest.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/unlocksite`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UnlockSiteRequestToJSON(requestParameters.unlockSiteRequest),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * edit unlock site request in task
     */
    async editUnLockSiteRequest(requestParameters: EditUnLockSiteRequestRequest): Promise<void> {
        await this.editUnLockSiteRequestRaw(requestParameters);
    }

    /**
     * get change permission report
     */
    async getChangePermissionReportRaw(requestParameters: GetChangePermissionReportRequest): Promise<runtime.ApiResponse<PermissionActionItemPageResult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getChangePermissionReport.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.orderby !== undefined) {
            queryParameters['orderby'] = requestParameters.orderby;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/changepermission/{id}/permission`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PermissionActionItemPageResultFromJSON(jsonValue));
    }

    /**
     * get change permission report
     */
    async getChangePermissionReport(requestParameters: GetChangePermissionReportRequest): Promise<PermissionActionItemPageResult> {
        const response = await this.getChangePermissionReportRaw(requestParameters);
        return await response.value();
    }

    /**
     * get change permission report with specific version
     */
    async getChangePermissionReportByVersionRaw(requestParameters: GetChangePermissionReportByVersionRequest): Promise<runtime.ApiResponse<PermissionActionItemPageResult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getChangePermissionReportByVersion.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling getChangePermissionReportByVersion.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.orderby !== undefined) {
            queryParameters['orderby'] = requestParameters.orderby;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/changepermission/{id}/permission/{version}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PermissionActionItemPageResultFromJSON(jsonValue));
    }

    /**
     * get change permission report with specific version
     */
    async getChangePermissionReportByVersion(requestParameters: GetChangePermissionReportByVersionRequest): Promise<PermissionActionItemPageResult> {
        const response = await this.getChangePermissionReportByVersionRaw(requestParameters);
        return await response.value();
    }

    /**
     * get change permission report filters
     */
    async getChangePermissionReportFiltersRaw(requestParameters: GetChangePermissionReportFiltersRequest): Promise<runtime.ApiResponse<DistinctPageResult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getChangePermissionReportFilters.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.distinct !== undefined) {
            queryParameters['distinct'] = requestParameters.distinct;
        }

        if (requestParameters.top !== undefined) {
            queryParameters['top'] = requestParameters.top;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/changepermission/{id}/permission/filters`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DistinctPageResultFromJSON(jsonValue));
    }

    /**
     * get change permission report filters
     */
    async getChangePermissionReportFilters(requestParameters: GetChangePermissionReportFiltersRequest): Promise<DistinctPageResult> {
        const response = await this.getChangePermissionReportFiltersRaw(requestParameters);
        return await response.value();
    }

    /**
     * get change permission report filters with specific version
     */
    async getChangePermissionReportFiltersByVersionRaw(requestParameters: GetChangePermissionReportFiltersByVersionRequest): Promise<runtime.ApiResponse<DistinctPageResult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getChangePermissionReportFiltersByVersion.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling getChangePermissionReportFiltersByVersion.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.distinct !== undefined) {
            queryParameters['distinct'] = requestParameters.distinct;
        }

        if (requestParameters.top !== undefined) {
            queryParameters['top'] = requestParameters.top;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/changepermission/{id}/permission/filters/{version}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DistinctPageResultFromJSON(jsonValue));
    }

    /**
     * get change permission report filters with specific version
     */
    async getChangePermissionReportFiltersByVersion(requestParameters: GetChangePermissionReportFiltersByVersionRequest): Promise<DistinctPageResult> {
        const response = await this.getChangePermissionReportFiltersByVersionRaw(requestParameters);
        return await response.value();
    }

    /**
     * get change permission report filters for a sharepoint group
     */
    async getChangePermissionReportFiltersForSPGroupRaw(requestParameters: GetChangePermissionReportFiltersForSPGroupRequest): Promise<runtime.ApiResponse<DistinctPageResult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getChangePermissionReportFiltersForSPGroup.');
        }

        if (requestParameters.groupid === null || requestParameters.groupid === undefined) {
            throw new runtime.RequiredError('groupid','Required parameter requestParameters.groupid was null or undefined when calling getChangePermissionReportFiltersForSPGroup.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.distinct !== undefined) {
            queryParameters['distinct'] = requestParameters.distinct;
        }

        if (requestParameters.top !== undefined) {
            queryParameters['top'] = requestParameters.top;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/changepermission/{id}/permission/group/{groupid}/filters`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"groupid"}}`, encodeURIComponent(String(requestParameters.groupid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DistinctPageResultFromJSON(jsonValue));
    }

    /**
     * get change permission report filters for a sharepoint group
     */
    async getChangePermissionReportFiltersForSPGroup(requestParameters: GetChangePermissionReportFiltersForSPGroupRequest): Promise<DistinctPageResult> {
        const response = await this.getChangePermissionReportFiltersForSPGroupRaw(requestParameters);
        return await response.value();
    }

    /**
     * get change permission report filters for a sharepoint group with specific version
     */
    async getChangePermissionReportFiltersForSPGroupByVersionRaw(requestParameters: GetChangePermissionReportFiltersForSPGroupByVersionRequest): Promise<runtime.ApiResponse<DistinctPageResult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getChangePermissionReportFiltersForSPGroupByVersion.');
        }

        if (requestParameters.groupid === null || requestParameters.groupid === undefined) {
            throw new runtime.RequiredError('groupid','Required parameter requestParameters.groupid was null or undefined when calling getChangePermissionReportFiltersForSPGroupByVersion.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling getChangePermissionReportFiltersForSPGroupByVersion.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.distinct !== undefined) {
            queryParameters['distinct'] = requestParameters.distinct;
        }

        if (requestParameters.top !== undefined) {
            queryParameters['top'] = requestParameters.top;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/changepermission/{id}/permission/group/{groupid}/filters/{version}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"groupid"}}`, encodeURIComponent(String(requestParameters.groupid))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DistinctPageResultFromJSON(jsonValue));
    }

    /**
     * get change permission report filters for a sharepoint group with specific version
     */
    async getChangePermissionReportFiltersForSPGroupByVersion(requestParameters: GetChangePermissionReportFiltersForSPGroupByVersionRequest): Promise<DistinctPageResult> {
        const response = await this.getChangePermissionReportFiltersForSPGroupByVersionRaw(requestParameters);
        return await response.value();
    }

    /**
     * get change permission report for a sharepoint group
     */
    async getChangePermissionReportForSPGroupRaw(requestParameters: GetChangePermissionReportForSPGroupRequest): Promise<runtime.ApiResponse<PermissionActionItemPageResult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getChangePermissionReportForSPGroup.');
        }

        if (requestParameters.groupid === null || requestParameters.groupid === undefined) {
            throw new runtime.RequiredError('groupid','Required parameter requestParameters.groupid was null or undefined when calling getChangePermissionReportForSPGroup.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.orderby !== undefined) {
            queryParameters['orderby'] = requestParameters.orderby;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/changepermission/{id}/permission/group/{groupid}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"groupid"}}`, encodeURIComponent(String(requestParameters.groupid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PermissionActionItemPageResultFromJSON(jsonValue));
    }

    /**
     * get change permission report for a sharepoint group
     */
    async getChangePermissionReportForSPGroup(requestParameters: GetChangePermissionReportForSPGroupRequest): Promise<PermissionActionItemPageResult> {
        const response = await this.getChangePermissionReportForSPGroupRaw(requestParameters);
        return await response.value();
    }

    /**
     * get change permission report for a sharepoint group with specific version
     */
    async getChangePermissionReportForSPGroupByVersionRaw(requestParameters: GetChangePermissionReportForSPGroupByVersionRequest): Promise<runtime.ApiResponse<PermissionActionItemPageResult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getChangePermissionReportForSPGroupByVersion.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling getChangePermissionReportForSPGroupByVersion.');
        }

        if (requestParameters.groupid === null || requestParameters.groupid === undefined) {
            throw new runtime.RequiredError('groupid','Required parameter requestParameters.groupid was null or undefined when calling getChangePermissionReportForSPGroupByVersion.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.orderby !== undefined) {
            queryParameters['orderby'] = requestParameters.orderby;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/changepermission/{id}/permission/{version}/group/{groupid}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"groupid"}}`, encodeURIComponent(String(requestParameters.groupid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PermissionActionItemPageResultFromJSON(jsonValue));
    }

    /**
     * get change permission report for a sharepoint group with specific version
     */
    async getChangePermissionReportForSPGroupByVersion(requestParameters: GetChangePermissionReportForSPGroupByVersionRequest): Promise<PermissionActionItemPageResult> {
        const response = await this.getChangePermissionReportForSPGroupByVersionRaw(requestParameters);
        return await response.value();
    }

    /**
     * get change permission report permission levels
     */
    async getChangePermissionReportPermissionLevelsRaw(requestParameters: GetChangePermissionReportPermissionLevelsRequest): Promise<runtime.ApiResponse<Array<PermissionLevel>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getChangePermissionReportPermissionLevels.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/changepermission/{id}/permissionlevels`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PermissionLevelFromJSON));
    }

    /**
     * get change permission report permission levels
     */
    async getChangePermissionReportPermissionLevels(requestParameters: GetChangePermissionReportPermissionLevelsRequest): Promise<Array<PermissionLevel>> {
        const response = await this.getChangePermissionReportPermissionLevelsRaw(requestParameters);
        return await response.value();
    }

    /**
     * get change permission report properties
     */
    async getChangePermissionReportPropertiesRaw(requestParameters: GetChangePermissionReportPropertiesRequest): Promise<runtime.ApiResponse<RecertificationReportProperties>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getChangePermissionReportProperties.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/changepermission/{id}/properties`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RecertificationReportPropertiesFromJSON(jsonValue));
    }

    /**
     * get change permission report properties
     */
    async getChangePermissionReportProperties(requestParameters: GetChangePermissionReportPropertiesRequest): Promise<RecertificationReportProperties> {
        const response = await this.getChangePermissionReportPropertiesRaw(requestParameters);
        return await response.value();
    }

    /**
     * get clone permission report
     */
    async getClonePermissionReportRaw(requestParameters: GetClonePermissionReportRequest): Promise<runtime.ApiResponse<ClonePermissionSecuritySearchResultPageResult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getClonePermissionReport.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.orderby !== undefined) {
            queryParameters['orderby'] = requestParameters.orderby;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/clonepermission/{id}/permission`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ClonePermissionSecuritySearchResultPageResultFromJSON(jsonValue));
    }

    /**
     * get clone permission report
     */
    async getClonePermissionReport(requestParameters: GetClonePermissionReportRequest): Promise<ClonePermissionSecuritySearchResultPageResult> {
        const response = await this.getClonePermissionReportRaw(requestParameters);
        return await response.value();
    }

    /**
     * get clone permission report properties
     */
    async getClonePermissionReportPropertiesRaw(requestParameters: GetClonePermissionReportPropertiesRequest): Promise<runtime.ApiResponse<ClonePermissionReportProperty>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getClonePermissionReportProperties.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/clonepermission/{id}/properties`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ClonePermissionReportPropertyFromJSON(jsonValue));
    }

    /**
     * get clone permission report properties
     */
    async getClonePermissionReportProperties(requestParameters: GetClonePermissionReportPropertiesRequest): Promise<ClonePermissionReportProperty> {
        const response = await this.getClonePermissionReportPropertiesRaw(requestParameters);
        return await response.value();
    }

    /**
     * get manual archive report
     */
    async getGetManualArchiveReportRaw(requestParameters: GetGetManualArchiveReportRequest): Promise<runtime.ApiResponse<ManuallyArchiveRecordModelPageResult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getGetManualArchiveReport.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.orderby !== undefined) {
            queryParameters['orderby'] = requestParameters.orderby;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/manualarchive`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ManuallyArchiveRecordModelPageResultFromJSON(jsonValue));
    }

    /**
     * get manual archive report
     */
    async getGetManualArchiveReport(requestParameters: GetGetManualArchiveReportRequest): Promise<ManuallyArchiveRecordModelPageResult> {
        const response = await this.getGetManualArchiveReportRaw(requestParameters);
        return await response.value();
    }

    /**
     * get manual archive report filters
     */
    async getGetManualArchiveReportFiltersRaw(requestParameters: GetGetManualArchiveReportFiltersRequest): Promise<runtime.ApiResponse<DistinctPageResult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getGetManualArchiveReportFilters.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.distinct !== undefined) {
            queryParameters['distinct'] = requestParameters.distinct;
        }

        if (requestParameters.top !== undefined) {
            queryParameters['top'] = requestParameters.top;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/manualarchive/filters`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DistinctPageResultFromJSON(jsonValue));
    }

    /**
     * get manual archive report filters
     */
    async getGetManualArchiveReportFilters(requestParameters: GetGetManualArchiveReportFiltersRequest): Promise<DistinctPageResult> {
        const response = await this.getGetManualArchiveReportFiltersRaw(requestParameters);
        return await response.value();
    }

    /**
     * get group membership recertification report
     */
    async getGroupMembershipRecertificationReportRaw(requestParameters: GetGroupMembershipRecertificationReportRequest): Promise<runtime.ApiResponse<MembershipRecertificationItemPageResult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getGroupMembershipRecertificationReport.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.orderby !== undefined) {
            queryParameters['orderby'] = requestParameters.orderby;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/group/recertification/membership`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MembershipRecertificationItemPageResultFromJSON(jsonValue));
    }

    /**
     * get group membership recertification report
     */
    async getGroupMembershipRecertificationReport(requestParameters: GetGroupMembershipRecertificationReportRequest): Promise<MembershipRecertificationItemPageResult> {
        const response = await this.getGroupMembershipRecertificationReportRaw(requestParameters);
        return await response.value();
    }

    /**
     * get group membership recertification report by version
     */
    async getGroupMembershipRecertificationReportByVersionRaw(requestParameters: GetGroupMembershipRecertificationReportByVersionRequest): Promise<runtime.ApiResponse<MembershipRecertificationItemPageResult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getGroupMembershipRecertificationReportByVersion.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling getGroupMembershipRecertificationReportByVersion.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.orderby !== undefined) {
            queryParameters['orderby'] = requestParameters.orderby;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/group/recertification/membership/{version}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MembershipRecertificationItemPageResultFromJSON(jsonValue));
    }

    /**
     * get group membership recertification report by version
     */
    async getGroupMembershipRecertificationReportByVersion(requestParameters: GetGroupMembershipRecertificationReportByVersionRequest): Promise<MembershipRecertificationItemPageResult> {
        const response = await this.getGroupMembershipRecertificationReportByVersionRaw(requestParameters);
        return await response.value();
    }

    /**
     * get group membership recertification report filters
     */
    async getGroupMembershipRecertificationReportFiltersRaw(requestParameters: GetGroupMembershipRecertificationReportFiltersRequest): Promise<runtime.ApiResponse<DistinctPageResult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getGroupMembershipRecertificationReportFilters.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.distinct !== undefined) {
            queryParameters['distinct'] = requestParameters.distinct;
        }

        if (requestParameters.top !== undefined) {
            queryParameters['top'] = requestParameters.top;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/group/recertification/membership/filters`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DistinctPageResultFromJSON(jsonValue));
    }

    /**
     * get group membership recertification report filters
     */
    async getGroupMembershipRecertificationReportFilters(requestParameters: GetGroupMembershipRecertificationReportFiltersRequest): Promise<DistinctPageResult> {
        const response = await this.getGroupMembershipRecertificationReportFiltersRaw(requestParameters);
        return await response.value();
    }

    /**
     * get group membership recertification report filters by version
     */
    async getGroupMembershipRecertificationReportFiltersByVersionRaw(requestParameters: GetGroupMembershipRecertificationReportFiltersByVersionRequest): Promise<runtime.ApiResponse<DistinctPageResult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getGroupMembershipRecertificationReportFiltersByVersion.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling getGroupMembershipRecertificationReportFiltersByVersion.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.distinct !== undefined) {
            queryParameters['distinct'] = requestParameters.distinct;
        }

        if (requestParameters.top !== undefined) {
            queryParameters['top'] = requestParameters.top;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/group/recertification/membership/filters/{version}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DistinctPageResultFromJSON(jsonValue));
    }

    /**
     * get group membership recertification report filters by version
     */
    async getGroupMembershipRecertificationReportFiltersByVersion(requestParameters: GetGroupMembershipRecertificationReportFiltersByVersionRequest): Promise<DistinctPageResult> {
        const response = await this.getGroupMembershipRecertificationReportFiltersByVersionRaw(requestParameters);
        return await response.value();
    }

    /**
     * get group membership recertification report properties
     */
    async getGroupMembershipRecertificationReportPropertiesRaw(requestParameters: GetGroupMembershipRecertificationReportPropertiesRequest): Promise<runtime.ApiResponse<MembershipRecertificationReportProperties>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getGroupMembershipRecertificationReportProperties.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/group/recertification/membership/properties`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MembershipRecertificationReportPropertiesFromJSON(jsonValue));
    }

    /**
     * get group membership recertification report properties
     */
    async getGroupMembershipRecertificationReportProperties(requestParameters: GetGroupMembershipRecertificationReportPropertiesRequest): Promise<MembershipRecertificationReportProperties> {
        const response = await this.getGroupMembershipRecertificationReportPropertiesRaw(requestParameters);
        return await response.value();
    }

    /**
     * get group permission recertification report
     */
    async getGroupPermissionRecertificationReportRaw(requestParameters: GetGroupPermissionRecertificationReportRequest): Promise<runtime.ApiResponse<GroupPermissionActionItemPageResult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getGroupPermissionRecertificationReport.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.orderby !== undefined) {
            queryParameters['orderby'] = requestParameters.orderby;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/group/recertification/permission`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupPermissionActionItemPageResultFromJSON(jsonValue));
    }

    /**
     * get group permission recertification report
     */
    async getGroupPermissionRecertificationReport(requestParameters: GetGroupPermissionRecertificationReportRequest): Promise<GroupPermissionActionItemPageResult> {
        const response = await this.getGroupPermissionRecertificationReportRaw(requestParameters);
        return await response.value();
    }

    /**
     * get group permission recertification report by version
     */
    async getGroupPermissionRecertificationReportByVersionRaw(requestParameters: GetGroupPermissionRecertificationReportByVersionRequest): Promise<runtime.ApiResponse<GroupPermissionActionItemPageResult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getGroupPermissionRecertificationReportByVersion.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling getGroupPermissionRecertificationReportByVersion.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.orderby !== undefined) {
            queryParameters['orderby'] = requestParameters.orderby;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/group/recertification/permission/{version}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupPermissionActionItemPageResultFromJSON(jsonValue));
    }

    /**
     * get group permission recertification report by version
     */
    async getGroupPermissionRecertificationReportByVersion(requestParameters: GetGroupPermissionRecertificationReportByVersionRequest): Promise<GroupPermissionActionItemPageResult> {
        const response = await this.getGroupPermissionRecertificationReportByVersionRaw(requestParameters);
        return await response.value();
    }

    /**
     * get group permission recertification report filters
     */
    async getGroupPermissionRecertificationReportFiltersRaw(requestParameters: GetGroupPermissionRecertificationReportFiltersRequest): Promise<runtime.ApiResponse<DistinctPageResult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getGroupPermissionRecertificationReportFilters.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.distinct !== undefined) {
            queryParameters['distinct'] = requestParameters.distinct;
        }

        if (requestParameters.top !== undefined) {
            queryParameters['top'] = requestParameters.top;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/group/recertification/permission/filters`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DistinctPageResultFromJSON(jsonValue));
    }

    /**
     * get group permission recertification report filters
     */
    async getGroupPermissionRecertificationReportFilters(requestParameters: GetGroupPermissionRecertificationReportFiltersRequest): Promise<DistinctPageResult> {
        const response = await this.getGroupPermissionRecertificationReportFiltersRaw(requestParameters);
        return await response.value();
    }

    /**
     * get group permission recertification report filters for sharepoint group
     */
    async getGroupPermissionRecertificationReportFiltersForSPGroupRaw(requestParameters: GetGroupPermissionRecertificationReportFiltersForSPGroupRequest): Promise<runtime.ApiResponse<DistinctPageResult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getGroupPermissionRecertificationReportFiltersForSPGroup.');
        }

        if (requestParameters.groupid === null || requestParameters.groupid === undefined) {
            throw new runtime.RequiredError('groupid','Required parameter requestParameters.groupid was null or undefined when calling getGroupPermissionRecertificationReportFiltersForSPGroup.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.distinct !== undefined) {
            queryParameters['distinct'] = requestParameters.distinct;
        }

        if (requestParameters.top !== undefined) {
            queryParameters['top'] = requestParameters.top;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/group/recertification/permission/group/{groupid}/filters`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"groupid"}}`, encodeURIComponent(String(requestParameters.groupid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DistinctPageResultFromJSON(jsonValue));
    }

    /**
     * get group permission recertification report filters for sharepoint group
     */
    async getGroupPermissionRecertificationReportFiltersForSPGroup(requestParameters: GetGroupPermissionRecertificationReportFiltersForSPGroupRequest): Promise<DistinctPageResult> {
        const response = await this.getGroupPermissionRecertificationReportFiltersForSPGroupRaw(requestParameters);
        return await response.value();
    }

    /**
     * get group permission recertification report for sharepoint group
     */
    async getGroupPermissionRecertificationReportForSPGroupRaw(requestParameters: GetGroupPermissionRecertificationReportForSPGroupRequest): Promise<runtime.ApiResponse<GroupPermissionActionItemPageResult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getGroupPermissionRecertificationReportForSPGroup.');
        }

        if (requestParameters.groupid === null || requestParameters.groupid === undefined) {
            throw new runtime.RequiredError('groupid','Required parameter requestParameters.groupid was null or undefined when calling getGroupPermissionRecertificationReportForSPGroup.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.orderby !== undefined) {
            queryParameters['orderby'] = requestParameters.orderby;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/group/recertification/permission/group/{groupid}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"groupid"}}`, encodeURIComponent(String(requestParameters.groupid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupPermissionActionItemPageResultFromJSON(jsonValue));
    }

    /**
     * get group permission recertification report for sharepoint group
     */
    async getGroupPermissionRecertificationReportForSPGroup(requestParameters: GetGroupPermissionRecertificationReportForSPGroupRequest): Promise<GroupPermissionActionItemPageResult> {
        const response = await this.getGroupPermissionRecertificationReportForSPGroupRaw(requestParameters);
        return await response.value();
    }

    /**
     * get group permission recertification report properties
     */
    async getGroupPermissionRecertificationReportPropertiesRaw(requestParameters: GetGroupPermissionRecertificationReportPropertiesRequest): Promise<runtime.ApiResponse<RecertificationReportProperties>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getGroupPermissionRecertificationReportProperties.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/group/recertification/permission/properties`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RecertificationReportPropertiesFromJSON(jsonValue));
    }

    /**
     * get group permission recertification report properties
     */
    async getGroupPermissionRecertificationReportProperties(requestParameters: GetGroupPermissionRecertificationReportPropertiesRequest): Promise<RecertificationReportProperties> {
        const response = await this.getGroupPermissionRecertificationReportPropertiesRaw(requestParameters);
        return await response.value();
    }

    /**
     * get my task filters
     */
    async getMyTaskFiltersRaw(requestParameters: GetMyTaskFiltersRequest): Promise<runtime.ApiResponse<DistinctPageResult>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.isconfirmtask !== undefined) {
            queryParameters['isconfirmtask'] = requestParameters.isconfirmtask;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.distinct !== undefined) {
            queryParameters['distinct'] = requestParameters.distinct;
        }

        if (requestParameters.top !== undefined) {
            queryParameters['top'] = requestParameters.top;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/my/filters`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DistinctPageResultFromJSON(jsonValue));
    }

    /**
     * get my task filters
     */
    async getMyTaskFilters(requestParameters: GetMyTaskFiltersRequest): Promise<DistinctPageResult> {
        const response = await this.getMyTaskFiltersRaw(requestParameters);
        return await response.value();
    }

    /**
     * get my tasks
     */
    async getMyTasksRaw(requestParameters: GetMyTasksRequest): Promise<runtime.ApiResponse<TaskListPageResult>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.isconfirmtask !== undefined) {
            queryParameters['isconfirmtask'] = requestParameters.isconfirmtask;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.orderby !== undefined) {
            queryParameters['orderby'] = requestParameters.orderby;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.top !== undefined) {
            queryParameters['top'] = requestParameters.top;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/my`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskListPageResultFromJSON(jsonValue));
    }

    /**
     * get my tasks
     */
    async getMyTasks(requestParameters: GetMyTasksRequest): Promise<TaskListPageResult> {
        const response = await this.getMyTasksRaw(requestParameters);
        return await response.value();
    }

    /**
     * get remove permission report
     */
    async getRemovePermissionReportRaw(requestParameters: GetRemovePermissionReportRequest): Promise<runtime.ApiResponse<SecuritySearchResultPageResult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRemovePermissionReport.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.orderby !== undefined) {
            queryParameters['orderby'] = requestParameters.orderby;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/removepermission/{id}/permission`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SecuritySearchResultPageResultFromJSON(jsonValue));
    }

    /**
     * get remove permission report
     */
    async getRemovePermissionReport(requestParameters: GetRemovePermissionReportRequest): Promise<SecuritySearchResultPageResult> {
        const response = await this.getRemovePermissionReportRaw(requestParameters);
        return await response.value();
    }

    /**
     * get remove permission report properties
     */
    async getRemovePermissionReportPropertiesRaw(requestParameters: GetRemovePermissionReportPropertiesRequest): Promise<runtime.ApiResponse<RecertificationReportProperties>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRemovePermissionReportProperties.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/removepermission/{id}/properties`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RecertificationReportPropertiesFromJSON(jsonValue));
    }

    /**
     * get remove permission report properties
     */
    async getRemovePermissionReportProperties(requestParameters: GetRemovePermissionReportPropertiesRequest): Promise<RecertificationReportProperties> {
        const response = await this.getRemovePermissionReportPropertiesRaw(requestParameters);
        return await response.value();
    }

    /**
     * get site metadata recertification metadata
     */
    async getSiteMetadataRecertificationReportRaw(requestParameters: GetSiteMetadataRecertificationReportRequest): Promise<runtime.ApiResponse<Array<CustomMetadata>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSiteMetadataRecertificationReport.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/site/recertification/metadata`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CustomMetadataFromJSON));
    }

    /**
     * get site metadata recertification metadata
     */
    async getSiteMetadataRecertificationReport(requestParameters: GetSiteMetadataRecertificationReportRequest): Promise<Array<CustomMetadata>> {
        const response = await this.getSiteMetadataRecertificationReportRaw(requestParameters);
        return await response.value();
    }

    /**
     * get site metadata recertification report properties
     */
    async getSiteMetadataRecertificationReportPropertiesRaw(requestParameters: GetSiteMetadataRecertificationReportPropertiesRequest): Promise<runtime.ApiResponse<MetadataRecertificationReportProperties>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSiteMetadataRecertificationReportProperties.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/site/recertification/metadata/properties`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MetadataRecertificationReportPropertiesFromJSON(jsonValue));
    }

    /**
     * get site metadata recertification report properties
     */
    async getSiteMetadataRecertificationReportProperties(requestParameters: GetSiteMetadataRecertificationReportPropertiesRequest): Promise<MetadataRecertificationReportProperties> {
        const response = await this.getSiteMetadataRecertificationReportPropertiesRaw(requestParameters);
        return await response.value();
    }

    /**
     * get site ownership recertification report properties
     */
    async getSiteOwnershipRecertificationReportPropertiesRaw(requestParameters: GetSiteOwnershipRecertificationReportPropertiesRequest): Promise<runtime.ApiResponse<RecertificationReportProperties>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSiteOwnershipRecertificationReportProperties.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/site/recertification/ownership/properties`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RecertificationReportPropertiesFromJSON(jsonValue));
    }

    /**
     * get site ownership recertification report properties
     */
    async getSiteOwnershipRecertificationReportProperties(requestParameters: GetSiteOwnershipRecertificationReportPropertiesRequest): Promise<RecertificationReportProperties> {
        const response = await this.getSiteOwnershipRecertificationReportPropertiesRaw(requestParameters);
        return await response.value();
    }

    /**
     * get site permission recertification permission filters
     */
    async getSitePermissionRecertificatioPermissionFiltersRaw(requestParameters: GetSitePermissionRecertificatioPermissionFiltersRequest): Promise<runtime.ApiResponse<DistinctPageResult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSitePermissionRecertificatioPermissionFilters.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.distinct !== undefined) {
            queryParameters['distinct'] = requestParameters.distinct;
        }

        if (requestParameters.top !== undefined) {
            queryParameters['top'] = requestParameters.top;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/site/recertification/permission/filters`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DistinctPageResultFromJSON(jsonValue));
    }

    /**
     * get site permission recertification permission filters
     */
    async getSitePermissionRecertificatioPermissionFilters(requestParameters: GetSitePermissionRecertificatioPermissionFiltersRequest): Promise<DistinctPageResult> {
        const response = await this.getSitePermissionRecertificatioPermissionFiltersRaw(requestParameters);
        return await response.value();
    }

    /**
     * get site permission recertification permission filters with specific version
     */
    async getSitePermissionRecertificatioReportFiltersByVersionRaw(requestParameters: GetSitePermissionRecertificatioReportFiltersByVersionRequest): Promise<runtime.ApiResponse<DistinctPageResult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSitePermissionRecertificatioReportFiltersByVersion.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling getSitePermissionRecertificatioReportFiltersByVersion.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.distinct !== undefined) {
            queryParameters['distinct'] = requestParameters.distinct;
        }

        if (requestParameters.top !== undefined) {
            queryParameters['top'] = requestParameters.top;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/site/recertification/permission/filters/{version}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DistinctPageResultFromJSON(jsonValue));
    }

    /**
     * get site permission recertification permission filters with specific version
     */
    async getSitePermissionRecertificatioReportFiltersByVersion(requestParameters: GetSitePermissionRecertificatioReportFiltersByVersionRequest): Promise<DistinctPageResult> {
        const response = await this.getSitePermissionRecertificatioReportFiltersByVersionRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getSitePermissionRecertificatioReportFiltersForSPGroupRaw(requestParameters: GetSitePermissionRecertificatioReportFiltersForSPGroupRequest): Promise<runtime.ApiResponse<DistinctPageResult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSitePermissionRecertificatioReportFiltersForSPGroup.');
        }

        if (requestParameters.groupid === null || requestParameters.groupid === undefined) {
            throw new runtime.RequiredError('groupid','Required parameter requestParameters.groupid was null or undefined when calling getSitePermissionRecertificatioReportFiltersForSPGroup.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.distinct !== undefined) {
            queryParameters['distinct'] = requestParameters.distinct;
        }

        if (requestParameters.top !== undefined) {
            queryParameters['top'] = requestParameters.top;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/site/recertification/permission/group/{groupid}/filters`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"groupid"}}`, encodeURIComponent(String(requestParameters.groupid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DistinctPageResultFromJSON(jsonValue));
    }

    /**
     */
    async getSitePermissionRecertificatioReportFiltersForSPGroup(requestParameters: GetSitePermissionRecertificatioReportFiltersForSPGroupRequest): Promise<DistinctPageResult> {
        const response = await this.getSitePermissionRecertificatioReportFiltersForSPGroupRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getSitePermissionRecertificatioReportFiltersForSPGroupByVersionRaw(requestParameters: GetSitePermissionRecertificatioReportFiltersForSPGroupByVersionRequest): Promise<runtime.ApiResponse<DistinctPageResult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSitePermissionRecertificatioReportFiltersForSPGroupByVersion.');
        }

        if (requestParameters.groupid === null || requestParameters.groupid === undefined) {
            throw new runtime.RequiredError('groupid','Required parameter requestParameters.groupid was null or undefined when calling getSitePermissionRecertificatioReportFiltersForSPGroupByVersion.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling getSitePermissionRecertificatioReportFiltersForSPGroupByVersion.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.distinct !== undefined) {
            queryParameters['distinct'] = requestParameters.distinct;
        }

        if (requestParameters.top !== undefined) {
            queryParameters['top'] = requestParameters.top;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/site/recertification/permission/group/{groupid}/filters/{version}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"groupid"}}`, encodeURIComponent(String(requestParameters.groupid))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DistinctPageResultFromJSON(jsonValue));
    }

    /**
     */
    async getSitePermissionRecertificatioReportFiltersForSPGroupByVersion(requestParameters: GetSitePermissionRecertificatioReportFiltersForSPGroupByVersionRequest): Promise<DistinctPageResult> {
        const response = await this.getSitePermissionRecertificatioReportFiltersForSPGroupByVersionRaw(requestParameters);
        return await response.value();
    }

    /**
     * get site permission recertification permission levels
     */
    async getSitePermissionRecertificationPermissionLevelsRaw(requestParameters: GetSitePermissionRecertificationPermissionLevelsRequest): Promise<runtime.ApiResponse<Array<PermissionLevel>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSitePermissionRecertificationPermissionLevels.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/recertification/permissionlevels`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PermissionLevelFromJSON));
    }

    /**
     * get site permission recertification permission levels
     */
    async getSitePermissionRecertificationPermissionLevels(requestParameters: GetSitePermissionRecertificationPermissionLevelsRequest): Promise<Array<PermissionLevel>> {
        const response = await this.getSitePermissionRecertificationPermissionLevelsRaw(requestParameters);
        return await response.value();
    }

    /**
     * get site permission recertification report
     */
    async getSitePermissionRecertificationReportRaw(requestParameters: GetSitePermissionRecertificationReportRequest): Promise<runtime.ApiResponse<PermissionActionItemPageResult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSitePermissionRecertificationReport.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.orderby !== undefined) {
            queryParameters['orderby'] = requestParameters.orderby;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/site/recertification/permission`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PermissionActionItemPageResultFromJSON(jsonValue));
    }

    /**
     * get site permission recertification report
     */
    async getSitePermissionRecertificationReport(requestParameters: GetSitePermissionRecertificationReportRequest): Promise<PermissionActionItemPageResult> {
        const response = await this.getSitePermissionRecertificationReportRaw(requestParameters);
        return await response.value();
    }

    /**
     * get site permission recertification report by specific version
     */
    async getSitePermissionRecertificationReportByVersionRaw(requestParameters: GetSitePermissionRecertificationReportByVersionRequest): Promise<runtime.ApiResponse<PermissionActionItemPageResult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSitePermissionRecertificationReportByVersion.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling getSitePermissionRecertificationReportByVersion.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.orderby !== undefined) {
            queryParameters['orderby'] = requestParameters.orderby;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/site/recertification/permission/{version}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PermissionActionItemPageResultFromJSON(jsonValue));
    }

    /**
     * get site permission recertification report by specific version
     */
    async getSitePermissionRecertificationReportByVersion(requestParameters: GetSitePermissionRecertificationReportByVersionRequest): Promise<PermissionActionItemPageResult> {
        const response = await this.getSitePermissionRecertificationReportByVersionRaw(requestParameters);
        return await response.value();
    }

    /**
     * get site permission recertification group permission items
     */
    async getSitePermissionRecertificationReportForSPGroupRaw(requestParameters: GetSitePermissionRecertificationReportForSPGroupRequest): Promise<runtime.ApiResponse<PermissionActionItemPageResult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSitePermissionRecertificationReportForSPGroup.');
        }

        if (requestParameters.groupid === null || requestParameters.groupid === undefined) {
            throw new runtime.RequiredError('groupid','Required parameter requestParameters.groupid was null or undefined when calling getSitePermissionRecertificationReportForSPGroup.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.orderby !== undefined) {
            queryParameters['orderby'] = requestParameters.orderby;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/site/recertification/permission/group/{groupid}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"groupid"}}`, encodeURIComponent(String(requestParameters.groupid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PermissionActionItemPageResultFromJSON(jsonValue));
    }

    /**
     * get site permission recertification group permission items
     */
    async getSitePermissionRecertificationReportForSPGroup(requestParameters: GetSitePermissionRecertificationReportForSPGroupRequest): Promise<PermissionActionItemPageResult> {
        const response = await this.getSitePermissionRecertificationReportForSPGroupRaw(requestParameters);
        return await response.value();
    }

    /**
     * get site permission recertification group permission items with specific version with specific version
     */
    async getSitePermissionRecertificationReportForSPGroupByVersionRaw(requestParameters: GetSitePermissionRecertificationReportForSPGroupByVersionRequest): Promise<runtime.ApiResponse<PermissionActionItemPageResult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSitePermissionRecertificationReportForSPGroupByVersion.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling getSitePermissionRecertificationReportForSPGroupByVersion.');
        }

        if (requestParameters.groupid === null || requestParameters.groupid === undefined) {
            throw new runtime.RequiredError('groupid','Required parameter requestParameters.groupid was null or undefined when calling getSitePermissionRecertificationReportForSPGroupByVersion.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.orderby !== undefined) {
            queryParameters['orderby'] = requestParameters.orderby;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/site/recertification/permission/{version}/group/{groupid}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"groupid"}}`, encodeURIComponent(String(requestParameters.groupid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PermissionActionItemPageResultFromJSON(jsonValue));
    }

    /**
     * get site permission recertification group permission items with specific version with specific version
     */
    async getSitePermissionRecertificationReportForSPGroupByVersion(requestParameters: GetSitePermissionRecertificationReportForSPGroupByVersionRequest): Promise<PermissionActionItemPageResult> {
        const response = await this.getSitePermissionRecertificationReportForSPGroupByVersionRaw(requestParameters);
        return await response.value();
    }

    /**
     * get site permission recertification report properties
     */
    async getSitePermissionRecertificationReportPropertiesRaw(requestParameters: GetSitePermissionRecertificationReportPropertiesRequest): Promise<runtime.ApiResponse<RecertificationReportProperties>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSitePermissionRecertificationReportProperties.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/site/recertification/permission/properties`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RecertificationReportPropertiesFromJSON(jsonValue));
    }

    /**
     * get site permission recertification report properties
     */
    async getSitePermissionRecertificationReportProperties(requestParameters: GetSitePermissionRecertificationReportPropertiesRequest): Promise<RecertificationReportProperties> {
        const response = await this.getSitePermissionRecertificationReportPropertiesRaw(requestParameters);
        return await response.value();
    }

    /**
     * get task by batch id
     */
    async getTaskByBatchIdRaw(requestParameters: GetTaskByBatchIdRequest): Promise<runtime.ApiResponse<TaskList>> {
        if (requestParameters.batchid === null || requestParameters.batchid === undefined) {
            throw new runtime.RequiredError('batchid','Required parameter requestParameters.batchid was null or undefined when calling getTaskByBatchId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/my/{batchid}`.replace(`{${"batchid"}}`, encodeURIComponent(String(requestParameters.batchid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskListFromJSON(jsonValue));
    }

    /**
     * get task by batch id
     */
    async getTaskByBatchId(requestParameters: GetTaskByBatchIdRequest): Promise<TaskList> {
        const response = await this.getTaskByBatchIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * get my task by id
     */
    async getTaskByIdRaw(requestParameters: GetTaskByIdRequest): Promise<runtime.ApiResponse<ApiTask>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getTaskById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiTaskFromJSON(jsonValue));
    }

    /**
     * get my task by id
     */
    async getTaskById(requestParameters: GetTaskByIdRequest): Promise<ApiTask> {
        const response = await this.getTaskByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * promote as owners for group membership recertification
     */
    async promoteAsOwnersForGroupMembershipRecertificationRaw(requestParameters: PromoteAsOwnersForGroupMembershipRecertificationRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling promoteAsOwnersForGroupMembershipRecertification.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/group/recertification/membership/promoteasowner`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.apiUser.map(ApiUserToJSON),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * promote as owners for group membership recertification
     */
    async promoteAsOwnersForGroupMembershipRecertification(requestParameters: PromoteAsOwnersForGroupMembershipRecertificationRequest): Promise<void> {
        await this.promoteAsOwnersForGroupMembershipRecertificationRaw(requestParameters);
    }

    /**
     * reassign task
     */
    async reassignTaskRaw(requestParameters: ReassignTaskRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling reassignTask.');
        }

        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling reassignTask.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/reassignto/{user}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters.user))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * reassign task
     */
    async reassignTask(requestParameters: ReassignTaskRequest): Promise<void> {
        await this.reassignTaskRaw(requestParameters);
    }

    /**
     * reject task
     */
    async rejectTaskRaw(requestParameters: RejectTaskRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling rejectTask.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/reject`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CommentsParamToJSON(requestParameters.commentsParam),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * reject task
     */
    async rejectTask(requestParameters: RejectTaskRequest): Promise<void> {
        await this.rejectTaskRaw(requestParameters);
    }

    /**
     * remove users for group membership recertification
     */
    async removeUsersForGroupMembershipRecertificationRaw(requestParameters: RemoveUsersForGroupMembershipRecertificationRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling removeUsersForGroupMembershipRecertification.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/group/recertification/membership/removeuser`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * remove users for group membership recertification
     */
    async removeUsersForGroupMembershipRecertification(requestParameters: RemoveUsersForGroupMembershipRecertificationRequest): Promise<void> {
        await this.removeUsersForGroupMembershipRecertificationRaw(requestParameters);
    }

    /**
     * save all changes for change permission task
     */
    async reseAllChangesForChangePermissionTaskRaw(requestParameters: ReseAllChangesForChangePermissionTaskRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling reseAllChangesForChangePermissionTask.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/changepermission/{id}/resetallchange`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * save all changes for change permission task
     */
    async reseAllChangesForChangePermissionTask(requestParameters: ReseAllChangesForChangePermissionTaskRequest): Promise<void> {
        await this.reseAllChangesForChangePermissionTaskRaw(requestParameters);
    }

    /**
     * reset all changes for site/group recertification task
     */
    async resetAllChangesForRecertificationTaskRaw(requestParameters: ResetAllChangesForRecertificationTaskRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling resetAllChangesForRecertificationTask.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/recertification/resetallchange`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * reset all changes for site/group recertification task
     */
    async resetAllChangesForRecertificationTask(requestParameters: ResetAllChangesForRecertificationTaskRequest): Promise<void> {
        await this.resetAllChangesForRecertificationTaskRaw(requestParameters);
    }

    /**
     * save my changes for change permission task
     */
    async resetMyChangesForChangePermissionTaskRaw(requestParameters: ResetMyChangesForChangePermissionTaskRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling resetMyChangesForChangePermissionTask.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/changepermission/{id}/resetmychange`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * save my changes for change permission task
     */
    async resetMyChangesForChangePermissionTask(requestParameters: ResetMyChangesForChangePermissionTaskRequest): Promise<void> {
        await this.resetMyChangesForChangePermissionTaskRaw(requestParameters);
    }

    /**
     * reset my changes for site/group recertification task
     */
    async resetMyChangesForRecertificationTaskRaw(requestParameters: ResetMyChangesForRecertificationTaskRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling resetMyChangesForRecertificationTask.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/recertification/resetmychange`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * reset my changes for site/group recertification task
     */
    async resetMyChangesForRecertificationTask(requestParameters: ResetMyChangesForRecertificationTaskRequest): Promise<void> {
        await this.resetMyChangesForRecertificationTaskRaw(requestParameters);
    }

    /**
     * retry error task
     */
    async retryErrorTaskRaw(requestParameters: RetryErrorTaskRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling retryErrorTask.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/retry`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CommentsParamToJSON(requestParameters.commentsParam),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * retry error task
     */
    async retryErrorTask(requestParameters: RetryErrorTaskRequest): Promise<void> {
        await this.retryErrorTaskRaw(requestParameters);
    }

    /**
     * save change permission actions
     */
    async saveChangePermissionActionsRaw(requestParameters: SaveChangePermissionActionsRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling saveChangePermissionActions.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/changepermission/{id}/permission`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.permissionActionItem.map(PermissionActionItemToJSON),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * save change permission actions
     */
    async saveChangePermissionActions(requestParameters: SaveChangePermissionActionsRequest): Promise<void> {
        await this.saveChangePermissionActionsRaw(requestParameters);
    }

    /**
     * Save clone permission report
     */
    async saveClonePermissionReportRaw(requestParameters: SaveClonePermissionReportRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling saveClonePermissionReport.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/clonepermission/{id}/permission`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.securitySearchResult.map(SecuritySearchResultToJSON),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Save clone permission report
     */
    async saveClonePermissionReport(requestParameters: SaveClonePermissionReportRequest): Promise<void> {
        await this.saveClonePermissionReportRaw(requestParameters);
    }

    /**
     * save manual archive report
     */
    async saveGetManualArchiveReportRaw(requestParameters: SaveGetManualArchiveReportRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling saveGetManualArchiveReport.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/manualarchive`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.manuallyArchiveRecordModel.map(ManuallyArchiveRecordModelToJSON),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * save manual archive report
     */
    async saveGetManualArchiveReport(requestParameters: SaveGetManualArchiveReportRequest): Promise<void> {
        await this.saveGetManualArchiveReportRaw(requestParameters);
    }

    /**
     * save group permission recertification results
     */
    async saveGroupPermissionRecertificationResultsRaw(requestParameters: SaveGroupPermissionRecertificationResultsRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling saveGroupPermissionRecertificationResults.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/group/recertification/permission`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.groupPermissionActionItem.map(GroupPermissionActionItemToJSON),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * save group permission recertification results
     */
    async saveGroupPermissionRecertificationResults(requestParameters: SaveGroupPermissionRecertificationResultsRequest): Promise<void> {
        await this.saveGroupPermissionRecertificationResultsRaw(requestParameters);
    }

    /**
     * save remove permission report
     */
    async saveRemovePermissionReportRaw(requestParameters: SaveRemovePermissionReportRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling saveRemovePermissionReport.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/removepermission/{id}/permission`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.securitySearchResult.map(SecuritySearchResultToJSON),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * save remove permission report
     */
    async saveRemovePermissionReport(requestParameters: SaveRemovePermissionReportRequest): Promise<void> {
        await this.saveRemovePermissionReportRaw(requestParameters);
    }

    /**
     * save site metadata recertification metadata
     */
    async saveSiteMetadataRecertificationResultRaw(requestParameters: SaveSiteMetadataRecertificationResultRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling saveSiteMetadataRecertificationResult.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/site/recertification/metadata`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestMetadata.map(RequestMetadataToJSON),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * save site metadata recertification metadata
     */
    async saveSiteMetadataRecertificationResult(requestParameters: SaveSiteMetadataRecertificationResultRequest): Promise<void> {
        await this.saveSiteMetadataRecertificationResultRaw(requestParameters);
    }

    /**
     * save site permission recertification permissions
     */
    async saveSitePermissionRecertificationResultRaw(requestParameters: SaveSitePermissionRecertificationResultRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling saveSitePermissionRecertificationResult.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/site/recertification/permission`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.permissionActionItem.map(PermissionActionItemToJSON),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * save site permission recertification permissions
     */
    async saveSitePermissionRecertificationResult(requestParameters: SaveSitePermissionRecertificationResultRequest): Promise<void> {
        await this.saveSitePermissionRecertificationResultRaw(requestParameters);
    }

    /**
     * skip error task
     */
    async skipErrorTaskRaw(requestParameters: SkipErrorTaskRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling skipErrorTask.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/skip`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CommentsParamToJSON(requestParameters.commentsParam),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * skip error task
     */
    async skipErrorTask(requestParameters: SkipErrorTaskRequest): Promise<void> {
        await this.skipErrorTaskRaw(requestParameters);
    }

    /**
     * specify primary and secondary contact when primary contact is deactived
     */
    async specifyPrimaryAndSecondaryContactWhenPrimaryContactIsDeactivedRaw(requestParameters: SpecifyPrimaryAndSecondaryContactWhenPrimaryContactIsDeactivedRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling specifyPrimaryAndSecondaryContactWhenPrimaryContactIsDeactived.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.primarycontact !== undefined) {
            queryParameters['primarycontact'] = requestParameters.primarycontact;
        }

        if (requestParameters.secondarycontact !== undefined) {
            queryParameters['secondarycontact'] = requestParameters.secondarycontact;
        }

        if (requestParameters.primarycontactemail !== undefined) {
            queryParameters['primarycontactemail'] = requestParameters.primarycontactemail;
        }

        if (requestParameters.secodnarycontactemail !== undefined) {
            queryParameters['secodnarycontactemail'] = requestParameters.secodnarycontactemail;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/election/specify/contacts`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * specify primary and secondary contact when primary contact is deactived
     */
    async specifyPrimaryAndSecondaryContactWhenPrimaryContactIsDeactived(requestParameters: SpecifyPrimaryAndSecondaryContactWhenPrimaryContactIsDeactivedRequest): Promise<void> {
        await this.specifyPrimaryAndSecondaryContactWhenPrimaryContactIsDeactivedRaw(requestParameters);
    }

    /**
     * specify secondary contact when secondary contact is deactived
     */
    async specifySecondaryContactWhenSecondaryContactIsDeactivedRaw(requestParameters: SpecifySecondaryContactWhenSecondaryContactIsDeactivedRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling specifySecondaryContactWhenSecondaryContactIsDeactived.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.secondarycontact !== undefined) {
            queryParameters['secondarycontact'] = requestParameters.secondarycontact;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/election/specify/secondarycontact`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * specify secondary contact when secondary contact is deactived
     */
    async specifySecondaryContactWhenSecondaryContactIsDeactived(requestParameters: SpecifySecondaryContactWhenSecondaryContactIsDeactivedRequest): Promise<void> {
        await this.specifySecondaryContactWhenSecondaryContactIsDeactivedRaw(requestParameters);
    }

    /**
     * submit archive group auto task
     */
    async submitArchiveGroupAutoTaskRaw(requestParameters: SubmitArchiveGroupAutoTaskRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/archivegroup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AutoTaskArchiveRequestToJSON(requestParameters.autoTaskArchiveRequest),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * submit archive group auto task
     */
    async submitArchiveGroupAutoTask(requestParameters: SubmitArchiveGroupAutoTaskRequest): Promise<void> {
        await this.submitArchiveGroupAutoTaskRaw(requestParameters);
    }

    /**
     * submit site archive auto task
     */
    async submitArchiveSiteAutoTaskRaw(requestParameters: SubmitArchiveSiteAutoTaskRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/archivesite`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AutoTaskArchiveRequestToJSON(requestParameters.autoTaskArchiveRequest),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * submit site archive auto task
     */
    async submitArchiveSiteAutoTask(requestParameters: SubmitArchiveSiteAutoTaskRequest): Promise<void> {
        await this.submitArchiveSiteAutoTaskRaw(requestParameters);
    }

    /**
     * submit site policy change auto task
     */
    async submitChangeSitePolicyAutoTaskRaw(requestParameters: SubmitChangeSitePolicyAutoTaskRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/changesitepolicy`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AutoTaskChangePolicyRequestToJSON(requestParameters.autoTaskChangePolicyRequest),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * submit site policy change auto task
     */
    async submitChangeSitePolicyAutoTask(requestParameters: SubmitChangeSitePolicyAutoTaskRequest): Promise<void> {
        await this.submitChangeSitePolicyAutoTaskRaw(requestParameters);
    }

    /**
     * submit group continue access auto task
     */
    async submitContinueAccessGroupAutoTaskRaw(requestParameters: SubmitContinueAccessGroupAutoTaskRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/continueaccessgroup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CommentsParamToJSON(requestParameters.commentsParam),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * submit group continue access auto task
     */
    async submitContinueAccessGroupAutoTask(requestParameters: SubmitContinueAccessGroupAutoTaskRequest): Promise<void> {
        await this.submitContinueAccessGroupAutoTaskRaw(requestParameters);
    }

    /**
     * submit site continue access auto task
     */
    async submitContinueAccessSiteAutoTaskRaw(requestParameters: SubmitContinueAccessSiteAutoTaskRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/continueaccesssite`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CommentsParamToJSON(requestParameters.commentsParam),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * submit site continue access auto task
     */
    async submitContinueAccessSiteAutoTask(requestParameters: SubmitContinueAccessSiteAutoTaskRequest): Promise<void> {
        await this.submitContinueAccessSiteAutoTaskRaw(requestParameters);
    }

    /**
     * submit delete group auto task
     */
    async submitDeleteGroupAutoTaskRaw(requestParameters: SubmitDeleteGroupAutoTaskRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/deletegroup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AutoTaskDeleteRequestToJSON(requestParameters.autoTaskDeleteRequest),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * submit delete group auto task
     */
    async submitDeleteGroupAutoTask(requestParameters: SubmitDeleteGroupAutoTaskRequest): Promise<void> {
        await this.submitDeleteGroupAutoTaskRaw(requestParameters);
    }

    /**
     * submit site delete auto task
     */
    async submitDeleteSiteAutoTaskRaw(requestParameters: SubmitDeleteSiteAutoTaskRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/deletesite`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AutoTaskDeleteRequestToJSON(requestParameters.autoTaskDeleteRequest),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * submit site delete auto task
     */
    async submitDeleteSiteAutoTask(requestParameters: SubmitDeleteSiteAutoTaskRequest): Promise<void> {
        await this.submitDeleteSiteAutoTaskRaw(requestParameters);
    }

    /**
     * submit extend group auto task
     */
    async submitExtendGroupAutoTaskRaw(requestParameters: SubmitExtendGroupAutoTaskRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/extendgroup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AutoTaskExtendRequestToJSON(requestParameters.autoTaskExtendRequest),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * submit extend group auto task
     */
    async submitExtendGroupAutoTask(requestParameters: SubmitExtendGroupAutoTaskRequest): Promise<void> {
        await this.submitExtendGroupAutoTaskRaw(requestParameters);
    }

    /**
     * submit site extend auto task
     */
    async submitExtendSiteAutoTaskRaw(requestParameters: SubmitExtendSiteAutoTaskRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/extendsite`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AutoTaskExtendRequestToJSON(requestParameters.autoTaskExtendRequest),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * submit site extend auto task
     */
    async submitExtendSiteAutoTask(requestParameters: SubmitExtendSiteAutoTaskRequest): Promise<void> {
        await this.submitExtendSiteAutoTaskRaw(requestParameters);
    }

    /**
     * submit site/group recertification task
     */
    async submitRecertificationTaskRaw(requestParameters: SubmitRecertificationTaskRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling submitRecertificationTask.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/submit`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CommentsParamToJSON(requestParameters.commentsParam),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * submit site/group recertification task
     */
    async submitRecertificationTask(requestParameters: SubmitRecertificationTaskRequest): Promise<void> {
        await this.submitRecertificationTaskRaw(requestParameters);
    }

    /**
     * view site ownership recertification task
     */
    async viewSiteOwnershipRecertificationTaskRaw(requestParameters: ViewSiteOwnershipRecertificationTaskRequest): Promise<runtime.ApiResponse<OwnershipRecertification>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling viewSiteOwnershipRecertificationTask.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tasks/{id}/site/recertification/ownership`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OwnershipRecertificationFromJSON(jsonValue));
    }

    /**
     * view site ownership recertification task
     */
    async viewSiteOwnershipRecertificationTask(requestParameters: ViewSiteOwnershipRecertificationTaskRequest): Promise<OwnershipRecertification> {
        const response = await this.viewSiteOwnershipRecertificationTaskRaw(requestParameters);
        return await response.value();
    }

}
