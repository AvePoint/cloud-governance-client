/**
 * Cloud Governance Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.2.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiUser', 'model/ExternalSharingOptions', 'model/SharingEnabledUser', 'model/StringModel', 'model/UpdatableApiUser', 'model/UserRelationShip', 'model/UserSource', 'model/UserType'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiUser'), require('../model/ExternalSharingOptions'), require('../model/SharingEnabledUser'), require('../model/StringModel'), require('../model/UpdatableApiUser'), require('../model/UserRelationShip'), require('../model/UserSource'), require('../model/UserType'));
  } else {
    // Browser globals (root is window)
    if (!root.CgClient) {
      root.CgClient = {};
    }
    root.CgClient.UsersApi = factory(root.CgClient.ApiClient, root.CgClient.ApiUser, root.CgClient.ExternalSharingOptions, root.CgClient.SharingEnabledUser, root.CgClient.StringModel, root.CgClient.UpdatableApiUser, root.CgClient.UserRelationShip, root.CgClient.UserSource, root.CgClient.UserType);
  }
}(this, function(ApiClient, ApiUser, ExternalSharingOptions, SharingEnabledUser, StringModel, UpdatableApiUser, UserRelationShip, UserSource, UserType) {
  'use strict';

  /**
   * Users service.
   * @module api/UsersApi
   * @version 1.0
   */

  /**
   * Constructs a new UsersApi. 
   * @alias module:api/UsersApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * check user exists in Aos
     * @param {String} name 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Boolean} and HTTP response
     */
    this.checkUserExistsInAOSWithHttpInfo = function(name) {
      var postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling checkUserExistsInAOS");
      }

      var pathParams = {
      };
      var queryParams = {
        'name': name,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'Boolean';
      return this.apiClient.callApi(
        '/users/avepointonlineservices/validate', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * check user exists in Aos
     * @param {String} name 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Boolean}
     */
    this.checkUserExistsInAOS = function(name) {
      return this.checkUserExistsInAOSWithHttpInfo(name)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get user's property value by property name from azure ad
     * @param {String} username 
     * @param {String} propertyName 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StringModel} and HTTP response
     */
    this.getAzureAdUserPropertyValueWithHttpInfo = function(username, propertyName) {
      var postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getAzureAdUserPropertyValue");
      }
      // verify the required parameter 'propertyName' is set
      if (propertyName === undefined || propertyName === null) {
        throw new Error("Missing the required parameter 'propertyName' when calling getAzureAdUserPropertyValue");
      }

      var pathParams = {
        'username': username
      };
      var queryParams = {
        'propertyName': propertyName,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = StringModel;
      return this.apiClient.callApi(
        '/users/{username}/azuread/property', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get user's property value by property name from azure ad
     * @param {String} username 
     * @param {String} propertyName 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StringModel}
     */
    this.getAzureAdUserPropertyValue = function(username, propertyName) {
      return this.getAzureAdUserPropertyValueWithHttpInfo(username, propertyName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get user's property value by property name from user profile service
     * @param {String} username 
     * @param {String} propertyName 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StringModel} and HTTP response
     */
    this.getUpsUserPropertyValueWithHttpInfo = function(username, propertyName) {
      var postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getUpsUserPropertyValue");
      }
      // verify the required parameter 'propertyName' is set
      if (propertyName === undefined || propertyName === null) {
        throw new Error("Missing the required parameter 'propertyName' when calling getUpsUserPropertyValue");
      }

      var pathParams = {
        'username': username
      };
      var queryParams = {
        'propertyName': propertyName,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = StringModel;
      return this.apiClient.callApi(
        '/users/{username}/userprofile/property', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get user's property value by property name from user profile service
     * @param {String} username 
     * @param {String} propertyName 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StringModel}
     */
    this.getUpsUserPropertyValue = function(username, propertyName) {
      return this.getUpsUserPropertyValueWithHttpInfo(username, propertyName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get my basic properties, City, Country, Office, Department, JobTitle,State
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.getUserBasicPropertiesWithHttpInfo = function() {
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/users/me/properties', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get my basic properties, City, Country, Office, Department, JobTitle,State
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.getUserBasicProperties = function() {
      return this.getUserBasicPropertiesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get my basic property value, Department, Email, DisplayName, Manager
     * @param {String} name 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.getUserBasicPropertyValueWithHttpInfo = function(name) {
      var postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getUserBasicPropertyValue");
      }

      var pathParams = {
        'name': name
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/users/me/property/{name}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get my basic property value, Department, Email, DisplayName, Manager
     * @param {String} name 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.getUserBasicPropertyValue = function(name) {
      return this.getUserBasicPropertyValueWithHttpInfo(name)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get user's photo
     * @param {String} username 
     * @param {Object} opts Optional parameters
     * @param {String} opts.size  (default to '48x48')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.getUserPhotoWithHttpInfo = function(username, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getUserPhoto");
      }

      var pathParams = {
        'username': username
      };
      var queryParams = {
        'size': opts['size'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/users/{username}/photo', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get user's photo
     * @param {String} username 
     * @param {Object} opts Optional parameters
     * @param {String} opts.size  (default to '48x48')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.getUserPhoto = function(username, opts) {
      return this.getUserPhotoWithHttpInfo(username, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get user relationship
     * @param {String} username 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UserRelationShip} and HTTP response
     */
    this.getUserRelationshipWithHttpInfo = function(username) {
      var postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getUserRelationship");
      }

      var pathParams = {
        'username': username
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = UserRelationShip;
      return this.apiClient.callApi(
        '/users/{username}/relationship', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get user relationship
     * @param {String} username 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserRelationShip}
     */
    this.getUserRelationship = function(username) {
      return this.getUserRelationshipWithHttpInfo(username)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get users from sharepoint
     * @param {Object} opts Optional parameters
     * @param {String} opts.username 
     * @param {Array.<String>} opts.requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiUser} and HTTP response
     */
    this.getUsersFromSharePointWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['requestBody'];

      var pathParams = {
      };
      var queryParams = {
        'username': opts['username'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ApiUser;
      return this.apiClient.callApi(
        '/users/sharepoint/validate', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get users from sharepoint
     * @param {Object} opts Optional parameters
     * @param {String} opts.username 
     * @param {Array.<String>} opts.requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiUser}
     */
    this.getUsersFromSharePoint = function(opts) {
      return this.getUsersFromSharePointWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * resolve users
     * @param {String} keyword 
     * @param {module:model/UserType} userType All=0, User=1, Group=2, DistributionList=3, UserAndGroup=4
     * @param {module:model/UserSource} userSource All=0, Local=1, Azure=2, SharePoint=3
     * @param {module:model/ExternalSharingOptions} sharingOptions Disabled=0, VerifiedGuestUser=1, Anyone=2, ExistingGuestUser=3
     * @param {Object} opts Optional parameters
     * @param {String} opts.siteUrlOrTenantId  (default to '')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ApiUser>} and HTTP response
     */
    this.resolveUsersWithHttpInfo = function(keyword, userType, userSource, sharingOptions, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'keyword' is set
      if (keyword === undefined || keyword === null) {
        throw new Error("Missing the required parameter 'keyword' when calling resolveUsers");
      }
      // verify the required parameter 'userType' is set
      if (userType === undefined || userType === null) {
        throw new Error("Missing the required parameter 'userType' when calling resolveUsers");
      }
      // verify the required parameter 'userSource' is set
      if (userSource === undefined || userSource === null) {
        throw new Error("Missing the required parameter 'userSource' when calling resolveUsers");
      }
      // verify the required parameter 'sharingOptions' is set
      if (sharingOptions === undefined || sharingOptions === null) {
        throw new Error("Missing the required parameter 'sharingOptions' when calling resolveUsers");
      }

      var pathParams = {
      };
      var queryParams = {
        'keyword': keyword,
        'userType': userType,
        'userSource': userSource,
        'sharingOptions': sharingOptions,
        'siteUrlOrTenantId': opts['siteUrlOrTenantId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = [ApiUser];
      return this.apiClient.callApi(
        '/users/resolve', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * resolve users
     * @param {String} keyword 
     * @param {module:model/UserType} userType All=0, User=1, Group=2, DistributionList=3, UserAndGroup=4
     * @param {module:model/UserSource} userSource All=0, Local=1, Azure=2, SharePoint=3
     * @param {module:model/ExternalSharingOptions} sharingOptions Disabled=0, VerifiedGuestUser=1, Anyone=2, ExistingGuestUser=3
     * @param {Object} opts Optional parameters
     * @param {String} opts.siteUrlOrTenantId  (default to '')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ApiUser>}
     */
    this.resolveUsers = function(keyword, userType, userSource, sharingOptions, opts) {
      return this.resolveUsersWithHttpInfo(keyword, userType, userSource, sharingOptions, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * resolve user including external users
     * @param {String} keyword 
     * @param {String} siteUrlOrTenantId 
     * @param {module:model/ExternalSharingOptions} externalSharingOption 
     * @param {module:model/UserType} userType All=0, User=1, Group=2, DistributionList=3, UserAndGroup=4
     * @param {module:model/UserSource} userSource All=0, Local=1, Azure=2, SharePoint=3
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/SharingEnabledUser>} and HTTP response
     */
    this.resolveUsersWithExternalSharingOptionWithHttpInfo = function(keyword, siteUrlOrTenantId, externalSharingOption, userType, userSource) {
      var postBody = null;
      // verify the required parameter 'keyword' is set
      if (keyword === undefined || keyword === null) {
        throw new Error("Missing the required parameter 'keyword' when calling resolveUsersWithExternalSharingOption");
      }
      // verify the required parameter 'siteUrlOrTenantId' is set
      if (siteUrlOrTenantId === undefined || siteUrlOrTenantId === null) {
        throw new Error("Missing the required parameter 'siteUrlOrTenantId' when calling resolveUsersWithExternalSharingOption");
      }
      // verify the required parameter 'externalSharingOption' is set
      if (externalSharingOption === undefined || externalSharingOption === null) {
        throw new Error("Missing the required parameter 'externalSharingOption' when calling resolveUsersWithExternalSharingOption");
      }
      // verify the required parameter 'userType' is set
      if (userType === undefined || userType === null) {
        throw new Error("Missing the required parameter 'userType' when calling resolveUsersWithExternalSharingOption");
      }
      // verify the required parameter 'userSource' is set
      if (userSource === undefined || userSource === null) {
        throw new Error("Missing the required parameter 'userSource' when calling resolveUsersWithExternalSharingOption");
      }

      var pathParams = {
        'externalSharingOption': externalSharingOption
      };
      var queryParams = {
        'keyword': keyword,
        'siteUrlOrTenantId': siteUrlOrTenantId,
        'userType': userType,
        'userSource': userSource,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = [SharingEnabledUser];
      return this.apiClient.callApi(
        '/users/resolve/{externalSharingOption}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * resolve user including external users
     * @param {String} keyword 
     * @param {String} siteUrlOrTenantId 
     * @param {module:model/ExternalSharingOptions} externalSharingOption 
     * @param {module:model/UserType} userType All=0, User=1, Group=2, DistributionList=3, UserAndGroup=4
     * @param {module:model/UserSource} userSource All=0, Local=1, Azure=2, SharePoint=3
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/SharingEnabledUser>}
     */
    this.resolveUsersWithExternalSharingOption = function(keyword, siteUrlOrTenantId, externalSharingOption, userType, userSource) {
      return this.resolveUsersWithExternalSharingOptionWithHttpInfo(keyword, siteUrlOrTenantId, externalSharingOption, userType, userSource)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * search users
     * @param {String} keyword 
     * @param {module:model/UserType} userType All=0, User=1, Group=2, DistributionList=3, UserAndGroup=4
     * @param {module:model/UserSource} userSource All=0, Local=1, Azure=2, SharePoint=3
     * @param {module:model/ExternalSharingOptions} sharingOptions Disabled=0, VerifiedGuestUser=1, Anyone=2, ExistingGuestUser=3
     * @param {Object} opts Optional parameters
     * @param {String} opts.siteUrlOrTenantId  (default to '')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ApiUser>} and HTTP response
     */
    this.searchUsersWithHttpInfo = function(keyword, userType, userSource, sharingOptions, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'keyword' is set
      if (keyword === undefined || keyword === null) {
        throw new Error("Missing the required parameter 'keyword' when calling searchUsers");
      }
      // verify the required parameter 'userType' is set
      if (userType === undefined || userType === null) {
        throw new Error("Missing the required parameter 'userType' when calling searchUsers");
      }
      // verify the required parameter 'userSource' is set
      if (userSource === undefined || userSource === null) {
        throw new Error("Missing the required parameter 'userSource' when calling searchUsers");
      }
      // verify the required parameter 'sharingOptions' is set
      if (sharingOptions === undefined || sharingOptions === null) {
        throw new Error("Missing the required parameter 'sharingOptions' when calling searchUsers");
      }

      var pathParams = {
      };
      var queryParams = {
        'keyword': keyword,
        'userType': userType,
        'userSource': userSource,
        'sharingOptions': sharingOptions,
        'siteUrlOrTenantId': opts['siteUrlOrTenantId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = [ApiUser];
      return this.apiClient.callApi(
        '/users/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * search users
     * @param {String} keyword 
     * @param {module:model/UserType} userType All=0, User=1, Group=2, DistributionList=3, UserAndGroup=4
     * @param {module:model/UserSource} userSource All=0, Local=1, Azure=2, SharePoint=3
     * @param {module:model/ExternalSharingOptions} sharingOptions Disabled=0, VerifiedGuestUser=1, Anyone=2, ExistingGuestUser=3
     * @param {Object} opts Optional parameters
     * @param {String} opts.siteUrlOrTenantId  (default to '')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ApiUser>}
     */
    this.searchUsers = function(keyword, userType, userSource, sharingOptions, opts) {
      return this.searchUsersWithHttpInfo(keyword, userType, userSource, sharingOptions, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * search user including external users
     * @param {String} keyword 
     * @param {String} siteUrlOrTenantId 
     * @param {module:model/ExternalSharingOptions} externalSharingOption 
     * @param {module:model/UserType} userType All=0, User=1, Group=2, DistributionList=3, UserAndGroup=4
     * @param {module:model/UserSource} userSource All=0, Local=1, Azure=2, SharePoint=3
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/SharingEnabledUser>} and HTTP response
     */
    this.searchUsersWithExternalSharingOptionWithHttpInfo = function(keyword, siteUrlOrTenantId, externalSharingOption, userType, userSource) {
      var postBody = null;
      // verify the required parameter 'keyword' is set
      if (keyword === undefined || keyword === null) {
        throw new Error("Missing the required parameter 'keyword' when calling searchUsersWithExternalSharingOption");
      }
      // verify the required parameter 'siteUrlOrTenantId' is set
      if (siteUrlOrTenantId === undefined || siteUrlOrTenantId === null) {
        throw new Error("Missing the required parameter 'siteUrlOrTenantId' when calling searchUsersWithExternalSharingOption");
      }
      // verify the required parameter 'externalSharingOption' is set
      if (externalSharingOption === undefined || externalSharingOption === null) {
        throw new Error("Missing the required parameter 'externalSharingOption' when calling searchUsersWithExternalSharingOption");
      }
      // verify the required parameter 'userType' is set
      if (userType === undefined || userType === null) {
        throw new Error("Missing the required parameter 'userType' when calling searchUsersWithExternalSharingOption");
      }
      // verify the required parameter 'userSource' is set
      if (userSource === undefined || userSource === null) {
        throw new Error("Missing the required parameter 'userSource' when calling searchUsersWithExternalSharingOption");
      }

      var pathParams = {
        'externalSharingOption': externalSharingOption
      };
      var queryParams = {
        'keyword': keyword,
        'siteUrlOrTenantId': siteUrlOrTenantId,
        'userType': userType,
        'userSource': userSource,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = [SharingEnabledUser];
      return this.apiClient.callApi(
        '/users/search/{externalSharingOption}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * search user including external users
     * @param {String} keyword 
     * @param {String} siteUrlOrTenantId 
     * @param {module:model/ExternalSharingOptions} externalSharingOption 
     * @param {module:model/UserType} userType All=0, User=1, Group=2, DistributionList=3, UserAndGroup=4
     * @param {module:model/UserSource} userSource All=0, Local=1, Azure=2, SharePoint=3
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/SharingEnabledUser>}
     */
    this.searchUsersWithExternalSharingOption = function(keyword, siteUrlOrTenantId, externalSharingOption, userType, userSource) {
      return this.searchUsersWithExternalSharingOptionWithHttpInfo(keyword, siteUrlOrTenantId, externalSharingOption, userType, userSource)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdatableApiUser} opts.updatableApiUser 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateUserInfoWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['updatableApiUser'];

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/users', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdatableApiUser} opts.updatableApiUser 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateUserInfo = function(opts) {
      return this.updateUserInfoWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
