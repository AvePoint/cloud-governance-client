/**
 * Cloud Governance Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CloudGovernanceApi);
  }
}(this, function(expect, CloudGovernanceApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CloudGovernanceApi.CreateGroupService();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CreateGroupService', function() {
    it('should create an instance of CreateGroupService', function() {
      // uncomment below and update the code to test CreateGroupService
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be.a(CloudGovernanceApi.CreateGroupService);
    });

    it('should have the property tenantId (base name: "tenantId")', function() {
      // uncomment below and update the code to test the property tenantId
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property enableTeams (base name: "enableTeams")', function() {
      // uncomment below and update the code to test the property enableTeams
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property isPrivate (base name: "isPrivate")', function() {
      // uncomment below and update the code to test the property isPrivate
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property enableSubscribe (base name: "enableSubscribe")', function() {
      // uncomment below and update the code to test the property enableSubscribe
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property enableApplySiteDesign (base name: "enableApplySiteDesign")', function() {
      // uncomment below and update the code to test the property enableApplySiteDesign
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property enableOutsideSender (base name: "enableOutsideSender")', function() {
      // uncomment below and update the code to test the property enableOutsideSender
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property enableHideGroupMembership (base name: "enableHideGroupMembership")', function() {
      // uncomment below and update the code to test the property enableHideGroupMembership
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property enableClassification (base name: "enableClassification")', function() {
      // uncomment below and update the code to test the property enableClassification
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property allowConfigureLeasePeriod (base name: "allowConfigureLeasePeriod")', function() {
      // uncomment below and update the code to test the property allowConfigureLeasePeriod
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property showNotebookLink (base name: "showNotebookLink")', function() {
      // uncomment below and update the code to test the property showNotebookLink
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property showConversationsLink (base name: "showConversationsLink")', function() {
      // uncomment below and update the code to test the property showConversationsLink
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property showFilesLink (base name: "showFilesLink")', function() {
      // uncomment below and update the code to test the property showFilesLink
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property showTeamSiteLink (base name: "showTeamSiteLink")', function() {
      // uncomment below and update the code to test the property showTeamSiteLink
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property showPlannerLink (base name: "showPlannerLink")', function() {
      // uncomment below and update the code to test the property showPlannerLink
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property classifications (base name: "classifications")', function() {
      // uncomment below and update the code to test the property classifications
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property siteDesigns (base name: "siteDesigns")', function() {
      // uncomment below and update the code to test the property siteDesigns
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property addGroupMemberType (base name: "addGroupMemberType")', function() {
      // uncomment below and update the code to test the property addGroupMemberType
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property selectedPolicies (base name: "selectedPolicies")', function() {
      // uncomment below and update the code to test the property selectedPolicies
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property selectedLanguages (base name: "selectedLanguages")', function() {
      // uncomment below and update the code to test the property selectedLanguages
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property teamsSettings (base name: "teamsSettings")', function() {
      // uncomment below and update the code to test the property teamsSettings
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property groupNameConstructureSettings (base name: "groupNameConstructureSettings")', function() {
      // uncomment below and update the code to test the property groupNameConstructureSettings
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property groupIdConstructureSettings (base name: "groupIdConstructureSettings")', function() {
      // uncomment below and update the code to test the property groupIdConstructureSettings
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property enableHubSite (base name: "enableHubSite")', function() {
      // uncomment below and update the code to test the property enableHubSite
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property hubSiteActionType (base name: "hubSiteActionType")', function() {
      // uncomment below and update the code to test the property hubSiteActionType
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property associateHubSiteId (base name: "associateHubSiteId")', function() {
      // uncomment below and update the code to test the property associateHubSiteId
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property associateHubSiteTitle (base name: "associateHubSiteTitle")', function() {
      // uncomment below and update the code to test the property associateHubSiteTitle
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property isShowHubSiteSection (base name: "isShowHubSiteSection")', function() {
      // uncomment below and update the code to test the property isShowHubSiteSection
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property enableInstallApp (base name: "enableInstallApp")', function() {
      // uncomment below and update the code to test the property enableInstallApp
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property enableInstallPanel (base name: "enableInstallPanel")', function() {
      // uncomment below and update the code to test the property enableInstallPanel
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property enableCreateTeamFromScratch (base name: "enableCreateTeamFromScratch")', function() {
      // uncomment below and update the code to test the property enableCreateTeamFromScratch
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property enableCreateTeamFromExistTeam (base name: "enableCreateTeamFromExistTeam")', function() {
      // uncomment below and update the code to test the property enableCreateTeamFromExistTeam
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property enableCreateTeamFromIT (base name: "enableCreateTeamFromIT")', function() {
      // uncomment below and update the code to test the property enableCreateTeamFromIT
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property enableCreateTeamFromOwned (base name: "enableCreateTeamFromOwned")', function() {
      // uncomment below and update the code to test the property enableCreateTeamFromOwned
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property templateTeams (base name: "templateTeams")', function() {
      // uncomment below and update the code to test the property templateTeams
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property defaultPrimaryContact (base name: "defaultPrimaryContact")', function() {
      // uncomment below and update the code to test the property defaultPrimaryContact
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property defaultSecondaryContact (base name: "defaultSecondaryContact")', function() {
      // uncomment below and update the code to test the property defaultSecondaryContact
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property defaultOwners (base name: "defaultOwners")', function() {
      // uncomment below and update the code to test the property defaultOwners
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property defaultMembers (base name: "defaultMembers")', function() {
      // uncomment below and update the code to test the property defaultMembers
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property defaultPolicy (base name: "defaultPolicy")', function() {
      // uncomment below and update the code to test the property defaultPolicy
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property defaultClassification (base name: "defaultClassification")', function() {
      // uncomment below and update the code to test the property defaultClassification
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property defaultLanguage (base name: "defaultLanguage")', function() {
      // uncomment below and update the code to test the property defaultLanguage
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property defaultSiteDesign (base name: "defaultSiteDesign")', function() {
      // uncomment below and update the code to test the property defaultSiteDesign
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property memberAssignBy (base name: "memberAssignBy")', function() {
      // uncomment below and update the code to test the property memberAssignBy
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property ownerAssignBy (base name: "ownerAssignBy")', function() {
      // uncomment below and update the code to test the property ownerAssignBy
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property privacyAssignBy (base name: "privacyAssignBy")', function() {
      // uncomment below and update the code to test the property privacyAssignBy
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property subscribeAssignBy (base name: "subscribeAssignBy")', function() {
      // uncomment below and update the code to test the property subscribeAssignBy
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property outsideSenderAssignBy (base name: "outsideSenderAssignBy")', function() {
      // uncomment below and update the code to test the property outsideSenderAssignBy
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property classificationAssignBy (base name: "classificationAssignBy")', function() {
      // uncomment below and update the code to test the property classificationAssignBy
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property languageAssignBy (base name: "languageAssignBy")', function() {
      // uncomment below and update the code to test the property languageAssignBy
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property secondaryContactAssignBy (base name: "secondaryContactAssignBy")', function() {
      // uncomment below and update the code to test the property secondaryContactAssignBy
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property primaryContactAssignBy (base name: "primaryContactAssignBy")', function() {
      // uncomment below and update the code to test the property primaryContactAssignBy
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property enableDynamicMembership (base name: "enableDynamicMembership")', function() {
      // uncomment below and update the code to test the property enableDynamicMembership
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property hideGroupMembershipAssignBy (base name: "hideGroupMembershipAssignBy")', function() {
      // uncomment below and update the code to test the property hideGroupMembershipAssignBy
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property policyAssignBy (base name: "policyAssignBy")', function() {
      // uncomment below and update the code to test the property policyAssignBy
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property siteDesignAssignBy (base name: "siteDesignAssignBy")', function() {
      // uncomment below and update the code to test the property siteDesignAssignBy
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property hubSiteAssignBy (base name: "hubSiteAssignBy")', function() {
      // uncomment below and update the code to test the property hubSiteAssignBy
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property multiGeoSetting (base name: "multiGeoSetting")', function() {
      // uncomment below and update the code to test the property multiGeoSetting
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property departmentAssignBy (base name: "departmentAssignBy")', function() {
      // uncomment below and update the code to test the property departmentAssignBy
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property metadatas (base name: "metadatas")', function() {
      // uncomment below and update the code to test the property metadatas
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property hideRequestSummary (base name: "hideRequestSummary")', function() {
      // uncomment below and update the code to test the property hideRequestSummary
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property department (base name: "department")', function() {
      // uncomment below and update the code to test the property department
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property loadDepartmentFromUps (base name: "loadDepartmentFromUps")', function() {
      // uncomment below and update the code to test the property loadDepartmentFromUps
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property departments (base name: "departments")', function() {
      // uncomment below and update the code to test the property departments
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property serviceContact (base name: "serviceContact")', function() {
      // uncomment below and update the code to test the property serviceContact
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property serviceAdminContact (base name: "serviceAdminContact")', function() {
      // uncomment below and update the code to test the property serviceAdminContact
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property approversContainManagerRole (base name: "approversContainManagerRole")', function() {
      // uncomment below and update the code to test the property approversContainManagerRole
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property showServiceInCatalog (base name: "showServiceInCatalog")', function() {
      // uncomment below and update the code to test the property showServiceInCatalog
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property customActivity (base name: "customActivity")', function() {
      // uncomment below and update the code to test the property customActivity
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property approvalProcessId (base name: "approvalProcessId")', function() {
      // uncomment below and update the code to test the property approvalProcessId
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property languageId (base name: "languageId")', function() {
      // uncomment below and update the code to test the property languageId
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

    it('should have the property categoryId (base name: "categoryId")', function() {
      // uncomment below and update the code to test the property categoryId
      //var instane = new CloudGovernanceApi.CreateGroupService();
      //expect(instance).to.be();
    });

  });

}));
