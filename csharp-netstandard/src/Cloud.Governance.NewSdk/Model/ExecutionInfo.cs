/* 
 * Cloud Governance Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Cloud.Governance.NewSdk.Client.OpenAPIDateConverter;

namespace Cloud.Governance.NewSdk.Model
{
    /// <summary>
    /// ExecutionInfo
    /// </summary>
    [DataContract]
    public partial class ExecutionInfo :  IEquatable<ExecutionInfo>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets CommandType
        /// </summary>
        [DataMember(Name="commandType", EmitDefaultValue=false)]
        public ExecutionCommandType? CommandType { get; set; }
        /// <summary>
        /// Gets or Sets WebServiceAuthenticationType
        /// </summary>
        [DataMember(Name="webServiceAuthenticationType", EmitDefaultValue=false)]
        public WebServiceAuthenticationType? WebServiceAuthenticationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExecutionInfo" /> class.
        /// </summary>
        /// <param name="enabled">enabled.</param>
        /// <param name="commandType">commandType.</param>
        /// <param name="webServiceAuthenticationType">webServiceAuthenticationType.</param>
        /// <param name="methodName">methodName.</param>
        /// <param name="webServiceAddress">webServiceAddress.</param>
        /// <param name="webServiceAppClientId">webServiceAppClientId.</param>
        /// <param name="nativeClientAppClientId">nativeClientAppClientId.</param>
        /// <param name="fileName">fileName.</param>
        /// <param name="assemblyName">assemblyName.</param>
        /// <param name="className">className.</param>
        /// <param name="arguments">arguments.</param>
        /// <param name="argumentsTypeFullNames">argumentsTypeFullNames.</param>
        /// <param name="argumentsNames">argumentsNames.</param>
        public ExecutionInfo(bool enabled = default(bool), ExecutionCommandType commandType = default(ExecutionCommandType), WebServiceAuthenticationType webServiceAuthenticationType = default(WebServiceAuthenticationType), string methodName = default(string), string webServiceAddress = default(string), string webServiceAppClientId = default(string), string nativeClientAppClientId = default(string), string fileName = default(string), string assemblyName = default(string), string className = default(string), List<string> arguments = default(List<string>), List<string> argumentsTypeFullNames = default(List<string>), List<string> argumentsNames = default(List<string>))
        {
            this.MethodName = methodName;
            this.WebServiceAddress = webServiceAddress;
            this.WebServiceAppClientId = webServiceAppClientId;
            this.NativeClientAppClientId = nativeClientAppClientId;
            this.FileName = fileName;
            this.AssemblyName = assemblyName;
            this.ClassName = className;
            this.Arguments = arguments;
            this.ArgumentsTypeFullNames = argumentsTypeFullNames;
            this.ArgumentsNames = argumentsNames;
            this.Enabled = enabled;
            this.CommandType = commandType;
            this.WebServiceAuthenticationType = webServiceAuthenticationType;
            this.MethodName = methodName;
            this.WebServiceAddress = webServiceAddress;
            this.WebServiceAppClientId = webServiceAppClientId;
            this.NativeClientAppClientId = nativeClientAppClientId;
            this.FileName = fileName;
            this.AssemblyName = assemblyName;
            this.ClassName = className;
            this.Arguments = arguments;
            this.ArgumentsTypeFullNames = argumentsTypeFullNames;
            this.ArgumentsNames = argumentsNames;
        }
        
        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Gets or Sets MethodName
        /// </summary>
        [DataMember(Name="methodName", EmitDefaultValue=true)]
        public string MethodName { get; set; }

        /// <summary>
        /// Gets or Sets WebServiceAddress
        /// </summary>
        [DataMember(Name="webServiceAddress", EmitDefaultValue=true)]
        public string WebServiceAddress { get; set; }

        /// <summary>
        /// Gets or Sets WebServiceAppClientId
        /// </summary>
        [DataMember(Name="webServiceAppClientId", EmitDefaultValue=true)]
        public string WebServiceAppClientId { get; set; }

        /// <summary>
        /// Gets or Sets NativeClientAppClientId
        /// </summary>
        [DataMember(Name="nativeClientAppClientId", EmitDefaultValue=true)]
        public string NativeClientAppClientId { get; set; }

        /// <summary>
        /// Gets or Sets FileName
        /// </summary>
        [DataMember(Name="fileName", EmitDefaultValue=true)]
        public string FileName { get; set; }

        /// <summary>
        /// Gets or Sets AssemblyName
        /// </summary>
        [DataMember(Name="assemblyName", EmitDefaultValue=true)]
        public string AssemblyName { get; set; }

        /// <summary>
        /// Gets or Sets ClassName
        /// </summary>
        [DataMember(Name="className", EmitDefaultValue=true)]
        public string ClassName { get; set; }

        /// <summary>
        /// Gets or Sets Arguments
        /// </summary>
        [DataMember(Name="arguments", EmitDefaultValue=true)]
        public List<string> Arguments { get; set; }

        /// <summary>
        /// Gets or Sets ArgumentsTypeFullNames
        /// </summary>
        [DataMember(Name="argumentsTypeFullNames", EmitDefaultValue=true)]
        public List<string> ArgumentsTypeFullNames { get; set; }

        /// <summary>
        /// Gets or Sets ArgumentsNames
        /// </summary>
        [DataMember(Name="argumentsNames", EmitDefaultValue=true)]
        public List<string> ArgumentsNames { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExecutionInfo {\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  CommandType: ").Append(CommandType).Append("\n");
            sb.Append("  WebServiceAuthenticationType: ").Append(WebServiceAuthenticationType).Append("\n");
            sb.Append("  MethodName: ").Append(MethodName).Append("\n");
            sb.Append("  WebServiceAddress: ").Append(WebServiceAddress).Append("\n");
            sb.Append("  WebServiceAppClientId: ").Append(WebServiceAppClientId).Append("\n");
            sb.Append("  NativeClientAppClientId: ").Append(NativeClientAppClientId).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  AssemblyName: ").Append(AssemblyName).Append("\n");
            sb.Append("  ClassName: ").Append(ClassName).Append("\n");
            sb.Append("  Arguments: ").Append(Arguments).Append("\n");
            sb.Append("  ArgumentsTypeFullNames: ").Append(ArgumentsTypeFullNames).Append("\n");
            sb.Append("  ArgumentsNames: ").Append(ArgumentsNames).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExecutionInfo);
        }

        /// <summary>
        /// Returns true if ExecutionInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ExecutionInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExecutionInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Enabled == input.Enabled ||
                    this.Enabled.Equals(input.Enabled)
                ) && 
                (
                    this.CommandType == input.CommandType ||
                    this.CommandType.Equals(input.CommandType)
                ) && 
                (
                    this.WebServiceAuthenticationType == input.WebServiceAuthenticationType ||
                    this.WebServiceAuthenticationType.Equals(input.WebServiceAuthenticationType)
                ) && 
                (
                    this.MethodName == input.MethodName ||
                    (this.MethodName != null &&
                    this.MethodName.Equals(input.MethodName))
                ) && 
                (
                    this.WebServiceAddress == input.WebServiceAddress ||
                    (this.WebServiceAddress != null &&
                    this.WebServiceAddress.Equals(input.WebServiceAddress))
                ) && 
                (
                    this.WebServiceAppClientId == input.WebServiceAppClientId ||
                    (this.WebServiceAppClientId != null &&
                    this.WebServiceAppClientId.Equals(input.WebServiceAppClientId))
                ) && 
                (
                    this.NativeClientAppClientId == input.NativeClientAppClientId ||
                    (this.NativeClientAppClientId != null &&
                    this.NativeClientAppClientId.Equals(input.NativeClientAppClientId))
                ) && 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.AssemblyName == input.AssemblyName ||
                    (this.AssemblyName != null &&
                    this.AssemblyName.Equals(input.AssemblyName))
                ) && 
                (
                    this.ClassName == input.ClassName ||
                    (this.ClassName != null &&
                    this.ClassName.Equals(input.ClassName))
                ) && 
                (
                    this.Arguments == input.Arguments ||
                    this.Arguments != null &&
                    input.Arguments != null &&
                    this.Arguments.SequenceEqual(input.Arguments)
                ) && 
                (
                    this.ArgumentsTypeFullNames == input.ArgumentsTypeFullNames ||
                    this.ArgumentsTypeFullNames != null &&
                    input.ArgumentsTypeFullNames != null &&
                    this.ArgumentsTypeFullNames.SequenceEqual(input.ArgumentsTypeFullNames)
                ) && 
                (
                    this.ArgumentsNames == input.ArgumentsNames ||
                    this.ArgumentsNames != null &&
                    input.ArgumentsNames != null &&
                    this.ArgumentsNames.SequenceEqual(input.ArgumentsNames)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                hashCode = hashCode * 59 + this.CommandType.GetHashCode();
                hashCode = hashCode * 59 + this.WebServiceAuthenticationType.GetHashCode();
                if (this.MethodName != null)
                    hashCode = hashCode * 59 + this.MethodName.GetHashCode();
                if (this.WebServiceAddress != null)
                    hashCode = hashCode * 59 + this.WebServiceAddress.GetHashCode();
                if (this.WebServiceAppClientId != null)
                    hashCode = hashCode * 59 + this.WebServiceAppClientId.GetHashCode();
                if (this.NativeClientAppClientId != null)
                    hashCode = hashCode * 59 + this.NativeClientAppClientId.GetHashCode();
                if (this.FileName != null)
                    hashCode = hashCode * 59 + this.FileName.GetHashCode();
                if (this.AssemblyName != null)
                    hashCode = hashCode * 59 + this.AssemblyName.GetHashCode();
                if (this.ClassName != null)
                    hashCode = hashCode * 59 + this.ClassName.GetHashCode();
                if (this.Arguments != null)
                    hashCode = hashCode * 59 + this.Arguments.GetHashCode();
                if (this.ArgumentsTypeFullNames != null)
                    hashCode = hashCode * 59 + this.ArgumentsTypeFullNames.GetHashCode();
                if (this.ArgumentsNames != null)
                    hashCode = hashCode * 59 + this.ArgumentsNames.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
