/* 
 * Cloud Governance Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Cloud.Governance.Client.Client.OpenAPIDateConverter;

namespace Cloud.Governance.Client.Model
{
    /// <summary>
    /// ApprovalProcessStageDurationSetting
    /// </summary>
    [DataContract]
    public partial class ApprovalProcessStageDurationSetting :  IEquatable<ApprovalProcessStageDurationSetting>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets DurationType
        /// </summary>
        [DataMember(Name="durationType", EmitDefaultValue=false)]
        public DurationType? DurationType { get; set; }
        /// <summary>
        /// Gets or Sets EscalationType
        /// </summary>
        [DataMember(Name="escalationType", EmitDefaultValue=false)]
        public EscalationType? EscalationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApprovalProcessStageDurationSetting" /> class.
        /// </summary>
        /// <param name="isDurationEnabled">isDurationEnabled.</param>
        /// <param name="reassigner">reassigner.</param>
        /// <param name="escalationUsers">escalationUsers.</param>
        /// <param name="isEnableDureationReminder">isEnableDureationReminder.</param>
        /// <param name="duration">duration.</param>
        /// <param name="reassignTemplateId">reassignTemplateId.</param>
        /// <param name="autoRejectTemplateId">autoRejectTemplateId.</param>
        /// <param name="notifyTemplateId">notifyTemplateId.</param>
        /// <param name="durationReminderProfileId">durationReminderProfileId.</param>
        /// <param name="durationType">durationType.</param>
        /// <param name="escalationType">escalationType.</param>
        public ApprovalProcessStageDurationSetting(bool isDurationEnabled = default(bool), ApiUser reassigner = default(ApiUser), List<ApiUser> escalationUsers = default(List<ApiUser>), bool isEnableDureationReminder = default(bool), int? duration = default(int?), Guid reassignTemplateId = default(Guid), Guid autoRejectTemplateId = default(Guid), Guid notifyTemplateId = default(Guid), Guid durationReminderProfileId = default(Guid), DurationType durationType = default(DurationType), EscalationType escalationType = default(EscalationType))
        {
            this.IsDurationEnabled = isDurationEnabled;
            this.Reassigner = reassigner;
            this.EscalationUsers = escalationUsers;
            this.IsEnableDureationReminder = isEnableDureationReminder;
            this.Duration = duration;
            this.ReassignTemplateId = reassignTemplateId;
            this.AutoRejectTemplateId = autoRejectTemplateId;
            this.NotifyTemplateId = notifyTemplateId;
            this.DurationReminderProfileId = durationReminderProfileId;
            this.DurationType = durationType;
            this.EscalationType = escalationType;
        }
        
        /// <summary>
        /// Gets or Sets IsDurationEnabled
        /// </summary>
        [DataMember(Name="isDurationEnabled", EmitDefaultValue=false)]
        public bool IsDurationEnabled { get; set; }

        /// <summary>
        /// Gets or Sets Reassigner
        /// </summary>
        [DataMember(Name="reassigner", EmitDefaultValue=true)]
        public ApiUser Reassigner { get; set; }

        /// <summary>
        /// Gets or Sets EscalationUsers
        /// </summary>
        [DataMember(Name="escalationUsers", EmitDefaultValue=true)]
        public List<ApiUser> EscalationUsers { get; set; }

        /// <summary>
        /// Gets or Sets IsEnableDureationReminder
        /// </summary>
        [DataMember(Name="isEnableDureationReminder", EmitDefaultValue=false)]
        public bool IsEnableDureationReminder { get; set; }

        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [DataMember(Name="duration", EmitDefaultValue=true)]
        public int? Duration { get; set; }

        /// <summary>
        /// Gets or Sets ReassignTemplateId
        /// </summary>
        [DataMember(Name="reassignTemplateId", EmitDefaultValue=false)]
        public Guid ReassignTemplateId { get; set; }

        /// <summary>
        /// Gets or Sets AutoRejectTemplateId
        /// </summary>
        [DataMember(Name="autoRejectTemplateId", EmitDefaultValue=false)]
        public Guid AutoRejectTemplateId { get; set; }

        /// <summary>
        /// Gets or Sets NotifyTemplateId
        /// </summary>
        [DataMember(Name="notifyTemplateId", EmitDefaultValue=false)]
        public Guid NotifyTemplateId { get; set; }

        /// <summary>
        /// Gets or Sets DurationReminderProfileId
        /// </summary>
        [DataMember(Name="durationReminderProfileId", EmitDefaultValue=false)]
        public Guid DurationReminderProfileId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApprovalProcessStageDurationSetting {\n");
            sb.Append("  IsDurationEnabled: ").Append(IsDurationEnabled).Append("\n");
            sb.Append("  Reassigner: ").Append(Reassigner).Append("\n");
            sb.Append("  EscalationUsers: ").Append(EscalationUsers).Append("\n");
            sb.Append("  IsEnableDureationReminder: ").Append(IsEnableDureationReminder).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  ReassignTemplateId: ").Append(ReassignTemplateId).Append("\n");
            sb.Append("  AutoRejectTemplateId: ").Append(AutoRejectTemplateId).Append("\n");
            sb.Append("  NotifyTemplateId: ").Append(NotifyTemplateId).Append("\n");
            sb.Append("  DurationReminderProfileId: ").Append(DurationReminderProfileId).Append("\n");
            sb.Append("  DurationType: ").Append(DurationType).Append("\n");
            sb.Append("  EscalationType: ").Append(EscalationType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApprovalProcessStageDurationSetting);
        }

        /// <summary>
        /// Returns true if ApprovalProcessStageDurationSetting instances are equal
        /// </summary>
        /// <param name="input">Instance of ApprovalProcessStageDurationSetting to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApprovalProcessStageDurationSetting input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IsDurationEnabled == input.IsDurationEnabled ||
                    this.IsDurationEnabled.Equals(input.IsDurationEnabled)
                ) && 
                (
                    this.Reassigner == input.Reassigner ||
                    (this.Reassigner != null &&
                    this.Reassigner.Equals(input.Reassigner))
                ) && 
                (
                    this.EscalationUsers == input.EscalationUsers ||
                    this.EscalationUsers != null &&
                    input.EscalationUsers != null &&
                    this.EscalationUsers.SequenceEqual(input.EscalationUsers)
                ) && 
                (
                    this.IsEnableDureationReminder == input.IsEnableDureationReminder ||
                    this.IsEnableDureationReminder.Equals(input.IsEnableDureationReminder)
                ) && 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                ) && 
                (
                    this.ReassignTemplateId == input.ReassignTemplateId ||
                    (this.ReassignTemplateId != null &&
                    this.ReassignTemplateId.Equals(input.ReassignTemplateId))
                ) && 
                (
                    this.AutoRejectTemplateId == input.AutoRejectTemplateId ||
                    (this.AutoRejectTemplateId != null &&
                    this.AutoRejectTemplateId.Equals(input.AutoRejectTemplateId))
                ) && 
                (
                    this.NotifyTemplateId == input.NotifyTemplateId ||
                    (this.NotifyTemplateId != null &&
                    this.NotifyTemplateId.Equals(input.NotifyTemplateId))
                ) && 
                (
                    this.DurationReminderProfileId == input.DurationReminderProfileId ||
                    (this.DurationReminderProfileId != null &&
                    this.DurationReminderProfileId.Equals(input.DurationReminderProfileId))
                ) && 
                (
                    this.DurationType == input.DurationType ||
                    this.DurationType.Equals(input.DurationType)
                ) && 
                (
                    this.EscalationType == input.EscalationType ||
                    this.EscalationType.Equals(input.EscalationType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.IsDurationEnabled.GetHashCode();
                if (this.Reassigner != null)
                    hashCode = hashCode * 59 + this.Reassigner.GetHashCode();
                if (this.EscalationUsers != null)
                    hashCode = hashCode * 59 + this.EscalationUsers.GetHashCode();
                hashCode = hashCode * 59 + this.IsEnableDureationReminder.GetHashCode();
                if (this.Duration != null)
                    hashCode = hashCode * 59 + this.Duration.GetHashCode();
                if (this.ReassignTemplateId != null)
                    hashCode = hashCode * 59 + this.ReassignTemplateId.GetHashCode();
                if (this.AutoRejectTemplateId != null)
                    hashCode = hashCode * 59 + this.AutoRejectTemplateId.GetHashCode();
                if (this.NotifyTemplateId != null)
                    hashCode = hashCode * 59 + this.NotifyTemplateId.GetHashCode();
                if (this.DurationReminderProfileId != null)
                    hashCode = hashCode * 59 + this.DurationReminderProfileId.GetHashCode();
                hashCode = hashCode * 59 + this.DurationType.GetHashCode();
                hashCode = hashCode * 59 + this.EscalationType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
