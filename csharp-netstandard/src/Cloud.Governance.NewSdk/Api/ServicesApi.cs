/* 
 * Cloud Governance Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Cloud.Governance.NewSdk.Client;
using Cloud.Governance.NewSdk.Model;

namespace Cloud.Governance.NewSdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IServicesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add create site service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSiteService"> (optional)</param>
        /// <returns>Guid</returns>
        Guid AddCreateListService (CreateSiteService createSiteService = null);

        /// <summary>
        /// Add create site service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSiteService"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        ApiResponse<Guid> AddCreateListServiceWithHttpInfo (CreateSiteService createSiteService = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebService"> (optional)</param>
        /// <returns>Guid</returns>
        Guid AddCreateWebService (CreateWebService createWebService = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebService"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        ApiResponse<Guid> AddCreateWebServiceWithHttpInfo (CreateWebService createWebService = null);
        /// <summary>
        /// get change group setting service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ChangeGroupSettingService</returns>
        ChangeGroupSettingService GetChangeGroupSettingService (Guid id, Guid? questionnaireId = null);

        /// <summary>
        /// get change group setting service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ApiResponse of ChangeGroupSettingService</returns>
        ApiResponse<ChangeGroupSettingService> GetChangeGroupSettingServiceWithHttpInfo (Guid id, Guid? questionnaireId = null);
        /// <summary>
        /// get change list setting service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ChangeListSettingService</returns>
        ChangeListSettingService GetChangeListSettingService (Guid id, Guid? questionnaireId = null);

        /// <summary>
        /// get change list setting service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ApiResponse of ChangeListSettingService</returns>
        ApiResponse<ChangeListSettingService> GetChangeListSettingServiceWithHttpInfo (Guid id, Guid? questionnaireId = null);
        /// <summary>
        /// get change permission service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ChangePermissionService</returns>
        ChangePermissionService GetChangePermissionService (Guid id, Guid? questionnaireId = null);

        /// <summary>
        /// get change permission service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ApiResponse of ChangePermissionService</returns>
        ApiResponse<ChangePermissionService> GetChangePermissionServiceWithHttpInfo (Guid id, Guid? questionnaireId = null);
        /// <summary>
        /// get change site contact service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ChangeSiteContactService</returns>
        ChangeSiteContactService GetChangeSiteContactService (Guid id, Guid? questionnaireId = null);

        /// <summary>
        /// get change site contact service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ApiResponse of ChangeSiteContactService</returns>
        ApiResponse<ChangeSiteContactService> GetChangeSiteContactServiceWithHttpInfo (Guid id, Guid? questionnaireId = null);
        /// <summary>
        /// get change site setting service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ChangeSiteSettingService</returns>
        ChangeSiteSettingService GetChangeSiteSettingService (Guid id, Guid? questionnaireId = null);

        /// <summary>
        /// get change site setting service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ApiResponse of ChangeSiteSettingService</returns>
        ApiResponse<ChangeSiteSettingService> GetChangeSiteSettingServiceWithHttpInfo (Guid id, Guid? questionnaireId = null);
        /// <summary>
        /// validate permissions, scope for change web contact service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ChangeWebContactService</returns>
        ChangeWebContactService GetChangeWebContactService (Guid id, Guid? questionnaireId = null);

        /// <summary>
        /// validate permissions, scope for change web contact service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ApiResponse of ChangeWebContactService</returns>
        ApiResponse<ChangeWebContactService> GetChangeWebContactServiceWithHttpInfo (Guid id, Guid? questionnaireId = null);
        /// <summary>
        /// get change web setting service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ChangeWebSettingService</returns>
        ChangeWebSettingService GetChangeWebSettingsService (Guid id, Guid? questionnaireId = null);

        /// <summary>
        /// get change web setting service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ApiResponse of ChangeWebSettingService</returns>
        ApiResponse<ChangeWebSettingService> GetChangeWebSettingsServiceWithHttpInfo (Guid id, Guid? questionnaireId = null);
        /// <summary>
        /// get clone permission service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ClonePermissionService</returns>
        ClonePermissionService GetClonePermissionService (Guid id, Guid? questionnaireId = null);

        /// <summary>
        /// get clone permission service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ApiResponse of ClonePermissionService</returns>
        ApiResponse<ClonePermissionService> GetClonePermissionServiceWithHttpInfo (Guid id, Guid? questionnaireId = null);
        /// <summary>
        /// get content move profiles from cloud management
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ContentMoveProfiles</returns>
        ContentMoveProfiles GetContentMoveProfiles ();

        /// <summary>
        /// get content move profiles from cloud management
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ContentMoveProfiles</returns>
        ApiResponse<ContentMoveProfiles> GetContentMoveProfilesWithHttpInfo ();
        /// <summary>
        /// get content move service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ContentMoveService</returns>
        ContentMoveService GetContentMoveService (Guid id, Guid? questionnaireId = null);

        /// <summary>
        /// get content move service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ApiResponse of ContentMoveService</returns>
        ApiResponse<ContentMoveService> GetContentMoveServiceWithHttpInfo (Guid id, Guid? questionnaireId = null);
        /// <summary>
        /// get create group service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>CreateGroupService</returns>
        CreateGroupService GetCreateGroupService (Guid id, Guid? questionnaireId = null);

        /// <summary>
        /// get create group service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ApiResponse of CreateGroupService</returns>
        ApiResponse<CreateGroupService> GetCreateGroupServiceWithHttpInfo (Guid id, Guid? questionnaireId = null);
        /// <summary>
        /// get create list service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>CreateListService</returns>
        CreateListService GetCreateListService (Guid id, Guid? questionnaireId = null);

        /// <summary>
        /// get create list service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ApiResponse of CreateListService</returns>
        ApiResponse<CreateListService> GetCreateListServiceWithHttpInfo (Guid id, Guid? questionnaireId = null);
        /// <summary>
        /// get create site service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>CreateSiteService</returns>
        CreateSiteService GetCreateSiteService (Guid id, Guid? questionnaireId = null);

        /// <summary>
        /// get create site service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ApiResponse of CreateSiteService</returns>
        ApiResponse<CreateSiteService> GetCreateSiteServiceWithHttpInfo (Guid id, Guid? questionnaireId = null);
        /// <summary>
        /// get create web service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>CreateWebService</returns>
        CreateWebService GetCreateWebService (Guid id, Guid? questionnaireId = null);

        /// <summary>
        /// get create web service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ApiResponse of CreateWebService</returns>
        ApiResponse<CreateWebService> GetCreateWebServiceWithHttpInfo (Guid id, Guid? questionnaireId = null);
        /// <summary>
        /// get custom service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ServiceForRequest</returns>
        ServiceForRequest GetCustomService (Guid id, Guid? questionnaireId = null);

        /// <summary>
        /// get custom service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ApiResponse of ServiceForRequest</returns>
        ApiResponse<ServiceForRequest> GetCustomServiceWithHttpInfo (Guid id, Guid? questionnaireId = null);
        /// <summary>
        /// get grant permission service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>GrantPermissionService</returns>
        GrantPermissionService GetGrantPermissionService (Guid id, Guid? questionnaireId = null);

        /// <summary>
        /// get grant permission service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ApiResponse of GrantPermissionService</returns>
        ApiResponse<GrantPermissionService> GetGrantPermissionServiceWithHttpInfo (Guid id, Guid? questionnaireId = null);
        /// <summary>
        /// get group lifecycle service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>GroupLifecycleService</returns>
        GroupLifecycleService GetGroupLifecycleService (Guid id, Guid? questionnaireId = null);

        /// <summary>
        /// get group lifecycle service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ApiResponse of GroupLifecycleService</returns>
        ApiResponse<GroupLifecycleService> GetGroupLifecycleServiceWithHttpInfo (Guid id, Guid? questionnaireId = null);
        /// <summary>
        /// get manage permission service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ManagePermissionService</returns>
        ManagePermissionService GetManagePermissionService (Guid id, Guid? questionnaireId = null);

        /// <summary>
        /// get manage permission service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ApiResponse of ManagePermissionService</returns>
        ApiResponse<ManagePermissionService> GetManagePermissionServiceWithHttpInfo (Guid id, Guid? questionnaireId = null);
        /// <summary>
        /// get configued quick services that can be used to start a request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ServiceList&gt;</returns>
        List<ServiceList> GetMyQuickServices ();

        /// <summary>
        /// get configued quick services that can be used to start a request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ServiceList&gt;</returns>
        ApiResponse<List<ServiceList>> GetMyQuickServicesWithHttpInfo ();
        /// <summary>
        /// get services that can be used to start a request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search"> (optional)</param>
        /// <returns>ServiceListPageResult</returns>
        ServiceListPageResult GetMyServices (string search = null);

        /// <summary>
        /// get services that can be used to start a request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search"> (optional)</param>
        /// <returns>ApiResponse of ServiceListPageResult</returns>
        ApiResponse<ServiceListPageResult> GetMyServicesWithHttpInfo (string search = null);
        /// <summary>
        /// get services that can be used to start a request within context
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objecttype"></param>
        /// <param name="objectid"></param>
        /// <param name="search"> (optional)</param>
        /// <returns>List&lt;ServiceList&gt;</returns>
        List<ServiceList> GetMyServicesWithContext (WorkspaceType objecttype, string objectid, string search = null);

        /// <summary>
        /// get services that can be used to start a request within context
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objecttype"></param>
        /// <param name="objectid"></param>
        /// <param name="search"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ServiceList&gt;</returns>
        ApiResponse<List<ServiceList>> GetMyServicesWithContextWithHttpInfo (WorkspaceType objecttype, string objectid, string search = null);
        /// <summary>
        /// get site lifecycle service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>SiteLifecycleService</returns>
        SiteLifecycleService GetSiteLifecycleService (Guid id, Guid? questionnaireId = null);

        /// <summary>
        /// get site lifecycle service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ApiResponse of SiteLifecycleService</returns>
        ApiResponse<SiteLifecycleService> GetSiteLifecycleServiceWithHttpInfo (Guid id, Guid? questionnaireId = null);
        /// <summary>
        /// get web lifecycle service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>WebLifecycleService</returns>
        WebLifecycleService GetWebLifecycleService (Guid id, Guid? questionnaireId = null);

        /// <summary>
        /// get web lifecycle service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ApiResponse of WebLifecycleService</returns>
        ApiResponse<WebLifecycleService> GetWebLifecycleServiceWithHttpInfo (Guid id, Guid? questionnaireId = null);
        /// <summary>
        /// validate permissions, scope for change group setting service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupValidationParameter"> (optional)</param>
        /// <returns>ChangeGroupSettingCheckResult</returns>
        ChangeGroupSettingCheckResult ValidateForChangeGroupSettingService (Guid id, GroupValidationParameter groupValidationParameter = null);

        /// <summary>
        /// validate permissions, scope for change group setting service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupValidationParameter"> (optional)</param>
        /// <returns>ApiResponse of ChangeGroupSettingCheckResult</returns>
        ApiResponse<ChangeGroupSettingCheckResult> ValidateForChangeGroupSettingServiceWithHttpInfo (Guid id, GroupValidationParameter groupValidationParameter = null);
        /// <summary>
        /// validate permissions, scope for change list setting service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>ChangeListSettingValidateResult</returns>
        ChangeListSettingValidateResult ValidateForChangeListSettingService (Guid id, SiteValidationParameter siteValidationParameter = null);

        /// <summary>
        /// validate permissions, scope for change list setting service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>ApiResponse of ChangeListSettingValidateResult</returns>
        ApiResponse<ChangeListSettingValidateResult> ValidateForChangeListSettingServiceWithHttpInfo (Guid id, SiteValidationParameter siteValidationParameter = null);
        /// <summary>
        /// validate permissions, scope for change permission service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>ChangePermissionValidateResult</returns>
        ChangePermissionValidateResult ValidateForChangePermissionService (Guid id, SiteValidationParameter siteValidationParameter = null);

        /// <summary>
        /// validate permissions, scope for change permission service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>ApiResponse of ChangePermissionValidateResult</returns>
        ApiResponse<ChangePermissionValidateResult> ValidateForChangePermissionServiceWithHttpInfo (Guid id, SiteValidationParameter siteValidationParameter = null);
        /// <summary>
        /// validate permissions, scope for change site contact service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>ChangeSiteContactValidateResult</returns>
        ChangeSiteContactValidateResult ValidateForChangeSiteContactService (Guid id, SiteValidationParameter siteValidationParameter = null);

        /// <summary>
        /// validate permissions, scope for change site contact service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>ApiResponse of ChangeSiteContactValidateResult</returns>
        ApiResponse<ChangeSiteContactValidateResult> ValidateForChangeSiteContactServiceWithHttpInfo (Guid id, SiteValidationParameter siteValidationParameter = null);
        /// <summary>
        /// validate permissions, scope for change site setting service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>ChangeSiteSettingValidateResult</returns>
        ChangeSiteSettingValidateResult ValidateForChangeSiteSettingService (Guid id, SiteValidationParameter siteValidationParameter = null);

        /// <summary>
        /// validate permissions, scope for change site setting service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>ApiResponse of ChangeSiteSettingValidateResult</returns>
        ApiResponse<ChangeSiteSettingValidateResult> ValidateForChangeSiteSettingServiceWithHttpInfo (Guid id, SiteValidationParameter siteValidationParameter = null);
        /// <summary>
        /// validate permissions, scope for change web contact service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>ChangeWebContactValidateResult</returns>
        ChangeWebContactValidateResult ValidateForChangeWebContactService (Guid id, SiteValidationParameter siteValidationParameter = null);

        /// <summary>
        /// validate permissions, scope for change web contact service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>ApiResponse of ChangeWebContactValidateResult</returns>
        ApiResponse<ChangeWebContactValidateResult> ValidateForChangeWebContactServiceWithHttpInfo (Guid id, SiteValidationParameter siteValidationParameter = null);
        /// <summary>
        /// validate permissions, scope for change web setting service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>ChangeWebUrlValidateResult</returns>
        ChangeWebUrlValidateResult ValidateForChangeWebSettingService (Guid id, SiteValidationParameter siteValidationParameter = null);

        /// <summary>
        /// validate permissions, scope for change web setting service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>ApiResponse of ChangeWebUrlValidateResult</returns>
        ApiResponse<ChangeWebUrlValidateResult> ValidateForChangeWebSettingServiceWithHttpInfo (Guid id, SiteValidationParameter siteValidationParameter = null);
        /// <summary>
        /// validate permissions, scope for clone permission service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>ClonePermissionValidateResult</returns>
        ClonePermissionValidateResult ValidateForClonePermissionService (Guid id, SiteValidationParameter siteValidationParameter = null);

        /// <summary>
        /// validate permissions, scope for clone permission service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>ApiResponse of ClonePermissionValidateResult</returns>
        ApiResponse<ClonePermissionValidateResult> ValidateForClonePermissionServiceWithHttpInfo (Guid id, SiteValidationParameter siteValidationParameter = null);
        /// <summary>
        /// validate permissions, scope for content move service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>ContentMoveUrlValidationResult</returns>
        ContentMoveUrlValidationResult ValidateForContentMoveService (Guid id, SiteValidationParameter siteValidationParameter = null);

        /// <summary>
        /// validate permissions, scope for content move service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>ApiResponse of ContentMoveUrlValidationResult</returns>
        ApiResponse<ContentMoveUrlValidationResult> ValidateForContentMoveServiceWithHttpInfo (Guid id, SiteValidationParameter siteValidationParameter = null);
        /// <summary>
        /// validate permissions, scope for create list service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="listValidationParameter"> (optional)</param>
        /// <returns>CreateListUrlValidationResult</returns>
        CreateListUrlValidationResult ValidateForCreateListService (Guid id, ListValidationParameter listValidationParameter = null);

        /// <summary>
        /// validate permissions, scope for create list service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="listValidationParameter"> (optional)</param>
        /// <returns>ApiResponse of CreateListUrlValidationResult</returns>
        ApiResponse<CreateListUrlValidationResult> ValidateForCreateListServiceWithHttpInfo (Guid id, ListValidationParameter listValidationParameter = null);
        /// <summary>
        /// validate permissions, scope for create web service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createWebValidationParameter"> (optional)</param>
        /// <returns>CreateWebUrlValidationResult</returns>
        CreateWebUrlValidationResult ValidateForCreateWebService (Guid id, CreateWebValidationParameter createWebValidationParameter = null);

        /// <summary>
        /// validate permissions, scope for create web service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createWebValidationParameter"> (optional)</param>
        /// <returns>ApiResponse of CreateWebUrlValidationResult</returns>
        ApiResponse<CreateWebUrlValidationResult> ValidateForCreateWebServiceWithHttpInfo (Guid id, CreateWebValidationParameter createWebValidationParameter = null);
        /// <summary>
        /// validate permissions, scope for grant permission service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>GrantPermissionUrlValidationResult</returns>
        GrantPermissionUrlValidationResult ValidateForGrantPermissionService (Guid id, SiteValidationParameter siteValidationParameter = null);

        /// <summary>
        /// validate permissions, scope for grant permission service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>ApiResponse of GrantPermissionUrlValidationResult</returns>
        ApiResponse<GrantPermissionUrlValidationResult> ValidateForGrantPermissionServiceWithHttpInfo (Guid id, SiteValidationParameter siteValidationParameter = null);
        /// <summary>
        /// validate permissions, scope for group lifecycle service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupValidationParameter"> (optional)</param>
        /// <returns>GroupLifecycleValidateResult</returns>
        GroupLifecycleValidateResult ValidateForGroupLifecycleService (Guid id, GroupValidationParameter groupValidationParameter = null);

        /// <summary>
        /// validate permissions, scope for group lifecycle service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupValidationParameter"> (optional)</param>
        /// <returns>ApiResponse of GroupLifecycleValidateResult</returns>
        ApiResponse<GroupLifecycleValidateResult> ValidateForGroupLifecycleServiceWithHttpInfo (Guid id, GroupValidationParameter groupValidationParameter = null);
        /// <summary>
        /// validate permissions, scope for manage permission service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>ManagePermissionValidateResult</returns>
        ManagePermissionValidateResult ValidateForManagePermissionService (Guid id, SiteValidationParameter siteValidationParameter = null);

        /// <summary>
        /// validate permissions, scope for manage permission service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>ApiResponse of ManagePermissionValidateResult</returns>
        ApiResponse<ManagePermissionValidateResult> ValidateForManagePermissionServiceWithHttpInfo (Guid id, SiteValidationParameter siteValidationParameter = null);
        /// <summary>
        /// validate permissions, scope for site lifecycle service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>SiteLifecycleValidateResult</returns>
        SiteLifecycleValidateResult ValidateForSiteLifecycleService (Guid id, SiteValidationParameter siteValidationParameter = null);

        /// <summary>
        /// validate permissions, scope for site lifecycle service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>ApiResponse of SiteLifecycleValidateResult</returns>
        ApiResponse<SiteLifecycleValidateResult> ValidateForSiteLifecycleServiceWithHttpInfo (Guid id, SiteValidationParameter siteValidationParameter = null);
        /// <summary>
        /// validate permissions, scope for web lifecycle service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>WebLifecycleValidateResult</returns>
        WebLifecycleValidateResult ValidateForWebLifecycleService (Guid id, SiteValidationParameter siteValidationParameter = null);

        /// <summary>
        /// validate permissions, scope for web lifecycle service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>ApiResponse of WebLifecycleValidateResult</returns>
        ApiResponse<WebLifecycleValidateResult> ValidateForWebLifecycleServiceWithHttpInfo (Guid id, SiteValidationParameter siteValidationParameter = null);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IServicesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add create site service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSiteService"> (optional)</param>
        /// <returns>Task of Guid</returns>
        System.Threading.Tasks.Task<Guid> AddCreateListServiceAsync (CreateSiteService createSiteService = null);

        /// <summary>
        /// Add create site service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSiteService"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid>> AddCreateListServiceAsyncWithHttpInfo (CreateSiteService createSiteService = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebService"> (optional)</param>
        /// <returns>Task of Guid</returns>
        System.Threading.Tasks.Task<Guid> AddCreateWebServiceAsync (CreateWebService createWebService = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebService"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid>> AddCreateWebServiceAsyncWithHttpInfo (CreateWebService createWebService = null);
        /// <summary>
        /// get change group setting service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ChangeGroupSettingService</returns>
        System.Threading.Tasks.Task<ChangeGroupSettingService> GetChangeGroupSettingServiceAsync (Guid id, Guid? questionnaireId = null);

        /// <summary>
        /// get change group setting service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ApiResponse (ChangeGroupSettingService)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChangeGroupSettingService>> GetChangeGroupSettingServiceAsyncWithHttpInfo (Guid id, Guid? questionnaireId = null);
        /// <summary>
        /// get change list setting service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ChangeListSettingService</returns>
        System.Threading.Tasks.Task<ChangeListSettingService> GetChangeListSettingServiceAsync (Guid id, Guid? questionnaireId = null);

        /// <summary>
        /// get change list setting service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ApiResponse (ChangeListSettingService)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChangeListSettingService>> GetChangeListSettingServiceAsyncWithHttpInfo (Guid id, Guid? questionnaireId = null);
        /// <summary>
        /// get change permission service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ChangePermissionService</returns>
        System.Threading.Tasks.Task<ChangePermissionService> GetChangePermissionServiceAsync (Guid id, Guid? questionnaireId = null);

        /// <summary>
        /// get change permission service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ApiResponse (ChangePermissionService)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChangePermissionService>> GetChangePermissionServiceAsyncWithHttpInfo (Guid id, Guid? questionnaireId = null);
        /// <summary>
        /// get change site contact service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ChangeSiteContactService</returns>
        System.Threading.Tasks.Task<ChangeSiteContactService> GetChangeSiteContactServiceAsync (Guid id, Guid? questionnaireId = null);

        /// <summary>
        /// get change site contact service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ApiResponse (ChangeSiteContactService)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChangeSiteContactService>> GetChangeSiteContactServiceAsyncWithHttpInfo (Guid id, Guid? questionnaireId = null);
        /// <summary>
        /// get change site setting service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ChangeSiteSettingService</returns>
        System.Threading.Tasks.Task<ChangeSiteSettingService> GetChangeSiteSettingServiceAsync (Guid id, Guid? questionnaireId = null);

        /// <summary>
        /// get change site setting service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ApiResponse (ChangeSiteSettingService)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChangeSiteSettingService>> GetChangeSiteSettingServiceAsyncWithHttpInfo (Guid id, Guid? questionnaireId = null);
        /// <summary>
        /// validate permissions, scope for change web contact service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ChangeWebContactService</returns>
        System.Threading.Tasks.Task<ChangeWebContactService> GetChangeWebContactServiceAsync (Guid id, Guid? questionnaireId = null);

        /// <summary>
        /// validate permissions, scope for change web contact service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ApiResponse (ChangeWebContactService)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChangeWebContactService>> GetChangeWebContactServiceAsyncWithHttpInfo (Guid id, Guid? questionnaireId = null);
        /// <summary>
        /// get change web setting service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ChangeWebSettingService</returns>
        System.Threading.Tasks.Task<ChangeWebSettingService> GetChangeWebSettingsServiceAsync (Guid id, Guid? questionnaireId = null);

        /// <summary>
        /// get change web setting service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ApiResponse (ChangeWebSettingService)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChangeWebSettingService>> GetChangeWebSettingsServiceAsyncWithHttpInfo (Guid id, Guid? questionnaireId = null);
        /// <summary>
        /// get clone permission service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ClonePermissionService</returns>
        System.Threading.Tasks.Task<ClonePermissionService> GetClonePermissionServiceAsync (Guid id, Guid? questionnaireId = null);

        /// <summary>
        /// get clone permission service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ApiResponse (ClonePermissionService)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClonePermissionService>> GetClonePermissionServiceAsyncWithHttpInfo (Guid id, Guid? questionnaireId = null);
        /// <summary>
        /// get content move profiles from cloud management
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ContentMoveProfiles</returns>
        System.Threading.Tasks.Task<ContentMoveProfiles> GetContentMoveProfilesAsync ();

        /// <summary>
        /// get content move profiles from cloud management
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ContentMoveProfiles)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContentMoveProfiles>> GetContentMoveProfilesAsyncWithHttpInfo ();
        /// <summary>
        /// get content move service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ContentMoveService</returns>
        System.Threading.Tasks.Task<ContentMoveService> GetContentMoveServiceAsync (Guid id, Guid? questionnaireId = null);

        /// <summary>
        /// get content move service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ApiResponse (ContentMoveService)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContentMoveService>> GetContentMoveServiceAsyncWithHttpInfo (Guid id, Guid? questionnaireId = null);
        /// <summary>
        /// get create group service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of CreateGroupService</returns>
        System.Threading.Tasks.Task<CreateGroupService> GetCreateGroupServiceAsync (Guid id, Guid? questionnaireId = null);

        /// <summary>
        /// get create group service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ApiResponse (CreateGroupService)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateGroupService>> GetCreateGroupServiceAsyncWithHttpInfo (Guid id, Guid? questionnaireId = null);
        /// <summary>
        /// get create list service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of CreateListService</returns>
        System.Threading.Tasks.Task<CreateListService> GetCreateListServiceAsync (Guid id, Guid? questionnaireId = null);

        /// <summary>
        /// get create list service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ApiResponse (CreateListService)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateListService>> GetCreateListServiceAsyncWithHttpInfo (Guid id, Guid? questionnaireId = null);
        /// <summary>
        /// get create site service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of CreateSiteService</returns>
        System.Threading.Tasks.Task<CreateSiteService> GetCreateSiteServiceAsync (Guid id, Guid? questionnaireId = null);

        /// <summary>
        /// get create site service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ApiResponse (CreateSiteService)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateSiteService>> GetCreateSiteServiceAsyncWithHttpInfo (Guid id, Guid? questionnaireId = null);
        /// <summary>
        /// get create web service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of CreateWebService</returns>
        System.Threading.Tasks.Task<CreateWebService> GetCreateWebServiceAsync (Guid id, Guid? questionnaireId = null);

        /// <summary>
        /// get create web service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ApiResponse (CreateWebService)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateWebService>> GetCreateWebServiceAsyncWithHttpInfo (Guid id, Guid? questionnaireId = null);
        /// <summary>
        /// get custom service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ServiceForRequest</returns>
        System.Threading.Tasks.Task<ServiceForRequest> GetCustomServiceAsync (Guid id, Guid? questionnaireId = null);

        /// <summary>
        /// get custom service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ApiResponse (ServiceForRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceForRequest>> GetCustomServiceAsyncWithHttpInfo (Guid id, Guid? questionnaireId = null);
        /// <summary>
        /// get grant permission service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of GrantPermissionService</returns>
        System.Threading.Tasks.Task<GrantPermissionService> GetGrantPermissionServiceAsync (Guid id, Guid? questionnaireId = null);

        /// <summary>
        /// get grant permission service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ApiResponse (GrantPermissionService)</returns>
        System.Threading.Tasks.Task<ApiResponse<GrantPermissionService>> GetGrantPermissionServiceAsyncWithHttpInfo (Guid id, Guid? questionnaireId = null);
        /// <summary>
        /// get group lifecycle service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of GroupLifecycleService</returns>
        System.Threading.Tasks.Task<GroupLifecycleService> GetGroupLifecycleServiceAsync (Guid id, Guid? questionnaireId = null);

        /// <summary>
        /// get group lifecycle service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ApiResponse (GroupLifecycleService)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupLifecycleService>> GetGroupLifecycleServiceAsyncWithHttpInfo (Guid id, Guid? questionnaireId = null);
        /// <summary>
        /// get manage permission service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ManagePermissionService</returns>
        System.Threading.Tasks.Task<ManagePermissionService> GetManagePermissionServiceAsync (Guid id, Guid? questionnaireId = null);

        /// <summary>
        /// get manage permission service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ApiResponse (ManagePermissionService)</returns>
        System.Threading.Tasks.Task<ApiResponse<ManagePermissionService>> GetManagePermissionServiceAsyncWithHttpInfo (Guid id, Guid? questionnaireId = null);
        /// <summary>
        /// get configued quick services that can be used to start a request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ServiceList&gt;</returns>
        System.Threading.Tasks.Task<List<ServiceList>> GetMyQuickServicesAsync ();

        /// <summary>
        /// get configued quick services that can be used to start a request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ServiceList&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ServiceList>>> GetMyQuickServicesAsyncWithHttpInfo ();
        /// <summary>
        /// get services that can be used to start a request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search"> (optional)</param>
        /// <returns>Task of ServiceListPageResult</returns>
        System.Threading.Tasks.Task<ServiceListPageResult> GetMyServicesAsync (string search = null);

        /// <summary>
        /// get services that can be used to start a request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search"> (optional)</param>
        /// <returns>Task of ApiResponse (ServiceListPageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceListPageResult>> GetMyServicesAsyncWithHttpInfo (string search = null);
        /// <summary>
        /// get services that can be used to start a request within context
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objecttype"></param>
        /// <param name="objectid"></param>
        /// <param name="search"> (optional)</param>
        /// <returns>Task of List&lt;ServiceList&gt;</returns>
        System.Threading.Tasks.Task<List<ServiceList>> GetMyServicesWithContextAsync (WorkspaceType objecttype, string objectid, string search = null);

        /// <summary>
        /// get services that can be used to start a request within context
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objecttype"></param>
        /// <param name="objectid"></param>
        /// <param name="search"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ServiceList&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ServiceList>>> GetMyServicesWithContextAsyncWithHttpInfo (WorkspaceType objecttype, string objectid, string search = null);
        /// <summary>
        /// get site lifecycle service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of SiteLifecycleService</returns>
        System.Threading.Tasks.Task<SiteLifecycleService> GetSiteLifecycleServiceAsync (Guid id, Guid? questionnaireId = null);

        /// <summary>
        /// get site lifecycle service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ApiResponse (SiteLifecycleService)</returns>
        System.Threading.Tasks.Task<ApiResponse<SiteLifecycleService>> GetSiteLifecycleServiceAsyncWithHttpInfo (Guid id, Guid? questionnaireId = null);
        /// <summary>
        /// get web lifecycle service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of WebLifecycleService</returns>
        System.Threading.Tasks.Task<WebLifecycleService> GetWebLifecycleServiceAsync (Guid id, Guid? questionnaireId = null);

        /// <summary>
        /// get web lifecycle service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ApiResponse (WebLifecycleService)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebLifecycleService>> GetWebLifecycleServiceAsyncWithHttpInfo (Guid id, Guid? questionnaireId = null);
        /// <summary>
        /// validate permissions, scope for change group setting service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupValidationParameter"> (optional)</param>
        /// <returns>Task of ChangeGroupSettingCheckResult</returns>
        System.Threading.Tasks.Task<ChangeGroupSettingCheckResult> ValidateForChangeGroupSettingServiceAsync (Guid id, GroupValidationParameter groupValidationParameter = null);

        /// <summary>
        /// validate permissions, scope for change group setting service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupValidationParameter"> (optional)</param>
        /// <returns>Task of ApiResponse (ChangeGroupSettingCheckResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChangeGroupSettingCheckResult>> ValidateForChangeGroupSettingServiceAsyncWithHttpInfo (Guid id, GroupValidationParameter groupValidationParameter = null);
        /// <summary>
        /// validate permissions, scope for change list setting service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>Task of ChangeListSettingValidateResult</returns>
        System.Threading.Tasks.Task<ChangeListSettingValidateResult> ValidateForChangeListSettingServiceAsync (Guid id, SiteValidationParameter siteValidationParameter = null);

        /// <summary>
        /// validate permissions, scope for change list setting service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>Task of ApiResponse (ChangeListSettingValidateResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChangeListSettingValidateResult>> ValidateForChangeListSettingServiceAsyncWithHttpInfo (Guid id, SiteValidationParameter siteValidationParameter = null);
        /// <summary>
        /// validate permissions, scope for change permission service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>Task of ChangePermissionValidateResult</returns>
        System.Threading.Tasks.Task<ChangePermissionValidateResult> ValidateForChangePermissionServiceAsync (Guid id, SiteValidationParameter siteValidationParameter = null);

        /// <summary>
        /// validate permissions, scope for change permission service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>Task of ApiResponse (ChangePermissionValidateResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChangePermissionValidateResult>> ValidateForChangePermissionServiceAsyncWithHttpInfo (Guid id, SiteValidationParameter siteValidationParameter = null);
        /// <summary>
        /// validate permissions, scope for change site contact service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>Task of ChangeSiteContactValidateResult</returns>
        System.Threading.Tasks.Task<ChangeSiteContactValidateResult> ValidateForChangeSiteContactServiceAsync (Guid id, SiteValidationParameter siteValidationParameter = null);

        /// <summary>
        /// validate permissions, scope for change site contact service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>Task of ApiResponse (ChangeSiteContactValidateResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChangeSiteContactValidateResult>> ValidateForChangeSiteContactServiceAsyncWithHttpInfo (Guid id, SiteValidationParameter siteValidationParameter = null);
        /// <summary>
        /// validate permissions, scope for change site setting service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>Task of ChangeSiteSettingValidateResult</returns>
        System.Threading.Tasks.Task<ChangeSiteSettingValidateResult> ValidateForChangeSiteSettingServiceAsync (Guid id, SiteValidationParameter siteValidationParameter = null);

        /// <summary>
        /// validate permissions, scope for change site setting service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>Task of ApiResponse (ChangeSiteSettingValidateResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChangeSiteSettingValidateResult>> ValidateForChangeSiteSettingServiceAsyncWithHttpInfo (Guid id, SiteValidationParameter siteValidationParameter = null);
        /// <summary>
        /// validate permissions, scope for change web contact service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>Task of ChangeWebContactValidateResult</returns>
        System.Threading.Tasks.Task<ChangeWebContactValidateResult> ValidateForChangeWebContactServiceAsync (Guid id, SiteValidationParameter siteValidationParameter = null);

        /// <summary>
        /// validate permissions, scope for change web contact service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>Task of ApiResponse (ChangeWebContactValidateResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChangeWebContactValidateResult>> ValidateForChangeWebContactServiceAsyncWithHttpInfo (Guid id, SiteValidationParameter siteValidationParameter = null);
        /// <summary>
        /// validate permissions, scope for change web setting service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>Task of ChangeWebUrlValidateResult</returns>
        System.Threading.Tasks.Task<ChangeWebUrlValidateResult> ValidateForChangeWebSettingServiceAsync (Guid id, SiteValidationParameter siteValidationParameter = null);

        /// <summary>
        /// validate permissions, scope for change web setting service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>Task of ApiResponse (ChangeWebUrlValidateResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChangeWebUrlValidateResult>> ValidateForChangeWebSettingServiceAsyncWithHttpInfo (Guid id, SiteValidationParameter siteValidationParameter = null);
        /// <summary>
        /// validate permissions, scope for clone permission service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>Task of ClonePermissionValidateResult</returns>
        System.Threading.Tasks.Task<ClonePermissionValidateResult> ValidateForClonePermissionServiceAsync (Guid id, SiteValidationParameter siteValidationParameter = null);

        /// <summary>
        /// validate permissions, scope for clone permission service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>Task of ApiResponse (ClonePermissionValidateResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClonePermissionValidateResult>> ValidateForClonePermissionServiceAsyncWithHttpInfo (Guid id, SiteValidationParameter siteValidationParameter = null);
        /// <summary>
        /// validate permissions, scope for content move service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>Task of ContentMoveUrlValidationResult</returns>
        System.Threading.Tasks.Task<ContentMoveUrlValidationResult> ValidateForContentMoveServiceAsync (Guid id, SiteValidationParameter siteValidationParameter = null);

        /// <summary>
        /// validate permissions, scope for content move service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>Task of ApiResponse (ContentMoveUrlValidationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContentMoveUrlValidationResult>> ValidateForContentMoveServiceAsyncWithHttpInfo (Guid id, SiteValidationParameter siteValidationParameter = null);
        /// <summary>
        /// validate permissions, scope for create list service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="listValidationParameter"> (optional)</param>
        /// <returns>Task of CreateListUrlValidationResult</returns>
        System.Threading.Tasks.Task<CreateListUrlValidationResult> ValidateForCreateListServiceAsync (Guid id, ListValidationParameter listValidationParameter = null);

        /// <summary>
        /// validate permissions, scope for create list service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="listValidationParameter"> (optional)</param>
        /// <returns>Task of ApiResponse (CreateListUrlValidationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateListUrlValidationResult>> ValidateForCreateListServiceAsyncWithHttpInfo (Guid id, ListValidationParameter listValidationParameter = null);
        /// <summary>
        /// validate permissions, scope for create web service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createWebValidationParameter"> (optional)</param>
        /// <returns>Task of CreateWebUrlValidationResult</returns>
        System.Threading.Tasks.Task<CreateWebUrlValidationResult> ValidateForCreateWebServiceAsync (Guid id, CreateWebValidationParameter createWebValidationParameter = null);

        /// <summary>
        /// validate permissions, scope for create web service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createWebValidationParameter"> (optional)</param>
        /// <returns>Task of ApiResponse (CreateWebUrlValidationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateWebUrlValidationResult>> ValidateForCreateWebServiceAsyncWithHttpInfo (Guid id, CreateWebValidationParameter createWebValidationParameter = null);
        /// <summary>
        /// validate permissions, scope for grant permission service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>Task of GrantPermissionUrlValidationResult</returns>
        System.Threading.Tasks.Task<GrantPermissionUrlValidationResult> ValidateForGrantPermissionServiceAsync (Guid id, SiteValidationParameter siteValidationParameter = null);

        /// <summary>
        /// validate permissions, scope for grant permission service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>Task of ApiResponse (GrantPermissionUrlValidationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GrantPermissionUrlValidationResult>> ValidateForGrantPermissionServiceAsyncWithHttpInfo (Guid id, SiteValidationParameter siteValidationParameter = null);
        /// <summary>
        /// validate permissions, scope for group lifecycle service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupValidationParameter"> (optional)</param>
        /// <returns>Task of GroupLifecycleValidateResult</returns>
        System.Threading.Tasks.Task<GroupLifecycleValidateResult> ValidateForGroupLifecycleServiceAsync (Guid id, GroupValidationParameter groupValidationParameter = null);

        /// <summary>
        /// validate permissions, scope for group lifecycle service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupValidationParameter"> (optional)</param>
        /// <returns>Task of ApiResponse (GroupLifecycleValidateResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupLifecycleValidateResult>> ValidateForGroupLifecycleServiceAsyncWithHttpInfo (Guid id, GroupValidationParameter groupValidationParameter = null);
        /// <summary>
        /// validate permissions, scope for manage permission service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>Task of ManagePermissionValidateResult</returns>
        System.Threading.Tasks.Task<ManagePermissionValidateResult> ValidateForManagePermissionServiceAsync (Guid id, SiteValidationParameter siteValidationParameter = null);

        /// <summary>
        /// validate permissions, scope for manage permission service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>Task of ApiResponse (ManagePermissionValidateResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ManagePermissionValidateResult>> ValidateForManagePermissionServiceAsyncWithHttpInfo (Guid id, SiteValidationParameter siteValidationParameter = null);
        /// <summary>
        /// validate permissions, scope for site lifecycle service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>Task of SiteLifecycleValidateResult</returns>
        System.Threading.Tasks.Task<SiteLifecycleValidateResult> ValidateForSiteLifecycleServiceAsync (Guid id, SiteValidationParameter siteValidationParameter = null);

        /// <summary>
        /// validate permissions, scope for site lifecycle service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>Task of ApiResponse (SiteLifecycleValidateResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SiteLifecycleValidateResult>> ValidateForSiteLifecycleServiceAsyncWithHttpInfo (Guid id, SiteValidationParameter siteValidationParameter = null);
        /// <summary>
        /// validate permissions, scope for web lifecycle service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>Task of WebLifecycleValidateResult</returns>
        System.Threading.Tasks.Task<WebLifecycleValidateResult> ValidateForWebLifecycleServiceAsync (Guid id, SiteValidationParameter siteValidationParameter = null);

        /// <summary>
        /// validate permissions, scope for web lifecycle service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>Task of ApiResponse (WebLifecycleValidateResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebLifecycleValidateResult>> ValidateForWebLifecycleServiceAsyncWithHttpInfo (Guid id, SiteValidationParameter siteValidationParameter = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IServicesApi : IServicesApiSync, IServicesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ServicesApi : IServicesApi
    {
        private Cloud.Governance.NewSdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ServicesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ServicesApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServicesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ServicesApi(String basePath)
        {
            this.Configuration = Cloud.Governance.NewSdk.Client.Configuration.MergeConfigurations(
                Cloud.Governance.NewSdk.Client.GlobalConfiguration.Instance,
                new Cloud.Governance.NewSdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Cloud.Governance.NewSdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Cloud.Governance.NewSdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Cloud.Governance.NewSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServicesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ServicesApi(Cloud.Governance.NewSdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Cloud.Governance.NewSdk.Client.Configuration.MergeConfigurations(
                Cloud.Governance.NewSdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Cloud.Governance.NewSdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Cloud.Governance.NewSdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Cloud.Governance.NewSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServicesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ServicesApi(Cloud.Governance.NewSdk.Client.ISynchronousClient client,Cloud.Governance.NewSdk.Client.IAsynchronousClient asyncClient, Cloud.Governance.NewSdk.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Cloud.Governance.NewSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Cloud.Governance.NewSdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Cloud.Governance.NewSdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Cloud.Governance.NewSdk.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Cloud.Governance.NewSdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add create site service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSiteService"> (optional)</param>
        /// <returns>Guid</returns>
        public Guid AddCreateListService (CreateSiteService createSiteService = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = AddCreateListServiceWithHttpInfo(createSiteService);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add create site service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSiteService"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< Guid > AddCreateListServiceWithHttpInfo (CreateSiteService createSiteService = null)
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = createSiteService;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post< Guid >("/services/createsite", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("AddCreateListService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Add create site service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSiteService"> (optional)</param>
        /// <returns>Task of Guid</returns>
        public async System.Threading.Tasks.Task<Guid> AddCreateListServiceAsync (CreateSiteService createSiteService = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = await AddCreateListServiceAsyncWithHttpInfo(createSiteService);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add create site service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSiteService"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Guid>> AddCreateListServiceAsyncWithHttpInfo (CreateSiteService createSiteService = null)
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = createSiteService;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Guid>("/services/createsite", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("AddCreateListService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebService"> (optional)</param>
        /// <returns>Guid</returns>
        public Guid AddCreateWebService (CreateWebService createWebService = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = AddCreateWebServiceWithHttpInfo(createWebService);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebService"> (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< Guid > AddCreateWebServiceWithHttpInfo (CreateWebService createWebService = null)
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = createWebService;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post< Guid >("/services/createweb", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("AddCreateWebService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebService"> (optional)</param>
        /// <returns>Task of Guid</returns>
        public async System.Threading.Tasks.Task<Guid> AddCreateWebServiceAsync (CreateWebService createWebService = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<Guid> localVarResponse = await AddCreateWebServiceAsyncWithHttpInfo(createWebService);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebService"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Guid>> AddCreateWebServiceAsyncWithHttpInfo (CreateWebService createWebService = null)
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = createWebService;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Guid>("/services/createweb", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("AddCreateWebService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get change group setting service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ChangeGroupSettingService</returns>
        public ChangeGroupSettingService GetChangeGroupSettingService (Guid id, Guid? questionnaireId = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ChangeGroupSettingService> localVarResponse = GetChangeGroupSettingServiceWithHttpInfo(id, questionnaireId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get change group setting service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ApiResponse of ChangeGroupSettingService</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< ChangeGroupSettingService > GetChangeGroupSettingServiceWithHttpInfo (Guid id, Guid? questionnaireId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->GetChangeGroupSettingService");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (questionnaireId != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "questionnaireId", questionnaireId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< ChangeGroupSettingService >("/services/changegroupsetting/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChangeGroupSettingService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get change group setting service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ChangeGroupSettingService</returns>
        public async System.Threading.Tasks.Task<ChangeGroupSettingService> GetChangeGroupSettingServiceAsync (Guid id, Guid? questionnaireId = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ChangeGroupSettingService> localVarResponse = await GetChangeGroupSettingServiceAsyncWithHttpInfo(id, questionnaireId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get change group setting service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ApiResponse (ChangeGroupSettingService)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<ChangeGroupSettingService>> GetChangeGroupSettingServiceAsyncWithHttpInfo (Guid id, Guid? questionnaireId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->GetChangeGroupSettingService");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (questionnaireId != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "questionnaireId", questionnaireId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ChangeGroupSettingService>("/services/changegroupsetting/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChangeGroupSettingService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get change list setting service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ChangeListSettingService</returns>
        public ChangeListSettingService GetChangeListSettingService (Guid id, Guid? questionnaireId = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ChangeListSettingService> localVarResponse = GetChangeListSettingServiceWithHttpInfo(id, questionnaireId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get change list setting service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ApiResponse of ChangeListSettingService</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< ChangeListSettingService > GetChangeListSettingServiceWithHttpInfo (Guid id, Guid? questionnaireId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->GetChangeListSettingService");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (questionnaireId != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "questionnaireId", questionnaireId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< ChangeListSettingService >("/services/changelistsetting/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChangeListSettingService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get change list setting service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ChangeListSettingService</returns>
        public async System.Threading.Tasks.Task<ChangeListSettingService> GetChangeListSettingServiceAsync (Guid id, Guid? questionnaireId = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ChangeListSettingService> localVarResponse = await GetChangeListSettingServiceAsyncWithHttpInfo(id, questionnaireId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get change list setting service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ApiResponse (ChangeListSettingService)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<ChangeListSettingService>> GetChangeListSettingServiceAsyncWithHttpInfo (Guid id, Guid? questionnaireId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->GetChangeListSettingService");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (questionnaireId != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "questionnaireId", questionnaireId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ChangeListSettingService>("/services/changelistsetting/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChangeListSettingService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get change permission service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ChangePermissionService</returns>
        public ChangePermissionService GetChangePermissionService (Guid id, Guid? questionnaireId = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ChangePermissionService> localVarResponse = GetChangePermissionServiceWithHttpInfo(id, questionnaireId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get change permission service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ApiResponse of ChangePermissionService</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< ChangePermissionService > GetChangePermissionServiceWithHttpInfo (Guid id, Guid? questionnaireId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->GetChangePermissionService");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (questionnaireId != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "questionnaireId", questionnaireId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< ChangePermissionService >("/services/changepermission/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChangePermissionService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get change permission service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ChangePermissionService</returns>
        public async System.Threading.Tasks.Task<ChangePermissionService> GetChangePermissionServiceAsync (Guid id, Guid? questionnaireId = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ChangePermissionService> localVarResponse = await GetChangePermissionServiceAsyncWithHttpInfo(id, questionnaireId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get change permission service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ApiResponse (ChangePermissionService)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<ChangePermissionService>> GetChangePermissionServiceAsyncWithHttpInfo (Guid id, Guid? questionnaireId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->GetChangePermissionService");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (questionnaireId != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "questionnaireId", questionnaireId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ChangePermissionService>("/services/changepermission/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChangePermissionService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get change site contact service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ChangeSiteContactService</returns>
        public ChangeSiteContactService GetChangeSiteContactService (Guid id, Guid? questionnaireId = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ChangeSiteContactService> localVarResponse = GetChangeSiteContactServiceWithHttpInfo(id, questionnaireId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get change site contact service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ApiResponse of ChangeSiteContactService</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< ChangeSiteContactService > GetChangeSiteContactServiceWithHttpInfo (Guid id, Guid? questionnaireId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->GetChangeSiteContactService");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (questionnaireId != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "questionnaireId", questionnaireId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< ChangeSiteContactService >("/services/changesitecontact/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChangeSiteContactService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get change site contact service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ChangeSiteContactService</returns>
        public async System.Threading.Tasks.Task<ChangeSiteContactService> GetChangeSiteContactServiceAsync (Guid id, Guid? questionnaireId = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ChangeSiteContactService> localVarResponse = await GetChangeSiteContactServiceAsyncWithHttpInfo(id, questionnaireId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get change site contact service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ApiResponse (ChangeSiteContactService)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<ChangeSiteContactService>> GetChangeSiteContactServiceAsyncWithHttpInfo (Guid id, Guid? questionnaireId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->GetChangeSiteContactService");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (questionnaireId != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "questionnaireId", questionnaireId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ChangeSiteContactService>("/services/changesitecontact/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChangeSiteContactService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get change site setting service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ChangeSiteSettingService</returns>
        public ChangeSiteSettingService GetChangeSiteSettingService (Guid id, Guid? questionnaireId = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ChangeSiteSettingService> localVarResponse = GetChangeSiteSettingServiceWithHttpInfo(id, questionnaireId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get change site setting service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ApiResponse of ChangeSiteSettingService</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< ChangeSiteSettingService > GetChangeSiteSettingServiceWithHttpInfo (Guid id, Guid? questionnaireId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->GetChangeSiteSettingService");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (questionnaireId != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "questionnaireId", questionnaireId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< ChangeSiteSettingService >("/services/changesitesetting/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChangeSiteSettingService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get change site setting service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ChangeSiteSettingService</returns>
        public async System.Threading.Tasks.Task<ChangeSiteSettingService> GetChangeSiteSettingServiceAsync (Guid id, Guid? questionnaireId = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ChangeSiteSettingService> localVarResponse = await GetChangeSiteSettingServiceAsyncWithHttpInfo(id, questionnaireId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get change site setting service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ApiResponse (ChangeSiteSettingService)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<ChangeSiteSettingService>> GetChangeSiteSettingServiceAsyncWithHttpInfo (Guid id, Guid? questionnaireId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->GetChangeSiteSettingService");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (questionnaireId != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "questionnaireId", questionnaireId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ChangeSiteSettingService>("/services/changesitesetting/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChangeSiteSettingService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// validate permissions, scope for change web contact service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ChangeWebContactService</returns>
        public ChangeWebContactService GetChangeWebContactService (Guid id, Guid? questionnaireId = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ChangeWebContactService> localVarResponse = GetChangeWebContactServiceWithHttpInfo(id, questionnaireId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// validate permissions, scope for change web contact service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ApiResponse of ChangeWebContactService</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< ChangeWebContactService > GetChangeWebContactServiceWithHttpInfo (Guid id, Guid? questionnaireId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->GetChangeWebContactService");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (questionnaireId != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "questionnaireId", questionnaireId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< ChangeWebContactService >("/services/changewebcontact/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChangeWebContactService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// validate permissions, scope for change web contact service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ChangeWebContactService</returns>
        public async System.Threading.Tasks.Task<ChangeWebContactService> GetChangeWebContactServiceAsync (Guid id, Guid? questionnaireId = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ChangeWebContactService> localVarResponse = await GetChangeWebContactServiceAsyncWithHttpInfo(id, questionnaireId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// validate permissions, scope for change web contact service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ApiResponse (ChangeWebContactService)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<ChangeWebContactService>> GetChangeWebContactServiceAsyncWithHttpInfo (Guid id, Guid? questionnaireId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->GetChangeWebContactService");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (questionnaireId != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "questionnaireId", questionnaireId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ChangeWebContactService>("/services/changewebcontact/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChangeWebContactService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get change web setting service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ChangeWebSettingService</returns>
        public ChangeWebSettingService GetChangeWebSettingsService (Guid id, Guid? questionnaireId = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ChangeWebSettingService> localVarResponse = GetChangeWebSettingsServiceWithHttpInfo(id, questionnaireId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get change web setting service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ApiResponse of ChangeWebSettingService</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< ChangeWebSettingService > GetChangeWebSettingsServiceWithHttpInfo (Guid id, Guid? questionnaireId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->GetChangeWebSettingsService");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (questionnaireId != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "questionnaireId", questionnaireId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< ChangeWebSettingService >("/services/changewebsettings/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChangeWebSettingsService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get change web setting service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ChangeWebSettingService</returns>
        public async System.Threading.Tasks.Task<ChangeWebSettingService> GetChangeWebSettingsServiceAsync (Guid id, Guid? questionnaireId = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ChangeWebSettingService> localVarResponse = await GetChangeWebSettingsServiceAsyncWithHttpInfo(id, questionnaireId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get change web setting service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ApiResponse (ChangeWebSettingService)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<ChangeWebSettingService>> GetChangeWebSettingsServiceAsyncWithHttpInfo (Guid id, Guid? questionnaireId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->GetChangeWebSettingsService");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (questionnaireId != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "questionnaireId", questionnaireId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ChangeWebSettingService>("/services/changewebsettings/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetChangeWebSettingsService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get clone permission service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ClonePermissionService</returns>
        public ClonePermissionService GetClonePermissionService (Guid id, Guid? questionnaireId = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ClonePermissionService> localVarResponse = GetClonePermissionServiceWithHttpInfo(id, questionnaireId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get clone permission service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ApiResponse of ClonePermissionService</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< ClonePermissionService > GetClonePermissionServiceWithHttpInfo (Guid id, Guid? questionnaireId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->GetClonePermissionService");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (questionnaireId != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "questionnaireId", questionnaireId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< ClonePermissionService >("/services/clonepermission/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetClonePermissionService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get clone permission service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ClonePermissionService</returns>
        public async System.Threading.Tasks.Task<ClonePermissionService> GetClonePermissionServiceAsync (Guid id, Guid? questionnaireId = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ClonePermissionService> localVarResponse = await GetClonePermissionServiceAsyncWithHttpInfo(id, questionnaireId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get clone permission service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ApiResponse (ClonePermissionService)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<ClonePermissionService>> GetClonePermissionServiceAsyncWithHttpInfo (Guid id, Guid? questionnaireId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->GetClonePermissionService");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (questionnaireId != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "questionnaireId", questionnaireId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ClonePermissionService>("/services/clonepermission/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetClonePermissionService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get content move profiles from cloud management 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ContentMoveProfiles</returns>
        public ContentMoveProfiles GetContentMoveProfiles ()
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ContentMoveProfiles> localVarResponse = GetContentMoveProfilesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// get content move profiles from cloud management 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ContentMoveProfiles</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< ContentMoveProfiles > GetContentMoveProfilesWithHttpInfo ()
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< ContentMoveProfiles >("/services/contentmove/profiles", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetContentMoveProfiles", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get content move profiles from cloud management 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ContentMoveProfiles</returns>
        public async System.Threading.Tasks.Task<ContentMoveProfiles> GetContentMoveProfilesAsync ()
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ContentMoveProfiles> localVarResponse = await GetContentMoveProfilesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// get content move profiles from cloud management 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ContentMoveProfiles)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<ContentMoveProfiles>> GetContentMoveProfilesAsyncWithHttpInfo ()
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ContentMoveProfiles>("/services/contentmove/profiles", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetContentMoveProfiles", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get content move service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ContentMoveService</returns>
        public ContentMoveService GetContentMoveService (Guid id, Guid? questionnaireId = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ContentMoveService> localVarResponse = GetContentMoveServiceWithHttpInfo(id, questionnaireId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get content move service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ApiResponse of ContentMoveService</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< ContentMoveService > GetContentMoveServiceWithHttpInfo (Guid id, Guid? questionnaireId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->GetContentMoveService");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (questionnaireId != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "questionnaireId", questionnaireId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< ContentMoveService >("/services/contentmove/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetContentMoveService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get content move service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ContentMoveService</returns>
        public async System.Threading.Tasks.Task<ContentMoveService> GetContentMoveServiceAsync (Guid id, Guid? questionnaireId = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ContentMoveService> localVarResponse = await GetContentMoveServiceAsyncWithHttpInfo(id, questionnaireId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get content move service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ApiResponse (ContentMoveService)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<ContentMoveService>> GetContentMoveServiceAsyncWithHttpInfo (Guid id, Guid? questionnaireId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->GetContentMoveService");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (questionnaireId != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "questionnaireId", questionnaireId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ContentMoveService>("/services/contentmove/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetContentMoveService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get create group service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>CreateGroupService</returns>
        public CreateGroupService GetCreateGroupService (Guid id, Guid? questionnaireId = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<CreateGroupService> localVarResponse = GetCreateGroupServiceWithHttpInfo(id, questionnaireId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get create group service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ApiResponse of CreateGroupService</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< CreateGroupService > GetCreateGroupServiceWithHttpInfo (Guid id, Guid? questionnaireId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->GetCreateGroupService");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (questionnaireId != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "questionnaireId", questionnaireId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< CreateGroupService >("/services/creategroup/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetCreateGroupService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get create group service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of CreateGroupService</returns>
        public async System.Threading.Tasks.Task<CreateGroupService> GetCreateGroupServiceAsync (Guid id, Guid? questionnaireId = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<CreateGroupService> localVarResponse = await GetCreateGroupServiceAsyncWithHttpInfo(id, questionnaireId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get create group service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ApiResponse (CreateGroupService)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<CreateGroupService>> GetCreateGroupServiceAsyncWithHttpInfo (Guid id, Guid? questionnaireId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->GetCreateGroupService");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (questionnaireId != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "questionnaireId", questionnaireId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<CreateGroupService>("/services/creategroup/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetCreateGroupService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get create list service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>CreateListService</returns>
        public CreateListService GetCreateListService (Guid id, Guid? questionnaireId = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<CreateListService> localVarResponse = GetCreateListServiceWithHttpInfo(id, questionnaireId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get create list service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ApiResponse of CreateListService</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< CreateListService > GetCreateListServiceWithHttpInfo (Guid id, Guid? questionnaireId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->GetCreateListService");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (questionnaireId != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "questionnaireId", questionnaireId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< CreateListService >("/services/createlist/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetCreateListService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get create list service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of CreateListService</returns>
        public async System.Threading.Tasks.Task<CreateListService> GetCreateListServiceAsync (Guid id, Guid? questionnaireId = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<CreateListService> localVarResponse = await GetCreateListServiceAsyncWithHttpInfo(id, questionnaireId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get create list service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ApiResponse (CreateListService)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<CreateListService>> GetCreateListServiceAsyncWithHttpInfo (Guid id, Guid? questionnaireId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->GetCreateListService");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (questionnaireId != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "questionnaireId", questionnaireId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<CreateListService>("/services/createlist/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetCreateListService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get create site service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>CreateSiteService</returns>
        public CreateSiteService GetCreateSiteService (Guid id, Guid? questionnaireId = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<CreateSiteService> localVarResponse = GetCreateSiteServiceWithHttpInfo(id, questionnaireId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get create site service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ApiResponse of CreateSiteService</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< CreateSiteService > GetCreateSiteServiceWithHttpInfo (Guid id, Guid? questionnaireId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->GetCreateSiteService");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (questionnaireId != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "questionnaireId", questionnaireId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< CreateSiteService >("/services/createsite/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetCreateSiteService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get create site service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of CreateSiteService</returns>
        public async System.Threading.Tasks.Task<CreateSiteService> GetCreateSiteServiceAsync (Guid id, Guid? questionnaireId = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<CreateSiteService> localVarResponse = await GetCreateSiteServiceAsyncWithHttpInfo(id, questionnaireId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get create site service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ApiResponse (CreateSiteService)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<CreateSiteService>> GetCreateSiteServiceAsyncWithHttpInfo (Guid id, Guid? questionnaireId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->GetCreateSiteService");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (questionnaireId != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "questionnaireId", questionnaireId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<CreateSiteService>("/services/createsite/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetCreateSiteService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get create web service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>CreateWebService</returns>
        public CreateWebService GetCreateWebService (Guid id, Guid? questionnaireId = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<CreateWebService> localVarResponse = GetCreateWebServiceWithHttpInfo(id, questionnaireId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get create web service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ApiResponse of CreateWebService</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< CreateWebService > GetCreateWebServiceWithHttpInfo (Guid id, Guid? questionnaireId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->GetCreateWebService");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (questionnaireId != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "questionnaireId", questionnaireId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< CreateWebService >("/services/createweb/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetCreateWebService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get create web service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of CreateWebService</returns>
        public async System.Threading.Tasks.Task<CreateWebService> GetCreateWebServiceAsync (Guid id, Guid? questionnaireId = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<CreateWebService> localVarResponse = await GetCreateWebServiceAsyncWithHttpInfo(id, questionnaireId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get create web service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ApiResponse (CreateWebService)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<CreateWebService>> GetCreateWebServiceAsyncWithHttpInfo (Guid id, Guid? questionnaireId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->GetCreateWebService");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (questionnaireId != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "questionnaireId", questionnaireId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<CreateWebService>("/services/createweb/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetCreateWebService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get custom service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ServiceForRequest</returns>
        public ServiceForRequest GetCustomService (Guid id, Guid? questionnaireId = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ServiceForRequest> localVarResponse = GetCustomServiceWithHttpInfo(id, questionnaireId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get custom service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ApiResponse of ServiceForRequest</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< ServiceForRequest > GetCustomServiceWithHttpInfo (Guid id, Guid? questionnaireId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->GetCustomService");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (questionnaireId != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "questionnaireId", questionnaireId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< ServiceForRequest >("/services/custom/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetCustomService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get custom service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ServiceForRequest</returns>
        public async System.Threading.Tasks.Task<ServiceForRequest> GetCustomServiceAsync (Guid id, Guid? questionnaireId = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ServiceForRequest> localVarResponse = await GetCustomServiceAsyncWithHttpInfo(id, questionnaireId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get custom service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ApiResponse (ServiceForRequest)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<ServiceForRequest>> GetCustomServiceAsyncWithHttpInfo (Guid id, Guid? questionnaireId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->GetCustomService");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (questionnaireId != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "questionnaireId", questionnaireId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ServiceForRequest>("/services/custom/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetCustomService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get grant permission service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>GrantPermissionService</returns>
        public GrantPermissionService GetGrantPermissionService (Guid id, Guid? questionnaireId = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<GrantPermissionService> localVarResponse = GetGrantPermissionServiceWithHttpInfo(id, questionnaireId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get grant permission service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ApiResponse of GrantPermissionService</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< GrantPermissionService > GetGrantPermissionServiceWithHttpInfo (Guid id, Guid? questionnaireId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->GetGrantPermissionService");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (questionnaireId != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "questionnaireId", questionnaireId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< GrantPermissionService >("/services/grantpermission/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetGrantPermissionService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get grant permission service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of GrantPermissionService</returns>
        public async System.Threading.Tasks.Task<GrantPermissionService> GetGrantPermissionServiceAsync (Guid id, Guid? questionnaireId = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<GrantPermissionService> localVarResponse = await GetGrantPermissionServiceAsyncWithHttpInfo(id, questionnaireId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get grant permission service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ApiResponse (GrantPermissionService)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<GrantPermissionService>> GetGrantPermissionServiceAsyncWithHttpInfo (Guid id, Guid? questionnaireId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->GetGrantPermissionService");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (questionnaireId != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "questionnaireId", questionnaireId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<GrantPermissionService>("/services/grantpermission/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetGrantPermissionService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get group lifecycle service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>GroupLifecycleService</returns>
        public GroupLifecycleService GetGroupLifecycleService (Guid id, Guid? questionnaireId = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<GroupLifecycleService> localVarResponse = GetGroupLifecycleServiceWithHttpInfo(id, questionnaireId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get group lifecycle service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ApiResponse of GroupLifecycleService</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< GroupLifecycleService > GetGroupLifecycleServiceWithHttpInfo (Guid id, Guid? questionnaireId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->GetGroupLifecycleService");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (questionnaireId != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "questionnaireId", questionnaireId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< GroupLifecycleService >("/services/grouplifecycle/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetGroupLifecycleService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get group lifecycle service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of GroupLifecycleService</returns>
        public async System.Threading.Tasks.Task<GroupLifecycleService> GetGroupLifecycleServiceAsync (Guid id, Guid? questionnaireId = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<GroupLifecycleService> localVarResponse = await GetGroupLifecycleServiceAsyncWithHttpInfo(id, questionnaireId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get group lifecycle service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ApiResponse (GroupLifecycleService)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<GroupLifecycleService>> GetGroupLifecycleServiceAsyncWithHttpInfo (Guid id, Guid? questionnaireId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->GetGroupLifecycleService");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (questionnaireId != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "questionnaireId", questionnaireId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<GroupLifecycleService>("/services/grouplifecycle/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetGroupLifecycleService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get manage permission service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ManagePermissionService</returns>
        public ManagePermissionService GetManagePermissionService (Guid id, Guid? questionnaireId = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ManagePermissionService> localVarResponse = GetManagePermissionServiceWithHttpInfo(id, questionnaireId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get manage permission service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ApiResponse of ManagePermissionService</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< ManagePermissionService > GetManagePermissionServiceWithHttpInfo (Guid id, Guid? questionnaireId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->GetManagePermissionService");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (questionnaireId != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "questionnaireId", questionnaireId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< ManagePermissionService >("/services/managepermission/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetManagePermissionService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get manage permission service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ManagePermissionService</returns>
        public async System.Threading.Tasks.Task<ManagePermissionService> GetManagePermissionServiceAsync (Guid id, Guid? questionnaireId = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ManagePermissionService> localVarResponse = await GetManagePermissionServiceAsyncWithHttpInfo(id, questionnaireId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get manage permission service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ApiResponse (ManagePermissionService)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<ManagePermissionService>> GetManagePermissionServiceAsyncWithHttpInfo (Guid id, Guid? questionnaireId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->GetManagePermissionService");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (questionnaireId != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "questionnaireId", questionnaireId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ManagePermissionService>("/services/managepermission/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetManagePermissionService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get configued quick services that can be used to start a request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ServiceList&gt;</returns>
        public List<ServiceList> GetMyQuickServices ()
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<List<ServiceList>> localVarResponse = GetMyQuickServicesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// get configued quick services that can be used to start a request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ServiceList&gt;</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< List<ServiceList> > GetMyQuickServicesWithHttpInfo ()
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< List<ServiceList> >("/services/my/quick", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetMyQuickServices", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get configued quick services that can be used to start a request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ServiceList&gt;</returns>
        public async System.Threading.Tasks.Task<List<ServiceList>> GetMyQuickServicesAsync ()
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<List<ServiceList>> localVarResponse = await GetMyQuickServicesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// get configued quick services that can be used to start a request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ServiceList&gt;)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<List<ServiceList>>> GetMyQuickServicesAsyncWithHttpInfo ()
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<ServiceList>>("/services/my/quick", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetMyQuickServices", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get services that can be used to start a request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search"> (optional)</param>
        /// <returns>ServiceListPageResult</returns>
        public ServiceListPageResult GetMyServices (string search = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ServiceListPageResult> localVarResponse = GetMyServicesWithHttpInfo(search);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get services that can be used to start a request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search"> (optional)</param>
        /// <returns>ApiResponse of ServiceListPageResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< ServiceListPageResult > GetMyServicesWithHttpInfo (string search = null)
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (search != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "search", search))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< ServiceListPageResult >("/services/my", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetMyServices", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get services that can be used to start a request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search"> (optional)</param>
        /// <returns>Task of ServiceListPageResult</returns>
        public async System.Threading.Tasks.Task<ServiceListPageResult> GetMyServicesAsync (string search = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ServiceListPageResult> localVarResponse = await GetMyServicesAsyncWithHttpInfo(search);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get services that can be used to start a request 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search"> (optional)</param>
        /// <returns>Task of ApiResponse (ServiceListPageResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<ServiceListPageResult>> GetMyServicesAsyncWithHttpInfo (string search = null)
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (search != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "search", search))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ServiceListPageResult>("/services/my", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetMyServices", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get services that can be used to start a request within context 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objecttype"></param>
        /// <param name="objectid"></param>
        /// <param name="search"> (optional)</param>
        /// <returns>List&lt;ServiceList&gt;</returns>
        public List<ServiceList> GetMyServicesWithContext (WorkspaceType objecttype, string objectid, string search = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<List<ServiceList>> localVarResponse = GetMyServicesWithContextWithHttpInfo(objecttype, objectid, search);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get services that can be used to start a request within context 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objecttype"></param>
        /// <param name="objectid"></param>
        /// <param name="search"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ServiceList&gt;</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< List<ServiceList> > GetMyServicesWithContextWithHttpInfo (WorkspaceType objecttype, string objectid, string search = null)
        {
            // verify the required parameter 'objecttype' is set
            if (objecttype == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'objecttype' when calling ServicesApi->GetMyServicesWithContext");

            // verify the required parameter 'objectid' is set
            if (objectid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'objectid' when calling ServicesApi->GetMyServicesWithContext");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (objecttype != null)
                requestOptions.PathParameters.Add("objecttype", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(objecttype)); // path parameter
            if (objectid != null)
                requestOptions.PathParameters.Add("objectid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(objectid)); // path parameter
            if (search != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "search", search))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< List<ServiceList> >("/services/my/workspace/{objecttype}/{objectid}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetMyServicesWithContext", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get services that can be used to start a request within context 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objecttype"></param>
        /// <param name="objectid"></param>
        /// <param name="search"> (optional)</param>
        /// <returns>Task of List&lt;ServiceList&gt;</returns>
        public async System.Threading.Tasks.Task<List<ServiceList>> GetMyServicesWithContextAsync (WorkspaceType objecttype, string objectid, string search = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<List<ServiceList>> localVarResponse = await GetMyServicesWithContextAsyncWithHttpInfo(objecttype, objectid, search);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get services that can be used to start a request within context 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objecttype"></param>
        /// <param name="objectid"></param>
        /// <param name="search"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ServiceList&gt;)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<List<ServiceList>>> GetMyServicesWithContextAsyncWithHttpInfo (WorkspaceType objecttype, string objectid, string search = null)
        {
            // verify the required parameter 'objecttype' is set
            if (objecttype == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'objecttype' when calling ServicesApi->GetMyServicesWithContext");

            // verify the required parameter 'objectid' is set
            if (objectid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'objectid' when calling ServicesApi->GetMyServicesWithContext");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (objecttype != null)
                requestOptions.PathParameters.Add("objecttype", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(objecttype)); // path parameter
            if (objectid != null)
                requestOptions.PathParameters.Add("objectid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(objectid)); // path parameter
            if (search != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "search", search))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<ServiceList>>("/services/my/workspace/{objecttype}/{objectid}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetMyServicesWithContext", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get site lifecycle service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>SiteLifecycleService</returns>
        public SiteLifecycleService GetSiteLifecycleService (Guid id, Guid? questionnaireId = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<SiteLifecycleService> localVarResponse = GetSiteLifecycleServiceWithHttpInfo(id, questionnaireId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get site lifecycle service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ApiResponse of SiteLifecycleService</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< SiteLifecycleService > GetSiteLifecycleServiceWithHttpInfo (Guid id, Guid? questionnaireId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->GetSiteLifecycleService");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (questionnaireId != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "questionnaireId", questionnaireId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< SiteLifecycleService >("/services/sitelifecycle/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetSiteLifecycleService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get site lifecycle service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of SiteLifecycleService</returns>
        public async System.Threading.Tasks.Task<SiteLifecycleService> GetSiteLifecycleServiceAsync (Guid id, Guid? questionnaireId = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<SiteLifecycleService> localVarResponse = await GetSiteLifecycleServiceAsyncWithHttpInfo(id, questionnaireId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get site lifecycle service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ApiResponse (SiteLifecycleService)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<SiteLifecycleService>> GetSiteLifecycleServiceAsyncWithHttpInfo (Guid id, Guid? questionnaireId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->GetSiteLifecycleService");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (questionnaireId != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "questionnaireId", questionnaireId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<SiteLifecycleService>("/services/sitelifecycle/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetSiteLifecycleService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get web lifecycle service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>WebLifecycleService</returns>
        public WebLifecycleService GetWebLifecycleService (Guid id, Guid? questionnaireId = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<WebLifecycleService> localVarResponse = GetWebLifecycleServiceWithHttpInfo(id, questionnaireId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get web lifecycle service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>ApiResponse of WebLifecycleService</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< WebLifecycleService > GetWebLifecycleServiceWithHttpInfo (Guid id, Guid? questionnaireId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->GetWebLifecycleService");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (questionnaireId != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "questionnaireId", questionnaireId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< WebLifecycleService >("/services/weblifecycle/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetWebLifecycleService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get web lifecycle service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of WebLifecycleService</returns>
        public async System.Threading.Tasks.Task<WebLifecycleService> GetWebLifecycleServiceAsync (Guid id, Guid? questionnaireId = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<WebLifecycleService> localVarResponse = await GetWebLifecycleServiceAsyncWithHttpInfo(id, questionnaireId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get web lifecycle service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="questionnaireId"> (optional)</param>
        /// <returns>Task of ApiResponse (WebLifecycleService)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<WebLifecycleService>> GetWebLifecycleServiceAsyncWithHttpInfo (Guid id, Guid? questionnaireId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->GetWebLifecycleService");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (questionnaireId != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "questionnaireId", questionnaireId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<WebLifecycleService>("/services/weblifecycle/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetWebLifecycleService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// validate permissions, scope for change group setting service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupValidationParameter"> (optional)</param>
        /// <returns>ChangeGroupSettingCheckResult</returns>
        public ChangeGroupSettingCheckResult ValidateForChangeGroupSettingService (Guid id, GroupValidationParameter groupValidationParameter = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ChangeGroupSettingCheckResult> localVarResponse = ValidateForChangeGroupSettingServiceWithHttpInfo(id, groupValidationParameter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// validate permissions, scope for change group setting service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupValidationParameter"> (optional)</param>
        /// <returns>ApiResponse of ChangeGroupSettingCheckResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< ChangeGroupSettingCheckResult > ValidateForChangeGroupSettingServiceWithHttpInfo (Guid id, GroupValidationParameter groupValidationParameter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->ValidateForChangeGroupSettingService");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = groupValidationParameter;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post< ChangeGroupSettingCheckResult >("/services/changegroupsetting/{id}/group/validation", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ValidateForChangeGroupSettingService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// validate permissions, scope for change group setting service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupValidationParameter"> (optional)</param>
        /// <returns>Task of ChangeGroupSettingCheckResult</returns>
        public async System.Threading.Tasks.Task<ChangeGroupSettingCheckResult> ValidateForChangeGroupSettingServiceAsync (Guid id, GroupValidationParameter groupValidationParameter = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ChangeGroupSettingCheckResult> localVarResponse = await ValidateForChangeGroupSettingServiceAsyncWithHttpInfo(id, groupValidationParameter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// validate permissions, scope for change group setting service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupValidationParameter"> (optional)</param>
        /// <returns>Task of ApiResponse (ChangeGroupSettingCheckResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<ChangeGroupSettingCheckResult>> ValidateForChangeGroupSettingServiceAsyncWithHttpInfo (Guid id, GroupValidationParameter groupValidationParameter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->ValidateForChangeGroupSettingService");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = groupValidationParameter;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<ChangeGroupSettingCheckResult>("/services/changegroupsetting/{id}/group/validation", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ValidateForChangeGroupSettingService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// validate permissions, scope for change list setting service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>ChangeListSettingValidateResult</returns>
        public ChangeListSettingValidateResult ValidateForChangeListSettingService (Guid id, SiteValidationParameter siteValidationParameter = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ChangeListSettingValidateResult> localVarResponse = ValidateForChangeListSettingServiceWithHttpInfo(id, siteValidationParameter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// validate permissions, scope for change list setting service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>ApiResponse of ChangeListSettingValidateResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< ChangeListSettingValidateResult > ValidateForChangeListSettingServiceWithHttpInfo (Guid id, SiteValidationParameter siteValidationParameter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->ValidateForChangeListSettingService");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = siteValidationParameter;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post< ChangeListSettingValidateResult >("/services/changelistsetting/{id}/url/validation", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ValidateForChangeListSettingService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// validate permissions, scope for change list setting service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>Task of ChangeListSettingValidateResult</returns>
        public async System.Threading.Tasks.Task<ChangeListSettingValidateResult> ValidateForChangeListSettingServiceAsync (Guid id, SiteValidationParameter siteValidationParameter = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ChangeListSettingValidateResult> localVarResponse = await ValidateForChangeListSettingServiceAsyncWithHttpInfo(id, siteValidationParameter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// validate permissions, scope for change list setting service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>Task of ApiResponse (ChangeListSettingValidateResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<ChangeListSettingValidateResult>> ValidateForChangeListSettingServiceAsyncWithHttpInfo (Guid id, SiteValidationParameter siteValidationParameter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->ValidateForChangeListSettingService");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = siteValidationParameter;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<ChangeListSettingValidateResult>("/services/changelistsetting/{id}/url/validation", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ValidateForChangeListSettingService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// validate permissions, scope for change permission service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>ChangePermissionValidateResult</returns>
        public ChangePermissionValidateResult ValidateForChangePermissionService (Guid id, SiteValidationParameter siteValidationParameter = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ChangePermissionValidateResult> localVarResponse = ValidateForChangePermissionServiceWithHttpInfo(id, siteValidationParameter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// validate permissions, scope for change permission service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>ApiResponse of ChangePermissionValidateResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< ChangePermissionValidateResult > ValidateForChangePermissionServiceWithHttpInfo (Guid id, SiteValidationParameter siteValidationParameter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->ValidateForChangePermissionService");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = siteValidationParameter;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post< ChangePermissionValidateResult >("/services/changepermission/{id}/url/validation", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ValidateForChangePermissionService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// validate permissions, scope for change permission service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>Task of ChangePermissionValidateResult</returns>
        public async System.Threading.Tasks.Task<ChangePermissionValidateResult> ValidateForChangePermissionServiceAsync (Guid id, SiteValidationParameter siteValidationParameter = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ChangePermissionValidateResult> localVarResponse = await ValidateForChangePermissionServiceAsyncWithHttpInfo(id, siteValidationParameter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// validate permissions, scope for change permission service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>Task of ApiResponse (ChangePermissionValidateResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<ChangePermissionValidateResult>> ValidateForChangePermissionServiceAsyncWithHttpInfo (Guid id, SiteValidationParameter siteValidationParameter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->ValidateForChangePermissionService");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = siteValidationParameter;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<ChangePermissionValidateResult>("/services/changepermission/{id}/url/validation", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ValidateForChangePermissionService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// validate permissions, scope for change site contact service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>ChangeSiteContactValidateResult</returns>
        public ChangeSiteContactValidateResult ValidateForChangeSiteContactService (Guid id, SiteValidationParameter siteValidationParameter = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ChangeSiteContactValidateResult> localVarResponse = ValidateForChangeSiteContactServiceWithHttpInfo(id, siteValidationParameter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// validate permissions, scope for change site contact service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>ApiResponse of ChangeSiteContactValidateResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< ChangeSiteContactValidateResult > ValidateForChangeSiteContactServiceWithHttpInfo (Guid id, SiteValidationParameter siteValidationParameter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->ValidateForChangeSiteContactService");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = siteValidationParameter;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post< ChangeSiteContactValidateResult >("/services/changesitecontact/{id}/url/validation", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ValidateForChangeSiteContactService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// validate permissions, scope for change site contact service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>Task of ChangeSiteContactValidateResult</returns>
        public async System.Threading.Tasks.Task<ChangeSiteContactValidateResult> ValidateForChangeSiteContactServiceAsync (Guid id, SiteValidationParameter siteValidationParameter = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ChangeSiteContactValidateResult> localVarResponse = await ValidateForChangeSiteContactServiceAsyncWithHttpInfo(id, siteValidationParameter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// validate permissions, scope for change site contact service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>Task of ApiResponse (ChangeSiteContactValidateResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<ChangeSiteContactValidateResult>> ValidateForChangeSiteContactServiceAsyncWithHttpInfo (Guid id, SiteValidationParameter siteValidationParameter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->ValidateForChangeSiteContactService");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = siteValidationParameter;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<ChangeSiteContactValidateResult>("/services/changesitecontact/{id}/url/validation", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ValidateForChangeSiteContactService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// validate permissions, scope for change site setting service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>ChangeSiteSettingValidateResult</returns>
        public ChangeSiteSettingValidateResult ValidateForChangeSiteSettingService (Guid id, SiteValidationParameter siteValidationParameter = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ChangeSiteSettingValidateResult> localVarResponse = ValidateForChangeSiteSettingServiceWithHttpInfo(id, siteValidationParameter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// validate permissions, scope for change site setting service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>ApiResponse of ChangeSiteSettingValidateResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< ChangeSiteSettingValidateResult > ValidateForChangeSiteSettingServiceWithHttpInfo (Guid id, SiteValidationParameter siteValidationParameter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->ValidateForChangeSiteSettingService");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = siteValidationParameter;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post< ChangeSiteSettingValidateResult >("/services/changesitesetting/{id}/url/validation", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ValidateForChangeSiteSettingService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// validate permissions, scope for change site setting service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>Task of ChangeSiteSettingValidateResult</returns>
        public async System.Threading.Tasks.Task<ChangeSiteSettingValidateResult> ValidateForChangeSiteSettingServiceAsync (Guid id, SiteValidationParameter siteValidationParameter = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ChangeSiteSettingValidateResult> localVarResponse = await ValidateForChangeSiteSettingServiceAsyncWithHttpInfo(id, siteValidationParameter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// validate permissions, scope for change site setting service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>Task of ApiResponse (ChangeSiteSettingValidateResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<ChangeSiteSettingValidateResult>> ValidateForChangeSiteSettingServiceAsyncWithHttpInfo (Guid id, SiteValidationParameter siteValidationParameter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->ValidateForChangeSiteSettingService");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = siteValidationParameter;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<ChangeSiteSettingValidateResult>("/services/changesitesetting/{id}/url/validation", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ValidateForChangeSiteSettingService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// validate permissions, scope for change web contact service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>ChangeWebContactValidateResult</returns>
        public ChangeWebContactValidateResult ValidateForChangeWebContactService (Guid id, SiteValidationParameter siteValidationParameter = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ChangeWebContactValidateResult> localVarResponse = ValidateForChangeWebContactServiceWithHttpInfo(id, siteValidationParameter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// validate permissions, scope for change web contact service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>ApiResponse of ChangeWebContactValidateResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< ChangeWebContactValidateResult > ValidateForChangeWebContactServiceWithHttpInfo (Guid id, SiteValidationParameter siteValidationParameter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->ValidateForChangeWebContactService");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = siteValidationParameter;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post< ChangeWebContactValidateResult >("/services/changewebcontact/{id}/url/validation", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ValidateForChangeWebContactService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// validate permissions, scope for change web contact service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>Task of ChangeWebContactValidateResult</returns>
        public async System.Threading.Tasks.Task<ChangeWebContactValidateResult> ValidateForChangeWebContactServiceAsync (Guid id, SiteValidationParameter siteValidationParameter = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ChangeWebContactValidateResult> localVarResponse = await ValidateForChangeWebContactServiceAsyncWithHttpInfo(id, siteValidationParameter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// validate permissions, scope for change web contact service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>Task of ApiResponse (ChangeWebContactValidateResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<ChangeWebContactValidateResult>> ValidateForChangeWebContactServiceAsyncWithHttpInfo (Guid id, SiteValidationParameter siteValidationParameter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->ValidateForChangeWebContactService");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = siteValidationParameter;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<ChangeWebContactValidateResult>("/services/changewebcontact/{id}/url/validation", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ValidateForChangeWebContactService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// validate permissions, scope for change web setting service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>ChangeWebUrlValidateResult</returns>
        public ChangeWebUrlValidateResult ValidateForChangeWebSettingService (Guid id, SiteValidationParameter siteValidationParameter = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ChangeWebUrlValidateResult> localVarResponse = ValidateForChangeWebSettingServiceWithHttpInfo(id, siteValidationParameter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// validate permissions, scope for change web setting service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>ApiResponse of ChangeWebUrlValidateResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< ChangeWebUrlValidateResult > ValidateForChangeWebSettingServiceWithHttpInfo (Guid id, SiteValidationParameter siteValidationParameter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->ValidateForChangeWebSettingService");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = siteValidationParameter;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post< ChangeWebUrlValidateResult >("/services/changewebsettings/{id}/url/validation", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ValidateForChangeWebSettingService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// validate permissions, scope for change web setting service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>Task of ChangeWebUrlValidateResult</returns>
        public async System.Threading.Tasks.Task<ChangeWebUrlValidateResult> ValidateForChangeWebSettingServiceAsync (Guid id, SiteValidationParameter siteValidationParameter = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ChangeWebUrlValidateResult> localVarResponse = await ValidateForChangeWebSettingServiceAsyncWithHttpInfo(id, siteValidationParameter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// validate permissions, scope for change web setting service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>Task of ApiResponse (ChangeWebUrlValidateResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<ChangeWebUrlValidateResult>> ValidateForChangeWebSettingServiceAsyncWithHttpInfo (Guid id, SiteValidationParameter siteValidationParameter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->ValidateForChangeWebSettingService");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = siteValidationParameter;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<ChangeWebUrlValidateResult>("/services/changewebsettings/{id}/url/validation", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ValidateForChangeWebSettingService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// validate permissions, scope for clone permission service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>ClonePermissionValidateResult</returns>
        public ClonePermissionValidateResult ValidateForClonePermissionService (Guid id, SiteValidationParameter siteValidationParameter = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ClonePermissionValidateResult> localVarResponse = ValidateForClonePermissionServiceWithHttpInfo(id, siteValidationParameter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// validate permissions, scope for clone permission service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>ApiResponse of ClonePermissionValidateResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< ClonePermissionValidateResult > ValidateForClonePermissionServiceWithHttpInfo (Guid id, SiteValidationParameter siteValidationParameter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->ValidateForClonePermissionService");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = siteValidationParameter;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post< ClonePermissionValidateResult >("/services/clonepermission/{id}/url/validation", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ValidateForClonePermissionService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// validate permissions, scope for clone permission service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>Task of ClonePermissionValidateResult</returns>
        public async System.Threading.Tasks.Task<ClonePermissionValidateResult> ValidateForClonePermissionServiceAsync (Guid id, SiteValidationParameter siteValidationParameter = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ClonePermissionValidateResult> localVarResponse = await ValidateForClonePermissionServiceAsyncWithHttpInfo(id, siteValidationParameter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// validate permissions, scope for clone permission service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>Task of ApiResponse (ClonePermissionValidateResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<ClonePermissionValidateResult>> ValidateForClonePermissionServiceAsyncWithHttpInfo (Guid id, SiteValidationParameter siteValidationParameter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->ValidateForClonePermissionService");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = siteValidationParameter;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<ClonePermissionValidateResult>("/services/clonepermission/{id}/url/validation", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ValidateForClonePermissionService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// validate permissions, scope for content move service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>ContentMoveUrlValidationResult</returns>
        public ContentMoveUrlValidationResult ValidateForContentMoveService (Guid id, SiteValidationParameter siteValidationParameter = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ContentMoveUrlValidationResult> localVarResponse = ValidateForContentMoveServiceWithHttpInfo(id, siteValidationParameter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// validate permissions, scope for content move service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>ApiResponse of ContentMoveUrlValidationResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< ContentMoveUrlValidationResult > ValidateForContentMoveServiceWithHttpInfo (Guid id, SiteValidationParameter siteValidationParameter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->ValidateForContentMoveService");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = siteValidationParameter;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post< ContentMoveUrlValidationResult >("/services/contentmove/{id}/url/validation", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ValidateForContentMoveService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// validate permissions, scope for content move service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>Task of ContentMoveUrlValidationResult</returns>
        public async System.Threading.Tasks.Task<ContentMoveUrlValidationResult> ValidateForContentMoveServiceAsync (Guid id, SiteValidationParameter siteValidationParameter = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ContentMoveUrlValidationResult> localVarResponse = await ValidateForContentMoveServiceAsyncWithHttpInfo(id, siteValidationParameter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// validate permissions, scope for content move service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>Task of ApiResponse (ContentMoveUrlValidationResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<ContentMoveUrlValidationResult>> ValidateForContentMoveServiceAsyncWithHttpInfo (Guid id, SiteValidationParameter siteValidationParameter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->ValidateForContentMoveService");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = siteValidationParameter;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<ContentMoveUrlValidationResult>("/services/contentmove/{id}/url/validation", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ValidateForContentMoveService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// validate permissions, scope for create list service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="listValidationParameter"> (optional)</param>
        /// <returns>CreateListUrlValidationResult</returns>
        public CreateListUrlValidationResult ValidateForCreateListService (Guid id, ListValidationParameter listValidationParameter = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<CreateListUrlValidationResult> localVarResponse = ValidateForCreateListServiceWithHttpInfo(id, listValidationParameter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// validate permissions, scope for create list service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="listValidationParameter"> (optional)</param>
        /// <returns>ApiResponse of CreateListUrlValidationResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< CreateListUrlValidationResult > ValidateForCreateListServiceWithHttpInfo (Guid id, ListValidationParameter listValidationParameter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->ValidateForCreateListService");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = listValidationParameter;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post< CreateListUrlValidationResult >("/services/createlist/{id}/url/validation", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ValidateForCreateListService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// validate permissions, scope for create list service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="listValidationParameter"> (optional)</param>
        /// <returns>Task of CreateListUrlValidationResult</returns>
        public async System.Threading.Tasks.Task<CreateListUrlValidationResult> ValidateForCreateListServiceAsync (Guid id, ListValidationParameter listValidationParameter = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<CreateListUrlValidationResult> localVarResponse = await ValidateForCreateListServiceAsyncWithHttpInfo(id, listValidationParameter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// validate permissions, scope for create list service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="listValidationParameter"> (optional)</param>
        /// <returns>Task of ApiResponse (CreateListUrlValidationResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<CreateListUrlValidationResult>> ValidateForCreateListServiceAsyncWithHttpInfo (Guid id, ListValidationParameter listValidationParameter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->ValidateForCreateListService");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = listValidationParameter;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<CreateListUrlValidationResult>("/services/createlist/{id}/url/validation", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ValidateForCreateListService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// validate permissions, scope for create web service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createWebValidationParameter"> (optional)</param>
        /// <returns>CreateWebUrlValidationResult</returns>
        public CreateWebUrlValidationResult ValidateForCreateWebService (Guid id, CreateWebValidationParameter createWebValidationParameter = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<CreateWebUrlValidationResult> localVarResponse = ValidateForCreateWebServiceWithHttpInfo(id, createWebValidationParameter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// validate permissions, scope for create web service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createWebValidationParameter"> (optional)</param>
        /// <returns>ApiResponse of CreateWebUrlValidationResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< CreateWebUrlValidationResult > ValidateForCreateWebServiceWithHttpInfo (Guid id, CreateWebValidationParameter createWebValidationParameter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->ValidateForCreateWebService");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = createWebValidationParameter;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post< CreateWebUrlValidationResult >("/services/createweb/{id}/url/validation", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ValidateForCreateWebService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// validate permissions, scope for create web service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createWebValidationParameter"> (optional)</param>
        /// <returns>Task of CreateWebUrlValidationResult</returns>
        public async System.Threading.Tasks.Task<CreateWebUrlValidationResult> ValidateForCreateWebServiceAsync (Guid id, CreateWebValidationParameter createWebValidationParameter = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<CreateWebUrlValidationResult> localVarResponse = await ValidateForCreateWebServiceAsyncWithHttpInfo(id, createWebValidationParameter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// validate permissions, scope for create web service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createWebValidationParameter"> (optional)</param>
        /// <returns>Task of ApiResponse (CreateWebUrlValidationResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<CreateWebUrlValidationResult>> ValidateForCreateWebServiceAsyncWithHttpInfo (Guid id, CreateWebValidationParameter createWebValidationParameter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->ValidateForCreateWebService");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = createWebValidationParameter;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<CreateWebUrlValidationResult>("/services/createweb/{id}/url/validation", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ValidateForCreateWebService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// validate permissions, scope for grant permission service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>GrantPermissionUrlValidationResult</returns>
        public GrantPermissionUrlValidationResult ValidateForGrantPermissionService (Guid id, SiteValidationParameter siteValidationParameter = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<GrantPermissionUrlValidationResult> localVarResponse = ValidateForGrantPermissionServiceWithHttpInfo(id, siteValidationParameter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// validate permissions, scope for grant permission service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>ApiResponse of GrantPermissionUrlValidationResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< GrantPermissionUrlValidationResult > ValidateForGrantPermissionServiceWithHttpInfo (Guid id, SiteValidationParameter siteValidationParameter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->ValidateForGrantPermissionService");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = siteValidationParameter;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post< GrantPermissionUrlValidationResult >("/services/grantpermission/{id}/url/validation", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ValidateForGrantPermissionService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// validate permissions, scope for grant permission service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>Task of GrantPermissionUrlValidationResult</returns>
        public async System.Threading.Tasks.Task<GrantPermissionUrlValidationResult> ValidateForGrantPermissionServiceAsync (Guid id, SiteValidationParameter siteValidationParameter = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<GrantPermissionUrlValidationResult> localVarResponse = await ValidateForGrantPermissionServiceAsyncWithHttpInfo(id, siteValidationParameter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// validate permissions, scope for grant permission service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>Task of ApiResponse (GrantPermissionUrlValidationResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<GrantPermissionUrlValidationResult>> ValidateForGrantPermissionServiceAsyncWithHttpInfo (Guid id, SiteValidationParameter siteValidationParameter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->ValidateForGrantPermissionService");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = siteValidationParameter;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<GrantPermissionUrlValidationResult>("/services/grantpermission/{id}/url/validation", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ValidateForGrantPermissionService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// validate permissions, scope for group lifecycle service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupValidationParameter"> (optional)</param>
        /// <returns>GroupLifecycleValidateResult</returns>
        public GroupLifecycleValidateResult ValidateForGroupLifecycleService (Guid id, GroupValidationParameter groupValidationParameter = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<GroupLifecycleValidateResult> localVarResponse = ValidateForGroupLifecycleServiceWithHttpInfo(id, groupValidationParameter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// validate permissions, scope for group lifecycle service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupValidationParameter"> (optional)</param>
        /// <returns>ApiResponse of GroupLifecycleValidateResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< GroupLifecycleValidateResult > ValidateForGroupLifecycleServiceWithHttpInfo (Guid id, GroupValidationParameter groupValidationParameter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->ValidateForGroupLifecycleService");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = groupValidationParameter;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post< GroupLifecycleValidateResult >("/services/grouplifecycle/{id}/group/validation", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ValidateForGroupLifecycleService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// validate permissions, scope for group lifecycle service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupValidationParameter"> (optional)</param>
        /// <returns>Task of GroupLifecycleValidateResult</returns>
        public async System.Threading.Tasks.Task<GroupLifecycleValidateResult> ValidateForGroupLifecycleServiceAsync (Guid id, GroupValidationParameter groupValidationParameter = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<GroupLifecycleValidateResult> localVarResponse = await ValidateForGroupLifecycleServiceAsyncWithHttpInfo(id, groupValidationParameter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// validate permissions, scope for group lifecycle service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="groupValidationParameter"> (optional)</param>
        /// <returns>Task of ApiResponse (GroupLifecycleValidateResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<GroupLifecycleValidateResult>> ValidateForGroupLifecycleServiceAsyncWithHttpInfo (Guid id, GroupValidationParameter groupValidationParameter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->ValidateForGroupLifecycleService");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = groupValidationParameter;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<GroupLifecycleValidateResult>("/services/grouplifecycle/{id}/group/validation", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ValidateForGroupLifecycleService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// validate permissions, scope for manage permission service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>ManagePermissionValidateResult</returns>
        public ManagePermissionValidateResult ValidateForManagePermissionService (Guid id, SiteValidationParameter siteValidationParameter = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ManagePermissionValidateResult> localVarResponse = ValidateForManagePermissionServiceWithHttpInfo(id, siteValidationParameter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// validate permissions, scope for manage permission service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>ApiResponse of ManagePermissionValidateResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< ManagePermissionValidateResult > ValidateForManagePermissionServiceWithHttpInfo (Guid id, SiteValidationParameter siteValidationParameter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->ValidateForManagePermissionService");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = siteValidationParameter;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post< ManagePermissionValidateResult >("/services/managepermission/{id}/url/validation", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ValidateForManagePermissionService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// validate permissions, scope for manage permission service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>Task of ManagePermissionValidateResult</returns>
        public async System.Threading.Tasks.Task<ManagePermissionValidateResult> ValidateForManagePermissionServiceAsync (Guid id, SiteValidationParameter siteValidationParameter = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ManagePermissionValidateResult> localVarResponse = await ValidateForManagePermissionServiceAsyncWithHttpInfo(id, siteValidationParameter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// validate permissions, scope for manage permission service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>Task of ApiResponse (ManagePermissionValidateResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<ManagePermissionValidateResult>> ValidateForManagePermissionServiceAsyncWithHttpInfo (Guid id, SiteValidationParameter siteValidationParameter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->ValidateForManagePermissionService");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = siteValidationParameter;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<ManagePermissionValidateResult>("/services/managepermission/{id}/url/validation", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ValidateForManagePermissionService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// validate permissions, scope for site lifecycle service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>SiteLifecycleValidateResult</returns>
        public SiteLifecycleValidateResult ValidateForSiteLifecycleService (Guid id, SiteValidationParameter siteValidationParameter = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<SiteLifecycleValidateResult> localVarResponse = ValidateForSiteLifecycleServiceWithHttpInfo(id, siteValidationParameter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// validate permissions, scope for site lifecycle service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>ApiResponse of SiteLifecycleValidateResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< SiteLifecycleValidateResult > ValidateForSiteLifecycleServiceWithHttpInfo (Guid id, SiteValidationParameter siteValidationParameter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->ValidateForSiteLifecycleService");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = siteValidationParameter;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post< SiteLifecycleValidateResult >("/services/sitelifecycle/{id}/url/validation", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ValidateForSiteLifecycleService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// validate permissions, scope for site lifecycle service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>Task of SiteLifecycleValidateResult</returns>
        public async System.Threading.Tasks.Task<SiteLifecycleValidateResult> ValidateForSiteLifecycleServiceAsync (Guid id, SiteValidationParameter siteValidationParameter = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<SiteLifecycleValidateResult> localVarResponse = await ValidateForSiteLifecycleServiceAsyncWithHttpInfo(id, siteValidationParameter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// validate permissions, scope for site lifecycle service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>Task of ApiResponse (SiteLifecycleValidateResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<SiteLifecycleValidateResult>> ValidateForSiteLifecycleServiceAsyncWithHttpInfo (Guid id, SiteValidationParameter siteValidationParameter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->ValidateForSiteLifecycleService");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = siteValidationParameter;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<SiteLifecycleValidateResult>("/services/sitelifecycle/{id}/url/validation", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ValidateForSiteLifecycleService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// validate permissions, scope for web lifecycle service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>WebLifecycleValidateResult</returns>
        public WebLifecycleValidateResult ValidateForWebLifecycleService (Guid id, SiteValidationParameter siteValidationParameter = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<WebLifecycleValidateResult> localVarResponse = ValidateForWebLifecycleServiceWithHttpInfo(id, siteValidationParameter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// validate permissions, scope for web lifecycle service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>ApiResponse of WebLifecycleValidateResult</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< WebLifecycleValidateResult > ValidateForWebLifecycleServiceWithHttpInfo (Guid id, SiteValidationParameter siteValidationParameter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->ValidateForWebLifecycleService");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = siteValidationParameter;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Post< WebLifecycleValidateResult >("/services/weblifecycle/{id}/url/validation", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ValidateForWebLifecycleService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// validate permissions, scope for web lifecycle service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>Task of WebLifecycleValidateResult</returns>
        public async System.Threading.Tasks.Task<WebLifecycleValidateResult> ValidateForWebLifecycleServiceAsync (Guid id, SiteValidationParameter siteValidationParameter = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<WebLifecycleValidateResult> localVarResponse = await ValidateForWebLifecycleServiceAsyncWithHttpInfo(id, siteValidationParameter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// validate permissions, scope for web lifecycle service 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="siteValidationParameter"> (optional)</param>
        /// <returns>Task of ApiResponse (WebLifecycleValidateResult)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<WebLifecycleValidateResult>> ValidateForWebLifecycleServiceAsyncWithHttpInfo (Guid id, SiteValidationParameter siteValidationParameter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'id' when calling ServicesApi->ValidateForWebLifecycleService");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = siteValidationParameter;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<WebLifecycleValidateResult>("/services/weblifecycle/{id}/url/validation", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ValidateForWebLifecycleService", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
