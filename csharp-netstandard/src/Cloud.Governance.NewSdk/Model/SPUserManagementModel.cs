/* 
 * Cloud Governance Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Cloud.Governance.NewSdk.Client.OpenAPIDateConverter;

namespace Cloud.Governance.NewSdk.Model
{
    /// <summary>
    /// SPUserManagementModel
    /// </summary>
    [DataContract]
    public partial class SPUserManagementModel :  IEquatable<SPUserManagementModel>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public ManagePermissionAction? Action { get; set; }
        /// <summary>
        /// Gets or Sets ExternalUserType
        /// </summary>
        [DataMember(Name="externalUserType", EmitDefaultValue=false)]
        public ExternalUserType? ExternalUserType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SPUserManagementModel" /> class.
        /// </summary>
        /// <param name="identityName">identityName.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="isGroup">isGroup.</param>
        /// <param name="action">action.</param>
        /// <param name="externalUserType">externalUserType.</param>
        public SPUserManagementModel(string identityName = default(string), string displayName = default(string), bool isGroup = default(bool), ManagePermissionAction action = default(ManagePermissionAction), ExternalUserType externalUserType = default(ExternalUserType))
        {
            this.IdentityName = identityName;
            this.DisplayName = displayName;
            this.IdentityName = identityName;
            this.DisplayName = displayName;
            this.IsGroup = isGroup;
            this.Action = action;
            this.ExternalUserType = externalUserType;
        }
        
        /// <summary>
        /// Gets or Sets IdentityName
        /// </summary>
        [DataMember(Name="identityName", EmitDefaultValue=true)]
        public string IdentityName { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name="displayName", EmitDefaultValue=true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets IsGroup
        /// </summary>
        [DataMember(Name="isGroup", EmitDefaultValue=false)]
        public bool IsGroup { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SPUserManagementModel {\n");
            sb.Append("  IdentityName: ").Append(IdentityName).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  IsGroup: ").Append(IsGroup).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  ExternalUserType: ").Append(ExternalUserType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SPUserManagementModel);
        }

        /// <summary>
        /// Returns true if SPUserManagementModel instances are equal
        /// </summary>
        /// <param name="input">Instance of SPUserManagementModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SPUserManagementModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IdentityName == input.IdentityName ||
                    (this.IdentityName != null &&
                    this.IdentityName.Equals(input.IdentityName))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.IsGroup == input.IsGroup ||
                    this.IsGroup.Equals(input.IsGroup)
                ) && 
                (
                    this.Action == input.Action ||
                    this.Action.Equals(input.Action)
                ) && 
                (
                    this.ExternalUserType == input.ExternalUserType ||
                    this.ExternalUserType.Equals(input.ExternalUserType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IdentityName != null)
                    hashCode = hashCode * 59 + this.IdentityName.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                hashCode = hashCode * 59 + this.IsGroup.GetHashCode();
                hashCode = hashCode * 59 + this.Action.GetHashCode();
                hashCode = hashCode * 59 + this.ExternalUserType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
