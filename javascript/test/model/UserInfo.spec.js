/**
 * Cloud Governance Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CloudGovernanceApi);
  }
}(this, function(expect, CloudGovernanceApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CloudGovernanceApi.UserInfo();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UserInfo', function() {
    it('should create an instance of UserInfo', function() {
      // uncomment below and update the code to test UserInfo
      //var instane = new CloudGovernanceApi.UserInfo();
      //expect(instance).to.be.a(CloudGovernanceApi.UserInfo);
    });

    it('should have the property identityName (base name: "identityName")', function() {
      // uncomment below and update the code to test the property identityName
      //var instane = new CloudGovernanceApi.UserInfo();
      //expect(instance).to.be();
    });

    it('should have the property userDisplayName (base name: "userDisplayName")', function() {
      // uncomment below and update the code to test the property userDisplayName
      //var instane = new CloudGovernanceApi.UserInfo();
      //expect(instance).to.be();
    });

    it('should have the property domainGroup (base name: "domainGroup")', function() {
      // uncomment below and update the code to test the property domainGroup
      //var instane = new CloudGovernanceApi.UserInfo();
      //expect(instance).to.be();
    });

    it('should have the property department (base name: "department")', function() {
      // uncomment below and update the code to test the property department
      //var instane = new CloudGovernanceApi.UserInfo();
      //expect(instance).to.be();
    });

    it('should have the property mobilePhone (base name: "mobilePhone")', function() {
      // uncomment below and update the code to test the property mobilePhone
      //var instane = new CloudGovernanceApi.UserInfo();
      //expect(instance).to.be();
    });

    it('should have the property manager (base name: "manager")', function() {
      // uncomment below and update the code to test the property manager
      //var instane = new CloudGovernanceApi.UserInfo();
      //expect(instance).to.be();
    });

    it('should have the property permission (base name: "permission")', function() {
      // uncomment below and update the code to test the property permission
      //var instane = new CloudGovernanceApi.UserInfo();
      //expect(instance).to.be();
    });

    it('should have the property isDeleted (base name: "isDeleted")', function() {
      // uncomment below and update the code to test the property isDeleted
      //var instane = new CloudGovernanceApi.UserInfo();
      //expect(instance).to.be();
    });

    it('should have the property securityToken (base name: "securityToken")', function() {
      // uncomment below and update the code to test the property securityToken
      //var instane = new CloudGovernanceApi.UserInfo();
      //expect(instance).to.be();
    });

    it('should have the property userType (base name: "userType")', function() {
      // uncomment below and update the code to test the property userType
      //var instane = new CloudGovernanceApi.UserInfo();
      //expect(instance).to.be();
    });

    it('should have the property legalPerson (base name: "legalPerson")', function() {
      // uncomment below and update the code to test the property legalPerson
      //var instane = new CloudGovernanceApi.UserInfo();
      //expect(instance).to.be();
    });

    it('should have the property authenticationType (base name: "authenticationType")', function() {
      // uncomment below and update the code to test the property authenticationType
      //var instane = new CloudGovernanceApi.UserInfo();
      //expect(instance).to.be();
    });

    it('should have the property adminCenterUrl (base name: "adminCenterUrl")', function() {
      // uncomment below and update the code to test the property adminCenterUrl
      //var instane = new CloudGovernanceApi.UserInfo();
      //expect(instance).to.be();
    });

    it('should have the property inviteType (base name: "inviteType")', function() {
      // uncomment below and update the code to test the property inviteType
      //var instane = new CloudGovernanceApi.UserInfo();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instane = new CloudGovernanceApi.UserInfo();
      //expect(instance).to.be();
    });

    it('should have the property isRegisteredAosGroup (base name: "isRegisteredAosGroup")', function() {
      // uncomment below and update the code to test the property isRegisteredAosGroup
      //var instane = new CloudGovernanceApi.UserInfo();
      //expect(instance).to.be();
    });

    it('should have the property isExternalUser (base name: "isExternalUser")', function() {
      // uncomment below and update the code to test the property isExternalUser
      //var instane = new CloudGovernanceApi.UserInfo();
      //expect(instance).to.be();
    });

    it('should have the property isAPIExceptional (base name: "isAPIExceptional")', function() {
      // uncomment below and update the code to test the property isAPIExceptional
      //var instane = new CloudGovernanceApi.UserInfo();
      //expect(instance).to.be();
    });

    it('should have the property tenantId (base name: "tenantId")', function() {
      // uncomment below and update the code to test the property tenantId
      //var instane = new CloudGovernanceApi.UserInfo();
      //expect(instance).to.be();
    });

    it('should have the property objectId (base name: "objectId")', function() {
      // uncomment below and update the code to test the property objectId
      //var instane = new CloudGovernanceApi.UserInfo();
      //expect(instance).to.be();
    });

    it('should have the property version (base name: "version")', function() {
      // uncomment below and update the code to test the property version
      //var instane = new CloudGovernanceApi.UserInfo();
      //expect(instance).to.be();
    });

    it('should have the property jobTitle (base name: "jobTitle")', function() {
      // uncomment below and update the code to test the property jobTitle
      //var instane = new CloudGovernanceApi.UserInfo();
      //expect(instance).to.be();
    });

    it('should have the property usageLocation (base name: "usageLocation")', function() {
      // uncomment below and update the code to test the property usageLocation
      //var instane = new CloudGovernanceApi.UserInfo();
      //expect(instance).to.be();
    });

    it('should have the property physicalDeliveryOfficeName (base name: "physicalDeliveryOfficeName")', function() {
      // uncomment below and update the code to test the property physicalDeliveryOfficeName
      //var instane = new CloudGovernanceApi.UserInfo();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new CloudGovernanceApi.UserInfo();
      //expect(instance).to.be();
    });

    it('should have the property displayName (base name: "displayName")', function() {
      // uncomment below and update the code to test the property displayName
      //var instane = new CloudGovernanceApi.UserInfo();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instane = new CloudGovernanceApi.UserInfo();
      //expect(instance).to.be();
    });

    it('should have the property email (base name: "email")', function() {
      // uncomment below and update the code to test the property email
      //var instane = new CloudGovernanceApi.UserInfo();
      //expect(instance).to.be();
    });

    it('should have the property isValid (base name: "isValid")', function() {
      // uncomment below and update the code to test the property isValid
      //var instane = new CloudGovernanceApi.UserInfo();
      //expect(instance).to.be();
    });

    it('should have the property existInAOS (base name: "existInAOS")', function() {
      // uncomment below and update the code to test the property existInAOS
      //var instane = new CloudGovernanceApi.UserInfo();
      //expect(instance).to.be();
    });

  });

}));
