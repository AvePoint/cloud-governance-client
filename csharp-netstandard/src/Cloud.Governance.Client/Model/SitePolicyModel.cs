/* 
 * Cloud Governance Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Cloud.Governance.Client.Client.OpenAPIDateConverter;

namespace Cloud.Governance.Client.Model
{
    /// <summary>
    /// SitePolicyModel
    /// </summary>
    [DataContract]
    public partial class SitePolicyModel :  IEquatable<SitePolicyModel>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public CommonStatus? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SitePolicyModel" /> class.
        /// </summary>
        /// <param name="serverResourceQuota">serverResourceQuota.</param>
        /// <param name="storageQuota">storageQuota.</param>
        /// <param name="sharingSetting">sharingSetting.</param>
        /// <param name="isDesignerEnabled">isDesignerEnabled.</param>
        /// <param name="siteMaxDepth">siteMaxDepth.</param>
        /// <param name="siteMaxDepthType">siteMaxDepthType.</param>
        /// <param name="isDisplayPolicyIcon">isDisplayPolicyIcon.</param>
        /// <param name="policyIconAddress">policyIconAddress.</param>
        /// <param name="policyDetailReferenceURL">policyDetailReferenceURL.</param>
        /// <param name="aosSettings">aosSettings.</param>
        /// <param name="lifecycleSettings">lifecycleSettings.</param>
        /// <param name="recertificationSettings">recertificationSettings.</param>
        /// <param name="inactivitySettings">inactivitySettings.</param>
        /// <param name="leasePeriodSettings">leasePeriodSettings.</param>
        /// <param name="electionSettings">electionSettings.</param>
        /// <param name="isOverwriteLifecycleStartTime">isOverwriteLifecycleStartTime.</param>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="description">description.</param>
        /// <param name="category">category.</param>
        /// <param name="tenantId">tenantId.</param>
        /// <param name="status">status.</param>
        public SitePolicyModel(double serverResourceQuota = default(double), long storageQuota = default(long), SitePolicySharingSetting sharingSetting = default(SitePolicySharingSetting), bool isDesignerEnabled = default(bool), int? siteMaxDepth = default(int?), int siteMaxDepthType = default(int), bool isDisplayPolicyIcon = default(bool), string policyIconAddress = default(string), string policyDetailReferenceURL = default(string), SitePolicyAosSetting aosSettings = default(SitePolicyAosSetting), SitePolicyLifecycleSetting lifecycleSettings = default(SitePolicyLifecycleSetting), PolicyRecertificationSetting recertificationSettings = default(PolicyRecertificationSetting), SitePolicyExpirationSetting inactivitySettings = default(SitePolicyExpirationSetting), SitePolicyExpirationSetting leasePeriodSettings = default(SitePolicyExpirationSetting), SitePolicyElectionSetting electionSettings = default(SitePolicyElectionSetting), bool isOverwriteLifecycleStartTime = default(bool), Guid id = default(Guid), string name = default(string), string description = default(string), string category = default(string), Guid tenantId = default(Guid), CommonStatus status = default(CommonStatus))
        {
            this.ServerResourceQuota = serverResourceQuota;
            this.StorageQuota = storageQuota;
            this.SharingSetting = sharingSetting;
            this.IsDesignerEnabled = isDesignerEnabled;
            this.SiteMaxDepth = siteMaxDepth;
            this.SiteMaxDepthType = siteMaxDepthType;
            this.IsDisplayPolicyIcon = isDisplayPolicyIcon;
            this.PolicyIconAddress = policyIconAddress;
            this.PolicyDetailReferenceURL = policyDetailReferenceURL;
            this.AosSettings = aosSettings;
            this.LifecycleSettings = lifecycleSettings;
            this.RecertificationSettings = recertificationSettings;
            this.InactivitySettings = inactivitySettings;
            this.LeasePeriodSettings = leasePeriodSettings;
            this.ElectionSettings = electionSettings;
            this.IsOverwriteLifecycleStartTime = isOverwriteLifecycleStartTime;
            this.Id = id;
            this.Name = name;
            this.Description = description;
            this.Category = category;
            this.TenantId = tenantId;
            this.Status = status;
        }
        
        /// <summary>
        /// Gets or Sets ServerResourceQuota
        /// </summary>
        [DataMember(Name="serverResourceQuota", EmitDefaultValue=false)]
        public double ServerResourceQuota { get; set; }

        /// <summary>
        /// Gets or Sets StorageQuota
        /// </summary>
        [DataMember(Name="storageQuota", EmitDefaultValue=false)]
        public long StorageQuota { get; set; }

        /// <summary>
        /// Gets or Sets SharingSetting
        /// </summary>
        [DataMember(Name="sharingSetting", EmitDefaultValue=true)]
        public SitePolicySharingSetting SharingSetting { get; set; }

        /// <summary>
        /// Gets or Sets IsDesignerEnabled
        /// </summary>
        [DataMember(Name="isDesignerEnabled", EmitDefaultValue=false)]
        public bool IsDesignerEnabled { get; set; }

        /// <summary>
        /// Gets or Sets SiteMaxDepth
        /// </summary>
        [DataMember(Name="siteMaxDepth", EmitDefaultValue=true)]
        public int? SiteMaxDepth { get; set; }

        /// <summary>
        /// Gets or Sets SiteMaxDepthType
        /// </summary>
        [DataMember(Name="siteMaxDepthType", EmitDefaultValue=false)]
        public int SiteMaxDepthType { get; set; }

        /// <summary>
        /// Gets or Sets IsDisplayPolicyIcon
        /// </summary>
        [DataMember(Name="isDisplayPolicyIcon", EmitDefaultValue=false)]
        public bool IsDisplayPolicyIcon { get; set; }

        /// <summary>
        /// Gets or Sets PolicyIconAddress
        /// </summary>
        [DataMember(Name="policyIconAddress", EmitDefaultValue=true)]
        public string PolicyIconAddress { get; set; }

        /// <summary>
        /// Gets or Sets PolicyDetailReferenceURL
        /// </summary>
        [DataMember(Name="policyDetailReferenceURL", EmitDefaultValue=true)]
        public string PolicyDetailReferenceURL { get; set; }

        /// <summary>
        /// Gets or Sets AosSettings
        /// </summary>
        [DataMember(Name="aosSettings", EmitDefaultValue=true)]
        public SitePolicyAosSetting AosSettings { get; set; }

        /// <summary>
        /// Gets or Sets LifecycleSettings
        /// </summary>
        [DataMember(Name="lifecycleSettings", EmitDefaultValue=true)]
        public SitePolicyLifecycleSetting LifecycleSettings { get; set; }

        /// <summary>
        /// Gets or Sets RecertificationSettings
        /// </summary>
        [DataMember(Name="recertificationSettings", EmitDefaultValue=true)]
        public PolicyRecertificationSetting RecertificationSettings { get; set; }

        /// <summary>
        /// Gets or Sets InactivitySettings
        /// </summary>
        [DataMember(Name="inactivitySettings", EmitDefaultValue=true)]
        public SitePolicyExpirationSetting InactivitySettings { get; set; }

        /// <summary>
        /// Gets or Sets LeasePeriodSettings
        /// </summary>
        [DataMember(Name="leasePeriodSettings", EmitDefaultValue=true)]
        public SitePolicyExpirationSetting LeasePeriodSettings { get; set; }

        /// <summary>
        /// Gets or Sets ElectionSettings
        /// </summary>
        [DataMember(Name="electionSettings", EmitDefaultValue=true)]
        public SitePolicyElectionSetting ElectionSettings { get; set; }

        /// <summary>
        /// Gets or Sets IsOverwriteLifecycleStartTime
        /// </summary>
        [DataMember(Name="isOverwriteLifecycleStartTime", EmitDefaultValue=false)]
        public bool IsOverwriteLifecycleStartTime { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name="category", EmitDefaultValue=true)]
        public string Category { get; set; }

        /// <summary>
        /// Gets or Sets TenantId
        /// </summary>
        [DataMember(Name="tenantId", EmitDefaultValue=false)]
        public Guid TenantId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SitePolicyModel {\n");
            sb.Append("  ServerResourceQuota: ").Append(ServerResourceQuota).Append("\n");
            sb.Append("  StorageQuota: ").Append(StorageQuota).Append("\n");
            sb.Append("  SharingSetting: ").Append(SharingSetting).Append("\n");
            sb.Append("  IsDesignerEnabled: ").Append(IsDesignerEnabled).Append("\n");
            sb.Append("  SiteMaxDepth: ").Append(SiteMaxDepth).Append("\n");
            sb.Append("  SiteMaxDepthType: ").Append(SiteMaxDepthType).Append("\n");
            sb.Append("  IsDisplayPolicyIcon: ").Append(IsDisplayPolicyIcon).Append("\n");
            sb.Append("  PolicyIconAddress: ").Append(PolicyIconAddress).Append("\n");
            sb.Append("  PolicyDetailReferenceURL: ").Append(PolicyDetailReferenceURL).Append("\n");
            sb.Append("  AosSettings: ").Append(AosSettings).Append("\n");
            sb.Append("  LifecycleSettings: ").Append(LifecycleSettings).Append("\n");
            sb.Append("  RecertificationSettings: ").Append(RecertificationSettings).Append("\n");
            sb.Append("  InactivitySettings: ").Append(InactivitySettings).Append("\n");
            sb.Append("  LeasePeriodSettings: ").Append(LeasePeriodSettings).Append("\n");
            sb.Append("  ElectionSettings: ").Append(ElectionSettings).Append("\n");
            sb.Append("  IsOverwriteLifecycleStartTime: ").Append(IsOverwriteLifecycleStartTime).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SitePolicyModel);
        }

        /// <summary>
        /// Returns true if SitePolicyModel instances are equal
        /// </summary>
        /// <param name="input">Instance of SitePolicyModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SitePolicyModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ServerResourceQuota == input.ServerResourceQuota ||
                    this.ServerResourceQuota.Equals(input.ServerResourceQuota)
                ) && 
                (
                    this.StorageQuota == input.StorageQuota ||
                    this.StorageQuota.Equals(input.StorageQuota)
                ) && 
                (
                    this.SharingSetting == input.SharingSetting ||
                    (this.SharingSetting != null &&
                    this.SharingSetting.Equals(input.SharingSetting))
                ) && 
                (
                    this.IsDesignerEnabled == input.IsDesignerEnabled ||
                    this.IsDesignerEnabled.Equals(input.IsDesignerEnabled)
                ) && 
                (
                    this.SiteMaxDepth == input.SiteMaxDepth ||
                    (this.SiteMaxDepth != null &&
                    this.SiteMaxDepth.Equals(input.SiteMaxDepth))
                ) && 
                (
                    this.SiteMaxDepthType == input.SiteMaxDepthType ||
                    this.SiteMaxDepthType.Equals(input.SiteMaxDepthType)
                ) && 
                (
                    this.IsDisplayPolicyIcon == input.IsDisplayPolicyIcon ||
                    this.IsDisplayPolicyIcon.Equals(input.IsDisplayPolicyIcon)
                ) && 
                (
                    this.PolicyIconAddress == input.PolicyIconAddress ||
                    (this.PolicyIconAddress != null &&
                    this.PolicyIconAddress.Equals(input.PolicyIconAddress))
                ) && 
                (
                    this.PolicyDetailReferenceURL == input.PolicyDetailReferenceURL ||
                    (this.PolicyDetailReferenceURL != null &&
                    this.PolicyDetailReferenceURL.Equals(input.PolicyDetailReferenceURL))
                ) && 
                (
                    this.AosSettings == input.AosSettings ||
                    (this.AosSettings != null &&
                    this.AosSettings.Equals(input.AosSettings))
                ) && 
                (
                    this.LifecycleSettings == input.LifecycleSettings ||
                    (this.LifecycleSettings != null &&
                    this.LifecycleSettings.Equals(input.LifecycleSettings))
                ) && 
                (
                    this.RecertificationSettings == input.RecertificationSettings ||
                    (this.RecertificationSettings != null &&
                    this.RecertificationSettings.Equals(input.RecertificationSettings))
                ) && 
                (
                    this.InactivitySettings == input.InactivitySettings ||
                    (this.InactivitySettings != null &&
                    this.InactivitySettings.Equals(input.InactivitySettings))
                ) && 
                (
                    this.LeasePeriodSettings == input.LeasePeriodSettings ||
                    (this.LeasePeriodSettings != null &&
                    this.LeasePeriodSettings.Equals(input.LeasePeriodSettings))
                ) && 
                (
                    this.ElectionSettings == input.ElectionSettings ||
                    (this.ElectionSettings != null &&
                    this.ElectionSettings.Equals(input.ElectionSettings))
                ) && 
                (
                    this.IsOverwriteLifecycleStartTime == input.IsOverwriteLifecycleStartTime ||
                    this.IsOverwriteLifecycleStartTime.Equals(input.IsOverwriteLifecycleStartTime)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.TenantId == input.TenantId ||
                    (this.TenantId != null &&
                    this.TenantId.Equals(input.TenantId))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.ServerResourceQuota.GetHashCode();
                hashCode = hashCode * 59 + this.StorageQuota.GetHashCode();
                if (this.SharingSetting != null)
                    hashCode = hashCode * 59 + this.SharingSetting.GetHashCode();
                hashCode = hashCode * 59 + this.IsDesignerEnabled.GetHashCode();
                if (this.SiteMaxDepth != null)
                    hashCode = hashCode * 59 + this.SiteMaxDepth.GetHashCode();
                hashCode = hashCode * 59 + this.SiteMaxDepthType.GetHashCode();
                hashCode = hashCode * 59 + this.IsDisplayPolicyIcon.GetHashCode();
                if (this.PolicyIconAddress != null)
                    hashCode = hashCode * 59 + this.PolicyIconAddress.GetHashCode();
                if (this.PolicyDetailReferenceURL != null)
                    hashCode = hashCode * 59 + this.PolicyDetailReferenceURL.GetHashCode();
                if (this.AosSettings != null)
                    hashCode = hashCode * 59 + this.AosSettings.GetHashCode();
                if (this.LifecycleSettings != null)
                    hashCode = hashCode * 59 + this.LifecycleSettings.GetHashCode();
                if (this.RecertificationSettings != null)
                    hashCode = hashCode * 59 + this.RecertificationSettings.GetHashCode();
                if (this.InactivitySettings != null)
                    hashCode = hashCode * 59 + this.InactivitySettings.GetHashCode();
                if (this.LeasePeriodSettings != null)
                    hashCode = hashCode * 59 + this.LeasePeriodSettings.GetHashCode();
                if (this.ElectionSettings != null)
                    hashCode = hashCode * 59 + this.ElectionSettings.GetHashCode();
                hashCode = hashCode * 59 + this.IsOverwriteLifecycleStartTime.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.TenantId != null)
                    hashCode = hashCode * 59 + this.TenantId.GetHashCode();
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
