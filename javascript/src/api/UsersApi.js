/**
 * Cloud Governance Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiUser from '../model/ApiUser';
import ExternalSharingOptions from '../model/ExternalSharingOptions';
import SharingEnabledUser from '../model/SharingEnabledUser';
import StringModel from '../model/StringModel';
import UserRelationShip from '../model/UserRelationShip';
import UserType from '../model/UserType';

/**
* Users service.
* @module api/UsersApi
* @version 1.0
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the checkUserExistsInAOS operation.
     * @callback module:api/UsersApi~checkUserExistsInAOSCallback
     * @param {String} error Error message, if any.
     * @param {Boolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * check user exists in Aos
     * @param {String} name 
     * @param {module:api/UsersApi~checkUserExistsInAOSCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Boolean}
     */
    checkUserExistsInAOS(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling checkUserExistsInAOS");
      }

      let pathParams = {
      };
      let queryParams = {
        'name': name
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/users/avepointonlineservices/validate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAzureAdUserPropertyValue operation.
     * @callback module:api/UsersApi~getAzureAdUserPropertyValueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get user's property value by property name from azure ad
     * @param {String} username 
     * @param {String} propertyName 
     * @param {module:api/UsersApi~getAzureAdUserPropertyValueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringModel}
     */
    getAzureAdUserPropertyValue(username, propertyName, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getAzureAdUserPropertyValue");
      }
      // verify the required parameter 'propertyName' is set
      if (propertyName === undefined || propertyName === null) {
        throw new Error("Missing the required parameter 'propertyName' when calling getAzureAdUserPropertyValue");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
        'propertyName': propertyName
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = StringModel;
      return this.apiClient.callApi(
        '/users/{username}/azuread/property', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUpsUserPropertyValue operation.
     * @callback module:api/UsersApi~getUpsUserPropertyValueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get user's property value by property name from user profile service
     * @param {String} username 
     * @param {String} propertyName 
     * @param {module:api/UsersApi~getUpsUserPropertyValueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringModel}
     */
    getUpsUserPropertyValue(username, propertyName, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getUpsUserPropertyValue");
      }
      // verify the required parameter 'propertyName' is set
      if (propertyName === undefined || propertyName === null) {
        throw new Error("Missing the required parameter 'propertyName' when calling getUpsUserPropertyValue");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
        'propertyName': propertyName
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = StringModel;
      return this.apiClient.callApi(
        '/users/{username}/userprofile/property', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserBasicProperties operation.
     * @callback module:api/UsersApi~getUserBasicPropertiesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get my basic properties, City, Country, Office, Department, JobTitle,State
     * @param {module:api/UsersApi~getUserBasicPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getUserBasicProperties(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/me/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserBasicPropertyValue operation.
     * @callback module:api/UsersApi~getUserBasicPropertyValueCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get my basic property value, Department, Email, DisplayName, Manager
     * @param {String} name 
     * @param {module:api/UsersApi~getUserBasicPropertyValueCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getUserBasicPropertyValue(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getUserBasicPropertyValue");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/me/property/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserPhoto operation.
     * @callback module:api/UsersApi~getUserPhotoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get user's photo
     * @param {String} username 
     * @param {Object} opts Optional parameters
     * @param {String} opts.size  (default to '48x48')
     * @param {module:api/UsersApi~getUserPhotoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getUserPhoto(username, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getUserPhoto");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{username}/photo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserRelationship operation.
     * @callback module:api/UsersApi~getUserRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserRelationShip} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get user relationship
     * @param {String} username 
     * @param {module:api/UsersApi~getUserRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserRelationShip}
     */
    getUserRelationship(username, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getUserRelationship");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = UserRelationShip;
      return this.apiClient.callApi(
        '/users/{username}/relationship', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsersFromSharePoint operation.
     * @callback module:api/UsersApi~getUsersFromSharePointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get users from sharepoint
     * @param {Object} opts Optional parameters
     * @param {String} opts.username 
     * @param {Array.<String>} opts.requestBody 
     * @param {module:api/UsersApi~getUsersFromSharePointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiUser}
     */
    getUsersFromSharePoint(opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBody'];

      let pathParams = {
      };
      let queryParams = {
        'username': opts['username']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ApiUser;
      return this.apiClient.callApi(
        '/users/sharepoint/validate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resolveUsers operation.
     * @callback module:api/UsersApi~resolveUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ApiUser>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * resolve users
     * @param {String} keyword 
     * @param {module:model/UserType} userType All=0, User=1, Group=2, DistributionList=3, UserAndGroup=4
     * @param {module:model/ExternalSharingOptions} sharingOptions Disabled=0, VerifiedGuestUser=1, Anyone=2, ExistingGuestUser=3
     * @param {Object} opts Optional parameters
     * @param {String} opts.siteUrlOrTenantId  (default to '')
     * @param {module:api/UsersApi~resolveUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ApiUser>}
     */
    resolveUsers(keyword, userType, sharingOptions, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'keyword' is set
      if (keyword === undefined || keyword === null) {
        throw new Error("Missing the required parameter 'keyword' when calling resolveUsers");
      }
      // verify the required parameter 'userType' is set
      if (userType === undefined || userType === null) {
        throw new Error("Missing the required parameter 'userType' when calling resolveUsers");
      }
      // verify the required parameter 'sharingOptions' is set
      if (sharingOptions === undefined || sharingOptions === null) {
        throw new Error("Missing the required parameter 'sharingOptions' when calling resolveUsers");
      }

      let pathParams = {
      };
      let queryParams = {
        'keyword': keyword,
        'userType': userType,
        'sharingOptions': sharingOptions,
        'siteUrlOrTenantId': opts['siteUrlOrTenantId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [ApiUser];
      return this.apiClient.callApi(
        '/users/resolve', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resolveUsersWithExternalSharingOption operation.
     * @callback module:api/UsersApi~resolveUsersWithExternalSharingOptionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SharingEnabledUser>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * resolve user including external users
     * @param {String} keyword 
     * @param {String} siteUrlOrTenantId 
     * @param {module:model/ExternalSharingOptions} externalSharingOption 
     * @param {module:model/UserType} userType All=0, User=1, Group=2, DistributionList=3, UserAndGroup=4
     * @param {module:api/UsersApi~resolveUsersWithExternalSharingOptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SharingEnabledUser>}
     */
    resolveUsersWithExternalSharingOption(keyword, siteUrlOrTenantId, externalSharingOption, userType, callback) {
      let postBody = null;
      // verify the required parameter 'keyword' is set
      if (keyword === undefined || keyword === null) {
        throw new Error("Missing the required parameter 'keyword' when calling resolveUsersWithExternalSharingOption");
      }
      // verify the required parameter 'siteUrlOrTenantId' is set
      if (siteUrlOrTenantId === undefined || siteUrlOrTenantId === null) {
        throw new Error("Missing the required parameter 'siteUrlOrTenantId' when calling resolveUsersWithExternalSharingOption");
      }
      // verify the required parameter 'externalSharingOption' is set
      if (externalSharingOption === undefined || externalSharingOption === null) {
        throw new Error("Missing the required parameter 'externalSharingOption' when calling resolveUsersWithExternalSharingOption");
      }
      // verify the required parameter 'userType' is set
      if (userType === undefined || userType === null) {
        throw new Error("Missing the required parameter 'userType' when calling resolveUsersWithExternalSharingOption");
      }

      let pathParams = {
        'externalSharingOption': externalSharingOption
      };
      let queryParams = {
        'keyword': keyword,
        'siteUrlOrTenantId': siteUrlOrTenantId,
        'userType': userType
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [SharingEnabledUser];
      return this.apiClient.callApi(
        '/users/resolve/{externalSharingOption}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchUsers operation.
     * @callback module:api/UsersApi~searchUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ApiUser>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * search users
     * @param {String} keyword 
     * @param {module:model/UserType} userType All=0, User=1, Group=2, DistributionList=3, UserAndGroup=4
     * @param {module:model/ExternalSharingOptions} sharingOptions Disabled=0, VerifiedGuestUser=1, Anyone=2, ExistingGuestUser=3
     * @param {Object} opts Optional parameters
     * @param {String} opts.siteUrlOrTenantId  (default to '')
     * @param {module:api/UsersApi~searchUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ApiUser>}
     */
    searchUsers(keyword, userType, sharingOptions, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'keyword' is set
      if (keyword === undefined || keyword === null) {
        throw new Error("Missing the required parameter 'keyword' when calling searchUsers");
      }
      // verify the required parameter 'userType' is set
      if (userType === undefined || userType === null) {
        throw new Error("Missing the required parameter 'userType' when calling searchUsers");
      }
      // verify the required parameter 'sharingOptions' is set
      if (sharingOptions === undefined || sharingOptions === null) {
        throw new Error("Missing the required parameter 'sharingOptions' when calling searchUsers");
      }

      let pathParams = {
      };
      let queryParams = {
        'keyword': keyword,
        'userType': userType,
        'sharingOptions': sharingOptions,
        'siteUrlOrTenantId': opts['siteUrlOrTenantId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [ApiUser];
      return this.apiClient.callApi(
        '/users/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchUsersWithExternalSharingOption operation.
     * @callback module:api/UsersApi~searchUsersWithExternalSharingOptionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SharingEnabledUser>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * search user including external users
     * @param {String} keyword 
     * @param {String} siteUrlOrTenantId 
     * @param {module:model/ExternalSharingOptions} externalSharingOption 
     * @param {module:model/UserType} userType All=0, User=1, Group=2, DistributionList=3, UserAndGroup=4
     * @param {module:api/UsersApi~searchUsersWithExternalSharingOptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SharingEnabledUser>}
     */
    searchUsersWithExternalSharingOption(keyword, siteUrlOrTenantId, externalSharingOption, userType, callback) {
      let postBody = null;
      // verify the required parameter 'keyword' is set
      if (keyword === undefined || keyword === null) {
        throw new Error("Missing the required parameter 'keyword' when calling searchUsersWithExternalSharingOption");
      }
      // verify the required parameter 'siteUrlOrTenantId' is set
      if (siteUrlOrTenantId === undefined || siteUrlOrTenantId === null) {
        throw new Error("Missing the required parameter 'siteUrlOrTenantId' when calling searchUsersWithExternalSharingOption");
      }
      // verify the required parameter 'externalSharingOption' is set
      if (externalSharingOption === undefined || externalSharingOption === null) {
        throw new Error("Missing the required parameter 'externalSharingOption' when calling searchUsersWithExternalSharingOption");
      }
      // verify the required parameter 'userType' is set
      if (userType === undefined || userType === null) {
        throw new Error("Missing the required parameter 'userType' when calling searchUsersWithExternalSharingOption");
      }

      let pathParams = {
        'externalSharingOption': externalSharingOption
      };
      let queryParams = {
        'keyword': keyword,
        'siteUrlOrTenantId': siteUrlOrTenantId,
        'userType': userType
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [SharingEnabledUser];
      return this.apiClient.callApi(
        '/users/search/{externalSharingOption}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUserInfo operation.
     * @callback module:api/UsersApi~updateUserInfoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiUser} opts.apiUser 
     * @param {module:api/UsersApi~updateUserInfoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateUserInfo(opts, callback) {
      opts = opts || {};
      let postBody = opts['apiUser'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
