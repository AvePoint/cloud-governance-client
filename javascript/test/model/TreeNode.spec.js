/**
 * Cloud Governance Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CloudGovernanceApi);
  }
}(this, function(expect, CloudGovernanceApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CloudGovernanceApi.TreeNode();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TreeNode', function() {
    it('should create an instance of TreeNode', function() {
      // uncomment below and update the code to test TreeNode
      //var instane = new CloudGovernanceApi.TreeNode();
      //expect(instance).to.be.a(CloudGovernanceApi.TreeNode);
    });

    it('should have the property webApplicationId (base name: "webApplicationId")', function() {
      // uncomment below and update the code to test the property webApplicationId
      //var instane = new CloudGovernanceApi.TreeNode();
      //expect(instance).to.be();
    });

    it('should have the property webApplicationUri (base name: "webApplicationUri")', function() {
      // uncomment below and update the code to test the property webApplicationUri
      //var instane = new CloudGovernanceApi.TreeNode();
      //expect(instance).to.be();
    });

    it('should have the property siteCollectionId (base name: "siteCollectionId")', function() {
      // uncomment below and update the code to test the property siteCollectionId
      //var instane = new CloudGovernanceApi.TreeNode();
      //expect(instance).to.be();
    });

    it('should have the property siteCollectionUrl (base name: "siteCollectionUrl")', function() {
      // uncomment below and update the code to test the property siteCollectionUrl
      //var instane = new CloudGovernanceApi.TreeNode();
      //expect(instance).to.be();
    });

    it('should have the property siteId (base name: "siteId")', function() {
      // uncomment below and update the code to test the property siteId
      //var instane = new CloudGovernanceApi.TreeNode();
      //expect(instance).to.be();
    });

    it('should have the property nodeId (base name: "nodeId")', function() {
      // uncomment below and update the code to test the property nodeId
      //var instane = new CloudGovernanceApi.TreeNode();
      //expect(instance).to.be();
    });

    it('should have the property startIndex (base name: "startIndex")', function() {
      // uncomment below and update the code to test the property startIndex
      //var instane = new CloudGovernanceApi.TreeNode();
      //expect(instance).to.be();
    });

    it('should have the property pageSize (base name: "pageSize")', function() {
      // uncomment below and update the code to test the property pageSize
      //var instane = new CloudGovernanceApi.TreeNode();
      //expect(instance).to.be();
    });

    it('should have the property pageIndex (base name: "pageIndex")', function() {
      // uncomment below and update the code to test the property pageIndex
      //var instane = new CloudGovernanceApi.TreeNode();
      //expect(instance).to.be();
    });

    it('should have the property fullCount (base name: "fullCount")', function() {
      // uncomment below and update the code to test the property fullCount
      //var instane = new CloudGovernanceApi.TreeNode();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instane = new CloudGovernanceApi.TreeNode();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instane = new CloudGovernanceApi.TreeNode();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instane = new CloudGovernanceApi.TreeNode();
      //expect(instance).to.be();
    });

    it('should have the property displayName (base name: "displayName")', function() {
      // uncomment below and update the code to test the property displayName
      //var instane = new CloudGovernanceApi.TreeNode();
      //expect(instance).to.be();
    });

    it('should have the property managedPath (base name: "managedPath")', function() {
      // uncomment below and update the code to test the property managedPath
      //var instane = new CloudGovernanceApi.TreeNode();
      //expect(instance).to.be();
    });

    it('should have the property agentID (base name: "agentID")', function() {
      // uncomment below and update the code to test the property agentID
      //var instane = new CloudGovernanceApi.TreeNode();
      //expect(instance).to.be();
    });

    it('should have the property fullPath (base name: "fullPath")', function() {
      // uncomment below and update the code to test the property fullPath
      //var instane = new CloudGovernanceApi.TreeNode();
      //expect(instance).to.be();
    });

    it('should have the property farmName (base name: "farmName")', function() {
      // uncomment below and update the code to test the property farmName
      //var instane = new CloudGovernanceApi.TreeNode();
      //expect(instance).to.be();
    });

    it('should have the property hasNextPage (base name: "hasNextPage")', function() {
      // uncomment below and update the code to test the property hasNextPage
      //var instane = new CloudGovernanceApi.TreeNode();
      //expect(instance).to.be();
    });

    it('should have the property farmID (base name: "farmID")', function() {
      // uncomment below and update the code to test the property farmID
      //var instane = new CloudGovernanceApi.TreeNode();
      //expect(instance).to.be();
    });

    it('should have the property parentID (base name: "parentID")', function() {
      // uncomment below and update the code to test the property parentID
      //var instane = new CloudGovernanceApi.TreeNode();
      //expect(instance).to.be();
    });

    it('should have the property extension (base name: "extension")', function() {
      // uncomment below and update the code to test the property extension
      //var instane = new CloudGovernanceApi.TreeNode();
      //expect(instance).to.be();
    });

    it('should have the property parent (base name: "parent")', function() {
      // uncomment below and update the code to test the property parent
      //var instane = new CloudGovernanceApi.TreeNode();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instane = new CloudGovernanceApi.TreeNode();
      //expect(instance).to.be();
    });

    it('should have the property spObjectID (base name: "spObjectID")', function() {
      // uncomment below and update the code to test the property spObjectID
      //var instane = new CloudGovernanceApi.TreeNode();
      //expect(instance).to.be();
    });

    it('should have the property parentSPObjectID (base name: "parentSPObjectID")', function() {
      // uncomment below and update the code to test the property parentSPObjectID
      //var instane = new CloudGovernanceApi.TreeNode();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new CloudGovernanceApi.TreeNode();
      //expect(instance).to.be();
    });

    it('should have the property loadManagedPath (base name: "loadManagedPath")', function() {
      // uncomment below and update the code to test the property loadManagedPath
      //var instane = new CloudGovernanceApi.TreeNode();
      //expect(instance).to.be();
    });

    it('should have the property loadChildrenFromDB (base name: "loadChildrenFromDB")', function() {
      // uncomment below and update the code to test the property loadChildrenFromDB
      //var instane = new CloudGovernanceApi.TreeNode();
      //expect(instance).to.be();
    });

    it('should have the property loadedPageCount (base name: "loadedPageCount")', function() {
      // uncomment below and update the code to test the property loadedPageCount
      //var instane = new CloudGovernanceApi.TreeNode();
      //expect(instance).to.be();
    });

    it('should have the property children (base name: "children")', function() {
      // uncomment below and update the code to test the property children
      //var instane = new CloudGovernanceApi.TreeNode();
      //expect(instance).to.be();
    });

    it('should have the property selectedChildren (base name: "selectedChildren")', function() {
      // uncomment below and update the code to test the property selectedChildren
      //var instane = new CloudGovernanceApi.TreeNode();
      //expect(instance).to.be();
    });

    it('should have the property filterUrls (base name: "filterUrls")', function() {
      // uncomment below and update the code to test the property filterUrls
      //var instane = new CloudGovernanceApi.TreeNode();
      //expect(instance).to.be();
    });

    it('should have the property filterType (base name: "filterType")', function() {
      // uncomment below and update the code to test the property filterType
      //var instane = new CloudGovernanceApi.TreeNode();
      //expect(instance).to.be();
    });

    it('should have the property checkNumber (base name: "checkNumber")', function() {
      // uncomment below and update the code to test the property checkNumber
      //var instane = new CloudGovernanceApi.TreeNode();
      //expect(instance).to.be();
    });

    it('should have the property selectedWebAppIdSubSiteProvServ (base name: "selectedWebAppId_SubSiteProvServ")', function() {
      // uncomment below and update the code to test the property selectedWebAppIdSubSiteProvServ
      //var instane = new CloudGovernanceApi.TreeNode();
      //expect(instance).to.be();
    });

    it('should have the property selectedSiteCollIdsSubSiteProvServ (base name: "selectedSiteCollIds_SubSiteProvServ")', function() {
      // uncomment below and update the code to test the property selectedSiteCollIdsSubSiteProvServ
      //var instane = new CloudGovernanceApi.TreeNode();
      //expect(instance).to.be();
    });

    it('should have the property childrenType (base name: "childrenType")', function() {
      // uncomment below and update the code to test the property childrenType
      //var instane = new CloudGovernanceApi.TreeNode();
      //expect(instance).to.be();
    });

    it('should have the property listId (base name: "listId")', function() {
      // uncomment below and update the code to test the property listId
      //var instane = new CloudGovernanceApi.TreeNode();
      //expect(instance).to.be();
    });

    it('should have the property serverRelativeUrl (base name: "serverRelativeUrl")', function() {
      // uncomment below and update the code to test the property serverRelativeUrl
      //var instane = new CloudGovernanceApi.TreeNode();
      //expect(instance).to.be();
    });

    it('should have the property userName (base name: "userName")', function() {
      // uncomment below and update the code to test the property userName
      //var instane = new CloudGovernanceApi.TreeNode();
      //expect(instance).to.be();
    });

  });

}));
