/**
 * Cloud Governance Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.2.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiTermInfoPageResult', 'model/ApiUserPageResult', 'model/AzureADGroup', 'model/GuidModel', 'model/NodeType', 'model/PermissionLevel', 'model/SPGroup', 'model/SPNodePageResult', 'model/SPRoleAssignment', 'model/SiteInfo', 'model/SiteTemplate', 'model/StringModel', 'model/UserGroupPermissions', 'model/YammerGroup'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiTermInfoPageResult'), require('../model/ApiUserPageResult'), require('../model/AzureADGroup'), require('../model/GuidModel'), require('../model/NodeType'), require('../model/PermissionLevel'), require('../model/SPGroup'), require('../model/SPNodePageResult'), require('../model/SPRoleAssignment'), require('../model/SiteInfo'), require('../model/SiteTemplate'), require('../model/StringModel'), require('../model/UserGroupPermissions'), require('../model/YammerGroup'));
  } else {
    // Browser globals (root is window)
    if (!root.CgClient) {
      root.CgClient = {};
    }
    root.CgClient.Office365Api = factory(root.CgClient.ApiClient, root.CgClient.ApiTermInfoPageResult, root.CgClient.ApiUserPageResult, root.CgClient.AzureADGroup, root.CgClient.GuidModel, root.CgClient.NodeType, root.CgClient.PermissionLevel, root.CgClient.SPGroup, root.CgClient.SPNodePageResult, root.CgClient.SPRoleAssignment, root.CgClient.SiteInfo, root.CgClient.SiteTemplate, root.CgClient.StringModel, root.CgClient.UserGroupPermissions, root.CgClient.YammerGroup);
  }
}(this, function(ApiClient, ApiTermInfoPageResult, ApiUserPageResult, AzureADGroup, GuidModel, NodeType, PermissionLevel, SPGroup, SPNodePageResult, SPRoleAssignment, SiteInfo, SiteTemplate, StringModel, UserGroupPermissions, YammerGroup) {
  'use strict';

  /**
   * Office365 service.
   * @module api/Office365Api
   * @version 1.0
   */

  /**
   * Constructs a new Office365Api. 
   * @alias module:api/Office365Api
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * get group information
     * @param {String} tenantid 
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AzureADGroup} and HTTP response
     */
    this.getGroupInfoWithHttpInfo = function(tenantid, id) {
      var postBody = null;
      // verify the required parameter 'tenantid' is set
      if (tenantid === undefined || tenantid === null) {
        throw new Error("Missing the required parameter 'tenantid' when calling getGroupInfo");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGroupInfo");
      }

      var pathParams = {
        'tenantid': tenantid,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = AzureADGroup;
      return this.apiClient.callApi(
        '/office365/groups/{tenantid}/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get group information
     * @param {String} tenantid 
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AzureADGroup}
     */
    this.getGroupInfo = function(tenantid, id) {
      return this.getGroupInfoWithHttpInfo(tenantid, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get group members by group email
     * @param {String} email 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.top 
     * @param {Number} opts.skip 
     * @param {String} opts.search 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiUserPageResult} and HTTP response
     */
    this.getGroupMembersWithHttpInfo = function(email, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling getGroupMembers");
      }

      var pathParams = {
        'email': email
      };
      var queryParams = {
        'top': opts['top'],
        'skip': opts['skip'],
        'search': opts['search'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ApiUserPageResult;
      return this.apiClient.callApi(
        '/office365/groups/{email}/members', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get group members by group email
     * @param {String} email 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.top 
     * @param {Number} opts.skip 
     * @param {String} opts.search 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiUserPageResult}
     */
    this.getGroupMembers = function(email, opts) {
      return this.getGroupMembersWithHttpInfo(email, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get group members by group name
     * @param {String} url 
     * @param {Object} opts Optional parameters
     * @param {String} opts.name 
     * @param {Number} opts.top 
     * @param {Number} opts.skip 
     * @param {String} opts.search 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiUserPageResult} and HTTP response
     */
    this.getGroupMembersByGroupNameWithHttpInfo = function(url, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling getGroupMembersByGroupName");
      }

      var pathParams = {
      };
      var queryParams = {
        'name': opts['name'],
        'url': url,
        'top': opts['top'],
        'skip': opts['skip'],
        'search': opts['search'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ApiUserPageResult;
      return this.apiClient.callApi(
        '/office365/groups/members', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get group members by group name
     * @param {String} url 
     * @param {Object} opts Optional parameters
     * @param {String} opts.name 
     * @param {Number} opts.top 
     * @param {Number} opts.skip 
     * @param {String} opts.search 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiUserPageResult}
     */
    this.getGroupMembersByGroupName = function(url, opts) {
      return this.getGroupMembersByGroupNameWithHttpInfo(url, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get group owners by group email
     * @param {String} email 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.top 
     * @param {Number} opts.skip 
     * @param {String} opts.search 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiUserPageResult} and HTTP response
     */
    this.getGroupOwnersWithHttpInfo = function(email, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling getGroupOwners");
      }

      var pathParams = {
        'email': email
      };
      var queryParams = {
        'top': opts['top'],
        'skip': opts['skip'],
        'search': opts['search'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ApiUserPageResult;
      return this.apiClient.callApi(
        '/office365/groups/{email}/owners', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get group owners by group email
     * @param {String} email 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.top 
     * @param {Number} opts.skip 
     * @param {String} opts.search 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiUserPageResult}
     */
    this.getGroupOwners = function(email, opts) {
      return this.getGroupOwnersWithHttpInfo(email, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get all hubsites from a specific tenant
     * @param {String} tenantid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/GuidModel>} and HTTP response
     */
    this.getHubSitesWithHttpInfo = function(tenantid) {
      var postBody = null;
      // verify the required parameter 'tenantid' is set
      if (tenantid === undefined || tenantid === null) {
        throw new Error("Missing the required parameter 'tenantid' when calling getHubSites");
      }

      var pathParams = {
        'tenantid': tenantid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = [GuidModel];
      return this.apiClient.callApi(
        '/office365/hubsites/{tenantid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get all hubsites from a specific tenant
     * @param {String} tenantid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/GuidModel>}
     */
    this.getHubSites = function(tenantid) {
      return this.getHubSitesWithHttpInfo(tenantid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get all hubsites from site's tenant
     * @param {Object} opts Optional parameters
     * @param {String} opts.siteUrl any site url in your tenant
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/GuidModel>} and HTTP response
     */
    this.getHubSitesFromTenantOfSiteWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
        'siteUrl': opts['siteUrl'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = [GuidModel];
      return this.apiClient.callApi(
        '/office365/hubsites', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get all hubsites from site's tenant
     * @param {Object} opts Optional parameters
     * @param {String} opts.siteUrl any site url in your tenant
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/GuidModel>}
     */
    this.getHubSitesFromTenantOfSite = function(opts) {
      return this.getHubSitesFromTenantOfSiteWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get all teams that owner is curernt user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/GuidModel>} and HTTP response
     */
    this.getOwnedTeamsWithHttpInfo = function() {
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = [GuidModel];
      return this.apiClient.callApi(
        '/office365/teams/my', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get all teams that owner is curernt user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/GuidModel>}
     */
    this.getOwnedTeams = function() {
      return this.getOwnedTeamsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get web permissions for creating list request by web url
     * @param {String} webUrl 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UserGroupPermissions} and HTTP response
     */
    this.getPermissionsWithHttpInfo = function(webUrl) {
      var postBody = null;
      // verify the required parameter 'webUrl' is set
      if (webUrl === undefined || webUrl === null) {
        throw new Error("Missing the required parameter 'webUrl' when calling getPermissions");
      }

      var pathParams = {
      };
      var queryParams = {
        'webUrl': webUrl,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = UserGroupPermissions;
      return this.apiClient.callApi(
        '/office365/permissions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get web permissions for creating list request by web url
     * @param {String} webUrl 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserGroupPermissions}
     */
    this.getPermissions = function(webUrl) {
      return this.getPermissionsWithHttpInfo(webUrl)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get site permimssion role assignment
     * @param {String} url 
     * @param {module:model/NodeType} type 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/SPRoleAssignment>} and HTTP response
     */
    this.getRoleAssignmentWithHttpInfo = function(url, type) {
      var postBody = null;
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling getRoleAssignment");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getRoleAssignment");
      }

      var pathParams = {
      };
      var queryParams = {
        'url': url,
        'type': type,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = [SPRoleAssignment];
      return this.apiClient.callApi(
        '/office365/roleassignment', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get site permimssion role assignment
     * @param {String} url 
     * @param {module:model/NodeType} type 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/SPRoleAssignment>}
     */
    this.getRoleAssignment = function(url, type) {
      return this.getRoleAssignmentWithHttpInfo(url, type)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get site designs by site url
     * @param {Object} opts Optional parameters
     * @param {String} opts.siteUrl 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/StringModel>} and HTTP response
     */
    this.getSiteDesignsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
        'siteUrl': opts['siteUrl'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = [StringModel];
      return this.apiClient.callApi(
        '/office365/sitedesigns', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get site designs by site url
     * @param {Object} opts Optional parameters
     * @param {String} opts.siteUrl 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/StringModel>}
     */
    this.getSiteDesigns = function(opts) {
      return this.getSiteDesignsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get site collection information with url
     * @param {String} fullUrl 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SiteInfo} and HTTP response
     */
    this.getSiteInfoWithHttpInfo = function(fullUrl) {
      var postBody = null;
      // verify the required parameter 'fullUrl' is set
      if (fullUrl === undefined || fullUrl === null) {
        throw new Error("Missing the required parameter 'fullUrl' when calling getSiteInfo");
      }

      var pathParams = {
      };
      var queryParams = {
        'fullUrl': fullUrl,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = SiteInfo;
      return this.apiClient.callApi(
        '/office365/sites', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get site collection information with url
     * @param {String} fullUrl 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SiteInfo}
     */
    this.getSiteInfo = function(fullUrl) {
      return this.getSiteInfoWithHttpInfo(fullUrl)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get site permission levels
     * @param {String} uri 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PermissionLevel>} and HTTP response
     */
    this.getSitePermissionLevelsWithHttpInfo = function(uri) {
      var postBody = null;
      // verify the required parameter 'uri' is set
      if (uri === undefined || uri === null) {
        throw new Error("Missing the required parameter 'uri' when calling getSitePermissionLevels");
      }

      var pathParams = {
      };
      var queryParams = {
        'uri': uri,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = [PermissionLevel];
      return this.apiClient.callApi(
        '/office365/sites/permissionlevels', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get site permission levels
     * @param {String} uri 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PermissionLevel>}
     */
    this.getSitePermissionLevels = function(uri) {
      return this.getSitePermissionLevelsWithHttpInfo(uri)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get site sharePoint groups
     * @param {String} uri 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/SPGroup>} and HTTP response
     */
    this.getSiteSharePointGroupsWithHttpInfo = function(uri) {
      var postBody = null;
      // verify the required parameter 'uri' is set
      if (uri === undefined || uri === null) {
        throw new Error("Missing the required parameter 'uri' when calling getSiteSharePointGroups");
      }

      var pathParams = {
      };
      var queryParams = {
        'uri': uri,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = [SPGroup];
      return this.apiClient.callApi(
        '/office365/sites/sharepointgroups', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get site sharePoint groups
     * @param {String} uri 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/SPGroup>}
     */
    this.getSiteSharePointGroups = function(uri) {
      return this.getSiteSharePointGroupsWithHttpInfo(uri)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get site templates with language code identifier
     * @param {Number} languageid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.url 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/SiteTemplate>} and HTTP response
     */
    this.getSiteTemplatesWithHttpInfo = function(languageid, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'languageid' is set
      if (languageid === undefined || languageid === null) {
        throw new Error("Missing the required parameter 'languageid' when calling getSiteTemplates");
      }

      var pathParams = {
        'languageid': languageid
      };
      var queryParams = {
        'url': opts['url'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = [SiteTemplate];
      return this.apiClient.callApi(
        '/office365/sites/templates/{languageid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get site templates with language code identifier
     * @param {Number} languageid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.url 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/SiteTemplate>}
     */
    this.getSiteTemplates = function(languageid, opts) {
      return this.getSiteTemplatesWithHttpInfo(languageid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get yammer group
     * @param {String} networkid 
     * @param {String} name 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/YammerGroup} and HTTP response
     */
    this.getYammerGroupWithHttpInfo = function(networkid, name) {
      var postBody = null;
      // verify the required parameter 'networkid' is set
      if (networkid === undefined || networkid === null) {
        throw new Error("Missing the required parameter 'networkid' when calling getYammerGroup");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getYammerGroup");
      }

      var pathParams = {
        'networkid': networkid,
        'name': name
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = YammerGroup;
      return this.apiClient.callApi(
        '/office365/yammergroup/{networkid}/{name}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get yammer group
     * @param {String} networkid 
     * @param {String} name 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/YammerGroup}
     */
    this.getYammerGroup = function(networkid, name) {
      return this.getYammerGroupWithHttpInfo(networkid, name)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * load the containers from cloud management
     * @param {String} serviceid If the service is content manager, you need use Serviceid_Source or Serviceid_Destination to load the source or destination tree
     * @param {Object} opts Optional parameters
     * @param {Number} opts.top 
     * @param {Number} opts.skip 
     * @param {String} opts.search 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SPNodePageResult} and HTTP response
     */
    this.loadContainersWithHttpInfo = function(serviceid, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'serviceid' is set
      if (serviceid === undefined || serviceid === null) {
        throw new Error("Missing the required parameter 'serviceid' when calling loadContainers");
      }

      var pathParams = {
        'serviceid': serviceid
      };
      var queryParams = {
        'top': opts['top'],
        'skip': opts['skip'],
        'search': opts['search'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = SPNodePageResult;
      return this.apiClient.callApi(
        '/office365/containers/{serviceid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * load the containers from cloud management
     * @param {String} serviceid If the service is content manager, you need use Serviceid_Source or Serviceid_Destination to load the source or destination tree
     * @param {Object} opts Optional parameters
     * @param {Number} opts.top 
     * @param {Number} opts.skip 
     * @param {String} opts.search 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SPNodePageResult}
     */
    this.loadContainers = function(serviceid, opts) {
      return this.loadContainersWithHttpInfo(serviceid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * load sharepoint folders
     * @param {String} listid 
     * @param {String} folderorlisturl 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.top 
     * @param {Number} opts.skip 
     * @param {String} opts.search 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SPNodePageResult} and HTTP response
     */
    this.loadFoldersWithHttpInfo = function(listid, folderorlisturl, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'listid' is set
      if (listid === undefined || listid === null) {
        throw new Error("Missing the required parameter 'listid' when calling loadFolders");
      }
      // verify the required parameter 'folderorlisturl' is set
      if (folderorlisturl === undefined || folderorlisturl === null) {
        throw new Error("Missing the required parameter 'folderorlisturl' when calling loadFolders");
      }

      var pathParams = {
        'listid': listid
      };
      var queryParams = {
        'folderorlisturl': folderorlisturl,
        'top': opts['top'],
        'skip': opts['skip'],
        'search': opts['search'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = SPNodePageResult;
      return this.apiClient.callApi(
        '/office365/folders/{listid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * load sharepoint folders
     * @param {String} listid 
     * @param {String} folderorlisturl 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.top 
     * @param {Number} opts.skip 
     * @param {String} opts.search 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SPNodePageResult}
     */
    this.loadFolders = function(listid, folderorlisturl, opts) {
      return this.loadFoldersWithHttpInfo(listid, folderorlisturl, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * load sharepoint items
     * @param {String} listid 
     * @param {String} folderorlisturl 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.top 
     * @param {Number} opts.skip 
     * @param {String} opts.search 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SPNodePageResult} and HTTP response
     */
    this.loadItemsWithHttpInfo = function(listid, folderorlisturl, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'listid' is set
      if (listid === undefined || listid === null) {
        throw new Error("Missing the required parameter 'listid' when calling loadItems");
      }
      // verify the required parameter 'folderorlisturl' is set
      if (folderorlisturl === undefined || folderorlisturl === null) {
        throw new Error("Missing the required parameter 'folderorlisturl' when calling loadItems");
      }

      var pathParams = {
        'listid': listid
      };
      var queryParams = {
        'folderorlisturl': folderorlisturl,
        'top': opts['top'],
        'skip': opts['skip'],
        'search': opts['search'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = SPNodePageResult;
      return this.apiClient.callApi(
        '/office365/items/{listid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * load sharepoint items
     * @param {String} listid 
     * @param {String} folderorlisturl 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.top 
     * @param {Number} opts.skip 
     * @param {String} opts.search 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SPNodePageResult}
     */
    this.loadItems = function(listid, folderorlisturl, opts) {
      return this.loadItemsWithHttpInfo(listid, folderorlisturl, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * load sharepoint lists
     * @param {String} siteorweburl 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.top 
     * @param {Number} opts.skip 
     * @param {String} opts.search 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SPNodePageResult} and HTTP response
     */
    this.loadListsWithHttpInfo = function(siteorweburl, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'siteorweburl' is set
      if (siteorweburl === undefined || siteorweburl === null) {
        throw new Error("Missing the required parameter 'siteorweburl' when calling loadLists");
      }

      var pathParams = {
      };
      var queryParams = {
        'siteorweburl': siteorweburl,
        'top': opts['top'],
        'skip': opts['skip'],
        'search': opts['search'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = SPNodePageResult;
      return this.apiClient.callApi(
        '/office365/lists', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * load sharepoint lists
     * @param {String} siteorweburl 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.top 
     * @param {Number} opts.skip 
     * @param {String} opts.search 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SPNodePageResult}
     */
    this.loadLists = function(siteorweburl, opts) {
      return this.loadListsWithHttpInfo(siteorweburl, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * load managed metadata terms
     * @param {String} termStoreid 
     * @param {String} groupid 
     * @param {String} termsetid 
     * @param {String} parentid 
     * @param {String} admincenterurl 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip 
     * @param {Number} opts.top 
     * @param {String} opts.search 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiTermInfoPageResult} and HTTP response
     */
    this.loadManagedMetadataWithHttpInfo = function(termStoreid, groupid, termsetid, parentid, admincenterurl, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'termStoreid' is set
      if (termStoreid === undefined || termStoreid === null) {
        throw new Error("Missing the required parameter 'termStoreid' when calling loadManagedMetadata");
      }
      // verify the required parameter 'groupid' is set
      if (groupid === undefined || groupid === null) {
        throw new Error("Missing the required parameter 'groupid' when calling loadManagedMetadata");
      }
      // verify the required parameter 'termsetid' is set
      if (termsetid === undefined || termsetid === null) {
        throw new Error("Missing the required parameter 'termsetid' when calling loadManagedMetadata");
      }
      // verify the required parameter 'parentid' is set
      if (parentid === undefined || parentid === null) {
        throw new Error("Missing the required parameter 'parentid' when calling loadManagedMetadata");
      }
      // verify the required parameter 'admincenterurl' is set
      if (admincenterurl === undefined || admincenterurl === null) {
        throw new Error("Missing the required parameter 'admincenterurl' when calling loadManagedMetadata");
      }

      var pathParams = {
        'termStoreid': termStoreid,
        'groupid': groupid,
        'termsetid': termsetid,
        'parentid': parentid
      };
      var queryParams = {
        'admincenterurl': admincenterurl,
        'skip': opts['skip'],
        'top': opts['top'],
        'search': opts['search'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ApiTermInfoPageResult;
      return this.apiClient.callApi(
        '/office365/managedmetadata/{termStoreid}/{groupid}/{termsetid}/{parentid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * load managed metadata terms
     * @param {String} termStoreid 
     * @param {String} groupid 
     * @param {String} termsetid 
     * @param {String} parentid 
     * @param {String} admincenterurl 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip 
     * @param {Number} opts.top 
     * @param {String} opts.search 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiTermInfoPageResult}
     */
    this.loadManagedMetadata = function(termStoreid, groupid, termsetid, parentid, admincenterurl, opts) {
      return this.loadManagedMetadataWithHttpInfo(termStoreid, groupid, termsetid, parentid, admincenterurl, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * load sharepoint sites
     * @param {String} serviceid If the service is content manager, you need use Serviceid_Source or Serviceid_Destination to load the source or destination tree
     * @param {String} containerid 
     * @param {Boolean} isselected 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.top 
     * @param {Number} opts.skip 
     * @param {String} opts.search 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SPNodePageResult} and HTTP response
     */
    this.loadManagedSitesWithHttpInfo = function(serviceid, containerid, isselected, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'serviceid' is set
      if (serviceid === undefined || serviceid === null) {
        throw new Error("Missing the required parameter 'serviceid' when calling loadManagedSites");
      }
      // verify the required parameter 'containerid' is set
      if (containerid === undefined || containerid === null) {
        throw new Error("Missing the required parameter 'containerid' when calling loadManagedSites");
      }
      // verify the required parameter 'isselected' is set
      if (isselected === undefined || isselected === null) {
        throw new Error("Missing the required parameter 'isselected' when calling loadManagedSites");
      }

      var pathParams = {
        'serviceid': serviceid,
        'containerid': containerid,
        'isselected': isselected
      };
      var queryParams = {
        'top': opts['top'],
        'skip': opts['skip'],
        'search': opts['search'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = SPNodePageResult;
      return this.apiClient.callApi(
        '/office365/managedsites/{serviceid}/{containerid}/{isselected}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * load sharepoint sites
     * @param {String} serviceid If the service is content manager, you need use Serviceid_Source or Serviceid_Destination to load the source or destination tree
     * @param {String} containerid 
     * @param {Boolean} isselected 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.top 
     * @param {Number} opts.skip 
     * @param {String} opts.search 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SPNodePageResult}
     */
    this.loadManagedSites = function(serviceid, containerid, isselected, opts) {
      return this.loadManagedSitesWithHttpInfo(serviceid, containerid, isselected, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * load sharepoint webs
     * @param {String} serviceid If the service is content manager, you need use Serviceid_Source or Serviceid_Destination to load the source or destination tree
     * @param {String} siteorwebid 
     * @param {Boolean} isselected 
     * @param {Boolean} issite 
     * @param {String} siteOrWebUrl 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.top 
     * @param {Number} opts.skip 
     * @param {String} opts.search 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SPNodePageResult} and HTTP response
     */
    this.loadWebsWithHttpInfo = function(serviceid, siteorwebid, isselected, issite, siteOrWebUrl, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'serviceid' is set
      if (serviceid === undefined || serviceid === null) {
        throw new Error("Missing the required parameter 'serviceid' when calling loadWebs");
      }
      // verify the required parameter 'siteorwebid' is set
      if (siteorwebid === undefined || siteorwebid === null) {
        throw new Error("Missing the required parameter 'siteorwebid' when calling loadWebs");
      }
      // verify the required parameter 'isselected' is set
      if (isselected === undefined || isselected === null) {
        throw new Error("Missing the required parameter 'isselected' when calling loadWebs");
      }
      // verify the required parameter 'issite' is set
      if (issite === undefined || issite === null) {
        throw new Error("Missing the required parameter 'issite' when calling loadWebs");
      }
      // verify the required parameter 'siteOrWebUrl' is set
      if (siteOrWebUrl === undefined || siteOrWebUrl === null) {
        throw new Error("Missing the required parameter 'siteOrWebUrl' when calling loadWebs");
      }

      var pathParams = {
        'serviceid': serviceid,
        'siteorwebid': siteorwebid,
        'isselected': isselected,
        'issite': issite
      };
      var queryParams = {
        'siteOrWebUrl': siteOrWebUrl,
        'top': opts['top'],
        'skip': opts['skip'],
        'search': opts['search'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = SPNodePageResult;
      return this.apiClient.callApi(
        '/office365/webs/{serviceid}/{siteorwebid}/{isselected}/{issite}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * load sharepoint webs
     * @param {String} serviceid If the service is content manager, you need use Serviceid_Source or Serviceid_Destination to load the source or destination tree
     * @param {String} siteorwebid 
     * @param {Boolean} isselected 
     * @param {Boolean} issite 
     * @param {String} siteOrWebUrl 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.top 
     * @param {Number} opts.skip 
     * @param {String} opts.search 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SPNodePageResult}
     */
    this.loadWebs = function(serviceid, siteorwebid, isselected, issite, siteOrWebUrl, opts) {
      return this.loadWebsWithHttpInfo(serviceid, siteorwebid, isselected, issite, siteOrWebUrl, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
