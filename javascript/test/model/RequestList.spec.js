/**
 * Cloud Governance Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CloudGovernanceApi);
  }
}(this, function(expect, CloudGovernanceApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CloudGovernanceApi.RequestList();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('RequestList', function() {
    it('should create an instance of RequestList', function() {
      // uncomment below and update the code to test RequestList
      //var instane = new CloudGovernanceApi.RequestList();
      //expect(instance).to.be.a(CloudGovernanceApi.RequestList);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new CloudGovernanceApi.RequestList();
      //expect(instance).to.be();
    });

    it('should have the property serviceId (base name: "serviceId")', function() {
      // uncomment below and update the code to test the property serviceId
      //var instane = new CloudGovernanceApi.RequestList();
      //expect(instance).to.be();
    });

    it('should have the property serviceName (base name: "serviceName")', function() {
      // uncomment below and update the code to test the property serviceName
      //var instane = new CloudGovernanceApi.RequestList();
      //expect(instance).to.be();
    });

    it('should have the property serviceType (base name: "serviceType")', function() {
      // uncomment below and update the code to test the property serviceType
      //var instane = new CloudGovernanceApi.RequestList();
      //expect(instance).to.be();
    });

    it('should have the property serviceTypeDescription (base name: "serviceTypeDescription")', function() {
      // uncomment below and update the code to test the property serviceTypeDescription
      //var instane = new CloudGovernanceApi.RequestList();
      //expect(instance).to.be();
    });

    it('should have the property ticketNumber (base name: "ticketNumber")', function() {
      // uncomment below and update the code to test the property ticketNumber
      //var instane = new CloudGovernanceApi.RequestList();
      //expect(instance).to.be();
    });

    it('should have the property summary (base name: "summary")', function() {
      // uncomment below and update the code to test the property summary
      //var instane = new CloudGovernanceApi.RequestList();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instane = new CloudGovernanceApi.RequestList();
      //expect(instance).to.be();
    });

    it('should have the property processStatus (base name: "processStatus")', function() {
      // uncomment below and update the code to test the property processStatus
      //var instane = new CloudGovernanceApi.RequestList();
      //expect(instance).to.be();
    });

    it('should have the property statusDescription (base name: "statusDescription")', function() {
      // uncomment below and update the code to test the property statusDescription
      //var instane = new CloudGovernanceApi.RequestList();
      //expect(instance).to.be();
    });

    it('should have the property modified (base name: "modified")', function() {
      // uncomment below and update the code to test the property modified
      //var instane = new CloudGovernanceApi.RequestList();
      //expect(instance).to.be();
    });

    it('should have the property submitStatus (base name: "submitStatus")', function() {
      // uncomment below and update the code to test the property submitStatus
      //var instane = new CloudGovernanceApi.RequestList();
      //expect(instance).to.be();
    });

    it('should have the property assigned (base name: "assigned")', function() {
      // uncomment below and update the code to test the property assigned
      //var instane = new CloudGovernanceApi.RequestList();
      //expect(instance).to.be();
    });

    it('should have the property serviceAdmin (base name: "serviceAdmin")', function() {
      // uncomment below and update the code to test the property serviceAdmin
      //var instane = new CloudGovernanceApi.RequestList();
      //expect(instance).to.be();
    });

    it('should have the property enabledCopy (base name: "enabledCopy")', function() {
      // uncomment below and update the code to test the property enabledCopy
      //var instane = new CloudGovernanceApi.RequestList();
      //expect(instance).to.be();
    });

    it('should have the property questionnaireId (base name: "questionnaireId")', function() {
      // uncomment below and update the code to test the property questionnaireId
      //var instane = new CloudGovernanceApi.RequestList();
      //expect(instance).to.be();
    });

  });

}));
