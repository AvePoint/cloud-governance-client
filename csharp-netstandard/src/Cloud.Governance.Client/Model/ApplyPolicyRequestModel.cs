/* 
 * Cloud Governance Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Cloud.Governance.Client.Client.OpenAPIDateConverter;

namespace Cloud.Governance.Client.Model
{
    /// <summary>
    /// ApplyPolicyRequestModel
    /// </summary>
    [DataContract]
    public partial class ApplyPolicyRequestModel :  IEquatable<ApplyPolicyRequestModel>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets StartDateType
        /// </summary>
        [DataMember(Name="startDateType", EmitDefaultValue=false)]
        public StartDateType? StartDateType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplyPolicyRequestModel" /> class.
        /// </summary>
        /// <param name="policyId">policyId.</param>
        /// <param name="locationId">locationId.</param>
        /// <param name="folderUrl">folderUrl.</param>
        /// <param name="startDateType">startDateType.</param>
        /// <param name="isCheckLock">isCheckLock.</param>
        /// <param name="filter">filter.</param>
        /// <param name="selectedObjectsId">selectedObjectsId.</param>
        /// <param name="specifyDateTicks">specifyDateTicks.</param>
        /// <param name="isExportLocation">isExportLocation.</param>
        public ApplyPolicyRequestModel(Guid policyId = default(Guid), int locationId = default(int), string folderUrl = default(string), StartDateType startDateType = default(StartDateType), bool isCheckLock = default(bool), string filter = default(string), List<Guid> selectedObjectsId = default(List<Guid>), long specifyDateTicks = default(long), bool isExportLocation = default(bool))
        {
            this.PolicyId = policyId;
            this.LocationId = locationId;
            this.FolderUrl = folderUrl;
            this.StartDateType = startDateType;
            this.IsCheckLock = isCheckLock;
            this.Filter = filter;
            this.SelectedObjectsId = selectedObjectsId;
            this.SpecifyDateTicks = specifyDateTicks;
            this.IsExportLocation = isExportLocation;
        }
        
        /// <summary>
        /// Gets or Sets PolicyId
        /// </summary>
        [DataMember(Name="policyId", EmitDefaultValue=false)]
        public Guid PolicyId { get; set; }

        /// <summary>
        /// Gets or Sets LocationId
        /// </summary>
        [DataMember(Name="locationId", EmitDefaultValue=false)]
        public int LocationId { get; set; }

        /// <summary>
        /// Gets or Sets FolderUrl
        /// </summary>
        [DataMember(Name="folderUrl", EmitDefaultValue=true)]
        public string FolderUrl { get; set; }

        /// <summary>
        /// Gets or Sets IsCheckLock
        /// </summary>
        [DataMember(Name="isCheckLock", EmitDefaultValue=false)]
        public bool IsCheckLock { get; set; }

        /// <summary>
        /// Gets or Sets Filter
        /// </summary>
        [DataMember(Name="filter", EmitDefaultValue=true)]
        public string Filter { get; set; }

        /// <summary>
        /// Gets or Sets SelectedObjectsId
        /// </summary>
        [DataMember(Name="selectedObjectsId", EmitDefaultValue=true)]
        public List<Guid> SelectedObjectsId { get; set; }

        /// <summary>
        /// Gets or Sets SpecifyDateTicks
        /// </summary>
        [DataMember(Name="specifyDateTicks", EmitDefaultValue=false)]
        public long SpecifyDateTicks { get; set; }

        /// <summary>
        /// Gets or Sets IsExportLocation
        /// </summary>
        [DataMember(Name="isExportLocation", EmitDefaultValue=false)]
        public bool IsExportLocation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApplyPolicyRequestModel {\n");
            sb.Append("  PolicyId: ").Append(PolicyId).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  FolderUrl: ").Append(FolderUrl).Append("\n");
            sb.Append("  StartDateType: ").Append(StartDateType).Append("\n");
            sb.Append("  IsCheckLock: ").Append(IsCheckLock).Append("\n");
            sb.Append("  Filter: ").Append(Filter).Append("\n");
            sb.Append("  SelectedObjectsId: ").Append(SelectedObjectsId).Append("\n");
            sb.Append("  SpecifyDateTicks: ").Append(SpecifyDateTicks).Append("\n");
            sb.Append("  IsExportLocation: ").Append(IsExportLocation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApplyPolicyRequestModel);
        }

        /// <summary>
        /// Returns true if ApplyPolicyRequestModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ApplyPolicyRequestModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApplyPolicyRequestModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PolicyId == input.PolicyId ||
                    (this.PolicyId != null &&
                    this.PolicyId.Equals(input.PolicyId))
                ) && 
                (
                    this.LocationId == input.LocationId ||
                    this.LocationId.Equals(input.LocationId)
                ) && 
                (
                    this.FolderUrl == input.FolderUrl ||
                    (this.FolderUrl != null &&
                    this.FolderUrl.Equals(input.FolderUrl))
                ) && 
                (
                    this.StartDateType == input.StartDateType ||
                    this.StartDateType.Equals(input.StartDateType)
                ) && 
                (
                    this.IsCheckLock == input.IsCheckLock ||
                    this.IsCheckLock.Equals(input.IsCheckLock)
                ) && 
                (
                    this.Filter == input.Filter ||
                    (this.Filter != null &&
                    this.Filter.Equals(input.Filter))
                ) && 
                (
                    this.SelectedObjectsId == input.SelectedObjectsId ||
                    this.SelectedObjectsId != null &&
                    input.SelectedObjectsId != null &&
                    this.SelectedObjectsId.SequenceEqual(input.SelectedObjectsId)
                ) && 
                (
                    this.SpecifyDateTicks == input.SpecifyDateTicks ||
                    this.SpecifyDateTicks.Equals(input.SpecifyDateTicks)
                ) && 
                (
                    this.IsExportLocation == input.IsExportLocation ||
                    this.IsExportLocation.Equals(input.IsExportLocation)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PolicyId != null)
                    hashCode = hashCode * 59 + this.PolicyId.GetHashCode();
                hashCode = hashCode * 59 + this.LocationId.GetHashCode();
                if (this.FolderUrl != null)
                    hashCode = hashCode * 59 + this.FolderUrl.GetHashCode();
                hashCode = hashCode * 59 + this.StartDateType.GetHashCode();
                hashCode = hashCode * 59 + this.IsCheckLock.GetHashCode();
                if (this.Filter != null)
                    hashCode = hashCode * 59 + this.Filter.GetHashCode();
                if (this.SelectedObjectsId != null)
                    hashCode = hashCode * 59 + this.SelectedObjectsId.GetHashCode();
                hashCode = hashCode * 59 + this.SpecifyDateTicks.GetHashCode();
                hashCode = hashCode * 59 + this.IsExportLocation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
