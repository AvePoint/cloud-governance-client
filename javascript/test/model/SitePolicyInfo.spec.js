/**
 * Cloud Governance Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CloudGovernanceApi);
  }
}(this, function(expect, CloudGovernanceApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CloudGovernanceApi.SitePolicyInfo();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SitePolicyInfo', function() {
    it('should create an instance of SitePolicyInfo', function() {
      // uncomment below and update the code to test SitePolicyInfo
      //var instane = new CloudGovernanceApi.SitePolicyInfo();
      //expect(instance).to.be.a(CloudGovernanceApi.SitePolicyInfo);
    });

    it('should have the property quotaSetting (base name: "quotaSetting")', function() {
      // uncomment below and update the code to test the property quotaSetting
      //var instane = new CloudGovernanceApi.SitePolicyInfo();
      //expect(instance).to.be();
    });

    it('should have the property sharingSetting (base name: "sharingSetting")', function() {
      // uncomment below and update the code to test the property sharingSetting
      //var instane = new CloudGovernanceApi.SitePolicyInfo();
      //expect(instance).to.be();
    });

    it('should have the property isDesignerEnabled (base name: "isDesignerEnabled")', function() {
      // uncomment below and update the code to test the property isDesignerEnabled
      //var instane = new CloudGovernanceApi.SitePolicyInfo();
      //expect(instance).to.be();
    });

    it('should have the property siteMaxDepth (base name: "siteMaxDepth")', function() {
      // uncomment below and update the code to test the property siteMaxDepth
      //var instane = new CloudGovernanceApi.SitePolicyInfo();
      //expect(instance).to.be();
    });

    it('should have the property iconSetting (base name: "iconSetting")', function() {
      // uncomment below and update the code to test the property iconSetting
      //var instane = new CloudGovernanceApi.SitePolicyInfo();
      //expect(instance).to.be();
    });

    it('should have the property daoSetting (base name: "daoSetting")', function() {
      // uncomment below and update the code to test the property daoSetting
      //var instane = new CloudGovernanceApi.SitePolicyInfo();
      //expect(instance).to.be();
    });

    it('should have the property leasePeriodSetting (base name: "leasePeriodSetting")', function() {
      // uncomment below and update the code to test the property leasePeriodSetting
      //var instane = new CloudGovernanceApi.SitePolicyInfo();
      //expect(instance).to.be();
    });

    it('should have the property inactivitySetting (base name: "inactivitySetting")', function() {
      // uncomment below and update the code to test the property inactivitySetting
      //var instane = new CloudGovernanceApi.SitePolicyInfo();
      //expect(instance).to.be();
    });

    it('should have the property lifecycleSetting (base name: "lifecycleSetting")', function() {
      // uncomment below and update the code to test the property lifecycleSetting
      //var instane = new CloudGovernanceApi.SitePolicyInfo();
      //expect(instance).to.be();
    });

    it('should have the property recertificationSetting (base name: "recertificationSetting")', function() {
      // uncomment below and update the code to test the property recertificationSetting
      //var instane = new CloudGovernanceApi.SitePolicyInfo();
      //expect(instance).to.be();
    });

    it('should have the property renewalSetting (base name: "renewalSetting")', function() {
      // uncomment below and update the code to test the property renewalSetting
      //var instane = new CloudGovernanceApi.SitePolicyInfo();
      //expect(instance).to.be();
    });

    it('should have the property electionSetting (base name: "electionSetting")', function() {
      // uncomment below and update the code to test the property electionSetting
      //var instane = new CloudGovernanceApi.SitePolicyInfo();
      //expect(instance).to.be();
    });

    it('should have the property quotaThresholdSetting (base name: "quotaThresholdSetting")', function() {
      // uncomment below and update the code to test the property quotaThresholdSetting
      //var instane = new CloudGovernanceApi.SitePolicyInfo();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new CloudGovernanceApi.SitePolicyInfo();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instane = new CloudGovernanceApi.SitePolicyInfo();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instane = new CloudGovernanceApi.SitePolicyInfo();
      //expect(instance).to.be();
    });

    it('should have the property category (base name: "category")', function() {
      // uncomment below and update the code to test the property category
      //var instane = new CloudGovernanceApi.SitePolicyInfo();
      //expect(instance).to.be();
    });

    it('should have the property detail (base name: "detail")', function() {
      // uncomment below and update the code to test the property detail
      //var instane = new CloudGovernanceApi.SitePolicyInfo();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instane = new CloudGovernanceApi.SitePolicyInfo();
      //expect(instance).to.be();
    });

    it('should have the property farmId (base name: "farmId")', function() {
      // uncomment below and update the code to test the property farmId
      //var instane = new CloudGovernanceApi.SitePolicyInfo();
      //expect(instance).to.be();
    });

    it('should have the property createdTime (base name: "createdTime")', function() {
      // uncomment below and update the code to test the property createdTime
      //var instane = new CloudGovernanceApi.SitePolicyInfo();
      //expect(instance).to.be();
    });

    it('should have the property createdBy (base name: "createdBy")', function() {
      // uncomment below and update the code to test the property createdBy
      //var instane = new CloudGovernanceApi.SitePolicyInfo();
      //expect(instance).to.be();
    });

    it('should have the property isDeleted (base name: "isDeleted")', function() {
      // uncomment below and update the code to test the property isDeleted
      //var instane = new CloudGovernanceApi.SitePolicyInfo();
      //expect(instance).to.be();
    });

    it('should have the property modifiedTime (base name: "modifiedTime")', function() {
      // uncomment below and update the code to test the property modifiedTime
      //var instane = new CloudGovernanceApi.SitePolicyInfo();
      //expect(instance).to.be();
    });

    it('should have the property modifiedBy (base name: "modifiedBy")', function() {
      // uncomment below and update the code to test the property modifiedBy
      //var instane = new CloudGovernanceApi.SitePolicyInfo();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instane = new CloudGovernanceApi.SitePolicyInfo();
      //expect(instance).to.be();
    });

    it('should have the property isReferenced (base name: "isReferenced")', function() {
      // uncomment below and update the code to test the property isReferenced
      //var instane = new CloudGovernanceApi.SitePolicyInfo();
      //expect(instance).to.be();
    });

    it('should have the property reapplyPolicySetting (base name: "reapplyPolicySetting")', function() {
      // uncomment below and update the code to test the property reapplyPolicySetting
      //var instane = new CloudGovernanceApi.SitePolicyInfo();
      //expect(instance).to.be();
    });

  });

}));
