/* 
 * Cloud Governance Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Cloud.Governance.Client.Client.OpenAPIDateConverter;

namespace Cloud.Governance.Client.Model
{
    /// <summary>
    /// GroupThresholdSetting
    /// </summary>
    [DataContract]
    public partial class GroupThresholdSetting :  IEquatable<GroupThresholdSetting>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets DurationType
        /// </summary>
        [DataMember(Name="durationType", EmitDefaultValue=false)]
        public ApiDurationType? DurationType { get; set; }
        /// <summary>
        /// Gets or Sets AdditionalActionType
        /// </summary>
        [DataMember(Name="additionalActionType", EmitDefaultValue=false)]
        public AdditionalActionType? AdditionalActionType { get; set; }
        /// <summary>
        /// Gets or Sets DeleteDurationType
        /// </summary>
        [DataMember(Name="deleteDurationType", EmitDefaultValue=false)]
        public ApiDurationType? DeleteDurationType { get; set; }
        /// <summary>
        /// Gets or Sets ArchiveGroupDurationType
        /// </summary>
        [DataMember(Name="archiveGroupDurationType", EmitDefaultValue=false)]
        public ApiDurationType? ArchiveGroupDurationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupThresholdSetting" /> class.
        /// </summary>
        /// <param name="enabled">enabled.</param>
        /// <param name="duration">duration.</param>
        /// <param name="durationType">durationType.</param>
        /// <param name="thresholdApprovalProcess">thresholdApprovalProcess.</param>
        /// <param name="enableWarning">enableWarning.</param>
        /// <param name="warningProfile">warningProfile.</param>
        /// <param name="enableAdditionalAction">enableAdditionalAction.</param>
        /// <param name="additionalActionType">additionalActionType.</param>
        /// <param name="deleteGroupDuration">deleteGroupDuration.</param>
        /// <param name="deleteDurationType">deleteDurationType.</param>
        /// <param name="enableDeleteRemind">enableDeleteRemind.</param>
        /// <param name="deleteGroupReminder">deleteGroupReminder.</param>
        /// <param name="enableDeleteNotify">enableDeleteNotify.</param>
        /// <param name="deleteNotifyUsers">deleteNotifyUsers.</param>
        /// <param name="deleteNotifyEmail">deleteNotifyEmail.</param>
        /// <param name="archiveGroupDuration">archiveGroupDuration.</param>
        /// <param name="archiveGroupDurationType">archiveGroupDurationType.</param>
        /// <param name="enableArchiveRemind">enableArchiveRemind.</param>
        /// <param name="archiveGroupReminder">archiveGroupReminder.</param>
        /// <param name="enableArchiveNotify">enableArchiveNotify.</param>
        /// <param name="archiveNotifyUsers">archiveNotifyUsers.</param>
        /// <param name="archiveNotifyEmail">archiveNotifyEmail.</param>
        public GroupThresholdSetting(bool enabled = default(bool), int duration = default(int), ApiDurationType durationType = default(ApiDurationType), GuidModel thresholdApprovalProcess = default(GuidModel), bool enableWarning = default(bool), GuidModel warningProfile = default(GuidModel), bool enableAdditionalAction = default(bool), AdditionalActionType additionalActionType = default(AdditionalActionType), int deleteGroupDuration = default(int), ApiDurationType deleteDurationType = default(ApiDurationType), bool enableDeleteRemind = default(bool), GuidModel deleteGroupReminder = default(GuidModel), bool enableDeleteNotify = default(bool), List<ApiUser> deleteNotifyUsers = default(List<ApiUser>), GuidModel deleteNotifyEmail = default(GuidModel), int archiveGroupDuration = default(int), ApiDurationType archiveGroupDurationType = default(ApiDurationType), bool enableArchiveRemind = default(bool), GuidModel archiveGroupReminder = default(GuidModel), bool enableArchiveNotify = default(bool), List<ApiUser> archiveNotifyUsers = default(List<ApiUser>), GuidModel archiveNotifyEmail = default(GuidModel))
        {
            this.Enabled = enabled;
            this.Duration = duration;
            this.DurationType = durationType;
            this.ThresholdApprovalProcess = thresholdApprovalProcess;
            this.EnableWarning = enableWarning;
            this.WarningProfile = warningProfile;
            this.EnableAdditionalAction = enableAdditionalAction;
            this.AdditionalActionType = additionalActionType;
            this.DeleteGroupDuration = deleteGroupDuration;
            this.DeleteDurationType = deleteDurationType;
            this.EnableDeleteRemind = enableDeleteRemind;
            this.DeleteGroupReminder = deleteGroupReminder;
            this.EnableDeleteNotify = enableDeleteNotify;
            this.DeleteNotifyUsers = deleteNotifyUsers;
            this.DeleteNotifyEmail = deleteNotifyEmail;
            this.ArchiveGroupDuration = archiveGroupDuration;
            this.ArchiveGroupDurationType = archiveGroupDurationType;
            this.EnableArchiveRemind = enableArchiveRemind;
            this.ArchiveGroupReminder = archiveGroupReminder;
            this.EnableArchiveNotify = enableArchiveNotify;
            this.ArchiveNotifyUsers = archiveNotifyUsers;
            this.ArchiveNotifyEmail = archiveNotifyEmail;
        }
        
        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public int Duration { get; set; }

        /// <summary>
        /// Gets or Sets ThresholdApprovalProcess
        /// </summary>
        [DataMember(Name="thresholdApprovalProcess", EmitDefaultValue=true)]
        public GuidModel ThresholdApprovalProcess { get; set; }

        /// <summary>
        /// Gets or Sets EnableWarning
        /// </summary>
        [DataMember(Name="enableWarning", EmitDefaultValue=false)]
        public bool EnableWarning { get; set; }

        /// <summary>
        /// Gets or Sets WarningProfile
        /// </summary>
        [DataMember(Name="warningProfile", EmitDefaultValue=true)]
        public GuidModel WarningProfile { get; set; }

        /// <summary>
        /// Gets or Sets EnableAdditionalAction
        /// </summary>
        [DataMember(Name="enableAdditionalAction", EmitDefaultValue=false)]
        public bool EnableAdditionalAction { get; set; }

        /// <summary>
        /// Gets or Sets DeleteGroupDuration
        /// </summary>
        [DataMember(Name="deleteGroupDuration", EmitDefaultValue=false)]
        public int DeleteGroupDuration { get; set; }

        /// <summary>
        /// Gets or Sets EnableDeleteRemind
        /// </summary>
        [DataMember(Name="enableDeleteRemind", EmitDefaultValue=false)]
        public bool EnableDeleteRemind { get; set; }

        /// <summary>
        /// Gets or Sets DeleteGroupReminder
        /// </summary>
        [DataMember(Name="deleteGroupReminder", EmitDefaultValue=true)]
        public GuidModel DeleteGroupReminder { get; set; }

        /// <summary>
        /// Gets or Sets EnableDeleteNotify
        /// </summary>
        [DataMember(Name="enableDeleteNotify", EmitDefaultValue=false)]
        public bool EnableDeleteNotify { get; set; }

        /// <summary>
        /// Gets or Sets DeleteNotifyUsers
        /// </summary>
        [DataMember(Name="deleteNotifyUsers", EmitDefaultValue=true)]
        public List<ApiUser> DeleteNotifyUsers { get; set; }

        /// <summary>
        /// Gets or Sets DeleteNotifyEmail
        /// </summary>
        [DataMember(Name="deleteNotifyEmail", EmitDefaultValue=true)]
        public GuidModel DeleteNotifyEmail { get; set; }

        /// <summary>
        /// Gets or Sets ArchiveGroupDuration
        /// </summary>
        [DataMember(Name="archiveGroupDuration", EmitDefaultValue=false)]
        public int ArchiveGroupDuration { get; set; }

        /// <summary>
        /// Gets or Sets EnableArchiveRemind
        /// </summary>
        [DataMember(Name="enableArchiveRemind", EmitDefaultValue=false)]
        public bool EnableArchiveRemind { get; set; }

        /// <summary>
        /// Gets or Sets ArchiveGroupReminder
        /// </summary>
        [DataMember(Name="archiveGroupReminder", EmitDefaultValue=true)]
        public GuidModel ArchiveGroupReminder { get; set; }

        /// <summary>
        /// Gets or Sets EnableArchiveNotify
        /// </summary>
        [DataMember(Name="enableArchiveNotify", EmitDefaultValue=false)]
        public bool EnableArchiveNotify { get; set; }

        /// <summary>
        /// Gets or Sets ArchiveNotifyUsers
        /// </summary>
        [DataMember(Name="archiveNotifyUsers", EmitDefaultValue=true)]
        public List<ApiUser> ArchiveNotifyUsers { get; set; }

        /// <summary>
        /// Gets or Sets ArchiveNotifyEmail
        /// </summary>
        [DataMember(Name="archiveNotifyEmail", EmitDefaultValue=true)]
        public GuidModel ArchiveNotifyEmail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GroupThresholdSetting {\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  DurationType: ").Append(DurationType).Append("\n");
            sb.Append("  ThresholdApprovalProcess: ").Append(ThresholdApprovalProcess).Append("\n");
            sb.Append("  EnableWarning: ").Append(EnableWarning).Append("\n");
            sb.Append("  WarningProfile: ").Append(WarningProfile).Append("\n");
            sb.Append("  EnableAdditionalAction: ").Append(EnableAdditionalAction).Append("\n");
            sb.Append("  AdditionalActionType: ").Append(AdditionalActionType).Append("\n");
            sb.Append("  DeleteGroupDuration: ").Append(DeleteGroupDuration).Append("\n");
            sb.Append("  DeleteDurationType: ").Append(DeleteDurationType).Append("\n");
            sb.Append("  EnableDeleteRemind: ").Append(EnableDeleteRemind).Append("\n");
            sb.Append("  DeleteGroupReminder: ").Append(DeleteGroupReminder).Append("\n");
            sb.Append("  EnableDeleteNotify: ").Append(EnableDeleteNotify).Append("\n");
            sb.Append("  DeleteNotifyUsers: ").Append(DeleteNotifyUsers).Append("\n");
            sb.Append("  DeleteNotifyEmail: ").Append(DeleteNotifyEmail).Append("\n");
            sb.Append("  ArchiveGroupDuration: ").Append(ArchiveGroupDuration).Append("\n");
            sb.Append("  ArchiveGroupDurationType: ").Append(ArchiveGroupDurationType).Append("\n");
            sb.Append("  EnableArchiveRemind: ").Append(EnableArchiveRemind).Append("\n");
            sb.Append("  ArchiveGroupReminder: ").Append(ArchiveGroupReminder).Append("\n");
            sb.Append("  EnableArchiveNotify: ").Append(EnableArchiveNotify).Append("\n");
            sb.Append("  ArchiveNotifyUsers: ").Append(ArchiveNotifyUsers).Append("\n");
            sb.Append("  ArchiveNotifyEmail: ").Append(ArchiveNotifyEmail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GroupThresholdSetting);
        }

        /// <summary>
        /// Returns true if GroupThresholdSetting instances are equal
        /// </summary>
        /// <param name="input">Instance of GroupThresholdSetting to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GroupThresholdSetting input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Enabled == input.Enabled ||
                    this.Enabled.Equals(input.Enabled)
                ) && 
                (
                    this.Duration == input.Duration ||
                    this.Duration.Equals(input.Duration)
                ) && 
                (
                    this.DurationType == input.DurationType ||
                    this.DurationType.Equals(input.DurationType)
                ) && 
                (
                    this.ThresholdApprovalProcess == input.ThresholdApprovalProcess ||
                    (this.ThresholdApprovalProcess != null &&
                    this.ThresholdApprovalProcess.Equals(input.ThresholdApprovalProcess))
                ) && 
                (
                    this.EnableWarning == input.EnableWarning ||
                    this.EnableWarning.Equals(input.EnableWarning)
                ) && 
                (
                    this.WarningProfile == input.WarningProfile ||
                    (this.WarningProfile != null &&
                    this.WarningProfile.Equals(input.WarningProfile))
                ) && 
                (
                    this.EnableAdditionalAction == input.EnableAdditionalAction ||
                    this.EnableAdditionalAction.Equals(input.EnableAdditionalAction)
                ) && 
                (
                    this.AdditionalActionType == input.AdditionalActionType ||
                    this.AdditionalActionType.Equals(input.AdditionalActionType)
                ) && 
                (
                    this.DeleteGroupDuration == input.DeleteGroupDuration ||
                    this.DeleteGroupDuration.Equals(input.DeleteGroupDuration)
                ) && 
                (
                    this.DeleteDurationType == input.DeleteDurationType ||
                    this.DeleteDurationType.Equals(input.DeleteDurationType)
                ) && 
                (
                    this.EnableDeleteRemind == input.EnableDeleteRemind ||
                    this.EnableDeleteRemind.Equals(input.EnableDeleteRemind)
                ) && 
                (
                    this.DeleteGroupReminder == input.DeleteGroupReminder ||
                    (this.DeleteGroupReminder != null &&
                    this.DeleteGroupReminder.Equals(input.DeleteGroupReminder))
                ) && 
                (
                    this.EnableDeleteNotify == input.EnableDeleteNotify ||
                    this.EnableDeleteNotify.Equals(input.EnableDeleteNotify)
                ) && 
                (
                    this.DeleteNotifyUsers == input.DeleteNotifyUsers ||
                    this.DeleteNotifyUsers != null &&
                    input.DeleteNotifyUsers != null &&
                    this.DeleteNotifyUsers.SequenceEqual(input.DeleteNotifyUsers)
                ) && 
                (
                    this.DeleteNotifyEmail == input.DeleteNotifyEmail ||
                    (this.DeleteNotifyEmail != null &&
                    this.DeleteNotifyEmail.Equals(input.DeleteNotifyEmail))
                ) && 
                (
                    this.ArchiveGroupDuration == input.ArchiveGroupDuration ||
                    this.ArchiveGroupDuration.Equals(input.ArchiveGroupDuration)
                ) && 
                (
                    this.ArchiveGroupDurationType == input.ArchiveGroupDurationType ||
                    this.ArchiveGroupDurationType.Equals(input.ArchiveGroupDurationType)
                ) && 
                (
                    this.EnableArchiveRemind == input.EnableArchiveRemind ||
                    this.EnableArchiveRemind.Equals(input.EnableArchiveRemind)
                ) && 
                (
                    this.ArchiveGroupReminder == input.ArchiveGroupReminder ||
                    (this.ArchiveGroupReminder != null &&
                    this.ArchiveGroupReminder.Equals(input.ArchiveGroupReminder))
                ) && 
                (
                    this.EnableArchiveNotify == input.EnableArchiveNotify ||
                    this.EnableArchiveNotify.Equals(input.EnableArchiveNotify)
                ) && 
                (
                    this.ArchiveNotifyUsers == input.ArchiveNotifyUsers ||
                    this.ArchiveNotifyUsers != null &&
                    input.ArchiveNotifyUsers != null &&
                    this.ArchiveNotifyUsers.SequenceEqual(input.ArchiveNotifyUsers)
                ) && 
                (
                    this.ArchiveNotifyEmail == input.ArchiveNotifyEmail ||
                    (this.ArchiveNotifyEmail != null &&
                    this.ArchiveNotifyEmail.Equals(input.ArchiveNotifyEmail))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                hashCode = hashCode * 59 + this.Duration.GetHashCode();
                hashCode = hashCode * 59 + this.DurationType.GetHashCode();
                if (this.ThresholdApprovalProcess != null)
                    hashCode = hashCode * 59 + this.ThresholdApprovalProcess.GetHashCode();
                hashCode = hashCode * 59 + this.EnableWarning.GetHashCode();
                if (this.WarningProfile != null)
                    hashCode = hashCode * 59 + this.WarningProfile.GetHashCode();
                hashCode = hashCode * 59 + this.EnableAdditionalAction.GetHashCode();
                hashCode = hashCode * 59 + this.AdditionalActionType.GetHashCode();
                hashCode = hashCode * 59 + this.DeleteGroupDuration.GetHashCode();
                hashCode = hashCode * 59 + this.DeleteDurationType.GetHashCode();
                hashCode = hashCode * 59 + this.EnableDeleteRemind.GetHashCode();
                if (this.DeleteGroupReminder != null)
                    hashCode = hashCode * 59 + this.DeleteGroupReminder.GetHashCode();
                hashCode = hashCode * 59 + this.EnableDeleteNotify.GetHashCode();
                if (this.DeleteNotifyUsers != null)
                    hashCode = hashCode * 59 + this.DeleteNotifyUsers.GetHashCode();
                if (this.DeleteNotifyEmail != null)
                    hashCode = hashCode * 59 + this.DeleteNotifyEmail.GetHashCode();
                hashCode = hashCode * 59 + this.ArchiveGroupDuration.GetHashCode();
                hashCode = hashCode * 59 + this.ArchiveGroupDurationType.GetHashCode();
                hashCode = hashCode * 59 + this.EnableArchiveRemind.GetHashCode();
                if (this.ArchiveGroupReminder != null)
                    hashCode = hashCode * 59 + this.ArchiveGroupReminder.GetHashCode();
                hashCode = hashCode * 59 + this.EnableArchiveNotify.GetHashCode();
                if (this.ArchiveNotifyUsers != null)
                    hashCode = hashCode * 59 + this.ArchiveNotifyUsers.GetHashCode();
                if (this.ArchiveNotifyEmail != null)
                    hashCode = hashCode * 59 + this.ArchiveNotifyEmail.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
