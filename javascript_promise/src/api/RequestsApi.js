/**
 * Cloud Governance Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.2.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiRequest', 'model/ArchiveGroupRequest', 'model/ArchiveSiteRequest', 'model/ArchiveWebLifecycleRequest', 'model/ChangeGroupPolicyRequest', 'model/ChangeGroupQuotaRequest', 'model/ChangeGroupSettingRequest', 'model/ChangeListSettingRequest', 'model/ChangePermissionRequest', 'model/ChangeSiteContactRequest', 'model/ChangeSitePolicyRequest', 'model/ChangeSiteQuotaRequest', 'model/ChangeSiteSettingRequest', 'model/ChangeWebContactRequest', 'model/ChangeWebSettingRequest', 'model/ClonePermissionRequest', 'model/ContentMoveRequest', 'model/CreateGroupRequest', 'model/CreateListRequest', 'model/CreateSiteRequest', 'model/CreateWebRequest', 'model/DeleteGroupRequest', 'model/DeleteSiteRequest', 'model/DeleteWebLifecycleRequest', 'model/DistinctPageResult', 'model/ExtendGroupRequest', 'model/ExtendSiteRequest', 'model/GrantPermissionRequest', 'model/LockSiteRequest', 'model/ManagePermissionRequest', 'model/PermissionChangedActionItemPageResult', 'model/RequestListPageResult', 'model/RestoreGroupRequest', 'model/SecuritySearchResult', 'model/UnlockSiteRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiRequest'), require('../model/ArchiveGroupRequest'), require('../model/ArchiveSiteRequest'), require('../model/ArchiveWebLifecycleRequest'), require('../model/ChangeGroupPolicyRequest'), require('../model/ChangeGroupQuotaRequest'), require('../model/ChangeGroupSettingRequest'), require('../model/ChangeListSettingRequest'), require('../model/ChangePermissionRequest'), require('../model/ChangeSiteContactRequest'), require('../model/ChangeSitePolicyRequest'), require('../model/ChangeSiteQuotaRequest'), require('../model/ChangeSiteSettingRequest'), require('../model/ChangeWebContactRequest'), require('../model/ChangeWebSettingRequest'), require('../model/ClonePermissionRequest'), require('../model/ContentMoveRequest'), require('../model/CreateGroupRequest'), require('../model/CreateListRequest'), require('../model/CreateSiteRequest'), require('../model/CreateWebRequest'), require('../model/DeleteGroupRequest'), require('../model/DeleteSiteRequest'), require('../model/DeleteWebLifecycleRequest'), require('../model/DistinctPageResult'), require('../model/ExtendGroupRequest'), require('../model/ExtendSiteRequest'), require('../model/GrantPermissionRequest'), require('../model/LockSiteRequest'), require('../model/ManagePermissionRequest'), require('../model/PermissionChangedActionItemPageResult'), require('../model/RequestListPageResult'), require('../model/RestoreGroupRequest'), require('../model/SecuritySearchResult'), require('../model/UnlockSiteRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.CgClient) {
      root.CgClient = {};
    }
    root.CgClient.RequestsApi = factory(root.CgClient.ApiClient, root.CgClient.ApiRequest, root.CgClient.ArchiveGroupRequest, root.CgClient.ArchiveSiteRequest, root.CgClient.ArchiveWebLifecycleRequest, root.CgClient.ChangeGroupPolicyRequest, root.CgClient.ChangeGroupQuotaRequest, root.CgClient.ChangeGroupSettingRequest, root.CgClient.ChangeListSettingRequest, root.CgClient.ChangePermissionRequest, root.CgClient.ChangeSiteContactRequest, root.CgClient.ChangeSitePolicyRequest, root.CgClient.ChangeSiteQuotaRequest, root.CgClient.ChangeSiteSettingRequest, root.CgClient.ChangeWebContactRequest, root.CgClient.ChangeWebSettingRequest, root.CgClient.ClonePermissionRequest, root.CgClient.ContentMoveRequest, root.CgClient.CreateGroupRequest, root.CgClient.CreateListRequest, root.CgClient.CreateSiteRequest, root.CgClient.CreateWebRequest, root.CgClient.DeleteGroupRequest, root.CgClient.DeleteSiteRequest, root.CgClient.DeleteWebLifecycleRequest, root.CgClient.DistinctPageResult, root.CgClient.ExtendGroupRequest, root.CgClient.ExtendSiteRequest, root.CgClient.GrantPermissionRequest, root.CgClient.LockSiteRequest, root.CgClient.ManagePermissionRequest, root.CgClient.PermissionChangedActionItemPageResult, root.CgClient.RequestListPageResult, root.CgClient.RestoreGroupRequest, root.CgClient.SecuritySearchResult, root.CgClient.UnlockSiteRequest);
  }
}(this, function(ApiClient, ApiRequest, ArchiveGroupRequest, ArchiveSiteRequest, ArchiveWebLifecycleRequest, ChangeGroupPolicyRequest, ChangeGroupQuotaRequest, ChangeGroupSettingRequest, ChangeListSettingRequest, ChangePermissionRequest, ChangeSiteContactRequest, ChangeSitePolicyRequest, ChangeSiteQuotaRequest, ChangeSiteSettingRequest, ChangeWebContactRequest, ChangeWebSettingRequest, ClonePermissionRequest, ContentMoveRequest, CreateGroupRequest, CreateListRequest, CreateSiteRequest, CreateWebRequest, DeleteGroupRequest, DeleteSiteRequest, DeleteWebLifecycleRequest, DistinctPageResult, ExtendGroupRequest, ExtendSiteRequest, GrantPermissionRequest, LockSiteRequest, ManagePermissionRequest, PermissionChangedActionItemPageResult, RequestListPageResult, RestoreGroupRequest, SecuritySearchResult, UnlockSiteRequest) {
  'use strict';

  /**
   * Requests service.
   * @module api/RequestsApi
   * @version 1.0
   */

  /**
   * Constructs a new RequestsApi. 
   * @alias module:api/RequestsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * cancel request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.cancelRequestWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cancelRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/requests/{id}/cancel', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * cancel request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.cancelRequest = function(id) {
      return this.cancelRequestWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get archive group request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArchiveGroupRequest} and HTTP response
     */
    this.getArchiveGroupRequestWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getArchiveGroupRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ArchiveGroupRequest;
      return this.apiClient.callApi(
        '/requests/archivegroup/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get archive group request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArchiveGroupRequest}
     */
    this.getArchiveGroupRequest = function(id) {
      return this.getArchiveGroupRequestWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get archive site request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArchiveSiteRequest} and HTTP response
     */
    this.getArchiveSiteRequestWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getArchiveSiteRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ArchiveSiteRequest;
      return this.apiClient.callApi(
        '/requests/archivesite/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get archive site request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArchiveSiteRequest}
     */
    this.getArchiveSiteRequest = function(id) {
      return this.getArchiveSiteRequestWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get archive web request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArchiveWebLifecycleRequest} and HTTP response
     */
    this.getArchiveWebRequestWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getArchiveWebRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ArchiveWebLifecycleRequest;
      return this.apiClient.callApi(
        '/requests/archiveweb/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get archive web request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArchiveWebLifecycleRequest}
     */
    this.getArchiveWebRequest = function(id) {
      return this.getArchiveWebRequestWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get change group policy request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ChangeGroupPolicyRequest} and HTTP response
     */
    this.getChagneGroupPolicyRequestWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChagneGroupPolicyRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ChangeGroupPolicyRequest;
      return this.apiClient.callApi(
        '/requests/changegrouppolicy/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get change group policy request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ChangeGroupPolicyRequest}
     */
    this.getChagneGroupPolicyRequest = function(id) {
      return this.getChagneGroupPolicyRequestWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get change group quota request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ChangeGroupQuotaRequest} and HTTP response
     */
    this.getChangeGroupQuotaRequestWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChangeGroupQuotaRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ChangeGroupQuotaRequest;
      return this.apiClient.callApi(
        '/requests/changegroupquota/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get change group quota request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ChangeGroupQuotaRequest}
     */
    this.getChangeGroupQuotaRequest = function(id) {
      return this.getChangeGroupQuotaRequestWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get change group settings request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ChangeGroupSettingRequest} and HTTP response
     */
    this.getChangeGroupSettingRequestWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChangeGroupSettingRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ChangeGroupSettingRequest;
      return this.apiClient.callApi(
        '/requests/changegroup/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get change group settings request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ChangeGroupSettingRequest}
     */
    this.getChangeGroupSettingRequest = function(id) {
      return this.getChangeGroupSettingRequestWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get change list settings request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ChangeListSettingRequest} and HTTP response
     */
    this.getChangeListSettingRequestWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChangeListSettingRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ChangeListSettingRequest;
      return this.apiClient.callApi(
        '/requests/changelistsetting/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get change list settings request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ChangeListSettingRequest}
     */
    this.getChangeListSettingRequest = function(id) {
      return this.getChangeListSettingRequestWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get change permission request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ChangePermissionRequest} and HTTP response
     */
    this.getChangePermissionRequestWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChangePermissionRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ChangePermissionRequest;
      return this.apiClient.callApi(
        '/requests/changepermission/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get change permission request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ChangePermissionRequest}
     */
    this.getChangePermissionRequest = function(id) {
      return this.getChangePermissionRequestWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get change site administrator or contact request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ChangeSiteContactRequest} and HTTP response
     */
    this.getChangeSiteContactRequestWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChangeSiteContactRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ChangeSiteContactRequest;
      return this.apiClient.callApi(
        '/requests/changesite/adminorcontact/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get change site administrator or contact request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ChangeSiteContactRequest}
     */
    this.getChangeSiteContactRequest = function(id) {
      return this.getChangeSiteContactRequestWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get change site policy request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ChangeSitePolicyRequest} and HTTP response
     */
    this.getChangeSitePolicyRequestWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChangeSitePolicyRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ChangeSitePolicyRequest;
      return this.apiClient.callApi(
        '/requests/changesitepolicy/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get change site policy request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ChangeSitePolicyRequest}
     */
    this.getChangeSitePolicyRequest = function(id) {
      return this.getChangeSitePolicyRequestWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get change site quota request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ChangeSiteQuotaRequest} and HTTP response
     */
    this.getChangeSiteQuotaRequestWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChangeSiteQuotaRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ChangeSiteQuotaRequest;
      return this.apiClient.callApi(
        '/requests/changesitequota/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get change site quota request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ChangeSiteQuotaRequest}
     */
    this.getChangeSiteQuotaRequest = function(id) {
      return this.getChangeSiteQuotaRequestWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get change site settings request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ChangeSiteSettingRequest} and HTTP response
     */
    this.getChangeSiteSettingRequestWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChangeSiteSettingRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ChangeSiteSettingRequest;
      return this.apiClient.callApi(
        '/requests/changesite/setting/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get change site settings request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ChangeSiteSettingRequest}
     */
    this.getChangeSiteSettingRequest = function(id) {
      return this.getChangeSiteSettingRequestWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get change web contact request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ChangeWebContactRequest} and HTTP response
     */
    this.getChangeWebContactRequestWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChangeWebContactRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ChangeWebContactRequest;
      return this.apiClient.callApi(
        '/requests/changewebcontact/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get change web contact request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ChangeWebContactRequest}
     */
    this.getChangeWebContactRequest = function(id) {
      return this.getChangeWebContactRequestWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get change web settings request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ChangeWebSettingRequest} and HTTP response
     */
    this.getChangeWebSettingRequestWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChangeWebSettingRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ChangeWebSettingRequest;
      return this.apiClient.callApi(
        '/requests/changewebsettings/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get change web settings request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ChangeWebSettingRequest}
     */
    this.getChangeWebSettingRequest = function(id) {
      return this.getChangeWebSettingRequestWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get changed permission items
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.search Search for displayName
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PermissionChangedActionItemPageResult} and HTTP response
     */
    this.getChangedPermissionItemsWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChangedPermissionItems");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'filter': opts['filter'],
        'orderby': opts['orderby'],
        'search': opts['search'],
        'top': opts['top'],
        'skip': opts['skip'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = PermissionChangedActionItemPageResult;
      return this.apiClient.callApi(
        '/requests/changepermission/{id}/result', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get changed permission items
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.search Search for displayName
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PermissionChangedActionItemPageResult}
     */
    this.getChangedPermissionItems = function(id, opts) {
      return this.getChangedPermissionItemsWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get clone permission request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClonePermissionRequest} and HTTP response
     */
    this.getClonePermissionRequestWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getClonePermissionRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ClonePermissionRequest;
      return this.apiClient.callApi(
        '/requests/clonepermission/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get clone permission request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClonePermissionRequest}
     */
    this.getClonePermissionRequest = function(id) {
      return this.getClonePermissionRequestWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get content move request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ContentMoveRequest} and HTTP response
     */
    this.getContentMoveRequestWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getContentMoveRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ContentMoveRequest;
      return this.apiClient.callApi(
        '/requests/contentmove/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get content move request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ContentMoveRequest}
     */
    this.getContentMoveRequest = function(id) {
      return this.getContentMoveRequestWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get create group request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateGroupRequest} and HTTP response
     */
    this.getCreateGroupRequestWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCreateGroupRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = CreateGroupRequest;
      return this.apiClient.callApi(
        '/requests/creategroup/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get create group request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateGroupRequest}
     */
    this.getCreateGroupRequest = function(id) {
      return this.getCreateGroupRequestWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get create list request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateListRequest} and HTTP response
     */
    this.getCreateListRequestWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCreateListRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = CreateListRequest;
      return this.apiClient.callApi(
        '/requests/createlist/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get create list request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateListRequest}
     */
    this.getCreateListRequest = function(id) {
      return this.getCreateListRequestWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get create site request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateSiteRequest} and HTTP response
     */
    this.getCreateSiteRequestWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCreateSiteRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = CreateSiteRequest;
      return this.apiClient.callApi(
        '/requests/createsite/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get create site request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateSiteRequest}
     */
    this.getCreateSiteRequest = function(id) {
      return this.getCreateSiteRequestWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get create web request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateWebRequest} and HTTP response
     */
    this.getCreateWebRequestWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCreateWebRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = CreateWebRequest;
      return this.apiClient.callApi(
        '/requests/createweb/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get create web request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateWebRequest}
     */
    this.getCreateWebRequest = function(id) {
      return this.getCreateWebRequestWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get custom service request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiRequest} and HTTP response
     */
    this.getCustomRequestWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCustomRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ApiRequest;
      return this.apiClient.callApi(
        '/requests/custom/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get custom service request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiRequest}
     */
    this.getCustomRequest = function(id) {
      return this.getCustomRequestWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get delete group request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeleteGroupRequest} and HTTP response
     */
    this.getDeleteGroupRequestWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDeleteGroupRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = DeleteGroupRequest;
      return this.apiClient.callApi(
        '/requests/deletegroup/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get delete group request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeleteGroupRequest}
     */
    this.getDeleteGroupRequest = function(id) {
      return this.getDeleteGroupRequestWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get delete site request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeleteSiteRequest} and HTTP response
     */
    this.getDeleteSiteRequestWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDeleteSiteRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = DeleteSiteRequest;
      return this.apiClient.callApi(
        '/requests/deletesite/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get delete site request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeleteSiteRequest}
     */
    this.getDeleteSiteRequest = function(id) {
      return this.getDeleteSiteRequestWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get delete web request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeleteWebLifecycleRequest} and HTTP response
     */
    this.getDeleteWebRequestWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDeleteWebRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = DeleteWebLifecycleRequest;
      return this.apiClient.callApi(
        '/requests/deleteweb/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get delete web request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeleteWebLifecycleRequest}
     */
    this.getDeleteWebRequest = function(id) {
      return this.getDeleteWebRequestWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get extend group request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ExtendGroupRequest} and HTTP response
     */
    this.getExtendGroupRequestWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getExtendGroupRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ExtendGroupRequest;
      return this.apiClient.callApi(
        '/requests/extendgroup/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get extend group request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ExtendGroupRequest}
     */
    this.getExtendGroupRequest = function(id) {
      return this.getExtendGroupRequestWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get extend site request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ExtendSiteRequest} and HTTP response
     */
    this.getExtendSiteRequestWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getExtendSiteRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ExtendSiteRequest;
      return this.apiClient.callApi(
        '/requests/extendsite/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get extend site request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ExtendSiteRequest}
     */
    this.getExtendSiteRequest = function(id) {
      return this.getExtendSiteRequestWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get grant permission request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GrantPermissionRequest} and HTTP response
     */
    this.getGrantPermissionRequestWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGrantPermissionRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = GrantPermissionRequest;
      return this.apiClient.callApi(
        '/requests/grantpermission/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get grant permission request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GrantPermissionRequest}
     */
    this.getGrantPermissionRequest = function(id) {
      return this.getGrantPermissionRequestWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get inherited sites for change permissin request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/SecuritySearchResult>} and HTTP response
     */
    this.getInheritedSitesForChangePermissionWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getInheritedSitesForChangePermission");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = [SecuritySearchResult];
      return this.apiClient.callApi(
        '/requests/changepermission/{id}/inheritedsites', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get inherited sites for change permissin request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/SecuritySearchResult>}
     */
    this.getInheritedSitesForChangePermission = function(id) {
      return this.getInheritedSitesForChangePermissionWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get lock site request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LockSiteRequest} and HTTP response
     */
    this.getLockSiteReuqestWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getLockSiteReuqest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = LockSiteRequest;
      return this.apiClient.callApi(
        '/requests/locksite/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get lock site request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LockSiteRequest}
     */
    this.getLockSiteReuqest = function(id) {
      return this.getLockSiteReuqestWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get manage permission request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ManagePermissionRequest} and HTTP response
     */
    this.getManagePermissionRequestWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getManagePermissionRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ManagePermissionRequest;
      return this.apiClient.callApi(
        '/requests/managepermission/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get manage permission request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ManagePermissionRequest}
     */
    this.getManagePermissionRequest = function(id) {
      return this.getManagePermissionRequestWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get my requests filters
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, serviceId, serviceName, serviceType, ticketNumber, summary, status, processStatus, modified, submitStatus, assigned, serviceAdmin, enabledCopy
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> id, serviceId, serviceName, serviceType, ticketNumber, summary, status, processStatus, modified, submitStatus, assigned, serviceAdmin, enabledCopy
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DistinctPageResult} and HTTP response
     */
    this.getMyRequestFiltersWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
        'filter': opts['filter'],
        'distinct': opts['distinct'],
        'top': opts['top'],
        'skip': opts['skip'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = DistinctPageResult;
      return this.apiClient.callApi(
        '/requests/my/filters', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get my requests filters
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, serviceId, serviceName, serviceType, ticketNumber, summary, status, processStatus, modified, submitStatus, assigned, serviceAdmin, enabledCopy
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> id, serviceId, serviceName, serviceType, ticketNumber, summary, status, processStatus, modified, submitStatus, assigned, serviceAdmin, enabledCopy
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DistinctPageResult}
     */
    this.getMyRequestFilters = function(opts) {
      return this.getMyRequestFiltersWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get my requests
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, serviceId, serviceName, serviceType, ticketNumber, summary, status, processStatus, modified, submitStatus, assigned, serviceAdmin, enabledCopy
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, serviceId, serviceName, serviceType, ticketNumber, summary, status, processStatus, modified, submitStatus, assigned, serviceAdmin, enabledCopy
     * @param {String} opts.search Search for summary
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RequestListPageResult} and HTTP response
     */
    this.getMyRequestsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
        'filter': opts['filter'],
        'orderby': opts['orderby'],
        'search': opts['search'],
        'top': opts['top'],
        'skip': opts['skip'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = RequestListPageResult;
      return this.apiClient.callApi(
        '/requests/my', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get my requests
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, serviceId, serviceName, serviceType, ticketNumber, summary, status, processStatus, modified, submitStatus, assigned, serviceAdmin, enabledCopy
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, serviceId, serviceName, serviceType, ticketNumber, summary, status, processStatus, modified, submitStatus, assigned, serviceAdmin, enabledCopy
     * @param {String} opts.search Search for summary
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RequestListPageResult}
     */
    this.getMyRequests = function(opts) {
      return this.getMyRequestsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get request by id
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiRequest} and HTTP response
     */
    this.getRequestByIdWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRequestById");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ApiRequest;
      return this.apiClient.callApi(
        '/requests/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get request by id
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiRequest}
     */
    this.getRequestById = function(id) {
      return this.getRequestByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get restore group request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestoreGroupRequest} and HTTP response
     */
    this.getRestoreGroupRequestWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRestoreGroupRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = RestoreGroupRequest;
      return this.apiClient.callApi(
        '/requests/restoregroup/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get restore group request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestoreGroupRequest}
     */
    this.getRestoreGroupRequest = function(id) {
      return this.getRestoreGroupRequestWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get unlock site request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UnlockSiteRequest} and HTTP response
     */
    this.getUnlockSiteRequestWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUnlockSiteRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = UnlockSiteRequest;
      return this.apiClient.callApi(
        '/requests/unlocksite/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get unlock site request
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UnlockSiteRequest}
     */
    this.getUnlockSiteRequest = function(id) {
      return this.getUnlockSiteRequestWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * submit archive group group request
     * @param {Object} opts Optional parameters
     * @param {module:model/ArchiveGroupRequest} opts.archiveGroupRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    this.submitArchiveGroupRequestWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['archiveGroupRequest'];

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';
      return this.apiClient.callApi(
        '/requests/archivegroup', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * submit archive group group request
     * @param {Object} opts Optional parameters
     * @param {module:model/ArchiveGroupRequest} opts.archiveGroupRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    this.submitArchiveGroupRequest = function(opts) {
      return this.submitArchiveGroupRequestWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * submit archive site request
     * @param {Object} opts Optional parameters
     * @param {module:model/ArchiveSiteRequest} opts.archiveSiteRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    this.submitArchiveSiteRequestWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['archiveSiteRequest'];

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';
      return this.apiClient.callApi(
        '/requests/archivesite', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * submit archive site request
     * @param {Object} opts Optional parameters
     * @param {module:model/ArchiveSiteRequest} opts.archiveSiteRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    this.submitArchiveSiteRequest = function(opts) {
      return this.submitArchiveSiteRequestWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * submit archive web request
     * @param {Object} opts Optional parameters
     * @param {module:model/ArchiveWebLifecycleRequest} opts.archiveWebLifecycleRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    this.submitArchiveWebRequestWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['archiveWebLifecycleRequest'];

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';
      return this.apiClient.callApi(
        '/requests/archiveweb', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * submit archive web request
     * @param {Object} opts Optional parameters
     * @param {module:model/ArchiveWebLifecycleRequest} opts.archiveWebLifecycleRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    this.submitArchiveWebRequest = function(opts) {
      return this.submitArchiveWebRequestWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * submit change group policy request
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeGroupPolicyRequest} opts.changeGroupPolicyRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    this.submitChangeGroupPolicyRequestWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['changeGroupPolicyRequest'];

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';
      return this.apiClient.callApi(
        '/requests/changegrouppolicy', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * submit change group policy request
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeGroupPolicyRequest} opts.changeGroupPolicyRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    this.submitChangeGroupPolicyRequest = function(opts) {
      return this.submitChangeGroupPolicyRequestWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * submit change group quota request
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeGroupQuotaRequest} opts.changeGroupQuotaRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    this.submitChangeGroupQuotaRequestWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['changeGroupQuotaRequest'];

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';
      return this.apiClient.callApi(
        '/requests/changegroupquota', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * submit change group quota request
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeGroupQuotaRequest} opts.changeGroupQuotaRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    this.submitChangeGroupQuotaRequest = function(opts) {
      return this.submitChangeGroupQuotaRequestWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * submit change group settings request
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeGroupSettingRequest} opts.changeGroupSettingRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    this.submitChangeGroupSettingRequestWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['changeGroupSettingRequest'];

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';
      return this.apiClient.callApi(
        '/requests/changegroup', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * submit change group settings request
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeGroupSettingRequest} opts.changeGroupSettingRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    this.submitChangeGroupSettingRequest = function(opts) {
      return this.submitChangeGroupSettingRequestWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * submit change list settings request
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeListSettingRequest} opts.changeListSettingRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    this.submitChangeListSettingRequestWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['changeListSettingRequest'];

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';
      return this.apiClient.callApi(
        '/requests/changelistsetting', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * submit change list settings request
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeListSettingRequest} opts.changeListSettingRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    this.submitChangeListSettingRequest = function(opts) {
      return this.submitChangeListSettingRequestWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * submit change permission request
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangePermissionRequest} opts.changePermissionRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    this.submitChangePermissionRequestWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['changePermissionRequest'];

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';
      return this.apiClient.callApi(
        '/requests/changepermission', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * submit change permission request
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangePermissionRequest} opts.changePermissionRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    this.submitChangePermissionRequest = function(opts) {
      return this.submitChangePermissionRequestWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * submit change site administrator or contact request
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeSiteContactRequest} opts.changeSiteContactRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    this.submitChangeSiteContactRequestWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['changeSiteContactRequest'];

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';
      return this.apiClient.callApi(
        '/requests/changesite/adminorcontact', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * submit change site administrator or contact request
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeSiteContactRequest} opts.changeSiteContactRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    this.submitChangeSiteContactRequest = function(opts) {
      return this.submitChangeSiteContactRequestWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * submit change site policy request
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeSitePolicyRequest} opts.changeSitePolicyRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    this.submitChangeSitePolicyRequestWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['changeSitePolicyRequest'];

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';
      return this.apiClient.callApi(
        '/requests/changesitepolicy', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * submit change site policy request
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeSitePolicyRequest} opts.changeSitePolicyRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    this.submitChangeSitePolicyRequest = function(opts) {
      return this.submitChangeSitePolicyRequestWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * submit change site quota request
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeSiteQuotaRequest} opts.changeSiteQuotaRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    this.submitChangeSiteQuotaRequestWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['changeSiteQuotaRequest'];

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';
      return this.apiClient.callApi(
        '/requests/changesitequota', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * submit change site quota request
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeSiteQuotaRequest} opts.changeSiteQuotaRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    this.submitChangeSiteQuotaRequest = function(opts) {
      return this.submitChangeSiteQuotaRequestWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * submit change site settings request
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeSiteSettingRequest} opts.changeSiteSettingRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    this.submitChangeSiteSettingRequestWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['changeSiteSettingRequest'];

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';
      return this.apiClient.callApi(
        '/requests/changesite/setting', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * submit change site settings request
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeSiteSettingRequest} opts.changeSiteSettingRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    this.submitChangeSiteSettingRequest = function(opts) {
      return this.submitChangeSiteSettingRequestWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * submit change web contact request
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeWebContactRequest} opts.changeWebContactRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    this.submitChangeWebContactRequestWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['changeWebContactRequest'];

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';
      return this.apiClient.callApi(
        '/requests/changewebcontact', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * submit change web contact request
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeWebContactRequest} opts.changeWebContactRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    this.submitChangeWebContactRequest = function(opts) {
      return this.submitChangeWebContactRequestWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * submit change web settings request
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeWebSettingRequest} opts.changeWebSettingRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    this.submitChangeWebSettingRequestWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['changeWebSettingRequest'];

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';
      return this.apiClient.callApi(
        '/requests/changewebsettings', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * submit change web settings request
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeWebSettingRequest} opts.changeWebSettingRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    this.submitChangeWebSettingRequest = function(opts) {
      return this.submitChangeWebSettingRequestWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get clone permission request
     * @param {Object} opts Optional parameters
     * @param {module:model/ClonePermissionRequest} opts.clonePermissionRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    this.submitClonePermissionRequestWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['clonePermissionRequest'];

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';
      return this.apiClient.callApi(
        '/requests/clonepermission', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get clone permission request
     * @param {Object} opts Optional parameters
     * @param {module:model/ClonePermissionRequest} opts.clonePermissionRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    this.submitClonePermissionRequest = function(opts) {
      return this.submitClonePermissionRequestWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * submit create content move request
     * @param {Object} opts Optional parameters
     * @param {module:model/ContentMoveRequest} opts.contentMoveRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    this.submitContentMoveRequestWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['contentMoveRequest'];

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';
      return this.apiClient.callApi(
        '/requests/contentmove', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * submit create content move request
     * @param {Object} opts Optional parameters
     * @param {module:model/ContentMoveRequest} opts.contentMoveRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    this.submitContentMoveRequest = function(opts) {
      return this.submitContentMoveRequestWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * submit create group request
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateGroupRequest} opts.createGroupRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    this.submitCreateGroupRequestWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['createGroupRequest'];

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';
      return this.apiClient.callApi(
        '/requests/creategroup', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * submit create group request
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateGroupRequest} opts.createGroupRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    this.submitCreateGroupRequest = function(opts) {
      return this.submitCreateGroupRequestWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * submit create list request
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateListRequest} opts.createListRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    this.submitCreateListRequestWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['createListRequest'];

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';
      return this.apiClient.callApi(
        '/requests/createlist', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * submit create list request
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateListRequest} opts.createListRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    this.submitCreateListRequest = function(opts) {
      return this.submitCreateListRequestWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * submit create site request
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateSiteRequest} opts.createSiteRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    this.submitCreateSiteRequestWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['createSiteRequest'];

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';
      return this.apiClient.callApi(
        '/requests/createsite', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * submit create site request
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateSiteRequest} opts.createSiteRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    this.submitCreateSiteRequest = function(opts) {
      return this.submitCreateSiteRequestWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * submit create web request
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateWebRequest} opts.createWebRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    this.submitCreateWebRequestWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['createWebRequest'];

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';
      return this.apiClient.callApi(
        '/requests/createweb', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * submit create web request
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateWebRequest} opts.createWebRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    this.submitCreateWebRequest = function(opts) {
      return this.submitCreateWebRequestWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * submit custom service request
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiRequest} opts.apiRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    this.submitCustomRequestWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['apiRequest'];

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';
      return this.apiClient.callApi(
        '/requests/custom', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * submit custom service request
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiRequest} opts.apiRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    this.submitCustomRequest = function(opts) {
      return this.submitCustomRequestWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * submit delete group request
     * @param {Object} opts Optional parameters
     * @param {module:model/DeleteGroupRequest} opts.deleteGroupRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    this.submitDeleteGroupRequestWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['deleteGroupRequest'];

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';
      return this.apiClient.callApi(
        '/requests/deletegroup', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * submit delete group request
     * @param {Object} opts Optional parameters
     * @param {module:model/DeleteGroupRequest} opts.deleteGroupRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    this.submitDeleteGroupRequest = function(opts) {
      return this.submitDeleteGroupRequestWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * submit delete site request
     * @param {Object} opts Optional parameters
     * @param {module:model/DeleteSiteRequest} opts.deleteSiteRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    this.submitDeleteSiteRequestWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['deleteSiteRequest'];

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';
      return this.apiClient.callApi(
        '/requests/deletesite', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * submit delete site request
     * @param {Object} opts Optional parameters
     * @param {module:model/DeleteSiteRequest} opts.deleteSiteRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    this.submitDeleteSiteRequest = function(opts) {
      return this.submitDeleteSiteRequestWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * submit delete web request
     * @param {Object} opts Optional parameters
     * @param {module:model/DeleteWebLifecycleRequest} opts.deleteWebLifecycleRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    this.submitDeleteWebRequestWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['deleteWebLifecycleRequest'];

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';
      return this.apiClient.callApi(
        '/requests/deleteweb', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * submit delete web request
     * @param {Object} opts Optional parameters
     * @param {module:model/DeleteWebLifecycleRequest} opts.deleteWebLifecycleRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    this.submitDeleteWebRequest = function(opts) {
      return this.submitDeleteWebRequestWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * submit extend group request
     * @param {Object} opts Optional parameters
     * @param {module:model/ExtendGroupRequest} opts.extendGroupRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    this.submitExtendGroupRequestWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['extendGroupRequest'];

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';
      return this.apiClient.callApi(
        '/requests/extendgroup', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * submit extend group request
     * @param {Object} opts Optional parameters
     * @param {module:model/ExtendGroupRequest} opts.extendGroupRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    this.submitExtendGroupRequest = function(opts) {
      return this.submitExtendGroupRequestWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * submit extend site request
     * @param {Object} opts Optional parameters
     * @param {module:model/ExtendSiteRequest} opts.extendSiteRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    this.submitExtendSiteRequestWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['extendSiteRequest'];

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';
      return this.apiClient.callApi(
        '/requests/extendsite', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * submit extend site request
     * @param {Object} opts Optional parameters
     * @param {module:model/ExtendSiteRequest} opts.extendSiteRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    this.submitExtendSiteRequest = function(opts) {
      return this.submitExtendSiteRequestWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get submit grant permission request
     * @param {Object} opts Optional parameters
     * @param {module:model/GrantPermissionRequest} opts.grantPermissionRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    this.submitGrantPermissionRequestWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['grantPermissionRequest'];

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';
      return this.apiClient.callApi(
        '/requests/grantpermission', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get submit grant permission request
     * @param {Object} opts Optional parameters
     * @param {module:model/GrantPermissionRequest} opts.grantPermissionRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    this.submitGrantPermissionRequest = function(opts) {
      return this.submitGrantPermissionRequestWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * submit lock site request
     * @param {Object} opts Optional parameters
     * @param {module:model/LockSiteRequest} opts.lockSiteRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    this.submitLockSiteRequestWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['lockSiteRequest'];

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';
      return this.apiClient.callApi(
        '/requests/locksite', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * submit lock site request
     * @param {Object} opts Optional parameters
     * @param {module:model/LockSiteRequest} opts.lockSiteRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    this.submitLockSiteRequest = function(opts) {
      return this.submitLockSiteRequestWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * submit manage permission request
     * @param {Object} opts Optional parameters
     * @param {module:model/ManagePermissionRequest} opts.managePermissionRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    this.submitManagePermimssionRequestWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['managePermissionRequest'];

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';
      return this.apiClient.callApi(
        '/requests/managepermission', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * submit manage permission request
     * @param {Object} opts Optional parameters
     * @param {module:model/ManagePermissionRequest} opts.managePermissionRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    this.submitManagePermimssionRequest = function(opts) {
      return this.submitManagePermimssionRequestWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * submit restore group request
     * @param {Object} opts Optional parameters
     * @param {module:model/RestoreGroupRequest} opts.restoreGroupRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    this.submitRestoreGroupRequestWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['restoreGroupRequest'];

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';
      return this.apiClient.callApi(
        '/requests/restoregroup', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * submit restore group request
     * @param {Object} opts Optional parameters
     * @param {module:model/RestoreGroupRequest} opts.restoreGroupRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    this.submitRestoreGroupRequest = function(opts) {
      return this.submitRestoreGroupRequestWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * submit unlock site request
     * @param {Object} opts Optional parameters
     * @param {module:model/UnlockSiteRequest} opts.unlockSiteRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    this.submitUnlockSiteRequestWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['unlockSiteRequest'];

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';
      return this.apiClient.callApi(
        '/requests/unlocksite', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * submit unlock site request
     * @param {Object} opts Optional parameters
     * @param {module:model/UnlockSiteRequest} opts.unlockSiteRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    this.submitUnlockSiteRequest = function(opts) {
      return this.submitUnlockSiteRequestWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
