/* 
 * Cloud Governance Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Cloud.Governance.Client.Client.OpenAPIDateConverter;

namespace Cloud.Governance.Client.Model
{
    /// <summary>
    /// TimerConfigurationModel
    /// </summary>
    [DataContract]
    public partial class TimerConfigurationModel :  IEquatable<TimerConfigurationModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TimerConfigurationModel" /> class.
        /// </summary>
        /// <param name="isRecertificationJobEnabled">isRecertificationJobEnabled.</param>
        /// <param name="siteStatusScanJob">siteStatusScanJob.</param>
        /// <param name="webSynchronizationJob">webSynchronizationJob.</param>
        /// <param name="siteSynchronizationJob">siteSynchronizationJob.</param>
        /// <param name="siteContentArchivalJob">siteContentArchivalJob.</param>
        /// <param name="siteContactStatusScanJob">siteContactStatusScanJob.</param>
        /// <param name="groupOrTeamsSynchronizationJob">groupOrTeamsSynchronizationJob.</param>
        /// <param name="userProfileMetadataSynchronizationJob">userProfileMetadataSynchronizationJob.</param>
        /// <param name="userProfileRoleMetadataSynchronizationJob">userProfileRoleMetadataSynchronizationJob.</param>
        public TimerConfigurationModel(bool isRecertificationJobEnabled = default(bool), TimerConfigurationItem siteStatusScanJob = default(TimerConfigurationItem), TimerConfigurationItem webSynchronizationJob = default(TimerConfigurationItem), TimerConfigurationItem siteSynchronizationJob = default(TimerConfigurationItem), TimerConfigurationItem siteContentArchivalJob = default(TimerConfigurationItem), TimerConfigurationItem siteContactStatusScanJob = default(TimerConfigurationItem), TimerConfigurationItem groupOrTeamsSynchronizationJob = default(TimerConfigurationItem), TimerConfigurationItem userProfileMetadataSynchronizationJob = default(TimerConfigurationItem), TimerConfigurationItem userProfileRoleMetadataSynchronizationJob = default(TimerConfigurationItem))
        {
            this.IsRecertificationJobEnabled = isRecertificationJobEnabled;
            this.SiteStatusScanJob = siteStatusScanJob;
            this.WebSynchronizationJob = webSynchronizationJob;
            this.SiteSynchronizationJob = siteSynchronizationJob;
            this.SiteContentArchivalJob = siteContentArchivalJob;
            this.SiteContactStatusScanJob = siteContactStatusScanJob;
            this.GroupOrTeamsSynchronizationJob = groupOrTeamsSynchronizationJob;
            this.UserProfileMetadataSynchronizationJob = userProfileMetadataSynchronizationJob;
            this.UserProfileRoleMetadataSynchronizationJob = userProfileRoleMetadataSynchronizationJob;
        }
        
        /// <summary>
        /// Gets or Sets IsRecertificationJobEnabled
        /// </summary>
        [DataMember(Name="isRecertificationJobEnabled", EmitDefaultValue=false)]
        public bool IsRecertificationJobEnabled { get; set; }

        /// <summary>
        /// Gets or Sets SiteStatusScanJob
        /// </summary>
        [DataMember(Name="siteStatusScanJob", EmitDefaultValue=true)]
        public TimerConfigurationItem SiteStatusScanJob { get; set; }

        /// <summary>
        /// Gets or Sets WebSynchronizationJob
        /// </summary>
        [DataMember(Name="webSynchronizationJob", EmitDefaultValue=true)]
        public TimerConfigurationItem WebSynchronizationJob { get; set; }

        /// <summary>
        /// Gets or Sets SiteSynchronizationJob
        /// </summary>
        [DataMember(Name="siteSynchronizationJob", EmitDefaultValue=true)]
        public TimerConfigurationItem SiteSynchronizationJob { get; set; }

        /// <summary>
        /// Gets or Sets SiteContentArchivalJob
        /// </summary>
        [DataMember(Name="siteContentArchivalJob", EmitDefaultValue=true)]
        public TimerConfigurationItem SiteContentArchivalJob { get; set; }

        /// <summary>
        /// Gets or Sets SiteContactStatusScanJob
        /// </summary>
        [DataMember(Name="siteContactStatusScanJob", EmitDefaultValue=true)]
        public TimerConfigurationItem SiteContactStatusScanJob { get; set; }

        /// <summary>
        /// Gets or Sets GroupOrTeamsSynchronizationJob
        /// </summary>
        [DataMember(Name="groupOrTeamsSynchronizationJob", EmitDefaultValue=true)]
        public TimerConfigurationItem GroupOrTeamsSynchronizationJob { get; set; }

        /// <summary>
        /// Gets or Sets UserProfileMetadataSynchronizationJob
        /// </summary>
        [DataMember(Name="userProfileMetadataSynchronizationJob", EmitDefaultValue=true)]
        public TimerConfigurationItem UserProfileMetadataSynchronizationJob { get; set; }

        /// <summary>
        /// Gets or Sets UserProfileRoleMetadataSynchronizationJob
        /// </summary>
        [DataMember(Name="userProfileRoleMetadataSynchronizationJob", EmitDefaultValue=true)]
        public TimerConfigurationItem UserProfileRoleMetadataSynchronizationJob { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TimerConfigurationModel {\n");
            sb.Append("  IsRecertificationJobEnabled: ").Append(IsRecertificationJobEnabled).Append("\n");
            sb.Append("  SiteStatusScanJob: ").Append(SiteStatusScanJob).Append("\n");
            sb.Append("  WebSynchronizationJob: ").Append(WebSynchronizationJob).Append("\n");
            sb.Append("  SiteSynchronizationJob: ").Append(SiteSynchronizationJob).Append("\n");
            sb.Append("  SiteContentArchivalJob: ").Append(SiteContentArchivalJob).Append("\n");
            sb.Append("  SiteContactStatusScanJob: ").Append(SiteContactStatusScanJob).Append("\n");
            sb.Append("  GroupOrTeamsSynchronizationJob: ").Append(GroupOrTeamsSynchronizationJob).Append("\n");
            sb.Append("  UserProfileMetadataSynchronizationJob: ").Append(UserProfileMetadataSynchronizationJob).Append("\n");
            sb.Append("  UserProfileRoleMetadataSynchronizationJob: ").Append(UserProfileRoleMetadataSynchronizationJob).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TimerConfigurationModel);
        }

        /// <summary>
        /// Returns true if TimerConfigurationModel instances are equal
        /// </summary>
        /// <param name="input">Instance of TimerConfigurationModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TimerConfigurationModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IsRecertificationJobEnabled == input.IsRecertificationJobEnabled ||
                    this.IsRecertificationJobEnabled.Equals(input.IsRecertificationJobEnabled)
                ) && 
                (
                    this.SiteStatusScanJob == input.SiteStatusScanJob ||
                    (this.SiteStatusScanJob != null &&
                    this.SiteStatusScanJob.Equals(input.SiteStatusScanJob))
                ) && 
                (
                    this.WebSynchronizationJob == input.WebSynchronizationJob ||
                    (this.WebSynchronizationJob != null &&
                    this.WebSynchronizationJob.Equals(input.WebSynchronizationJob))
                ) && 
                (
                    this.SiteSynchronizationJob == input.SiteSynchronizationJob ||
                    (this.SiteSynchronizationJob != null &&
                    this.SiteSynchronizationJob.Equals(input.SiteSynchronizationJob))
                ) && 
                (
                    this.SiteContentArchivalJob == input.SiteContentArchivalJob ||
                    (this.SiteContentArchivalJob != null &&
                    this.SiteContentArchivalJob.Equals(input.SiteContentArchivalJob))
                ) && 
                (
                    this.SiteContactStatusScanJob == input.SiteContactStatusScanJob ||
                    (this.SiteContactStatusScanJob != null &&
                    this.SiteContactStatusScanJob.Equals(input.SiteContactStatusScanJob))
                ) && 
                (
                    this.GroupOrTeamsSynchronizationJob == input.GroupOrTeamsSynchronizationJob ||
                    (this.GroupOrTeamsSynchronizationJob != null &&
                    this.GroupOrTeamsSynchronizationJob.Equals(input.GroupOrTeamsSynchronizationJob))
                ) && 
                (
                    this.UserProfileMetadataSynchronizationJob == input.UserProfileMetadataSynchronizationJob ||
                    (this.UserProfileMetadataSynchronizationJob != null &&
                    this.UserProfileMetadataSynchronizationJob.Equals(input.UserProfileMetadataSynchronizationJob))
                ) && 
                (
                    this.UserProfileRoleMetadataSynchronizationJob == input.UserProfileRoleMetadataSynchronizationJob ||
                    (this.UserProfileRoleMetadataSynchronizationJob != null &&
                    this.UserProfileRoleMetadataSynchronizationJob.Equals(input.UserProfileRoleMetadataSynchronizationJob))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.IsRecertificationJobEnabled.GetHashCode();
                if (this.SiteStatusScanJob != null)
                    hashCode = hashCode * 59 + this.SiteStatusScanJob.GetHashCode();
                if (this.WebSynchronizationJob != null)
                    hashCode = hashCode * 59 + this.WebSynchronizationJob.GetHashCode();
                if (this.SiteSynchronizationJob != null)
                    hashCode = hashCode * 59 + this.SiteSynchronizationJob.GetHashCode();
                if (this.SiteContentArchivalJob != null)
                    hashCode = hashCode * 59 + this.SiteContentArchivalJob.GetHashCode();
                if (this.SiteContactStatusScanJob != null)
                    hashCode = hashCode * 59 + this.SiteContactStatusScanJob.GetHashCode();
                if (this.GroupOrTeamsSynchronizationJob != null)
                    hashCode = hashCode * 59 + this.GroupOrTeamsSynchronizationJob.GetHashCode();
                if (this.UserProfileMetadataSynchronizationJob != null)
                    hashCode = hashCode * 59 + this.UserProfileMetadataSynchronizationJob.GetHashCode();
                if (this.UserProfileRoleMetadataSynchronizationJob != null)
                    hashCode = hashCode * 59 + this.UserProfileRoleMetadataSynchronizationJob.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
