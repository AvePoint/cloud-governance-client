/* 
 * Cloud Governance Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Cloud.Governance.NewSdk.Client;
using Cloud.Governance.NewSdk.Api;
using Cloud.Governance.NewSdk.Model;

namespace Cloud.Governance.NewSdk.Test
{
    /// <summary>
    ///  Class for testing Office365Api
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class Office365ApiTests : IDisposable
    {
        private Office365Api instance;

        public Office365ApiTests()
        {
            instance = new Office365Api();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of Office365Api
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' Office365Api
            //Assert.IsType(typeof(Office365Api), instance, "instance is a Office365Api");
        }

        
        /// <summary>
        /// Test GetGroupInfo
        /// </summary>
        [Fact]
        public void GetGroupInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantid = null;
            //string id = null;
            //var response = instance.GetGroupInfo(tenantid, id);
            //Assert.IsType<AzureADGroup> (response, "response is AzureADGroup");
        }
        
        /// <summary>
        /// Test GetGroupMembers
        /// </summary>
        [Fact]
        public void GetGroupMembersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string email = null;
            //int? top = null;
            //int? skip = null;
            //string search = null;
            //var response = instance.GetGroupMembers(email, top, skip, search);
            //Assert.IsType<ApiUserPageResult> (response, "response is ApiUserPageResult");
        }
        
        /// <summary>
        /// Test GetGroupMembersByGroupName
        /// </summary>
        [Fact]
        public void GetGroupMembersByGroupNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string url = null;
            //string name = null;
            //int? top = null;
            //int? skip = null;
            //string search = null;
            //var response = instance.GetGroupMembersByGroupName(url, name, top, skip, search);
            //Assert.IsType<ApiUserPageResult> (response, "response is ApiUserPageResult");
        }
        
        /// <summary>
        /// Test GetGroupOwners
        /// </summary>
        [Fact]
        public void GetGroupOwnersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string email = null;
            //int? top = null;
            //int? skip = null;
            //string search = null;
            //var response = instance.GetGroupOwners(email, top, skip, search);
            //Assert.IsType<ApiUserPageResult> (response, "response is ApiUserPageResult");
        }
        
        /// <summary>
        /// Test GetHubSites
        /// </summary>
        [Fact]
        public void GetHubSitesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid tenantid = null;
            //var response = instance.GetHubSites(tenantid);
            //Assert.IsType<List<GuidModel>> (response, "response is List<GuidModel>");
        }
        
        /// <summary>
        /// Test GetHubSitesFromTenantOfSite
        /// </summary>
        [Fact]
        public void GetHubSitesFromTenantOfSiteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string siteUrl = null;
            //var response = instance.GetHubSitesFromTenantOfSite(siteUrl);
            //Assert.IsType<List<GuidModel>> (response, "response is List<GuidModel>");
        }
        
        /// <summary>
        /// Test GetOwnedTeams
        /// </summary>
        [Fact]
        public void GetOwnedTeamsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetOwnedTeams();
            //Assert.IsType<List<GuidModel>> (response, "response is List<GuidModel>");
        }
        
        /// <summary>
        /// Test GetPermissions
        /// </summary>
        [Fact]
        public void GetPermissionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string webUrl = null;
            //var response = instance.GetPermissions(webUrl);
            //Assert.IsType<UserGroupPermissions> (response, "response is UserGroupPermissions");
        }
        
        /// <summary>
        /// Test GetRoleAssignment
        /// </summary>
        [Fact]
        public void GetRoleAssignmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string url = null;
            //NodeType type = null;
            //var response = instance.GetRoleAssignment(url, type);
            //Assert.IsType<List<SPRoleAssignment>> (response, "response is List<SPRoleAssignment>");
        }
        
        /// <summary>
        /// Test GetSiteDesigns
        /// </summary>
        [Fact]
        public void GetSiteDesignsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string siteUrl = null;
            //var response = instance.GetSiteDesigns(siteUrl);
            //Assert.IsType<List<StringModel>> (response, "response is List<StringModel>");
        }
        
        /// <summary>
        /// Test GetSiteInfo
        /// </summary>
        [Fact]
        public void GetSiteInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fullUrl = null;
            //var response = instance.GetSiteInfo(fullUrl);
            //Assert.IsType<SiteInfo> (response, "response is SiteInfo");
        }
        
        /// <summary>
        /// Test GetSitePermissionLevels
        /// </summary>
        [Fact]
        public void GetSitePermissionLevelsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uri = null;
            //var response = instance.GetSitePermissionLevels(uri);
            //Assert.IsType<List<PermissionLevel>> (response, "response is List<PermissionLevel>");
        }
        
        /// <summary>
        /// Test GetSiteSharePointGroups
        /// </summary>
        [Fact]
        public void GetSiteSharePointGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uri = null;
            //var response = instance.GetSiteSharePointGroups(uri);
            //Assert.IsType<List<SPGroup>> (response, "response is List<SPGroup>");
        }
        
        /// <summary>
        /// Test GetSiteTemplates
        /// </summary>
        [Fact]
        public void GetSiteTemplatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int languageid = null;
            //string url = null;
            //var response = instance.GetSiteTemplates(languageid, url);
            //Assert.IsType<List<SiteTemplate>> (response, "response is List<SiteTemplate>");
        }
        
        /// <summary>
        /// Test GetYammerGroup
        /// </summary>
        [Fact]
        public void GetYammerGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string networkid = null;
            //string name = null;
            //var response = instance.GetYammerGroup(networkid, name);
            //Assert.IsType<YammerGroup> (response, "response is YammerGroup");
        }
        
        /// <summary>
        /// Test LoadContainers
        /// </summary>
        [Fact]
        public void LoadContainersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string serviceid = null;
            //int? top = null;
            //int? skip = null;
            //string search = null;
            //var response = instance.LoadContainers(serviceid, top, skip, search);
            //Assert.IsType<SPNodePageResult> (response, "response is SPNodePageResult");
        }
        
        /// <summary>
        /// Test LoadFolders
        /// </summary>
        [Fact]
        public void LoadFoldersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid listid = null;
            //string folderorlisturl = null;
            //int? top = null;
            //int? skip = null;
            //string search = null;
            //var response = instance.LoadFolders(listid, folderorlisturl, top, skip, search);
            //Assert.IsType<SPNodePageResult> (response, "response is SPNodePageResult");
        }
        
        /// <summary>
        /// Test LoadItems
        /// </summary>
        [Fact]
        public void LoadItemsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid listid = null;
            //string folderorlisturl = null;
            //int? top = null;
            //int? skip = null;
            //string search = null;
            //var response = instance.LoadItems(listid, folderorlisturl, top, skip, search);
            //Assert.IsType<SPNodePageResult> (response, "response is SPNodePageResult");
        }
        
        /// <summary>
        /// Test LoadLists
        /// </summary>
        [Fact]
        public void LoadListsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string siteorweburl = null;
            //int? top = null;
            //int? skip = null;
            //string search = null;
            //var response = instance.LoadLists(siteorweburl, top, skip, search);
            //Assert.IsType<SPNodePageResult> (response, "response is SPNodePageResult");
        }
        
        /// <summary>
        /// Test LoadManagedMetadata
        /// </summary>
        [Fact]
        public void LoadManagedMetadataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid termStoreid = null;
            //Guid groupid = null;
            //Guid termsetid = null;
            //Guid parentid = null;
            //string admincenterurl = null;
            //int? skip = null;
            //int? top = null;
            //string search = null;
            //var response = instance.LoadManagedMetadata(termStoreid, groupid, termsetid, parentid, admincenterurl, skip, top, search);
            //Assert.IsType<ApiTermInfoPageResult> (response, "response is ApiTermInfoPageResult");
        }
        
        /// <summary>
        /// Test LoadManagedSites
        /// </summary>
        [Fact]
        public void LoadManagedSitesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string serviceid = null;
            //Guid containerid = null;
            //bool isselected = null;
            //int? top = null;
            //int? skip = null;
            //string search = null;
            //var response = instance.LoadManagedSites(serviceid, containerid, isselected, top, skip, search);
            //Assert.IsType<SPNodePageResult> (response, "response is SPNodePageResult");
        }
        
        /// <summary>
        /// Test LoadWebs
        /// </summary>
        [Fact]
        public void LoadWebsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string serviceid = null;
            //Guid siteorwebid = null;
            //bool isselected = null;
            //bool issite = null;
            //string siteOrWebUrl = null;
            //int? top = null;
            //int? skip = null;
            //string search = null;
            //var response = instance.LoadWebs(serviceid, siteorwebid, isselected, issite, siteOrWebUrl, top, skip, search);
            //Assert.IsType<SPNodePageResult> (response, "response is SPNodePageResult");
        }
        
    }

}
