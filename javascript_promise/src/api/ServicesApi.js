/**
 * Cloud Governance Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.2.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ChangeGroupSettingCheckResult', 'model/ChangeGroupSettingService', 'model/ChangeGroupSettingValidationParameter', 'model/ChangeListSettingService', 'model/ChangeListSettingValidateResult', 'model/ChangePermissionService', 'model/ChangePermissionValidateResult', 'model/ChangeSiteContactService', 'model/ChangeSiteContactValidateResult', 'model/ChangeSiteSettingService', 'model/ChangeSiteSettingValidateResult', 'model/ChangeWebContactService', 'model/ChangeWebContactValidateResult', 'model/ChangeWebSettingService', 'model/ChangeWebUrlValidateResult', 'model/ClonePermissionService', 'model/ClonePermissionValidateResult', 'model/ContentMoveProfiles', 'model/ContentMoveService', 'model/ContentMoveUrlValidationResult', 'model/CreateGroupService', 'model/CreateListService', 'model/CreateListUrlValidationResult', 'model/CreateSiteService', 'model/CreateWebService', 'model/CreateWebUrlValidationResult', 'model/CreateWebValidationParameter', 'model/GrantPermissionService', 'model/GrantPermissionUrlValidationResult', 'model/GroupLifecycleService', 'model/GroupLifecycleValidateResult', 'model/GroupValidationParameter', 'model/ListValidationParameter', 'model/ManagePermissionService', 'model/ManagePermissionValidateResult', 'model/PolicyExpirationSettingModel', 'model/ServiceForRequest', 'model/ServiceList', 'model/ServiceListPageResult', 'model/SiteLifecycleService', 'model/SiteLifecycleValidateResult', 'model/SiteValidationParameter', 'model/WebLifecycleService', 'model/WebLifecycleValidateResult', 'model/WorkspaceType'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ChangeGroupSettingCheckResult'), require('../model/ChangeGroupSettingService'), require('../model/ChangeGroupSettingValidationParameter'), require('../model/ChangeListSettingService'), require('../model/ChangeListSettingValidateResult'), require('../model/ChangePermissionService'), require('../model/ChangePermissionValidateResult'), require('../model/ChangeSiteContactService'), require('../model/ChangeSiteContactValidateResult'), require('../model/ChangeSiteSettingService'), require('../model/ChangeSiteSettingValidateResult'), require('../model/ChangeWebContactService'), require('../model/ChangeWebContactValidateResult'), require('../model/ChangeWebSettingService'), require('../model/ChangeWebUrlValidateResult'), require('../model/ClonePermissionService'), require('../model/ClonePermissionValidateResult'), require('../model/ContentMoveProfiles'), require('../model/ContentMoveService'), require('../model/ContentMoveUrlValidationResult'), require('../model/CreateGroupService'), require('../model/CreateListService'), require('../model/CreateListUrlValidationResult'), require('../model/CreateSiteService'), require('../model/CreateWebService'), require('../model/CreateWebUrlValidationResult'), require('../model/CreateWebValidationParameter'), require('../model/GrantPermissionService'), require('../model/GrantPermissionUrlValidationResult'), require('../model/GroupLifecycleService'), require('../model/GroupLifecycleValidateResult'), require('../model/GroupValidationParameter'), require('../model/ListValidationParameter'), require('../model/ManagePermissionService'), require('../model/ManagePermissionValidateResult'), require('../model/PolicyExpirationSettingModel'), require('../model/ServiceForRequest'), require('../model/ServiceList'), require('../model/ServiceListPageResult'), require('../model/SiteLifecycleService'), require('../model/SiteLifecycleValidateResult'), require('../model/SiteValidationParameter'), require('../model/WebLifecycleService'), require('../model/WebLifecycleValidateResult'), require('../model/WorkspaceType'));
  } else {
    // Browser globals (root is window)
    if (!root.CgClient) {
      root.CgClient = {};
    }
    root.CgClient.ServicesApi = factory(root.CgClient.ApiClient, root.CgClient.ChangeGroupSettingCheckResult, root.CgClient.ChangeGroupSettingService, root.CgClient.ChangeGroupSettingValidationParameter, root.CgClient.ChangeListSettingService, root.CgClient.ChangeListSettingValidateResult, root.CgClient.ChangePermissionService, root.CgClient.ChangePermissionValidateResult, root.CgClient.ChangeSiteContactService, root.CgClient.ChangeSiteContactValidateResult, root.CgClient.ChangeSiteSettingService, root.CgClient.ChangeSiteSettingValidateResult, root.CgClient.ChangeWebContactService, root.CgClient.ChangeWebContactValidateResult, root.CgClient.ChangeWebSettingService, root.CgClient.ChangeWebUrlValidateResult, root.CgClient.ClonePermissionService, root.CgClient.ClonePermissionValidateResult, root.CgClient.ContentMoveProfiles, root.CgClient.ContentMoveService, root.CgClient.ContentMoveUrlValidationResult, root.CgClient.CreateGroupService, root.CgClient.CreateListService, root.CgClient.CreateListUrlValidationResult, root.CgClient.CreateSiteService, root.CgClient.CreateWebService, root.CgClient.CreateWebUrlValidationResult, root.CgClient.CreateWebValidationParameter, root.CgClient.GrantPermissionService, root.CgClient.GrantPermissionUrlValidationResult, root.CgClient.GroupLifecycleService, root.CgClient.GroupLifecycleValidateResult, root.CgClient.GroupValidationParameter, root.CgClient.ListValidationParameter, root.CgClient.ManagePermissionService, root.CgClient.ManagePermissionValidateResult, root.CgClient.PolicyExpirationSettingModel, root.CgClient.ServiceForRequest, root.CgClient.ServiceList, root.CgClient.ServiceListPageResult, root.CgClient.SiteLifecycleService, root.CgClient.SiteLifecycleValidateResult, root.CgClient.SiteValidationParameter, root.CgClient.WebLifecycleService, root.CgClient.WebLifecycleValidateResult, root.CgClient.WorkspaceType);
  }
}(this, function(ApiClient, ChangeGroupSettingCheckResult, ChangeGroupSettingService, ChangeGroupSettingValidationParameter, ChangeListSettingService, ChangeListSettingValidateResult, ChangePermissionService, ChangePermissionValidateResult, ChangeSiteContactService, ChangeSiteContactValidateResult, ChangeSiteSettingService, ChangeSiteSettingValidateResult, ChangeWebContactService, ChangeWebContactValidateResult, ChangeWebSettingService, ChangeWebUrlValidateResult, ClonePermissionService, ClonePermissionValidateResult, ContentMoveProfiles, ContentMoveService, ContentMoveUrlValidationResult, CreateGroupService, CreateListService, CreateListUrlValidationResult, CreateSiteService, CreateWebService, CreateWebUrlValidationResult, CreateWebValidationParameter, GrantPermissionService, GrantPermissionUrlValidationResult, GroupLifecycleService, GroupLifecycleValidateResult, GroupValidationParameter, ListValidationParameter, ManagePermissionService, ManagePermissionValidateResult, PolicyExpirationSettingModel, ServiceForRequest, ServiceList, ServiceListPageResult, SiteLifecycleService, SiteLifecycleValidateResult, SiteValidationParameter, WebLifecycleService, WebLifecycleValidateResult, WorkspaceType) {
  'use strict';

  /**
   * Services service.
   * @module api/ServicesApi
   * @version 1.0
   */

  /**
   * Constructs a new ServicesApi. 
   * @alias module:api/ServicesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Add create site service
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateSiteService} opts.createSiteService 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    this.addCreateListServiceWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['createSiteService'];

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';
      return this.apiClient.callApi(
        '/services/createsite', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add create site service
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateSiteService} opts.createSiteService 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    this.addCreateListService = function(opts) {
      return this.addCreateListServiceWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get change group setting service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionnaireId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ChangeGroupSettingService} and HTTP response
     */
    this.getChangeGroupSettingServiceWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChangeGroupSettingService");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'questionnaireId': opts['questionnaireId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ChangeGroupSettingService;
      return this.apiClient.callApi(
        '/services/changegroupsetting/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get change group setting service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionnaireId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ChangeGroupSettingService}
     */
    this.getChangeGroupSettingService = function(id, opts) {
      return this.getChangeGroupSettingServiceWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get change list setting service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionnaireId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ChangeListSettingService} and HTTP response
     */
    this.getChangeListSettingServiceWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChangeListSettingService");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'questionnaireId': opts['questionnaireId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ChangeListSettingService;
      return this.apiClient.callApi(
        '/services/changelistsetting/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get change list setting service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionnaireId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ChangeListSettingService}
     */
    this.getChangeListSettingService = function(id, opts) {
      return this.getChangeListSettingServiceWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get change permission service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionnaireId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ChangePermissionService} and HTTP response
     */
    this.getChangePermissionServiceWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChangePermissionService");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'questionnaireId': opts['questionnaireId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ChangePermissionService;
      return this.apiClient.callApi(
        '/services/changepermission/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get change permission service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionnaireId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ChangePermissionService}
     */
    this.getChangePermissionService = function(id, opts) {
      return this.getChangePermissionServiceWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get change site contact service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionnaireId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ChangeSiteContactService} and HTTP response
     */
    this.getChangeSiteContactServiceWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChangeSiteContactService");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'questionnaireId': opts['questionnaireId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ChangeSiteContactService;
      return this.apiClient.callApi(
        '/services/changesitecontact/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get change site contact service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionnaireId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ChangeSiteContactService}
     */
    this.getChangeSiteContactService = function(id, opts) {
      return this.getChangeSiteContactServiceWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get change site setting service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionnaireId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ChangeSiteSettingService} and HTTP response
     */
    this.getChangeSiteSettingServiceWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChangeSiteSettingService");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'questionnaireId': opts['questionnaireId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ChangeSiteSettingService;
      return this.apiClient.callApi(
        '/services/changesitesetting/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get change site setting service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionnaireId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ChangeSiteSettingService}
     */
    this.getChangeSiteSettingService = function(id, opts) {
      return this.getChangeSiteSettingServiceWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * validate permissions, scope for change web contact service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionnaireId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ChangeWebContactService} and HTTP response
     */
    this.getChangeWebContactServiceWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChangeWebContactService");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'questionnaireId': opts['questionnaireId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ChangeWebContactService;
      return this.apiClient.callApi(
        '/services/changewebcontact/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * validate permissions, scope for change web contact service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionnaireId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ChangeWebContactService}
     */
    this.getChangeWebContactService = function(id, opts) {
      return this.getChangeWebContactServiceWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get change web setting service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionnaireId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ChangeWebSettingService} and HTTP response
     */
    this.getChangeWebSettingsServiceWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChangeWebSettingsService");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'questionnaireId': opts['questionnaireId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ChangeWebSettingService;
      return this.apiClient.callApi(
        '/services/changewebsettings/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get change web setting service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionnaireId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ChangeWebSettingService}
     */
    this.getChangeWebSettingsService = function(id, opts) {
      return this.getChangeWebSettingsServiceWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get clone permission service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionnaireId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClonePermissionService} and HTTP response
     */
    this.getClonePermissionServiceWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getClonePermissionService");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'questionnaireId': opts['questionnaireId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ClonePermissionService;
      return this.apiClient.callApi(
        '/services/clonepermission/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get clone permission service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionnaireId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClonePermissionService}
     */
    this.getClonePermissionService = function(id, opts) {
      return this.getClonePermissionServiceWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get content move profiles from cloud management
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ContentMoveProfiles} and HTTP response
     */
    this.getContentMoveProfilesWithHttpInfo = function() {
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ContentMoveProfiles;
      return this.apiClient.callApi(
        '/services/contentmove/profiles', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get content move profiles from cloud management
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ContentMoveProfiles}
     */
    this.getContentMoveProfiles = function() {
      return this.getContentMoveProfilesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get content move service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionnaireId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ContentMoveService} and HTTP response
     */
    this.getContentMoveServiceWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getContentMoveService");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'questionnaireId': opts['questionnaireId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ContentMoveService;
      return this.apiClient.callApi(
        '/services/contentmove/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get content move service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionnaireId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ContentMoveService}
     */
    this.getContentMoveService = function(id, opts) {
      return this.getContentMoveServiceWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get create group service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionnaireId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateGroupService} and HTTP response
     */
    this.getCreateGroupServiceWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCreateGroupService");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'questionnaireId': opts['questionnaireId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = CreateGroupService;
      return this.apiClient.callApi(
        '/services/creategroup/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get create group service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionnaireId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateGroupService}
     */
    this.getCreateGroupService = function(id, opts) {
      return this.getCreateGroupServiceWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get create list service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionnaireId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateListService} and HTTP response
     */
    this.getCreateListServiceWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCreateListService");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'questionnaireId': opts['questionnaireId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = CreateListService;
      return this.apiClient.callApi(
        '/services/createlist/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get create list service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionnaireId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateListService}
     */
    this.getCreateListService = function(id, opts) {
      return this.getCreateListServiceWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get create site service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionnaireId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateSiteService} and HTTP response
     */
    this.getCreateSiteServiceWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCreateSiteService");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'questionnaireId': opts['questionnaireId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = CreateSiteService;
      return this.apiClient.callApi(
        '/services/createsite/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get create site service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionnaireId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateSiteService}
     */
    this.getCreateSiteService = function(id, opts) {
      return this.getCreateSiteServiceWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get create web service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionnaireId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateWebService} and HTTP response
     */
    this.getCreateWebServiceWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCreateWebService");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'questionnaireId': opts['questionnaireId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = CreateWebService;
      return this.apiClient.callApi(
        '/services/createweb/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get create web service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionnaireId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateWebService}
     */
    this.getCreateWebService = function(id, opts) {
      return this.getCreateWebServiceWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get custom service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionnaireId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ServiceForRequest} and HTTP response
     */
    this.getCustomServiceWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCustomService");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'questionnaireId': opts['questionnaireId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ServiceForRequest;
      return this.apiClient.callApi(
        '/services/custom/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get custom service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionnaireId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ServiceForRequest}
     */
    this.getCustomService = function(id, opts) {
      return this.getCustomServiceWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get grant permission service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionnaireId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GrantPermissionService} and HTTP response
     */
    this.getGrantPermissionServiceWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGrantPermissionService");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'questionnaireId': opts['questionnaireId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = GrantPermissionService;
      return this.apiClient.callApi(
        '/services/grantpermission/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get grant permission service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionnaireId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GrantPermissionService}
     */
    this.getGrantPermissionService = function(id, opts) {
      return this.getGrantPermissionServiceWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get group lifecycle service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionnaireId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GroupLifecycleService} and HTTP response
     */
    this.getGroupLifecycleServiceWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGroupLifecycleService");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'questionnaireId': opts['questionnaireId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = GroupLifecycleService;
      return this.apiClient.callApi(
        '/services/grouplifecycle/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get group lifecycle service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionnaireId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GroupLifecycleService}
     */
    this.getGroupLifecycleService = function(id, opts) {
      return this.getGroupLifecycleServiceWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get the group policy expiration setting
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PolicyExpirationSettingModel} and HTTP response
     */
    this.getGroupPolicyExpirationSettingWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGroupPolicyExpirationSetting");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = PolicyExpirationSettingModel;
      return this.apiClient.callApi(
        '/services/grouplifecycle/{id}/policyexpirationsetting', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get the group policy expiration setting
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PolicyExpirationSettingModel}
     */
    this.getGroupPolicyExpirationSetting = function(id) {
      return this.getGroupPolicyExpirationSettingWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get manage permission service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionnaireId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ManagePermissionService} and HTTP response
     */
    this.getManagePermissionServiceWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getManagePermissionService");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'questionnaireId': opts['questionnaireId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ManagePermissionService;
      return this.apiClient.callApi(
        '/services/managepermission/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get manage permission service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionnaireId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ManagePermissionService}
     */
    this.getManagePermissionService = function(id, opts) {
      return this.getManagePermissionServiceWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get configued quick services that can be used to start a request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ServiceList>} and HTTP response
     */
    this.getMyQuickServicesWithHttpInfo = function() {
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = [ServiceList];
      return this.apiClient.callApi(
        '/services/my/quick', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get configued quick services that can be used to start a request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ServiceList>}
     */
    this.getMyQuickServices = function() {
      return this.getMyQuickServicesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get services that can be used to start a request
     * @param {Object} opts Optional parameters
     * @param {String} opts.search 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ServiceListPageResult} and HTTP response
     */
    this.getMyServicesWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
        'search': opts['search'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ServiceListPageResult;
      return this.apiClient.callApi(
        '/services/my', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get services that can be used to start a request
     * @param {Object} opts Optional parameters
     * @param {String} opts.search 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ServiceListPageResult}
     */
    this.getMyServices = function(opts) {
      return this.getMyServicesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get services that can be used to start a request within context
     * @param {module:model/WorkspaceType} objecttype 
     * @param {String} objectid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.search 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ServiceListPageResult} and HTTP response
     */
    this.getMyServicesWithContextWithHttpInfo = function(objecttype, objectid, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'objecttype' is set
      if (objecttype === undefined || objecttype === null) {
        throw new Error("Missing the required parameter 'objecttype' when calling getMyServicesWithContext");
      }
      // verify the required parameter 'objectid' is set
      if (objectid === undefined || objectid === null) {
        throw new Error("Missing the required parameter 'objectid' when calling getMyServicesWithContext");
      }

      var pathParams = {
        'objecttype': objecttype,
        'objectid': objectid
      };
      var queryParams = {
        'search': opts['search'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ServiceListPageResult;
      return this.apiClient.callApi(
        '/services/my/workspace/{objecttype}/{objectid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get services that can be used to start a request within context
     * @param {module:model/WorkspaceType} objecttype 
     * @param {String} objectid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.search 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ServiceListPageResult}
     */
    this.getMyServicesWithContext = function(objecttype, objectid, opts) {
      return this.getMyServicesWithContextWithHttpInfo(objecttype, objectid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get site lifecycle service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionnaireId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SiteLifecycleService} and HTTP response
     */
    this.getSiteLifecycleServiceWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSiteLifecycleService");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'questionnaireId': opts['questionnaireId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = SiteLifecycleService;
      return this.apiClient.callApi(
        '/services/sitelifecycle/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get site lifecycle service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionnaireId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SiteLifecycleService}
     */
    this.getSiteLifecycleService = function(id, opts) {
      return this.getSiteLifecycleServiceWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get the site collection policy expiration setting
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PolicyExpirationSettingModel} and HTTP response
     */
    this.getSitePolicyExpirationSettingWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSitePolicyExpirationSetting");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = PolicyExpirationSettingModel;
      return this.apiClient.callApi(
        '/services/sitelifecycle/{id}/policyexpirationsetting', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get the site collection policy expiration setting
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PolicyExpirationSettingModel}
     */
    this.getSitePolicyExpirationSetting = function(id) {
      return this.getSitePolicyExpirationSettingWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get web lifecycle service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionnaireId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WebLifecycleService} and HTTP response
     */
    this.getWebLifecycleServiceWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getWebLifecycleService");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'questionnaireId': opts['questionnaireId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = WebLifecycleService;
      return this.apiClient.callApi(
        '/services/weblifecycle/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get web lifecycle service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionnaireId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WebLifecycleService}
     */
    this.getWebLifecycleService = function(id, opts) {
      return this.getWebLifecycleServiceWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * validate permissions, scope for change group setting service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeGroupSettingValidationParameter} opts.changeGroupSettingValidationParameter 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ChangeGroupSettingCheckResult} and HTTP response
     */
    this.validateForChangeGroupSettingServiceWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['changeGroupSettingValidationParameter'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling validateForChangeGroupSettingService");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ChangeGroupSettingCheckResult;
      return this.apiClient.callApi(
        '/services/changegroupsetting/{id}/group/validation', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * validate permissions, scope for change group setting service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeGroupSettingValidationParameter} opts.changeGroupSettingValidationParameter 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ChangeGroupSettingCheckResult}
     */
    this.validateForChangeGroupSettingService = function(id, opts) {
      return this.validateForChangeGroupSettingServiceWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * validate permissions, scope for change list setting service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/SiteValidationParameter} opts.siteValidationParameter 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ChangeListSettingValidateResult} and HTTP response
     */
    this.validateForChangeListSettingServiceWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['siteValidationParameter'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling validateForChangeListSettingService");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ChangeListSettingValidateResult;
      return this.apiClient.callApi(
        '/services/changelistsetting/{id}/url/validation', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * validate permissions, scope for change list setting service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/SiteValidationParameter} opts.siteValidationParameter 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ChangeListSettingValidateResult}
     */
    this.validateForChangeListSettingService = function(id, opts) {
      return this.validateForChangeListSettingServiceWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * validate permissions, scope for change permission service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/SiteValidationParameter} opts.siteValidationParameter 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ChangePermissionValidateResult} and HTTP response
     */
    this.validateForChangePermissionServiceWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['siteValidationParameter'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling validateForChangePermissionService");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ChangePermissionValidateResult;
      return this.apiClient.callApi(
        '/services/changepermission/{id}/url/validation', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * validate permissions, scope for change permission service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/SiteValidationParameter} opts.siteValidationParameter 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ChangePermissionValidateResult}
     */
    this.validateForChangePermissionService = function(id, opts) {
      return this.validateForChangePermissionServiceWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * validate permissions, scope for change site contact service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/SiteValidationParameter} opts.siteValidationParameter 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ChangeSiteContactValidateResult} and HTTP response
     */
    this.validateForChangeSiteContactServiceWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['siteValidationParameter'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling validateForChangeSiteContactService");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ChangeSiteContactValidateResult;
      return this.apiClient.callApi(
        '/services/changesitecontact/{id}/url/validation', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * validate permissions, scope for change site contact service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/SiteValidationParameter} opts.siteValidationParameter 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ChangeSiteContactValidateResult}
     */
    this.validateForChangeSiteContactService = function(id, opts) {
      return this.validateForChangeSiteContactServiceWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * validate permissions, scope for change site setting service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/SiteValidationParameter} opts.siteValidationParameter 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ChangeSiteSettingValidateResult} and HTTP response
     */
    this.validateForChangeSiteSettingServiceWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['siteValidationParameter'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling validateForChangeSiteSettingService");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ChangeSiteSettingValidateResult;
      return this.apiClient.callApi(
        '/services/changesitesetting/{id}/url/validation', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * validate permissions, scope for change site setting service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/SiteValidationParameter} opts.siteValidationParameter 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ChangeSiteSettingValidateResult}
     */
    this.validateForChangeSiteSettingService = function(id, opts) {
      return this.validateForChangeSiteSettingServiceWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * validate permissions, scope for change web contact service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/SiteValidationParameter} opts.siteValidationParameter 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ChangeWebContactValidateResult} and HTTP response
     */
    this.validateForChangeWebContactServiceWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['siteValidationParameter'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling validateForChangeWebContactService");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ChangeWebContactValidateResult;
      return this.apiClient.callApi(
        '/services/changewebcontact/{id}/url/validation', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * validate permissions, scope for change web contact service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/SiteValidationParameter} opts.siteValidationParameter 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ChangeWebContactValidateResult}
     */
    this.validateForChangeWebContactService = function(id, opts) {
      return this.validateForChangeWebContactServiceWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * validate permissions, scope for change web setting service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/SiteValidationParameter} opts.siteValidationParameter 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ChangeWebUrlValidateResult} and HTTP response
     */
    this.validateForChangeWebSettingServiceWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['siteValidationParameter'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling validateForChangeWebSettingService");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ChangeWebUrlValidateResult;
      return this.apiClient.callApi(
        '/services/changewebsettings/{id}/url/validation', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * validate permissions, scope for change web setting service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/SiteValidationParameter} opts.siteValidationParameter 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ChangeWebUrlValidateResult}
     */
    this.validateForChangeWebSettingService = function(id, opts) {
      return this.validateForChangeWebSettingServiceWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * validate permissions, scope for clone permission service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/SiteValidationParameter} opts.siteValidationParameter 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClonePermissionValidateResult} and HTTP response
     */
    this.validateForClonePermissionServiceWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['siteValidationParameter'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling validateForClonePermissionService");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ClonePermissionValidateResult;
      return this.apiClient.callApi(
        '/services/clonepermission/{id}/url/validation', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * validate permissions, scope for clone permission service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/SiteValidationParameter} opts.siteValidationParameter 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClonePermissionValidateResult}
     */
    this.validateForClonePermissionService = function(id, opts) {
      return this.validateForClonePermissionServiceWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * validate permissions, scope for content move service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/SiteValidationParameter} opts.siteValidationParameter 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ContentMoveUrlValidationResult} and HTTP response
     */
    this.validateForContentMoveServiceWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['siteValidationParameter'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling validateForContentMoveService");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ContentMoveUrlValidationResult;
      return this.apiClient.callApi(
        '/services/contentmove/{id}/url/validation', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * validate permissions, scope for content move service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/SiteValidationParameter} opts.siteValidationParameter 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ContentMoveUrlValidationResult}
     */
    this.validateForContentMoveService = function(id, opts) {
      return this.validateForContentMoveServiceWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * validate permissions, scope for create list service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ListValidationParameter} opts.listValidationParameter 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateListUrlValidationResult} and HTTP response
     */
    this.validateForCreateListServiceWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['listValidationParameter'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling validateForCreateListService");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = CreateListUrlValidationResult;
      return this.apiClient.callApi(
        '/services/createlist/{id}/url/validation', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * validate permissions, scope for create list service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ListValidationParameter} opts.listValidationParameter 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateListUrlValidationResult}
     */
    this.validateForCreateListService = function(id, opts) {
      return this.validateForCreateListServiceWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * validate permissions, scope for create web service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateWebValidationParameter} opts.createWebValidationParameter 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateWebUrlValidationResult} and HTTP response
     */
    this.validateForCreateWebServiceWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['createWebValidationParameter'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling validateForCreateWebService");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = CreateWebUrlValidationResult;
      return this.apiClient.callApi(
        '/services/createweb/{id}/url/validation', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * validate permissions, scope for create web service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateWebValidationParameter} opts.createWebValidationParameter 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateWebUrlValidationResult}
     */
    this.validateForCreateWebService = function(id, opts) {
      return this.validateForCreateWebServiceWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * validate permissions, scope for grant permission service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/SiteValidationParameter} opts.siteValidationParameter 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GrantPermissionUrlValidationResult} and HTTP response
     */
    this.validateForGrantPermissionServiceWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['siteValidationParameter'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling validateForGrantPermissionService");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = GrantPermissionUrlValidationResult;
      return this.apiClient.callApi(
        '/services/grantpermission/{id}/url/validation', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * validate permissions, scope for grant permission service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/SiteValidationParameter} opts.siteValidationParameter 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GrantPermissionUrlValidationResult}
     */
    this.validateForGrantPermissionService = function(id, opts) {
      return this.validateForGrantPermissionServiceWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * validate permissions, scope for group lifecycle service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/GroupValidationParameter} opts.groupValidationParameter 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GroupLifecycleValidateResult} and HTTP response
     */
    this.validateForGroupLifecycleServiceWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['groupValidationParameter'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling validateForGroupLifecycleService");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = GroupLifecycleValidateResult;
      return this.apiClient.callApi(
        '/services/grouplifecycle/{id}/group/validation', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * validate permissions, scope for group lifecycle service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/GroupValidationParameter} opts.groupValidationParameter 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GroupLifecycleValidateResult}
     */
    this.validateForGroupLifecycleService = function(id, opts) {
      return this.validateForGroupLifecycleServiceWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * validate permissions, scope for manage permission service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/SiteValidationParameter} opts.siteValidationParameter 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ManagePermissionValidateResult} and HTTP response
     */
    this.validateForManagePermissionServiceWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['siteValidationParameter'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling validateForManagePermissionService");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ManagePermissionValidateResult;
      return this.apiClient.callApi(
        '/services/managepermission/{id}/url/validation', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * validate permissions, scope for manage permission service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/SiteValidationParameter} opts.siteValidationParameter 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ManagePermissionValidateResult}
     */
    this.validateForManagePermissionService = function(id, opts) {
      return this.validateForManagePermissionServiceWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * validate permissions, scope for site lifecycle service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/SiteValidationParameter} opts.siteValidationParameter 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SiteLifecycleValidateResult} and HTTP response
     */
    this.validateForSiteLifecycleServiceWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['siteValidationParameter'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling validateForSiteLifecycleService");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = SiteLifecycleValidateResult;
      return this.apiClient.callApi(
        '/services/sitelifecycle/{id}/url/validation', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * validate permissions, scope for site lifecycle service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/SiteValidationParameter} opts.siteValidationParameter 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SiteLifecycleValidateResult}
     */
    this.validateForSiteLifecycleService = function(id, opts) {
      return this.validateForSiteLifecycleServiceWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * validate permissions, scope for web lifecycle service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/SiteValidationParameter} opts.siteValidationParameter 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WebLifecycleValidateResult} and HTTP response
     */
    this.validateForWebLifecycleServiceWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['siteValidationParameter'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling validateForWebLifecycleService");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = WebLifecycleValidateResult;
      return this.apiClient.callApi(
        '/services/weblifecycle/{id}/url/validation', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * validate permissions, scope for web lifecycle service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/SiteValidationParameter} opts.siteValidationParameter 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WebLifecycleValidateResult}
     */
    this.validateForWebLifecycleService = function(id, opts) {
      return this.validateForWebLifecycleServiceWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
