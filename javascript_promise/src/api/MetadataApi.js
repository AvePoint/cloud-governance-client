/**
 * Cloud Governance Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.2.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CustomMetadata', 'model/CustomMetadataPageResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CustomMetadata'), require('../model/CustomMetadataPageResult'));
  } else {
    // Browser globals (root is window)
    if (!root.CgClient) {
      root.CgClient = {};
    }
    root.CgClient.MetadataApi = factory(root.CgClient.ApiClient, root.CgClient.CustomMetadata, root.CgClient.CustomMetadataPageResult);
  }
}(this, function(ApiClient, CustomMetadata, CustomMetadataPageResult) {
  'use strict';

  /**
   * Metadata service.
   * @module api/MetadataApi
   * @version 1.0
   */

  /**
   * Constructs a new MetadataApi. 
   * @alias module:api/MetadataApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * get metadata
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, name, description, fieldType, metadataValue, showInReportType, lastModifiedTime
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, name, description, fieldType, metadataValue, showInReportType, lastModifiedTime
     * @param {String} opts.search Search for name
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomMetadataPageResult} and HTTP response
     */
    this.getMetadataWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
        'filter': opts['filter'],
        'orderby': opts['orderby'],
        'search': opts['search'],
        'top': opts['top'],
        'skip': opts['skip'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = CustomMetadataPageResult;
      return this.apiClient.callApi(
        '/metadata', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get metadata
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, name, description, fieldType, metadataValue, showInReportType, lastModifiedTime
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, name, description, fieldType, metadataValue, showInReportType, lastModifiedTime
     * @param {String} opts.search Search for name
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CustomMetadataPageResult}
     */
    this.getMetadata = function(opts) {
      return this.getMetadataWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get metadata by id
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomMetadata} and HTTP response
     */
    this.getMetadataByIdWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getMetadataById");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = CustomMetadata;
      return this.apiClient.callApi(
        '/metadata/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get metadata by id
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CustomMetadata}
     */
    this.getMetadataById = function(id) {
      return this.getMetadataByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
