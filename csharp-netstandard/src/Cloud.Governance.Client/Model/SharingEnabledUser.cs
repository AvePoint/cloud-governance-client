/* 
 * Cloud Governance Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Cloud.Governance.Client.Client.OpenAPIDateConverter;

namespace Cloud.Governance.Client.Model
{
    /// <summary>
    /// SharingEnabledUser
    /// </summary>
    [DataContract]
    public partial class SharingEnabledUser :  IEquatable<SharingEnabledUser>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharingEnabledUser" /> class.
        /// </summary>
        /// <param name="isSharePointGroup">isSharePointGroup.</param>
        /// <param name="isGuestUser">isGuestUser.</param>
        /// <param name="isGuestUserExistsInOrganization">isGuestUserExistsInOrganization.</param>
        /// <param name="id">id.</param>
        /// <param name="loginName">loginName.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="isGroup">isGroup.</param>
        public SharingEnabledUser(bool isSharePointGroup = default(bool), bool isGuestUser = default(bool), bool isGuestUserExistsInOrganization = default(bool), string id = default(string), string loginName = default(string), string displayName = default(string), bool isGroup = default(bool))
        {
            this.IsSharePointGroup = isSharePointGroup;
            this.IsGuestUser = isGuestUser;
            this.IsGuestUserExistsInOrganization = isGuestUserExistsInOrganization;
            this.Id = id;
            this.LoginName = loginName;
            this.DisplayName = displayName;
            this.IsGroup = isGroup;
        }
        
        /// <summary>
        /// Gets or Sets IsSharePointGroup
        /// </summary>
        [DataMember(Name="isSharePointGroup", EmitDefaultValue=false)]
        public bool IsSharePointGroup { get; set; }

        /// <summary>
        /// Gets or Sets IsGuestUser
        /// </summary>
        [DataMember(Name="isGuestUser", EmitDefaultValue=false)]
        public bool IsGuestUser { get; set; }

        /// <summary>
        /// Gets or Sets IsGuestUserExistsInOrganization
        /// </summary>
        [DataMember(Name="isGuestUserExistsInOrganization", EmitDefaultValue=false)]
        public bool IsGuestUserExistsInOrganization { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets LoginName
        /// </summary>
        [DataMember(Name="loginName", EmitDefaultValue=true)]
        public string LoginName { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name="displayName", EmitDefaultValue=true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets IsGroup
        /// </summary>
        [DataMember(Name="isGroup", EmitDefaultValue=false)]
        public bool IsGroup { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=true)]
        public string Email { get; private set; }

        /// <summary>
        /// Gets or Sets JobTitle
        /// </summary>
        [DataMember(Name="jobTitle", EmitDefaultValue=true)]
        public string JobTitle { get; private set; }

        /// <summary>
        /// Gets or Sets PhysicalDeliveryOfficeName
        /// </summary>
        [DataMember(Name="physicalDeliveryOfficeName", EmitDefaultValue=true)]
        public string PhysicalDeliveryOfficeName { get; private set; }

        /// <summary>
        /// Gets or Sets IsOtherTenantUser
        /// </summary>
        [DataMember(Name="isOtherTenantUser", EmitDefaultValue=false)]
        public bool IsOtherTenantUser { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SharingEnabledUser {\n");
            sb.Append("  IsSharePointGroup: ").Append(IsSharePointGroup).Append("\n");
            sb.Append("  IsGuestUser: ").Append(IsGuestUser).Append("\n");
            sb.Append("  IsGuestUserExistsInOrganization: ").Append(IsGuestUserExistsInOrganization).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LoginName: ").Append(LoginName).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  IsGroup: ").Append(IsGroup).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  JobTitle: ").Append(JobTitle).Append("\n");
            sb.Append("  PhysicalDeliveryOfficeName: ").Append(PhysicalDeliveryOfficeName).Append("\n");
            sb.Append("  IsOtherTenantUser: ").Append(IsOtherTenantUser).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SharingEnabledUser);
        }

        /// <summary>
        /// Returns true if SharingEnabledUser instances are equal
        /// </summary>
        /// <param name="input">Instance of SharingEnabledUser to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SharingEnabledUser input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IsSharePointGroup == input.IsSharePointGroup ||
                    this.IsSharePointGroup.Equals(input.IsSharePointGroup)
                ) && 
                (
                    this.IsGuestUser == input.IsGuestUser ||
                    this.IsGuestUser.Equals(input.IsGuestUser)
                ) && 
                (
                    this.IsGuestUserExistsInOrganization == input.IsGuestUserExistsInOrganization ||
                    this.IsGuestUserExistsInOrganization.Equals(input.IsGuestUserExistsInOrganization)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.LoginName == input.LoginName ||
                    (this.LoginName != null &&
                    this.LoginName.Equals(input.LoginName))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.IsGroup == input.IsGroup ||
                    this.IsGroup.Equals(input.IsGroup)
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.JobTitle == input.JobTitle ||
                    (this.JobTitle != null &&
                    this.JobTitle.Equals(input.JobTitle))
                ) && 
                (
                    this.PhysicalDeliveryOfficeName == input.PhysicalDeliveryOfficeName ||
                    (this.PhysicalDeliveryOfficeName != null &&
                    this.PhysicalDeliveryOfficeName.Equals(input.PhysicalDeliveryOfficeName))
                ) && 
                (
                    this.IsOtherTenantUser == input.IsOtherTenantUser ||
                    this.IsOtherTenantUser.Equals(input.IsOtherTenantUser)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.IsSharePointGroup.GetHashCode();
                hashCode = hashCode * 59 + this.IsGuestUser.GetHashCode();
                hashCode = hashCode * 59 + this.IsGuestUserExistsInOrganization.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.LoginName != null)
                    hashCode = hashCode * 59 + this.LoginName.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                hashCode = hashCode * 59 + this.IsGroup.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.JobTitle != null)
                    hashCode = hashCode * 59 + this.JobTitle.GetHashCode();
                if (this.PhysicalDeliveryOfficeName != null)
                    hashCode = hashCode * 59 + this.PhysicalDeliveryOfficeName.GetHashCode();
                hashCode = hashCode * 59 + this.IsOtherTenantUser.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
