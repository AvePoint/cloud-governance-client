/**
 * Cloud Governance Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CloudGovernanceApi);
  }
}(this, function(expect, CloudGovernanceApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CloudGovernanceApi.CreateSiteService();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CreateSiteService', function() {
    it('should create an instance of CreateSiteService', function() {
      // uncomment below and update the code to test CreateSiteService
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be.a(CloudGovernanceApi.CreateSiteService);
    });

    it('should have the property adminCenterUrl (base name: "adminCenterUrl")', function() {
      // uncomment below and update the code to test the property adminCenterUrl
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property siteLanguages (base name: "siteLanguages")', function() {
      // uncomment below and update the code to test the property siteLanguages
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property rootSiteAndManagedPaths (base name: "rootSiteAndManagedPaths")', function() {
      // uncomment below and update the code to test the property rootSiteAndManagedPaths
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property siteUrlSetting (base name: "siteUrlSetting")', function() {
      // uncomment below and update the code to test the property siteUrlSetting
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property multiGeoSetting (base name: "multiGeoSetting")', function() {
      // uncomment below and update the code to test the property multiGeoSetting
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property policies (base name: "policies")', function() {
      // uncomment below and update the code to test the property policies
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property deploymentManagerPlanSettings (base name: "deploymentManagerPlanSettings")', function() {
      // uncomment below and update the code to test the property deploymentManagerPlanSettings
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property policyIdsAndTemplates (base name: "policyIdsAndTemplates")', function() {
      // uncomment below and update the code to test the property policyIdsAndTemplates
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property templateIdsAndPermissions (base name: "templateIdsAndPermissions")', function() {
      // uncomment below and update the code to test the property templateIdsAndPermissions
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property permissionSettings (base name: "permissionSettings")', function() {
      // uncomment below and update the code to test the property permissionSettings
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property leasePeriodSettings (base name: "leasePeriodSettings")', function() {
      // uncomment below and update the code to test the property leasePeriodSettings
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property timeZones (base name: "timeZones")', function() {
      // uncomment below and update the code to test the property timeZones
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property yammerGroupSettings (base name: "yammerGroupSettings")', function() {
      // uncomment below and update the code to test the property yammerGroupSettings
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property classifications (base name: "classifications")', function() {
      // uncomment below and update the code to test the property classifications
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property hubSiteSettings (base name: "hubSiteSettings")', function() {
      // uncomment below and update the code to test the property hubSiteSettings
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property enabledCustomTemplate (base name: "enabledCustomTemplate")', function() {
      // uncomment below and update the code to test the property enabledCustomTemplate
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property customSiteTemplateListURL (base name: "customSiteTemplateListURL")', function() {
      // uncomment below and update the code to test the property customSiteTemplateListURL
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property defaultPrimaryAdmin (base name: "defaultPrimaryAdmin")', function() {
      // uncomment below and update the code to test the property defaultPrimaryAdmin
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property defaultAdditionalAdmins (base name: "defaultAdditionalAdmins")', function() {
      // uncomment below and update the code to test the property defaultAdditionalAdmins
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property defaultPrimaryContact (base name: "defaultPrimaryContact")', function() {
      // uncomment below and update the code to test the property defaultPrimaryContact
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property defaultSecondaryContact (base name: "defaultSecondaryContact")', function() {
      // uncomment below and update the code to test the property defaultSecondaryContact
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property defaultSiteLanguage (base name: "defaultSiteLanguage")', function() {
      // uncomment below and update the code to test the property defaultSiteLanguage
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property defaultRootSite (base name: "defaultRootSite")', function() {
      // uncomment below and update the code to test the property defaultRootSite
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property defaultManagedPath (base name: "defaultManagedPath")', function() {
      // uncomment below and update the code to test the property defaultManagedPath
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property defaultPolicy (base name: "defaultPolicy")', function() {
      // uncomment below and update the code to test the property defaultPolicy
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property defaultTemplate (base name: "defaultTemplate")', function() {
      // uncomment below and update the code to test the property defaultTemplate
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property defaultTimeZone (base name: "defaultTimeZone")', function() {
      // uncomment below and update the code to test the property defaultTimeZone
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property defaultClassification (base name: "defaultClassification")', function() {
      // uncomment below and update the code to test the property defaultClassification
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property defaultDesignType (base name: "defaultDesignType")', function() {
      // uncomment below and update the code to test the property defaultDesignType
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property siteLanguageAssignBy (base name: "siteLanguageAssignBy")', function() {
      // uncomment below and update the code to test the property siteLanguageAssignBy
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property templateAssignBy (base name: "templateAssignBy")', function() {
      // uncomment below and update the code to test the property templateAssignBy
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property policyAssignBy (base name: "policyAssignBy")', function() {
      // uncomment below and update the code to test the property policyAssignBy
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property permissionAssignBy (base name: "permissionAssignBy")', function() {
      // uncomment below and update the code to test the property permissionAssignBy
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property rootSiteAndManagedPathAssignBy (base name: "rootSiteAndManagedPathAssignBy")', function() {
      // uncomment below and update the code to test the property rootSiteAndManagedPathAssignBy
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property timeZoneAssignBy (base name: "timeZoneAssignBy")', function() {
      // uncomment below and update the code to test the property timeZoneAssignBy
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property primaryAdminAssignBy (base name: "primaryAdminAssignBy")', function() {
      // uncomment below and update the code to test the property primaryAdminAssignBy
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property additionalAdminAssignBy (base name: "additionalAdminAssignBy")', function() {
      // uncomment below and update the code to test the property additionalAdminAssignBy
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property primaryContactAssignBy (base name: "primaryContactAssignBy")', function() {
      // uncomment below and update the code to test the property primaryContactAssignBy
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property secondaryContactAssignBy (base name: "secondaryContactAssignBy")', function() {
      // uncomment below and update the code to test the property secondaryContactAssignBy
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property designTypeAssignBy (base name: "designTypeAssignBy")', function() {
      // uncomment below and update the code to test the property designTypeAssignBy
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property classificationAssignBy (base name: "classificationAssignBy")', function() {
      // uncomment below and update the code to test the property classificationAssignBy
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property hubSiteAssignBy (base name: "hubSiteAssignBy")', function() {
      // uncomment below and update the code to test the property hubSiteAssignBy
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property departmentAssignBy (base name: "departmentAssignBy")', function() {
      // uncomment below and update the code to test the property departmentAssignBy
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property metadatas (base name: "metadatas")', function() {
      // uncomment below and update the code to test the property metadatas
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property hideRequestSummary (base name: "hideRequestSummary")', function() {
      // uncomment below and update the code to test the property hideRequestSummary
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property department (base name: "department")', function() {
      // uncomment below and update the code to test the property department
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property loadDepartmentFromUps (base name: "loadDepartmentFromUps")', function() {
      // uncomment below and update the code to test the property loadDepartmentFromUps
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property departments (base name: "departments")', function() {
      // uncomment below and update the code to test the property departments
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property serviceContact (base name: "serviceContact")', function() {
      // uncomment below and update the code to test the property serviceContact
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property serviceAdminContact (base name: "serviceAdminContact")', function() {
      // uncomment below and update the code to test the property serviceAdminContact
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property approversContainManagerRole (base name: "approversContainManagerRole")', function() {
      // uncomment below and update the code to test the property approversContainManagerRole
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property showServiceInCatalog (base name: "showServiceInCatalog")', function() {
      // uncomment below and update the code to test the property showServiceInCatalog
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property customActivity (base name: "customActivity")', function() {
      // uncomment below and update the code to test the property customActivity
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property approvalProcessId (base name: "approvalProcessId")', function() {
      // uncomment below and update the code to test the property approvalProcessId
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property languageId (base name: "languageId")', function() {
      // uncomment below and update the code to test the property languageId
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

    it('should have the property categoryId (base name: "categoryId")', function() {
      // uncomment below and update the code to test the property categoryId
      //var instane = new CloudGovernanceApi.CreateSiteService();
      //expect(instance).to.be();
    });

  });

}));
