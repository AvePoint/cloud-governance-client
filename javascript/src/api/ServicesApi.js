/**
 * Cloud Governance Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChangeGroupSettingCheckResult from '../model/ChangeGroupSettingCheckResult';
import ChangeGroupSettingService from '../model/ChangeGroupSettingService';
import ChangeListSettingService from '../model/ChangeListSettingService';
import ChangeListSettingValidateResult from '../model/ChangeListSettingValidateResult';
import ChangePermissionService from '../model/ChangePermissionService';
import ChangePermissionValidateResult from '../model/ChangePermissionValidateResult';
import ChangeSiteContactService from '../model/ChangeSiteContactService';
import ChangeSiteContactValidateResult from '../model/ChangeSiteContactValidateResult';
import ChangeSiteSettingService from '../model/ChangeSiteSettingService';
import ChangeSiteSettingValidateResult from '../model/ChangeSiteSettingValidateResult';
import ChangeWebContactService from '../model/ChangeWebContactService';
import ChangeWebContactValidateResult from '../model/ChangeWebContactValidateResult';
import ChangeWebSettingService from '../model/ChangeWebSettingService';
import ChangeWebUrlValidateResult from '../model/ChangeWebUrlValidateResult';
import ClonePermissionService from '../model/ClonePermissionService';
import ClonePermissionValidateResult from '../model/ClonePermissionValidateResult';
import ContentMoveProfiles from '../model/ContentMoveProfiles';
import ContentMoveService from '../model/ContentMoveService';
import ContentMoveUrlValidationResult from '../model/ContentMoveUrlValidationResult';
import CreateGroupService from '../model/CreateGroupService';
import CreateListService from '../model/CreateListService';
import CreateListUrlValidationResult from '../model/CreateListUrlValidationResult';
import CreateSiteService from '../model/CreateSiteService';
import CreateWebService from '../model/CreateWebService';
import CreateWebUrlValidationResult from '../model/CreateWebUrlValidationResult';
import CreateWebValidationParameter from '../model/CreateWebValidationParameter';
import GrantPermissionService from '../model/GrantPermissionService';
import GrantPermissionUrlValidationResult from '../model/GrantPermissionUrlValidationResult';
import GroupLifecycleService from '../model/GroupLifecycleService';
import GroupLifecycleValidateResult from '../model/GroupLifecycleValidateResult';
import GroupValidationParameter from '../model/GroupValidationParameter';
import ListValidationParameter from '../model/ListValidationParameter';
import ManagePermissionService from '../model/ManagePermissionService';
import ManagePermissionValidateResult from '../model/ManagePermissionValidateResult';
import ServiceForRequest from '../model/ServiceForRequest';
import ServiceList from '../model/ServiceList';
import ServiceListPageResult from '../model/ServiceListPageResult';
import SiteLifecycleService from '../model/SiteLifecycleService';
import SiteLifecycleValidateResult from '../model/SiteLifecycleValidateResult';
import SiteValidationParameter from '../model/SiteValidationParameter';
import WebLifecycleService from '../model/WebLifecycleService';
import WebLifecycleValidateResult from '../model/WebLifecycleValidateResult';
import WorkspaceType from '../model/WorkspaceType';

/**
* Services service.
* @module api/ServicesApi
* @version 1.0
*/
export default class ServicesApi {

    /**
    * Constructs a new ServicesApi. 
    * @alias module:api/ServicesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addCreateListService operation.
     * @callback module:api/ServicesApi~addCreateListServiceCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add create site service
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateSiteService} opts.createSiteService 
     * @param {module:api/ServicesApi~addCreateListServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    addCreateListService(opts, callback) {
      opts = opts || {};
      let postBody = opts['createSiteService'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/services/createsite', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addCreateWebService operation.
     * @callback module:api/ServicesApi~addCreateWebServiceCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateWebService} opts.createWebService 
     * @param {module:api/ServicesApi~addCreateWebServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    addCreateWebService(opts, callback) {
      opts = opts || {};
      let postBody = opts['createWebService'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/services/createweb', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChangeGroupSettingService operation.
     * @callback module:api/ServicesApi~getChangeGroupSettingServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChangeGroupSettingService} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get change group setting service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionnaireId 
     * @param {module:api/ServicesApi~getChangeGroupSettingServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChangeGroupSettingService}
     */
    getChangeGroupSettingService(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChangeGroupSettingService");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'questionnaireId': opts['questionnaireId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ChangeGroupSettingService;
      return this.apiClient.callApi(
        '/services/changegroupsetting/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChangeListSettingService operation.
     * @callback module:api/ServicesApi~getChangeListSettingServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChangeListSettingService} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get change list setting service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionnaireId 
     * @param {module:api/ServicesApi~getChangeListSettingServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChangeListSettingService}
     */
    getChangeListSettingService(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChangeListSettingService");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'questionnaireId': opts['questionnaireId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ChangeListSettingService;
      return this.apiClient.callApi(
        '/services/changelistsetting/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChangePermissionService operation.
     * @callback module:api/ServicesApi~getChangePermissionServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChangePermissionService} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get change permission service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionnaireId 
     * @param {module:api/ServicesApi~getChangePermissionServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChangePermissionService}
     */
    getChangePermissionService(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChangePermissionService");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'questionnaireId': opts['questionnaireId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ChangePermissionService;
      return this.apiClient.callApi(
        '/services/changepermission/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChangeSiteContactService operation.
     * @callback module:api/ServicesApi~getChangeSiteContactServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChangeSiteContactService} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get change site contact service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionnaireId 
     * @param {module:api/ServicesApi~getChangeSiteContactServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChangeSiteContactService}
     */
    getChangeSiteContactService(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChangeSiteContactService");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'questionnaireId': opts['questionnaireId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ChangeSiteContactService;
      return this.apiClient.callApi(
        '/services/changesitecontact/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChangeSiteSettingService operation.
     * @callback module:api/ServicesApi~getChangeSiteSettingServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChangeSiteSettingService} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get change site setting service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionnaireId 
     * @param {module:api/ServicesApi~getChangeSiteSettingServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChangeSiteSettingService}
     */
    getChangeSiteSettingService(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChangeSiteSettingService");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'questionnaireId': opts['questionnaireId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ChangeSiteSettingService;
      return this.apiClient.callApi(
        '/services/changesitesetting/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChangeWebContactService operation.
     * @callback module:api/ServicesApi~getChangeWebContactServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChangeWebContactService} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * validate permissions, scope for change web contact service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionnaireId 
     * @param {module:api/ServicesApi~getChangeWebContactServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChangeWebContactService}
     */
    getChangeWebContactService(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChangeWebContactService");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'questionnaireId': opts['questionnaireId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ChangeWebContactService;
      return this.apiClient.callApi(
        '/services/changewebcontact/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChangeWebSettingsService operation.
     * @callback module:api/ServicesApi~getChangeWebSettingsServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChangeWebSettingService} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get change web setting service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionnaireId 
     * @param {module:api/ServicesApi~getChangeWebSettingsServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChangeWebSettingService}
     */
    getChangeWebSettingsService(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChangeWebSettingsService");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'questionnaireId': opts['questionnaireId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ChangeWebSettingService;
      return this.apiClient.callApi(
        '/services/changewebsettings/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getClonePermissionService operation.
     * @callback module:api/ServicesApi~getClonePermissionServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClonePermissionService} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get clone permission service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionnaireId 
     * @param {module:api/ServicesApi~getClonePermissionServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClonePermissionService}
     */
    getClonePermissionService(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getClonePermissionService");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'questionnaireId': opts['questionnaireId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ClonePermissionService;
      return this.apiClient.callApi(
        '/services/clonepermission/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContentMoveProfiles operation.
     * @callback module:api/ServicesApi~getContentMoveProfilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContentMoveProfiles} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get content move profiles from cloud management
     * @param {module:api/ServicesApi~getContentMoveProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContentMoveProfiles}
     */
    getContentMoveProfiles(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ContentMoveProfiles;
      return this.apiClient.callApi(
        '/services/contentmove/profiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContentMoveService operation.
     * @callback module:api/ServicesApi~getContentMoveServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContentMoveService} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get content move service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionnaireId 
     * @param {module:api/ServicesApi~getContentMoveServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContentMoveService}
     */
    getContentMoveService(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getContentMoveService");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'questionnaireId': opts['questionnaireId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ContentMoveService;
      return this.apiClient.callApi(
        '/services/contentmove/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCreateGroupService operation.
     * @callback module:api/ServicesApi~getCreateGroupServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateGroupService} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get create group service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionnaireId 
     * @param {module:api/ServicesApi~getCreateGroupServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateGroupService}
     */
    getCreateGroupService(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCreateGroupService");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'questionnaireId': opts['questionnaireId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = CreateGroupService;
      return this.apiClient.callApi(
        '/services/creategroup/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCreateListService operation.
     * @callback module:api/ServicesApi~getCreateListServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateListService} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get create list service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionnaireId 
     * @param {module:api/ServicesApi~getCreateListServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateListService}
     */
    getCreateListService(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCreateListService");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'questionnaireId': opts['questionnaireId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = CreateListService;
      return this.apiClient.callApi(
        '/services/createlist/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCreateSiteService operation.
     * @callback module:api/ServicesApi~getCreateSiteServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSiteService} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get create site service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionnaireId 
     * @param {module:api/ServicesApi~getCreateSiteServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSiteService}
     */
    getCreateSiteService(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCreateSiteService");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'questionnaireId': opts['questionnaireId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = CreateSiteService;
      return this.apiClient.callApi(
        '/services/createsite/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCreateWebService operation.
     * @callback module:api/ServicesApi~getCreateWebServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateWebService} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get create web service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionnaireId 
     * @param {module:api/ServicesApi~getCreateWebServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateWebService}
     */
    getCreateWebService(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCreateWebService");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'questionnaireId': opts['questionnaireId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = CreateWebService;
      return this.apiClient.callApi(
        '/services/createweb/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomService operation.
     * @callback module:api/ServicesApi~getCustomServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceForRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get custom service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionnaireId 
     * @param {module:api/ServicesApi~getCustomServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceForRequest}
     */
    getCustomService(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCustomService");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'questionnaireId': opts['questionnaireId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ServiceForRequest;
      return this.apiClient.callApi(
        '/services/custom/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGrantPermissionService operation.
     * @callback module:api/ServicesApi~getGrantPermissionServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GrantPermissionService} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get grant permission service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionnaireId 
     * @param {module:api/ServicesApi~getGrantPermissionServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GrantPermissionService}
     */
    getGrantPermissionService(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGrantPermissionService");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'questionnaireId': opts['questionnaireId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = GrantPermissionService;
      return this.apiClient.callApi(
        '/services/grantpermission/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupLifecycleService operation.
     * @callback module:api/ServicesApi~getGroupLifecycleServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupLifecycleService} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get group lifecycle service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionnaireId 
     * @param {module:api/ServicesApi~getGroupLifecycleServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupLifecycleService}
     */
    getGroupLifecycleService(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGroupLifecycleService");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'questionnaireId': opts['questionnaireId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = GroupLifecycleService;
      return this.apiClient.callApi(
        '/services/grouplifecycle/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getManagePermissionService operation.
     * @callback module:api/ServicesApi~getManagePermissionServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagePermissionService} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get manage permission service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionnaireId 
     * @param {module:api/ServicesApi~getManagePermissionServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagePermissionService}
     */
    getManagePermissionService(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getManagePermissionService");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'questionnaireId': opts['questionnaireId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ManagePermissionService;
      return this.apiClient.callApi(
        '/services/managepermission/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMyQuickServices operation.
     * @callback module:api/ServicesApi~getMyQuickServicesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ServiceList>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get configued quick services that can be used to start a request
     * @param {module:api/ServicesApi~getMyQuickServicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ServiceList>}
     */
    getMyQuickServices(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [ServiceList];
      return this.apiClient.callApi(
        '/services/my/quick', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMyServices operation.
     * @callback module:api/ServicesApi~getMyServicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceListPageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get services that can be used to start a request
     * @param {Object} opts Optional parameters
     * @param {String} opts.search 
     * @param {module:api/ServicesApi~getMyServicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceListPageResult}
     */
    getMyServices(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'search': opts['search']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ServiceListPageResult;
      return this.apiClient.callApi(
        '/services/my', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMyServicesWithContext operation.
     * @callback module:api/ServicesApi~getMyServicesWithContextCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ServiceList>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get services that can be used to start a request within context
     * @param {module:model/WorkspaceType} objecttype 
     * @param {String} objectid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.search 
     * @param {module:api/ServicesApi~getMyServicesWithContextCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ServiceList>}
     */
    getMyServicesWithContext(objecttype, objectid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objecttype' is set
      if (objecttype === undefined || objecttype === null) {
        throw new Error("Missing the required parameter 'objecttype' when calling getMyServicesWithContext");
      }
      // verify the required parameter 'objectid' is set
      if (objectid === undefined || objectid === null) {
        throw new Error("Missing the required parameter 'objectid' when calling getMyServicesWithContext");
      }

      let pathParams = {
        'objecttype': objecttype,
        'objectid': objectid
      };
      let queryParams = {
        'search': opts['search']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [ServiceList];
      return this.apiClient.callApi(
        '/services/my/workspace/{objecttype}/{objectid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSiteLifecycleService operation.
     * @callback module:api/ServicesApi~getSiteLifecycleServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteLifecycleService} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get site lifecycle service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionnaireId 
     * @param {module:api/ServicesApi~getSiteLifecycleServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteLifecycleService}
     */
    getSiteLifecycleService(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSiteLifecycleService");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'questionnaireId': opts['questionnaireId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = SiteLifecycleService;
      return this.apiClient.callApi(
        '/services/sitelifecycle/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWebLifecycleService operation.
     * @callback module:api/ServicesApi~getWebLifecycleServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebLifecycleService} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get web lifecycle service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionnaireId 
     * @param {module:api/ServicesApi~getWebLifecycleServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebLifecycleService}
     */
    getWebLifecycleService(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getWebLifecycleService");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'questionnaireId': opts['questionnaireId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = WebLifecycleService;
      return this.apiClient.callApi(
        '/services/weblifecycle/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validateForChangeGroupSettingService operation.
     * @callback module:api/ServicesApi~validateForChangeGroupSettingServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChangeGroupSettingCheckResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * validate permissions, scope for change group setting service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/GroupValidationParameter} opts.groupValidationParameter 
     * @param {module:api/ServicesApi~validateForChangeGroupSettingServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChangeGroupSettingCheckResult}
     */
    validateForChangeGroupSettingService(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['groupValidationParameter'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling validateForChangeGroupSettingService");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ChangeGroupSettingCheckResult;
      return this.apiClient.callApi(
        '/services/changegroupsetting/{id}/group/validation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validateForChangeListSettingService operation.
     * @callback module:api/ServicesApi~validateForChangeListSettingServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChangeListSettingValidateResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * validate permissions, scope for change list setting service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/SiteValidationParameter} opts.siteValidationParameter 
     * @param {module:api/ServicesApi~validateForChangeListSettingServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChangeListSettingValidateResult}
     */
    validateForChangeListSettingService(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['siteValidationParameter'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling validateForChangeListSettingService");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ChangeListSettingValidateResult;
      return this.apiClient.callApi(
        '/services/changelistsetting/{id}/url/validation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validateForChangePermissionService operation.
     * @callback module:api/ServicesApi~validateForChangePermissionServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChangePermissionValidateResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * validate permissions, scope for change permission service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/SiteValidationParameter} opts.siteValidationParameter 
     * @param {module:api/ServicesApi~validateForChangePermissionServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChangePermissionValidateResult}
     */
    validateForChangePermissionService(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['siteValidationParameter'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling validateForChangePermissionService");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ChangePermissionValidateResult;
      return this.apiClient.callApi(
        '/services/changepermission/{id}/url/validation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validateForChangeSiteContactService operation.
     * @callback module:api/ServicesApi~validateForChangeSiteContactServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChangeSiteContactValidateResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * validate permissions, scope for change site contact service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/SiteValidationParameter} opts.siteValidationParameter 
     * @param {module:api/ServicesApi~validateForChangeSiteContactServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChangeSiteContactValidateResult}
     */
    validateForChangeSiteContactService(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['siteValidationParameter'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling validateForChangeSiteContactService");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ChangeSiteContactValidateResult;
      return this.apiClient.callApi(
        '/services/changesitecontact/{id}/url/validation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validateForChangeSiteSettingService operation.
     * @callback module:api/ServicesApi~validateForChangeSiteSettingServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChangeSiteSettingValidateResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * validate permissions, scope for change site setting service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/SiteValidationParameter} opts.siteValidationParameter 
     * @param {module:api/ServicesApi~validateForChangeSiteSettingServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChangeSiteSettingValidateResult}
     */
    validateForChangeSiteSettingService(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['siteValidationParameter'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling validateForChangeSiteSettingService");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ChangeSiteSettingValidateResult;
      return this.apiClient.callApi(
        '/services/changesitesetting/{id}/url/validation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validateForChangeWebContactService operation.
     * @callback module:api/ServicesApi~validateForChangeWebContactServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChangeWebContactValidateResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * validate permissions, scope for change web contact service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/SiteValidationParameter} opts.siteValidationParameter 
     * @param {module:api/ServicesApi~validateForChangeWebContactServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChangeWebContactValidateResult}
     */
    validateForChangeWebContactService(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['siteValidationParameter'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling validateForChangeWebContactService");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ChangeWebContactValidateResult;
      return this.apiClient.callApi(
        '/services/changewebcontact/{id}/url/validation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validateForChangeWebSettingService operation.
     * @callback module:api/ServicesApi~validateForChangeWebSettingServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChangeWebUrlValidateResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * validate permissions, scope for change web setting service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/SiteValidationParameter} opts.siteValidationParameter 
     * @param {module:api/ServicesApi~validateForChangeWebSettingServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChangeWebUrlValidateResult}
     */
    validateForChangeWebSettingService(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['siteValidationParameter'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling validateForChangeWebSettingService");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ChangeWebUrlValidateResult;
      return this.apiClient.callApi(
        '/services/changewebsettings/{id}/url/validation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validateForClonePermissionService operation.
     * @callback module:api/ServicesApi~validateForClonePermissionServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClonePermissionValidateResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * validate permissions, scope for clone permission service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/SiteValidationParameter} opts.siteValidationParameter 
     * @param {module:api/ServicesApi~validateForClonePermissionServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClonePermissionValidateResult}
     */
    validateForClonePermissionService(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['siteValidationParameter'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling validateForClonePermissionService");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ClonePermissionValidateResult;
      return this.apiClient.callApi(
        '/services/clonepermission/{id}/url/validation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validateForContentMoveService operation.
     * @callback module:api/ServicesApi~validateForContentMoveServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContentMoveUrlValidationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * validate permissions, scope for content move service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/SiteValidationParameter} opts.siteValidationParameter 
     * @param {module:api/ServicesApi~validateForContentMoveServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContentMoveUrlValidationResult}
     */
    validateForContentMoveService(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['siteValidationParameter'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling validateForContentMoveService");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ContentMoveUrlValidationResult;
      return this.apiClient.callApi(
        '/services/contentmove/{id}/url/validation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validateForCreateListService operation.
     * @callback module:api/ServicesApi~validateForCreateListServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateListUrlValidationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * validate permissions, scope for create list service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ListValidationParameter} opts.listValidationParameter 
     * @param {module:api/ServicesApi~validateForCreateListServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateListUrlValidationResult}
     */
    validateForCreateListService(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['listValidationParameter'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling validateForCreateListService");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = CreateListUrlValidationResult;
      return this.apiClient.callApi(
        '/services/createlist/{id}/url/validation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validateForCreateWebService operation.
     * @callback module:api/ServicesApi~validateForCreateWebServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateWebUrlValidationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * validate permissions, scope for create web service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateWebValidationParameter} opts.createWebValidationParameter 
     * @param {module:api/ServicesApi~validateForCreateWebServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateWebUrlValidationResult}
     */
    validateForCreateWebService(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['createWebValidationParameter'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling validateForCreateWebService");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = CreateWebUrlValidationResult;
      return this.apiClient.callApi(
        '/services/createweb/{id}/url/validation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validateForGrantPermissionService operation.
     * @callback module:api/ServicesApi~validateForGrantPermissionServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GrantPermissionUrlValidationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * validate permissions, scope for grant permission service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/SiteValidationParameter} opts.siteValidationParameter 
     * @param {module:api/ServicesApi~validateForGrantPermissionServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GrantPermissionUrlValidationResult}
     */
    validateForGrantPermissionService(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['siteValidationParameter'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling validateForGrantPermissionService");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = GrantPermissionUrlValidationResult;
      return this.apiClient.callApi(
        '/services/grantpermission/{id}/url/validation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validateForGroupLifecycleService operation.
     * @callback module:api/ServicesApi~validateForGroupLifecycleServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupLifecycleValidateResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * validate permissions, scope for group lifecycle service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/GroupValidationParameter} opts.groupValidationParameter 
     * @param {module:api/ServicesApi~validateForGroupLifecycleServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupLifecycleValidateResult}
     */
    validateForGroupLifecycleService(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['groupValidationParameter'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling validateForGroupLifecycleService");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = GroupLifecycleValidateResult;
      return this.apiClient.callApi(
        '/services/grouplifecycle/{id}/group/validation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validateForManagePermissionService operation.
     * @callback module:api/ServicesApi~validateForManagePermissionServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagePermissionValidateResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * validate permissions, scope for manage permission service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/SiteValidationParameter} opts.siteValidationParameter 
     * @param {module:api/ServicesApi~validateForManagePermissionServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagePermissionValidateResult}
     */
    validateForManagePermissionService(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['siteValidationParameter'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling validateForManagePermissionService");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ManagePermissionValidateResult;
      return this.apiClient.callApi(
        '/services/managepermission/{id}/url/validation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validateForSiteLifecycleService operation.
     * @callback module:api/ServicesApi~validateForSiteLifecycleServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteLifecycleValidateResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * validate permissions, scope for site lifecycle service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/SiteValidationParameter} opts.siteValidationParameter 
     * @param {module:api/ServicesApi~validateForSiteLifecycleServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteLifecycleValidateResult}
     */
    validateForSiteLifecycleService(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['siteValidationParameter'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling validateForSiteLifecycleService");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = SiteLifecycleValidateResult;
      return this.apiClient.callApi(
        '/services/sitelifecycle/{id}/url/validation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validateForWebLifecycleService operation.
     * @callback module:api/ServicesApi~validateForWebLifecycleServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebLifecycleValidateResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * validate permissions, scope for web lifecycle service
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/SiteValidationParameter} opts.siteValidationParameter 
     * @param {module:api/ServicesApi~validateForWebLifecycleServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebLifecycleValidateResult}
     */
    validateForWebLifecycleService(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['siteValidationParameter'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling validateForWebLifecycleService");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = WebLifecycleValidateResult;
      return this.apiClient.callApi(
        '/services/weblifecycle/{id}/url/validation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
