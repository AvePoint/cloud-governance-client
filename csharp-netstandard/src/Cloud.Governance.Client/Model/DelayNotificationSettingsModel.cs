/* 
 * Cloud Governance Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Cloud.Governance.Client.Client.OpenAPIDateConverter;

namespace Cloud.Governance.Client.Model
{
    /// <summary>
    /// DelayNotificationSettingsModel
    /// </summary>
    [DataContract]
    public partial class DelayNotificationSettingsModel :  IEquatable<DelayNotificationSettingsModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DelayNotificationSettingsModel" /> class.
        /// </summary>
        /// <param name="isEnabled">isEnabled.</param>
        /// <param name="delayHours">delayHours.</param>
        /// <param name="emailThreshold">emailThreshold.</param>
        /// <param name="notifyUsers">notifyUsers.</param>
        public DelayNotificationSettingsModel(bool isEnabled = default(bool), int delayHours = default(int), int emailThreshold = default(int), List<ApiUser> notifyUsers = default(List<ApiUser>))
        {
            this.IsEnabled = isEnabled;
            this.DelayHours = delayHours;
            this.EmailThreshold = emailThreshold;
            this.NotifyUsers = notifyUsers;
        }
        
        /// <summary>
        /// Gets or Sets IsEnabled
        /// </summary>
        [DataMember(Name="isEnabled", EmitDefaultValue=false)]
        public bool IsEnabled { get; set; }

        /// <summary>
        /// Gets or Sets DelayHours
        /// </summary>
        [DataMember(Name="delayHours", EmitDefaultValue=false)]
        public int DelayHours { get; set; }

        /// <summary>
        /// Gets or Sets EmailThreshold
        /// </summary>
        [DataMember(Name="emailThreshold", EmitDefaultValue=false)]
        public int EmailThreshold { get; set; }

        /// <summary>
        /// Gets or Sets NotifyUsers
        /// </summary>
        [DataMember(Name="notifyUsers", EmitDefaultValue=true)]
        public List<ApiUser> NotifyUsers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DelayNotificationSettingsModel {\n");
            sb.Append("  IsEnabled: ").Append(IsEnabled).Append("\n");
            sb.Append("  DelayHours: ").Append(DelayHours).Append("\n");
            sb.Append("  EmailThreshold: ").Append(EmailThreshold).Append("\n");
            sb.Append("  NotifyUsers: ").Append(NotifyUsers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DelayNotificationSettingsModel);
        }

        /// <summary>
        /// Returns true if DelayNotificationSettingsModel instances are equal
        /// </summary>
        /// <param name="input">Instance of DelayNotificationSettingsModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DelayNotificationSettingsModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IsEnabled == input.IsEnabled ||
                    this.IsEnabled.Equals(input.IsEnabled)
                ) && 
                (
                    this.DelayHours == input.DelayHours ||
                    this.DelayHours.Equals(input.DelayHours)
                ) && 
                (
                    this.EmailThreshold == input.EmailThreshold ||
                    this.EmailThreshold.Equals(input.EmailThreshold)
                ) && 
                (
                    this.NotifyUsers == input.NotifyUsers ||
                    this.NotifyUsers != null &&
                    input.NotifyUsers != null &&
                    this.NotifyUsers.SequenceEqual(input.NotifyUsers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.IsEnabled.GetHashCode();
                hashCode = hashCode * 59 + this.DelayHours.GetHashCode();
                hashCode = hashCode * 59 + this.EmailThreshold.GetHashCode();
                if (this.NotifyUsers != null)
                    hashCode = hashCode * 59 + this.NotifyUsers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DelayHours (int) maximum
            if(this.DelayHours > (int)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DelayHours, must be a value less than or equal to 2147483647.", new [] { "DelayHours" });
            }

            // DelayHours (int) minimum
            if(this.DelayHours < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DelayHours, must be a value greater than or equal to 0.", new [] { "DelayHours" });
            }

            // EmailThreshold (int) maximum
            if(this.EmailThreshold > (int)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EmailThreshold, must be a value less than or equal to 2147483647.", new [] { "EmailThreshold" });
            }

            // EmailThreshold (int) minimum
            if(this.EmailThreshold < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EmailThreshold, must be a value greater than or equal to 0.", new [] { "EmailThreshold" });
            }

            yield break;
        }
    }

}
