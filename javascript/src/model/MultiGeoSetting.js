/**
 * Cloud Governance Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AssignBy from './AssignBy';
import GeoLocationBase from './GeoLocationBase';
import MultiGeoControlMode from './MultiGeoControlMode';

/**
 * The MultiGeoSetting model module.
 * @module model/MultiGeoSetting
 * @version 1.0
 */
class MultiGeoSetting {
    /**
     * Constructs a new <code>MultiGeoSetting</code>.
     * @alias module:model/MultiGeoSetting
     */
    constructor() { 
        
        MultiGeoSetting.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MultiGeoSetting</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MultiGeoSetting} obj Optional instance to populate.
     * @return {module:model/MultiGeoSetting} The populated <code>MultiGeoSetting</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MultiGeoSetting();

            if (data.hasOwnProperty('isEnabled')) {
                obj['isEnabled'] = ApiClient.convertToType(data['isEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('controlMode')) {
                obj['controlMode'] = MultiGeoControlMode.constructFromObject(data['controlMode']);
            }
            if (data.hasOwnProperty('defaultLocation')) {
                obj['defaultLocation'] = GeoLocationBase.constructFromObject(data['defaultLocation']);
            }
            if (data.hasOwnProperty('selectedLocations')) {
                obj['selectedLocations'] = ApiClient.convertToType(data['selectedLocations'], [GeoLocationBase]);
            }
            if (data.hasOwnProperty('locationAssignBy')) {
                obj['locationAssignBy'] = AssignBy.constructFromObject(data['locationAssignBy']);
            }
            if (data.hasOwnProperty('userRoleForLocation')) {
                obj['userRoleForLocation'] = ApiClient.convertToType(data['userRoleForLocation'], 'String');
            }
            if (data.hasOwnProperty('allLocations')) {
                obj['allLocations'] = ApiClient.convertToType(data['allLocations'], [GeoLocationBase]);
            }
        }
        return obj;
    }


}

/**
 * @member {Boolean} isEnabled
 */
MultiGeoSetting.prototype['isEnabled'] = undefined;

/**
 * @member {module:model/MultiGeoControlMode} controlMode
 */
MultiGeoSetting.prototype['controlMode'] = undefined;

/**
 * @member {module:model/GeoLocationBase} defaultLocation
 */
MultiGeoSetting.prototype['defaultLocation'] = undefined;

/**
 * @member {Array.<module:model/GeoLocationBase>} selectedLocations
 */
MultiGeoSetting.prototype['selectedLocations'] = undefined;

/**
 * @member {module:model/AssignBy} locationAssignBy
 */
MultiGeoSetting.prototype['locationAssignBy'] = undefined;

/**
 * @member {String} userRoleForLocation
 */
MultiGeoSetting.prototype['userRoleForLocation'] = undefined;

/**
 * @member {Array.<module:model/GeoLocationBase>} allLocations
 */
MultiGeoSetting.prototype['allLocations'] = undefined;






export default MultiGeoSetting;

