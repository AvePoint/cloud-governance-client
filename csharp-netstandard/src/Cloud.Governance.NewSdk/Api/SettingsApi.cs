/* 
 * Cloud Governance Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Cloud.Governance.NewSdk.Client;
using Cloud.Governance.NewSdk.Model;

namespace Cloud.Governance.NewSdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISettingsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// edit my personal settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalSettings"> (optional)</param>
        /// <returns></returns>
        void EditMyPersonalSettings (PersonalSettings personalSettings = null);

        /// <summary>
        /// edit my personal settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalSettings"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EditMyPersonalSettingsWithHttpInfo (PersonalSettings personalSettings = null);
        /// <summary>
        /// get application settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="localeId"> (optional)</param>
        /// <returns>ApplicationSettings</returns>
        ApplicationSettings GetApplicationSettings (int? localeId = null);

        /// <summary>
        /// get application settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="localeId"> (optional)</param>
        /// <returns>ApiResponse of ApplicationSettings</returns>
        ApiResponse<ApplicationSettings> GetApplicationSettingsWithHttpInfo (int? localeId = null);
        /// <summary>
        /// get group/teams dynamic membership rules
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantid"></param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 GetDynamicMembershipRuleItems (Guid tenantid);

        /// <summary>
        /// get group/teams dynamic membership rules
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantid"></param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> GetDynamicMembershipRuleItemsWithHttpInfo (Guid tenantid);
        /// <summary>
        /// get help link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CustomHelpLinkModel</returns>
        CustomHelpLinkModel GetHelpLink ();

        /// <summary>
        /// get help link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CustomHelpLinkModel</returns>
        ApiResponse<CustomHelpLinkModel> GetHelpLinkWithHttpInfo ();
        /// <summary>
        /// get my personal settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PersonalSettings</returns>
        PersonalSettings GetMyPersonalSettings ();

        /// <summary>
        /// get my personal settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PersonalSettings</returns>
        ApiResponse<PersonalSettings> GetMyPersonalSettingsWithHttpInfo ();
        /// <summary>
        /// get news
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>NewsAndUpdatesInfo</returns>
        NewsAndUpdatesInfo GetNews ();

        /// <summary>
        /// get news
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of NewsAndUpdatesInfo</returns>
        ApiResponse<NewsAndUpdatesInfo> GetNewsWithHttpInfo ();
        /// <summary>
        /// get permission levels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PermissionLevel&gt;</returns>
        List<PermissionLevel> GetPermissionLevels ();

        /// <summary>
        /// get permission levels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PermissionLevel&gt;</returns>
        ApiResponse<List<PermissionLevel>> GetPermissionLevelsWithHttpInfo ();
        /// <summary>
        /// get supported language
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ResourceValue&gt;</returns>
        List<ResourceValue> GetSupportedLanguages ();

        /// <summary>
        /// get supported language
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ResourceValue&gt;</returns>
        ApiResponse<List<ResourceValue>> GetSupportedLanguagesWithHttpInfo ();
        /// <summary>
        /// get timezones
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ResourceValue&gt;</returns>
        List<ResourceValue> GetTimeZones ();

        /// <summary>
        /// get timezones
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ResourceValue&gt;</returns>
        ApiResponse<List<ResourceValue>> GetTimeZonesWithHttpInfo ();
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISettingsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// edit my personal settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalSettings"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EditMyPersonalSettingsAsync (PersonalSettings personalSettings = null);

        /// <summary>
        /// edit my personal settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalSettings"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditMyPersonalSettingsAsyncWithHttpInfo (PersonalSettings personalSettings = null);
        /// <summary>
        /// get application settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="localeId"> (optional)</param>
        /// <returns>Task of ApplicationSettings</returns>
        System.Threading.Tasks.Task<ApplicationSettings> GetApplicationSettingsAsync (int? localeId = null);

        /// <summary>
        /// get application settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="localeId"> (optional)</param>
        /// <returns>Task of ApiResponse (ApplicationSettings)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationSettings>> GetApplicationSettingsAsyncWithHttpInfo (int? localeId = null);
        /// <summary>
        /// get group/teams dynamic membership rules
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantid"></param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> GetDynamicMembershipRuleItemsAsync (Guid tenantid);

        /// <summary>
        /// get group/teams dynamic membership rules
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantid"></param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> GetDynamicMembershipRuleItemsAsyncWithHttpInfo (Guid tenantid);
        /// <summary>
        /// get help link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of CustomHelpLinkModel</returns>
        System.Threading.Tasks.Task<CustomHelpLinkModel> GetHelpLinkAsync ();

        /// <summary>
        /// get help link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (CustomHelpLinkModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomHelpLinkModel>> GetHelpLinkAsyncWithHttpInfo ();
        /// <summary>
        /// get my personal settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PersonalSettings</returns>
        System.Threading.Tasks.Task<PersonalSettings> GetMyPersonalSettingsAsync ();

        /// <summary>
        /// get my personal settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PersonalSettings)</returns>
        System.Threading.Tasks.Task<ApiResponse<PersonalSettings>> GetMyPersonalSettingsAsyncWithHttpInfo ();
        /// <summary>
        /// get news
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of NewsAndUpdatesInfo</returns>
        System.Threading.Tasks.Task<NewsAndUpdatesInfo> GetNewsAsync ();

        /// <summary>
        /// get news
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (NewsAndUpdatesInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<NewsAndUpdatesInfo>> GetNewsAsyncWithHttpInfo ();
        /// <summary>
        /// get permission levels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PermissionLevel&gt;</returns>
        System.Threading.Tasks.Task<List<PermissionLevel>> GetPermissionLevelsAsync ();

        /// <summary>
        /// get permission levels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PermissionLevel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PermissionLevel>>> GetPermissionLevelsAsyncWithHttpInfo ();
        /// <summary>
        /// get supported language
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ResourceValue&gt;</returns>
        System.Threading.Tasks.Task<List<ResourceValue>> GetSupportedLanguagesAsync ();

        /// <summary>
        /// get supported language
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ResourceValue&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ResourceValue>>> GetSupportedLanguagesAsyncWithHttpInfo ();
        /// <summary>
        /// get timezones
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ResourceValue&gt;</returns>
        System.Threading.Tasks.Task<List<ResourceValue>> GetTimeZonesAsync ();

        /// <summary>
        /// get timezones
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ResourceValue&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ResourceValue>>> GetTimeZonesAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISettingsApi : ISettingsApiSync, ISettingsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SettingsApi : ISettingsApi
    {
        private Cloud.Governance.NewSdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SettingsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SettingsApi(String basePath)
        {
            this.Configuration = Cloud.Governance.NewSdk.Client.Configuration.MergeConfigurations(
                Cloud.Governance.NewSdk.Client.GlobalConfiguration.Instance,
                new Cloud.Governance.NewSdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Cloud.Governance.NewSdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Cloud.Governance.NewSdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Cloud.Governance.NewSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SettingsApi(Cloud.Governance.NewSdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Cloud.Governance.NewSdk.Client.Configuration.MergeConfigurations(
                Cloud.Governance.NewSdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Cloud.Governance.NewSdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Cloud.Governance.NewSdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Cloud.Governance.NewSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SettingsApi(Cloud.Governance.NewSdk.Client.ISynchronousClient client,Cloud.Governance.NewSdk.Client.IAsynchronousClient asyncClient, Cloud.Governance.NewSdk.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Cloud.Governance.NewSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Cloud.Governance.NewSdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Cloud.Governance.NewSdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Cloud.Governance.NewSdk.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Cloud.Governance.NewSdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// edit my personal settings 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalSettings"> (optional)</param>
        /// <returns></returns>
        public void EditMyPersonalSettings (PersonalSettings personalSettings = null)
        {
             EditMyPersonalSettingsWithHttpInfo(personalSettings);
        }

        /// <summary>
        /// edit my personal settings 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalSettings"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse<Object> EditMyPersonalSettingsWithHttpInfo (PersonalSettings personalSettings = null)
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = personalSettings;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Put<Object>("/settings/my", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditMyPersonalSettings", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// edit my personal settings 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalSettings"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EditMyPersonalSettingsAsync (PersonalSettings personalSettings = null)
        {
             await EditMyPersonalSettingsAsyncWithHttpInfo(personalSettings);

        }

        /// <summary>
        /// edit my personal settings 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalSettings"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<Object>> EditMyPersonalSettingsAsyncWithHttpInfo (PersonalSettings personalSettings = null)
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = personalSettings;

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Object>("/settings/my", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EditMyPersonalSettings", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get application settings 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="localeId"> (optional)</param>
        /// <returns>ApplicationSettings</returns>
        public ApplicationSettings GetApplicationSettings (int? localeId = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ApplicationSettings> localVarResponse = GetApplicationSettingsWithHttpInfo(localeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get application settings 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="localeId"> (optional)</param>
        /// <returns>ApiResponse of ApplicationSettings</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< ApplicationSettings > GetApplicationSettingsWithHttpInfo (int? localeId = null)
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (localeId != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "localeId", localeId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< ApplicationSettings >("/settings/app", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetApplicationSettings", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get application settings 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="localeId"> (optional)</param>
        /// <returns>Task of ApplicationSettings</returns>
        public async System.Threading.Tasks.Task<ApplicationSettings> GetApplicationSettingsAsync (int? localeId = null)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<ApplicationSettings> localVarResponse = await GetApplicationSettingsAsyncWithHttpInfo(localeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get application settings 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="localeId"> (optional)</param>
        /// <returns>Task of ApiResponse (ApplicationSettings)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<ApplicationSettings>> GetApplicationSettingsAsyncWithHttpInfo (int? localeId = null)
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (localeId != null)
            {
                foreach (var kvp in Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToMultiMap("", "localeId", localeId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ApplicationSettings>("/settings/app", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetApplicationSettings", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get group/teams dynamic membership rules 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantid"></param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 GetDynamicMembershipRuleItems (Guid tenantid)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<InlineResponse200> localVarResponse = GetDynamicMembershipRuleItemsWithHttpInfo(tenantid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get group/teams dynamic membership rules 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantid"></param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< InlineResponse200 > GetDynamicMembershipRuleItemsWithHttpInfo (Guid tenantid)
        {
            // verify the required parameter 'tenantid' is set
            if (tenantid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'tenantid' when calling SettingsApi->GetDynamicMembershipRuleItems");

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (tenantid != null)
                requestOptions.PathParameters.Add("tenantid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(tenantid)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< InlineResponse200 >("/settings/office365/groups/dynamicmembershiprule/{tenantid}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetDynamicMembershipRuleItems", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get group/teams dynamic membership rules 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantid"></param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> GetDynamicMembershipRuleItemsAsync (Guid tenantid)
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<InlineResponse200> localVarResponse = await GetDynamicMembershipRuleItemsAsyncWithHttpInfo(tenantid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get group/teams dynamic membership rules 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantid"></param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<InlineResponse200>> GetDynamicMembershipRuleItemsAsyncWithHttpInfo (Guid tenantid)
        {
            // verify the required parameter 'tenantid' is set
            if (tenantid == null)
                throw new Cloud.Governance.NewSdk.Client.ApiException(400, "Missing required parameter 'tenantid' when calling SettingsApi->GetDynamicMembershipRuleItems");


            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (tenantid != null)
                requestOptions.PathParameters.Add("tenantid", Cloud.Governance.NewSdk.Client.ClientUtils.ParameterToString(tenantid)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<InlineResponse200>("/settings/office365/groups/dynamicmembershiprule/{tenantid}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetDynamicMembershipRuleItems", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get help link 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CustomHelpLinkModel</returns>
        public CustomHelpLinkModel GetHelpLink ()
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<CustomHelpLinkModel> localVarResponse = GetHelpLinkWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// get help link 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CustomHelpLinkModel</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< CustomHelpLinkModel > GetHelpLinkWithHttpInfo ()
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< CustomHelpLinkModel >("/settings/helplink", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetHelpLink", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get help link 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of CustomHelpLinkModel</returns>
        public async System.Threading.Tasks.Task<CustomHelpLinkModel> GetHelpLinkAsync ()
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<CustomHelpLinkModel> localVarResponse = await GetHelpLinkAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// get help link 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (CustomHelpLinkModel)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<CustomHelpLinkModel>> GetHelpLinkAsyncWithHttpInfo ()
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<CustomHelpLinkModel>("/settings/helplink", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetHelpLink", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get my personal settings 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PersonalSettings</returns>
        public PersonalSettings GetMyPersonalSettings ()
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<PersonalSettings> localVarResponse = GetMyPersonalSettingsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// get my personal settings 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PersonalSettings</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< PersonalSettings > GetMyPersonalSettingsWithHttpInfo ()
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< PersonalSettings >("/settings/my", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetMyPersonalSettings", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get my personal settings 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PersonalSettings</returns>
        public async System.Threading.Tasks.Task<PersonalSettings> GetMyPersonalSettingsAsync ()
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<PersonalSettings> localVarResponse = await GetMyPersonalSettingsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// get my personal settings 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PersonalSettings)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<PersonalSettings>> GetMyPersonalSettingsAsyncWithHttpInfo ()
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<PersonalSettings>("/settings/my", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetMyPersonalSettings", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get news 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>NewsAndUpdatesInfo</returns>
        public NewsAndUpdatesInfo GetNews ()
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<NewsAndUpdatesInfo> localVarResponse = GetNewsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// get news 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of NewsAndUpdatesInfo</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< NewsAndUpdatesInfo > GetNewsWithHttpInfo ()
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< NewsAndUpdatesInfo >("/settings/news", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetNews", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get news 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of NewsAndUpdatesInfo</returns>
        public async System.Threading.Tasks.Task<NewsAndUpdatesInfo> GetNewsAsync ()
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<NewsAndUpdatesInfo> localVarResponse = await GetNewsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// get news 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (NewsAndUpdatesInfo)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<NewsAndUpdatesInfo>> GetNewsAsyncWithHttpInfo ()
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<NewsAndUpdatesInfo>("/settings/news", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetNews", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get permission levels 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PermissionLevel&gt;</returns>
        public List<PermissionLevel> GetPermissionLevels ()
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<List<PermissionLevel>> localVarResponse = GetPermissionLevelsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// get permission levels 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PermissionLevel&gt;</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< List<PermissionLevel> > GetPermissionLevelsWithHttpInfo ()
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< List<PermissionLevel> >("/settings/office365/permissionlevels", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetPermissionLevels", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get permission levels 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PermissionLevel&gt;</returns>
        public async System.Threading.Tasks.Task<List<PermissionLevel>> GetPermissionLevelsAsync ()
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<List<PermissionLevel>> localVarResponse = await GetPermissionLevelsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// get permission levels 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PermissionLevel&gt;)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<List<PermissionLevel>>> GetPermissionLevelsAsyncWithHttpInfo ()
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<PermissionLevel>>("/settings/office365/permissionlevels", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetPermissionLevels", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get supported language 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ResourceValue&gt;</returns>
        public List<ResourceValue> GetSupportedLanguages ()
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<List<ResourceValue>> localVarResponse = GetSupportedLanguagesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// get supported language 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ResourceValue&gt;</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< List<ResourceValue> > GetSupportedLanguagesWithHttpInfo ()
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< List<ResourceValue> >("/settings/languages", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetSupportedLanguages", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get supported language 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ResourceValue&gt;</returns>
        public async System.Threading.Tasks.Task<List<ResourceValue>> GetSupportedLanguagesAsync ()
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<List<ResourceValue>> localVarResponse = await GetSupportedLanguagesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// get supported language 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ResourceValue&gt;)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<List<ResourceValue>>> GetSupportedLanguagesAsyncWithHttpInfo ()
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<ResourceValue>>("/settings/languages", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetSupportedLanguages", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get timezones 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ResourceValue&gt;</returns>
        public List<ResourceValue> GetTimeZones ()
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<List<ResourceValue>> localVarResponse = GetTimeZonesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// get timezones 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ResourceValue&gt;</returns>
        public Cloud.Governance.NewSdk.Client.ApiResponse< List<ResourceValue> > GetTimeZonesWithHttpInfo ()
        {
            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Cloud.Governance.NewSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = this.Client.Get< List<ResourceValue> >("/settings/timezones", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetTimeZones", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// get timezones 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ResourceValue&gt;</returns>
        public async System.Threading.Tasks.Task<List<ResourceValue>> GetTimeZonesAsync ()
        {
             Cloud.Governance.NewSdk.Client.ApiResponse<List<ResourceValue>> localVarResponse = await GetTimeZonesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// get timezones 
        /// </summary>
        /// <exception cref="Cloud.Governance.NewSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ResourceValue&gt;)</returns>
        public async System.Threading.Tasks.Task<Cloud.Governance.NewSdk.Client.ApiResponse<List<ResourceValue>>> GetTimeZonesAsyncWithHttpInfo ()
        {

            Cloud.Governance.NewSdk.Client.RequestOptions requestOptions = new Cloud.Governance.NewSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                requestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<ResourceValue>>("/settings/timezones", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetTimeZones", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
