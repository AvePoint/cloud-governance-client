/* 
 * Cloud Governance Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Cloud.Governance.Client.Client.OpenAPIDateConverter;

namespace Cloud.Governance.Client.Model
{
    /// <summary>
    /// TextValidationRuleModel
    /// </summary>
    [DataContract]
    public partial class TextValidationRuleModel :  IEquatable<TextValidationRuleModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TextValidationRuleModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TextValidationRuleModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TextValidationRuleModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name (required).</param>
        /// <param name="description">description.</param>
        /// <param name="regularExpression">regularExpression (required).</param>
        /// <param name="errorMessage">errorMessage (required).</param>
        /// <param name="validationTestText">validationTestText.</param>
        public TextValidationRuleModel(Guid id = default(Guid), string name = default(string), string description = default(string), string regularExpression = default(string), string errorMessage = default(string), string validationTestText = default(string))
        {
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for TextValidationRuleModel and cannot be null");;
            // to ensure "regularExpression" is required (not null)
            this.RegularExpression = regularExpression ?? throw new ArgumentNullException("regularExpression is a required property for TextValidationRuleModel and cannot be null");;
            // to ensure "errorMessage" is required (not null)
            this.ErrorMessage = errorMessage ?? throw new ArgumentNullException("errorMessage is a required property for TextValidationRuleModel and cannot be null");;
            this.Id = id;
            this.Description = description;
            this.ValidationTestText = validationTestText;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets RegularExpression
        /// </summary>
        [DataMember(Name="regularExpression", EmitDefaultValue=false)]
        public string RegularExpression { get; set; }

        /// <summary>
        /// Gets or Sets ErrorMessage
        /// </summary>
        [DataMember(Name="errorMessage", EmitDefaultValue=false)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Gets or Sets ValidationTestText
        /// </summary>
        [DataMember(Name="validationTestText", EmitDefaultValue=true)]
        public string ValidationTestText { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TextValidationRuleModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  RegularExpression: ").Append(RegularExpression).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  ValidationTestText: ").Append(ValidationTestText).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TextValidationRuleModel);
        }

        /// <summary>
        /// Returns true if TextValidationRuleModel instances are equal
        /// </summary>
        /// <param name="input">Instance of TextValidationRuleModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TextValidationRuleModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.RegularExpression == input.RegularExpression ||
                    (this.RegularExpression != null &&
                    this.RegularExpression.Equals(input.RegularExpression))
                ) && 
                (
                    this.ErrorMessage == input.ErrorMessage ||
                    (this.ErrorMessage != null &&
                    this.ErrorMessage.Equals(input.ErrorMessage))
                ) && 
                (
                    this.ValidationTestText == input.ValidationTestText ||
                    (this.ValidationTestText != null &&
                    this.ValidationTestText.Equals(input.ValidationTestText))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.RegularExpression != null)
                    hashCode = hashCode * 59 + this.RegularExpression.GetHashCode();
                if (this.ErrorMessage != null)
                    hashCode = hashCode * 59 + this.ErrorMessage.GetHashCode();
                if (this.ValidationTestText != null)
                    hashCode = hashCode * 59 + this.ValidationTestText.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
