/**
 * Cloud Governance Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CloudGovernanceApi);
  }
}(this, function(expect, CloudGovernanceApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CloudGovernanceApi.SiteInfo();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SiteInfo', function() {
    it('should create an instance of SiteInfo', function() {
      // uncomment below and update the code to test SiteInfo
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be.a(CloudGovernanceApi.SiteInfo);
    });

    it('should have the property fullUrl (base name: "fullUrl")', function() {
      // uncomment below and update the code to test the property fullUrl
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property hubSiteId (base name: "hubSiteId")', function() {
      // uncomment below and update the code to test the property hubSiteId
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property isHubSite (base name: "isHubSite")', function() {
      // uncomment below and update the code to test the property isHubSite
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property hubSiteTitle (base name: "hubSiteTitle")', function() {
      // uncomment below and update the code to test the property hubSiteTitle
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property webAppId (base name: "webAppId")', function() {
      // uncomment below and update the code to test the property webAppId
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property isOnlineSite (base name: "isOnlineSite")', function() {
      // uncomment below and update the code to test the property isOnlineSite
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property primarySiteContact (base name: "primarySiteContact")', function() {
      // uncomment below and update the code to test the property primarySiteContact
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property primarySiteContactIdentityName (base name: "primarySiteContactIdentityName")', function() {
      // uncomment below and update the code to test the property primarySiteContactIdentityName
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property primarySiteContactEmail (base name: "primarySiteContactEmail")', function() {
      // uncomment below and update the code to test the property primarySiteContactEmail
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property secondarySiteContact (base name: "secondarySiteContact")', function() {
      // uncomment below and update the code to test the property secondarySiteContact
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property secondarySiteContactIdentityName (base name: "secondarySiteContactIdentityName")', function() {
      // uncomment below and update the code to test the property secondarySiteContactIdentityName
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property secondarySiteContactEmail (base name: "secondarySiteContactEmail")', function() {
      // uncomment below and update the code to test the property secondarySiteContactEmail
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property siteOwner (base name: "siteOwner")', function() {
      // uncomment below and update the code to test the property siteOwner
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property siteOwnerEmail (base name: "siteOwnerEmail")', function() {
      // uncomment below and update the code to test the property siteOwnerEmail
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property createdTime (base name: "createdTime")', function() {
      // uncomment below and update the code to test the property createdTime
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property secondaryAdmin (base name: "secondaryAdmin")', function() {
      // uncomment below and update the code to test the property secondaryAdmin
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property additionalAdmin (base name: "additionalAdmin")', function() {
      // uncomment below and update the code to test the property additionalAdmin
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property additionalAdminEmail (base name: "additionalAdminEmail")', function() {
      // uncomment below and update the code to test the property additionalAdminEmail
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property farmId (base name: "farmId")', function() {
      // uncomment below and update the code to test the property farmId
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property modifiedTime (base name: "modifiedTime")', function() {
      // uncomment below and update the code to test the property modifiedTime
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property hostHeader (base name: "hostHeader")', function() {
      // uncomment below and update the code to test the property hostHeader
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property rootWebId (base name: "rootWebId")', function() {
      // uncomment below and update the code to test the property rootWebId
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property quotaTemplateName (base name: "quotaTemplateName")', function() {
      // uncomment below and update the code to test the property quotaTemplateName
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property size (base name: "size")', function() {
      // uncomment below and update the code to test the property size
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property sizeValue (base name: "sizeValue")', function() {
      // uncomment below and update the code to test the property sizeValue
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property managedPath (base name: "managedPath")', function() {
      // uncomment below and update the code to test the property managedPath
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property isDeleted (base name: "isDeleted")', function() {
      // uncomment below and update the code to test the property isDeleted
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property requestId (base name: "requestId")', function() {
      // uncomment below and update the code to test the property requestId
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property contentDBName (base name: "contentDBName")', function() {
      // uncomment below and update the code to test the property contentDBName
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property policyId (base name: "policyId")', function() {
      // uncomment below and update the code to test the property policyId
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property lifecycleActionLockId (base name: "lifecycleActionLockId")', function() {
      // uncomment below and update the code to test the property lifecycleActionLockId
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property autoLifecycleLockId (base name: "autoLifecycleLockId")', function() {
      // uncomment below and update the code to test the property autoLifecycleLockId
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property siteTemplate (base name: "siteTemplate")', function() {
      // uncomment below and update the code to test the property siteTemplate
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property siteTemplateTitle (base name: "siteTemplateTitle")', function() {
      // uncomment below and update the code to test the property siteTemplateTitle
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property serverRelativeUrl (base name: "serverRelativeUrl")', function() {
      // uncomment below and update the code to test the property serverRelativeUrl
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property timeLastChecked (base name: "timeLastChecked")', function() {
      // uncomment below and update the code to test the property timeLastChecked
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property lastAccessedTime (base name: "lastAccessedTime")', function() {
      // uncomment below and update the code to test the property lastAccessedTime
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property noAccessThreshold (base name: "noAccessThreshold")', function() {
      // uncomment below and update the code to test the property noAccessThreshold
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property expiredThreshold (base name: "expiredThreshold")', function() {
      // uncomment below and update the code to test the property expiredThreshold
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property properties (base name: "properties")', function() {
      // uncomment below and update the code to test the property properties
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property quotaSize (base name: "quotaSize")', function() {
      // uncomment below and update the code to test the property quotaSize
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property recurrenceProperties (base name: "recurrenceProperties")', function() {
      // uncomment below and update the code to test the property recurrenceProperties
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property claimStatus (base name: "claimStatus")', function() {
      // uncomment below and update the code to test the property claimStatus
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property lockProperties (base name: "lockProperties")', function() {
      // uncomment below and update the code to test the property lockProperties
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property enableManualArchive (base name: "enableManualArchive")', function() {
      // uncomment below and update the code to test the property enableManualArchive
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property phase (base name: "phase")', function() {
      // uncomment below and update the code to test the property phase
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property phaseTime (base name: "phaseTime")', function() {
      // uncomment below and update the code to test the property phaseTime
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property autoImportProfileId (base name: "autoImportProfileId")', function() {
      // uncomment below and update the code to test the property autoImportProfileId
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property sharingCapabilities (base name: "sharingCapabilities")', function() {
      // uncomment below and update the code to test the property sharingCapabilities
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property accessThresholdExpirationDate (base name: "accessThresholdExpirationDate")', function() {
      // uncomment below and update the code to test the property accessThresholdExpirationDate
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property leasePeriodExpirationDate (base name: "leasePeriodExpirationDate")', function() {
      // uncomment below and update the code to test the property leasePeriodExpirationDate
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property permissionRecertificationStatus (base name: "permissionRecertificationStatus")', function() {
      // uncomment below and update the code to test the property permissionRecertificationStatus
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property ownershipRecertificationStatus (base name: "ownershipRecertificationStatus")', function() {
      // uncomment below and update the code to test the property ownershipRecertificationStatus
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property metadataRecertificationStatus (base name: "metadataRecertificationStatus")', function() {
      // uncomment below and update the code to test the property metadataRecertificationStatus
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property sharingCapabilitiesDesc (base name: "sharingCapabilitiesDesc")', function() {
      // uncomment below and update the code to test the property sharingCapabilitiesDesc
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property extensionProperties (base name: "extensionProperties")', function() {
      // uncomment below and update the code to test the property extensionProperties
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property phaseTimeDisplay (base name: "phaseTimeDisplay")', function() {
      // uncomment below and update the code to test the property phaseTimeDisplay
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property currentRenewers (base name: "currentRenewers")', function() {
      // uncomment below and update the code to test the property currentRenewers
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property autoImportProfileName (base name: "autoImportProfileName")', function() {
      // uncomment below and update the code to test the property autoImportProfileName
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property phaseDisplay (base name: "phaseDisplay")', function() {
      // uncomment below and update the code to test the property phaseDisplay
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property department (base name: "department")', function() {
      // uncomment below and update the code to test the property department
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property policyName (base name: "policyName")', function() {
      // uncomment below and update the code to test the property policyName
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property maxDepth (base name: "maxDepth")', function() {
      // uncomment below and update the code to test the property maxDepth
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property quotaSizeValue (base name: "quotaSizeValue")', function() {
      // uncomment below and update the code to test the property quotaSizeValue
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property applyPolicyStatus (base name: "applyPolicyStatus")', function() {
      // uncomment below and update the code to test the property applyPolicyStatus
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property appliedDeploymentPlans (base name: "appliedDeploymentPlans")', function() {
      // uncomment below and update the code to test the property appliedDeploymentPlans
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

    it('should have the property location (base name: "location")', function() {
      // uncomment below and update the code to test the property location
      //var instane = new CloudGovernanceApi.SiteInfo();
      //expect(instance).to.be();
    });

  });

}));
