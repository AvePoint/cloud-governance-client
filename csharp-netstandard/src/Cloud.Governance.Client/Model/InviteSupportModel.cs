/* 
 * Cloud Governance Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Cloud.Governance.Client.Client.OpenAPIDateConverter;

namespace Cloud.Governance.Client.Model
{
    /// <summary>
    /// InviteSupportModel
    /// </summary>
    [DataContract]
    public partial class InviteSupportModel :  IEquatable<InviteSupportModel>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets IssueType
        /// </summary>
        [DataMember(Name="issueType", EmitDefaultValue=false)]
        public IssueType? IssueType { get; set; }
        /// <summary>
        /// Gets or Sets Severity
        /// </summary>
        [DataMember(Name="severity", EmitDefaultValue=false)]
        public Severity? Severity { get; set; }
        /// <summary>
        /// Gets or Sets ContactOption
        /// </summary>
        [DataMember(Name="contactOption", EmitDefaultValue=false)]
        public ContactOption? ContactOption { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InviteSupportModel" /> class.
        /// </summary>
        /// <param name="services">services.</param>
        /// <param name="issueType">issueType.</param>
        /// <param name="severity">severity.</param>
        /// <param name="detail">detail.</param>
        /// <param name="relatedServiceName">relatedServiceName.</param>
        /// <param name="fileName">fileName.</param>
        /// <param name="contactName">contactName.</param>
        /// <param name="contactOption">contactOption.</param>
        /// <param name="contactDetail">contactDetail.</param>
        /// <param name="contactCC">contactCC.</param>
        public InviteSupportModel(List<ApiFeedbackServiceType> services = default(List<ApiFeedbackServiceType>), IssueType issueType = default(IssueType), Severity severity = default(Severity), string detail = default(string), string relatedServiceName = default(string), string fileName = default(string), string contactName = default(string), ContactOption contactOption = default(ContactOption), string contactDetail = default(string), string contactCC = default(string))
        {
            this.Services = services;
            this.IssueType = issueType;
            this.Severity = severity;
            this.Detail = detail;
            this.RelatedServiceName = relatedServiceName;
            this.FileName = fileName;
            this.ContactName = contactName;
            this.ContactOption = contactOption;
            this.ContactDetail = contactDetail;
            this.ContactCC = contactCC;
        }
        
        /// <summary>
        /// Gets or Sets Services
        /// </summary>
        [DataMember(Name="services", EmitDefaultValue=true)]
        public List<ApiFeedbackServiceType> Services { get; set; }

        /// <summary>
        /// Gets or Sets Detail
        /// </summary>
        [DataMember(Name="detail", EmitDefaultValue=true)]
        public string Detail { get; set; }

        /// <summary>
        /// Gets or Sets RelatedServiceName
        /// </summary>
        [DataMember(Name="relatedServiceName", EmitDefaultValue=true)]
        public string RelatedServiceName { get; set; }

        /// <summary>
        /// Gets or Sets FileName
        /// </summary>
        [DataMember(Name="fileName", EmitDefaultValue=true)]
        public string FileName { get; set; }

        /// <summary>
        /// Gets or Sets ContactName
        /// </summary>
        [DataMember(Name="contactName", EmitDefaultValue=true)]
        public string ContactName { get; set; }

        /// <summary>
        /// Gets or Sets ContactDetail
        /// </summary>
        [DataMember(Name="contactDetail", EmitDefaultValue=true)]
        public string ContactDetail { get; set; }

        /// <summary>
        /// Gets or Sets ContactCC
        /// </summary>
        [DataMember(Name="contactCC", EmitDefaultValue=true)]
        public string ContactCC { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InviteSupportModel {\n");
            sb.Append("  Services: ").Append(Services).Append("\n");
            sb.Append("  IssueType: ").Append(IssueType).Append("\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("  Detail: ").Append(Detail).Append("\n");
            sb.Append("  RelatedServiceName: ").Append(RelatedServiceName).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  ContactName: ").Append(ContactName).Append("\n");
            sb.Append("  ContactOption: ").Append(ContactOption).Append("\n");
            sb.Append("  ContactDetail: ").Append(ContactDetail).Append("\n");
            sb.Append("  ContactCC: ").Append(ContactCC).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InviteSupportModel);
        }

        /// <summary>
        /// Returns true if InviteSupportModel instances are equal
        /// </summary>
        /// <param name="input">Instance of InviteSupportModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InviteSupportModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Services == input.Services ||
                    this.Services != null &&
                    input.Services != null &&
                    this.Services.SequenceEqual(input.Services)
                ) && 
                (
                    this.IssueType == input.IssueType ||
                    this.IssueType.Equals(input.IssueType)
                ) && 
                (
                    this.Severity == input.Severity ||
                    this.Severity.Equals(input.Severity)
                ) && 
                (
                    this.Detail == input.Detail ||
                    (this.Detail != null &&
                    this.Detail.Equals(input.Detail))
                ) && 
                (
                    this.RelatedServiceName == input.RelatedServiceName ||
                    (this.RelatedServiceName != null &&
                    this.RelatedServiceName.Equals(input.RelatedServiceName))
                ) && 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.ContactName == input.ContactName ||
                    (this.ContactName != null &&
                    this.ContactName.Equals(input.ContactName))
                ) && 
                (
                    this.ContactOption == input.ContactOption ||
                    this.ContactOption.Equals(input.ContactOption)
                ) && 
                (
                    this.ContactDetail == input.ContactDetail ||
                    (this.ContactDetail != null &&
                    this.ContactDetail.Equals(input.ContactDetail))
                ) && 
                (
                    this.ContactCC == input.ContactCC ||
                    (this.ContactCC != null &&
                    this.ContactCC.Equals(input.ContactCC))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Services != null)
                    hashCode = hashCode * 59 + this.Services.GetHashCode();
                hashCode = hashCode * 59 + this.IssueType.GetHashCode();
                hashCode = hashCode * 59 + this.Severity.GetHashCode();
                if (this.Detail != null)
                    hashCode = hashCode * 59 + this.Detail.GetHashCode();
                if (this.RelatedServiceName != null)
                    hashCode = hashCode * 59 + this.RelatedServiceName.GetHashCode();
                if (this.FileName != null)
                    hashCode = hashCode * 59 + this.FileName.GetHashCode();
                if (this.ContactName != null)
                    hashCode = hashCode * 59 + this.ContactName.GetHashCode();
                hashCode = hashCode * 59 + this.ContactOption.GetHashCode();
                if (this.ContactDetail != null)
                    hashCode = hashCode * 59 + this.ContactDetail.GetHashCode();
                if (this.ContactCC != null)
                    hashCode = hashCode * 59 + this.ContactCC.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
