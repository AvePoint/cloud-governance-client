/* 
 * Cloud Governance Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Cloud.Governance.Client.Client.OpenAPIDateConverter;

namespace Cloud.Governance.Client.Model
{
    /// <summary>
    /// ExecutionScheduleModel
    /// </summary>
    [DataContract]
    public partial class ExecutionScheduleModel :  IEquatable<ExecutionScheduleModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExecutionScheduleModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ExecutionScheduleModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExecutionScheduleModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name (required).</param>
        /// <param name="description">description.</param>
        /// <param name="schedules">schedules (required).</param>
        /// <param name="timeZone">timeZone.</param>
        /// <param name="isAdjustDaylight">isAdjustDaylight.</param>
        public ExecutionScheduleModel(Guid id = default(Guid), string name = default(string), string description = default(string), List<ScheduleItemModel> schedules = default(List<ScheduleItemModel>), double timeZone = default(double), bool isAdjustDaylight = default(bool))
        {
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for ExecutionScheduleModel and cannot be null");;
            // to ensure "schedules" is required (not null)
            this.Schedules = schedules ?? throw new ArgumentNullException("schedules is a required property for ExecutionScheduleModel and cannot be null");;
            this.Id = id;
            this.Description = description;
            this.TimeZone = timeZone;
            this.IsAdjustDaylight = isAdjustDaylight;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Schedules
        /// </summary>
        [DataMember(Name="schedules", EmitDefaultValue=false)]
        public List<ScheduleItemModel> Schedules { get; set; }

        /// <summary>
        /// Gets or Sets TimeZone
        /// </summary>
        [DataMember(Name="timeZone", EmitDefaultValue=false)]
        public double TimeZone { get; set; }

        /// <summary>
        /// Gets or Sets IsAdjustDaylight
        /// </summary>
        [DataMember(Name="isAdjustDaylight", EmitDefaultValue=false)]
        public bool IsAdjustDaylight { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExecutionScheduleModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Schedules: ").Append(Schedules).Append("\n");
            sb.Append("  TimeZone: ").Append(TimeZone).Append("\n");
            sb.Append("  IsAdjustDaylight: ").Append(IsAdjustDaylight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExecutionScheduleModel);
        }

        /// <summary>
        /// Returns true if ExecutionScheduleModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ExecutionScheduleModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExecutionScheduleModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Schedules == input.Schedules ||
                    this.Schedules != null &&
                    input.Schedules != null &&
                    this.Schedules.SequenceEqual(input.Schedules)
                ) && 
                (
                    this.TimeZone == input.TimeZone ||
                    this.TimeZone.Equals(input.TimeZone)
                ) && 
                (
                    this.IsAdjustDaylight == input.IsAdjustDaylight ||
                    this.IsAdjustDaylight.Equals(input.IsAdjustDaylight)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Schedules != null)
                    hashCode = hashCode * 59 + this.Schedules.GetHashCode();
                hashCode = hashCode * 59 + this.TimeZone.GetHashCode();
                hashCode = hashCode * 59 + this.IsAdjustDaylight.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // TimeZone (double) maximum
            if(this.TimeZone > (double)95)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TimeZone, must be a value less than or equal to 95.", new [] { "TimeZone" });
            }

            // TimeZone (double) minimum
            if(this.TimeZone < (double)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TimeZone, must be a value greater than or equal to 0.", new [] { "TimeZone" });
            }

            yield break;
        }
    }

}
