/* 
 * Cloud Governance Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Cloud.Governance.Client.Client.OpenAPIDateConverter;

namespace Cloud.Governance.Client.Model
{
    /// <summary>
    /// LockSiteInfo
    /// </summary>
    [DataContract]
    public partial class LockSiteInfo :  IEquatable<LockSiteInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LockSiteInfo" /> class.
        /// </summary>
        /// <param name="lockPermissionAction">lockPermissionAction.</param>
        /// <param name="lockContactAction">lockContactAction.</param>
        /// <param name="lockMetadataAction">lockMetadataAction.</param>
        public LockSiteInfo(PermissionActionLockItem lockPermissionAction = default(PermissionActionLockItem), ContactActionLockItem lockContactAction = default(ContactActionLockItem), MetadataActionLockItem lockMetadataAction = default(MetadataActionLockItem))
        {
            this.LockPermissionAction = lockPermissionAction;
            this.LockContactAction = lockContactAction;
            this.LockMetadataAction = lockMetadataAction;
            this.LockPermissionAction = lockPermissionAction;
            this.LockContactAction = lockContactAction;
            this.LockMetadataAction = lockMetadataAction;
        }
        
        /// <summary>
        /// Gets or Sets LockPermissionAction
        /// </summary>
        [DataMember(Name="lockPermissionAction", EmitDefaultValue=true)]
        public PermissionActionLockItem LockPermissionAction { get; set; }

        /// <summary>
        /// Gets or Sets LockContactAction
        /// </summary>
        [DataMember(Name="lockContactAction", EmitDefaultValue=true)]
        public ContactActionLockItem LockContactAction { get; set; }

        /// <summary>
        /// Gets or Sets LockMetadataAction
        /// </summary>
        [DataMember(Name="lockMetadataAction", EmitDefaultValue=true)]
        public MetadataActionLockItem LockMetadataAction { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LockSiteInfo {\n");
            sb.Append("  LockPermissionAction: ").Append(LockPermissionAction).Append("\n");
            sb.Append("  LockContactAction: ").Append(LockContactAction).Append("\n");
            sb.Append("  LockMetadataAction: ").Append(LockMetadataAction).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LockSiteInfo);
        }

        /// <summary>
        /// Returns true if LockSiteInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of LockSiteInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LockSiteInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LockPermissionAction == input.LockPermissionAction ||
                    (this.LockPermissionAction != null &&
                    this.LockPermissionAction.Equals(input.LockPermissionAction))
                ) && 
                (
                    this.LockContactAction == input.LockContactAction ||
                    (this.LockContactAction != null &&
                    this.LockContactAction.Equals(input.LockContactAction))
                ) && 
                (
                    this.LockMetadataAction == input.LockMetadataAction ||
                    (this.LockMetadataAction != null &&
                    this.LockMetadataAction.Equals(input.LockMetadataAction))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LockPermissionAction != null)
                    hashCode = hashCode * 59 + this.LockPermissionAction.GetHashCode();
                if (this.LockContactAction != null)
                    hashCode = hashCode * 59 + this.LockContactAction.GetHashCode();
                if (this.LockMetadataAction != null)
                    hashCode = hashCode * 59 + this.LockMetadataAction.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
