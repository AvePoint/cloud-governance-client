/* 
 * Cloud Governance Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Cloud.Governance.Client.Client.OpenAPIDateConverter;

namespace Cloud.Governance.Client.Model
{
    /// <summary>
    /// ApprovalProcessStageInfo
    /// </summary>
    [DataContract]
    public partial class ApprovalProcessStageInfo :  IEquatable<ApprovalProcessStageInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApprovalProcessStageInfo" /> class.
        /// </summary>
        /// <param name="approveUser">approveUser.</param>
        /// <param name="escalationUser">escalationUser.</param>
        /// <param name="editPermissionReport">editPermissionReport.</param>
        /// <param name="notifyApproverWhenExpired">notifyApproverWhenExpired.</param>
        /// <param name="notifyApproverWhenExpiredEmailTemplateID">notifyApproverWhenExpiredEmailTemplateID.</param>
        /// <param name="warnApproverbeforeExpired">warnApproverbeforeExpired.</param>
        /// <param name="warnApproverbeforeExpiredEmailTemplateID">warnApproverbeforeExpiredEmailTemplateID.</param>
        /// <param name="isDurationEnabled">isDurationEnabled.</param>
        public ApprovalProcessStageInfo(UserInfo approveUser = default(UserInfo), UserInfo escalationUser = default(UserInfo), bool editPermissionReport = default(bool), bool notifyApproverWhenExpired = default(bool), Guid notifyApproverWhenExpiredEmailTemplateID = default(Guid), bool warnApproverbeforeExpired = default(bool), Guid warnApproverbeforeExpiredEmailTemplateID = default(Guid), bool isDurationEnabled = default(bool))
        {
            this.ApproveUser = approveUser;
            this.EscalationUser = escalationUser;
            this.ApproveUser = approveUser;
            this.EscalationUser = escalationUser;
            this.EditPermissionReport = editPermissionReport;
            this.NotifyApproverWhenExpired = notifyApproverWhenExpired;
            this.NotifyApproverWhenExpiredEmailTemplateID = notifyApproverWhenExpiredEmailTemplateID;
            this.WarnApproverbeforeExpired = warnApproverbeforeExpired;
            this.WarnApproverbeforeExpiredEmailTemplateID = warnApproverbeforeExpiredEmailTemplateID;
            this.IsDurationEnabled = isDurationEnabled;
        }
        
        /// <summary>
        /// Gets or Sets ApproveUser
        /// </summary>
        [DataMember(Name="approveUser", EmitDefaultValue=true)]
        public UserInfo ApproveUser { get; set; }

        /// <summary>
        /// Gets or Sets EscalationUser
        /// </summary>
        [DataMember(Name="escalationUser", EmitDefaultValue=true)]
        public UserInfo EscalationUser { get; set; }

        /// <summary>
        /// Gets or Sets EditPermissionReport
        /// </summary>
        [DataMember(Name="editPermissionReport", EmitDefaultValue=false)]
        public bool EditPermissionReport { get; set; }

        /// <summary>
        /// Gets or Sets NotifyApproverWhenExpired
        /// </summary>
        [DataMember(Name="notifyApproverWhenExpired", EmitDefaultValue=false)]
        public bool NotifyApproverWhenExpired { get; set; }

        /// <summary>
        /// Gets or Sets NotifyApproverWhenExpiredEmailTemplateID
        /// </summary>
        [DataMember(Name="notifyApproverWhenExpiredEmailTemplateID", EmitDefaultValue=false)]
        public Guid NotifyApproverWhenExpiredEmailTemplateID { get; set; }

        /// <summary>
        /// Gets or Sets WarnApproverbeforeExpired
        /// </summary>
        [DataMember(Name="warnApproverbeforeExpired", EmitDefaultValue=false)]
        public bool WarnApproverbeforeExpired { get; set; }

        /// <summary>
        /// Gets or Sets WarnApproverbeforeExpiredEmailTemplateID
        /// </summary>
        [DataMember(Name="warnApproverbeforeExpiredEmailTemplateID", EmitDefaultValue=false)]
        public Guid WarnApproverbeforeExpiredEmailTemplateID { get; set; }

        /// <summary>
        /// Gets or Sets IsDurationEnabled
        /// </summary>
        [DataMember(Name="isDurationEnabled", EmitDefaultValue=false)]
        public bool IsDurationEnabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApprovalProcessStageInfo {\n");
            sb.Append("  ApproveUser: ").Append(ApproveUser).Append("\n");
            sb.Append("  EscalationUser: ").Append(EscalationUser).Append("\n");
            sb.Append("  EditPermissionReport: ").Append(EditPermissionReport).Append("\n");
            sb.Append("  NotifyApproverWhenExpired: ").Append(NotifyApproverWhenExpired).Append("\n");
            sb.Append("  NotifyApproverWhenExpiredEmailTemplateID: ").Append(NotifyApproverWhenExpiredEmailTemplateID).Append("\n");
            sb.Append("  WarnApproverbeforeExpired: ").Append(WarnApproverbeforeExpired).Append("\n");
            sb.Append("  WarnApproverbeforeExpiredEmailTemplateID: ").Append(WarnApproverbeforeExpiredEmailTemplateID).Append("\n");
            sb.Append("  IsDurationEnabled: ").Append(IsDurationEnabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApprovalProcessStageInfo);
        }

        /// <summary>
        /// Returns true if ApprovalProcessStageInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ApprovalProcessStageInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApprovalProcessStageInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApproveUser == input.ApproveUser ||
                    (this.ApproveUser != null &&
                    this.ApproveUser.Equals(input.ApproveUser))
                ) && 
                (
                    this.EscalationUser == input.EscalationUser ||
                    (this.EscalationUser != null &&
                    this.EscalationUser.Equals(input.EscalationUser))
                ) && 
                (
                    this.EditPermissionReport == input.EditPermissionReport ||
                    this.EditPermissionReport.Equals(input.EditPermissionReport)
                ) && 
                (
                    this.NotifyApproverWhenExpired == input.NotifyApproverWhenExpired ||
                    this.NotifyApproverWhenExpired.Equals(input.NotifyApproverWhenExpired)
                ) && 
                (
                    this.NotifyApproverWhenExpiredEmailTemplateID == input.NotifyApproverWhenExpiredEmailTemplateID ||
                    (this.NotifyApproverWhenExpiredEmailTemplateID != null &&
                    this.NotifyApproverWhenExpiredEmailTemplateID.Equals(input.NotifyApproverWhenExpiredEmailTemplateID))
                ) && 
                (
                    this.WarnApproverbeforeExpired == input.WarnApproverbeforeExpired ||
                    this.WarnApproverbeforeExpired.Equals(input.WarnApproverbeforeExpired)
                ) && 
                (
                    this.WarnApproverbeforeExpiredEmailTemplateID == input.WarnApproverbeforeExpiredEmailTemplateID ||
                    (this.WarnApproverbeforeExpiredEmailTemplateID != null &&
                    this.WarnApproverbeforeExpiredEmailTemplateID.Equals(input.WarnApproverbeforeExpiredEmailTemplateID))
                ) && 
                (
                    this.IsDurationEnabled == input.IsDurationEnabled ||
                    this.IsDurationEnabled.Equals(input.IsDurationEnabled)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApproveUser != null)
                    hashCode = hashCode * 59 + this.ApproveUser.GetHashCode();
                if (this.EscalationUser != null)
                    hashCode = hashCode * 59 + this.EscalationUser.GetHashCode();
                hashCode = hashCode * 59 + this.EditPermissionReport.GetHashCode();
                hashCode = hashCode * 59 + this.NotifyApproverWhenExpired.GetHashCode();
                if (this.NotifyApproverWhenExpiredEmailTemplateID != null)
                    hashCode = hashCode * 59 + this.NotifyApproverWhenExpiredEmailTemplateID.GetHashCode();
                hashCode = hashCode * 59 + this.WarnApproverbeforeExpired.GetHashCode();
                if (this.WarnApproverbeforeExpiredEmailTemplateID != null)
                    hashCode = hashCode * 59 + this.WarnApproverbeforeExpiredEmailTemplateID.GetHashCode();
                hashCode = hashCode * 59 + this.IsDurationEnabled.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
