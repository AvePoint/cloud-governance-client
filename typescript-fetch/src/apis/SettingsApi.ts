// tslint:disable
/**
 * Cloud Governance Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ApplicationSettings,
    ApplicationSettingsFromJSON,
    ApplicationSettingsToJSON,
    CustomHelpLinkModel,
    CustomHelpLinkModelFromJSON,
    CustomHelpLinkModelToJSON,
    InlineResponse200,
    InlineResponse200FromJSON,
    InlineResponse200ToJSON,
    NewsAndUpdatesInfo,
    NewsAndUpdatesInfoFromJSON,
    NewsAndUpdatesInfoToJSON,
    PermissionLevel,
    PermissionLevelFromJSON,
    PermissionLevelToJSON,
    PersonalSettings,
    PersonalSettingsFromJSON,
    PersonalSettingsToJSON,
    ResourceValue,
    ResourceValueFromJSON,
    ResourceValueToJSON,
} from '../models';

export interface EditMyPersonalSettingsRequest {
    personalSettings?: PersonalSettings;
}

export interface GetApplicationSettingsRequest {
    localeId?: number;
}

export interface GetDynamicMembershipRuleItemsRequest {
    tenantid: string;
}

/**
 * no description
 */
export class SettingsApi extends runtime.BaseAPI {

    /**
     * edit my personal settings
     */
    async editMyPersonalSettingsRaw(requestParameters: EditMyPersonalSettingsRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/settings/my`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PersonalSettingsToJSON(requestParameters.personalSettings),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * edit my personal settings
     */
    async editMyPersonalSettings(requestParameters: EditMyPersonalSettingsRequest): Promise<void> {
        await this.editMyPersonalSettingsRaw(requestParameters);
    }

    /**
     * get application settings
     */
    async getApplicationSettingsRaw(requestParameters: GetApplicationSettingsRequest): Promise<runtime.ApiResponse<ApplicationSettings>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.localeId !== undefined) {
            queryParameters['localeId'] = requestParameters.localeId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/settings/app`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationSettingsFromJSON(jsonValue));
    }

    /**
     * get application settings
     */
    async getApplicationSettings(requestParameters: GetApplicationSettingsRequest): Promise<ApplicationSettings> {
        const response = await this.getApplicationSettingsRaw(requestParameters);
        return await response.value();
    }

    /**
     * get group/teams dynamic membership rules
     */
    async getDynamicMembershipRuleItemsRaw(requestParameters: GetDynamicMembershipRuleItemsRequest): Promise<runtime.ApiResponse<InlineResponse200>> {
        if (requestParameters.tenantid === null || requestParameters.tenantid === undefined) {
            throw new runtime.RequiredError('tenantid','Required parameter requestParameters.tenantid was null or undefined when calling getDynamicMembershipRuleItems.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/settings/office365/groups/dynamicmembershiprule/{tenantid}`.replace(`{${"tenantid"}}`, encodeURIComponent(String(requestParameters.tenantid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * get group/teams dynamic membership rules
     */
    async getDynamicMembershipRuleItems(requestParameters: GetDynamicMembershipRuleItemsRequest): Promise<InlineResponse200> {
        const response = await this.getDynamicMembershipRuleItemsRaw(requestParameters);
        return await response.value();
    }

    /**
     * get help link
     */
    async getHelpLinkRaw(): Promise<runtime.ApiResponse<CustomHelpLinkModel>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/settings/helplink`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomHelpLinkModelFromJSON(jsonValue));
    }

    /**
     * get help link
     */
    async getHelpLink(): Promise<CustomHelpLinkModel> {
        const response = await this.getHelpLinkRaw();
        return await response.value();
    }

    /**
     * get my personal settings
     */
    async getMyPersonalSettingsRaw(): Promise<runtime.ApiResponse<PersonalSettings>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/settings/my`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PersonalSettingsFromJSON(jsonValue));
    }

    /**
     * get my personal settings
     */
    async getMyPersonalSettings(): Promise<PersonalSettings> {
        const response = await this.getMyPersonalSettingsRaw();
        return await response.value();
    }

    /**
     * get news
     */
    async getNewsRaw(): Promise<runtime.ApiResponse<NewsAndUpdatesInfo>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/settings/news`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => NewsAndUpdatesInfoFromJSON(jsonValue));
    }

    /**
     * get news
     */
    async getNews(): Promise<NewsAndUpdatesInfo> {
        const response = await this.getNewsRaw();
        return await response.value();
    }

    /**
     * get permission levels
     */
    async getPermissionLevelsRaw(): Promise<runtime.ApiResponse<Array<PermissionLevel>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/settings/office365/permissionlevels`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PermissionLevelFromJSON));
    }

    /**
     * get permission levels
     */
    async getPermissionLevels(): Promise<Array<PermissionLevel>> {
        const response = await this.getPermissionLevelsRaw();
        return await response.value();
    }

    /**
     * get supported language
     */
    async getSupportedLanguagesRaw(): Promise<runtime.ApiResponse<Array<ResourceValue>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/settings/languages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ResourceValueFromJSON));
    }

    /**
     * get supported language
     */
    async getSupportedLanguages(): Promise<Array<ResourceValue>> {
        const response = await this.getSupportedLanguagesRaw();
        return await response.value();
    }

    /**
     * get timezones
     */
    async getTimeZonesRaw(): Promise<runtime.ApiResponse<Array<ResourceValue>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/settings/timezones`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ResourceValueFromJSON));
    }

    /**
     * get timezones
     */
    async getTimeZones(): Promise<Array<ResourceValue>> {
        const response = await this.getTimeZonesRaw();
        return await response.value();
    }

}
