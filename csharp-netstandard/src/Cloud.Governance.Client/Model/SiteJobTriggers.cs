/* 
 * Cloud Governance Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Cloud.Governance.Client.Client.OpenAPIDateConverter;

namespace Cloud.Governance.Client.Model
{
    /// <summary>
    /// SiteJobTriggers
    /// </summary>
    [DataContract]
    public partial class SiteJobTriggers :  IEquatable<SiteJobTriggers>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SiteJobTriggers" /> class.
        /// </summary>
        /// <param name="renewalJob">renewalJob.</param>
        /// <param name="contactElectionJob">contactElectionJob.</param>
        /// <param name="storageThresholdJob">storageThresholdJob.</param>
        /// <param name="statusScanJob">statusScanJob.</param>
        /// <param name="autoLockJob">autoLockJob.</param>
        /// <param name="recertificationJob">recertificationJob.</param>
        /// <param name="automaticImportJob">automaticImportJob.</param>
        public SiteJobTriggers(SiteJobTrigger renewalJob = default(SiteJobTrigger), SiteJobTrigger contactElectionJob = default(SiteJobTrigger), SiteJobTrigger storageThresholdJob = default(SiteJobTrigger), SiteStatusScanJobTrigger statusScanJob = default(SiteStatusScanJobTrigger), SiteAutoLockJobTrigger autoLockJob = default(SiteAutoLockJobTrigger), SiteRecertificationJobTrigger recertificationJob = default(SiteRecertificationJobTrigger), AutoImportObjectDemoJob automaticImportJob = default(AutoImportObjectDemoJob))
        {
            this.RenewalJob = renewalJob;
            this.ContactElectionJob = contactElectionJob;
            this.StorageThresholdJob = storageThresholdJob;
            this.StatusScanJob = statusScanJob;
            this.AutoLockJob = autoLockJob;
            this.RecertificationJob = recertificationJob;
            this.AutomaticImportJob = automaticImportJob;
        }
        
        /// <summary>
        /// Gets or Sets RenewalJob
        /// </summary>
        [DataMember(Name="renewalJob", EmitDefaultValue=true)]
        public SiteJobTrigger RenewalJob { get; set; }

        /// <summary>
        /// Gets or Sets ContactElectionJob
        /// </summary>
        [DataMember(Name="contactElectionJob", EmitDefaultValue=true)]
        public SiteJobTrigger ContactElectionJob { get; set; }

        /// <summary>
        /// Gets or Sets StorageThresholdJob
        /// </summary>
        [DataMember(Name="storageThresholdJob", EmitDefaultValue=true)]
        public SiteJobTrigger StorageThresholdJob { get; set; }

        /// <summary>
        /// Gets or Sets StatusScanJob
        /// </summary>
        [DataMember(Name="statusScanJob", EmitDefaultValue=true)]
        public SiteStatusScanJobTrigger StatusScanJob { get; set; }

        /// <summary>
        /// Gets or Sets AutoLockJob
        /// </summary>
        [DataMember(Name="autoLockJob", EmitDefaultValue=true)]
        public SiteAutoLockJobTrigger AutoLockJob { get; set; }

        /// <summary>
        /// Gets or Sets RecertificationJob
        /// </summary>
        [DataMember(Name="recertificationJob", EmitDefaultValue=true)]
        public SiteRecertificationJobTrigger RecertificationJob { get; set; }

        /// <summary>
        /// Gets or Sets AutomaticImportJob
        /// </summary>
        [DataMember(Name="automaticImportJob", EmitDefaultValue=true)]
        public AutoImportObjectDemoJob AutomaticImportJob { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SiteJobTriggers {\n");
            sb.Append("  RenewalJob: ").Append(RenewalJob).Append("\n");
            sb.Append("  ContactElectionJob: ").Append(ContactElectionJob).Append("\n");
            sb.Append("  StorageThresholdJob: ").Append(StorageThresholdJob).Append("\n");
            sb.Append("  StatusScanJob: ").Append(StatusScanJob).Append("\n");
            sb.Append("  AutoLockJob: ").Append(AutoLockJob).Append("\n");
            sb.Append("  RecertificationJob: ").Append(RecertificationJob).Append("\n");
            sb.Append("  AutomaticImportJob: ").Append(AutomaticImportJob).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SiteJobTriggers);
        }

        /// <summary>
        /// Returns true if SiteJobTriggers instances are equal
        /// </summary>
        /// <param name="input">Instance of SiteJobTriggers to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SiteJobTriggers input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RenewalJob == input.RenewalJob ||
                    (this.RenewalJob != null &&
                    this.RenewalJob.Equals(input.RenewalJob))
                ) && 
                (
                    this.ContactElectionJob == input.ContactElectionJob ||
                    (this.ContactElectionJob != null &&
                    this.ContactElectionJob.Equals(input.ContactElectionJob))
                ) && 
                (
                    this.StorageThresholdJob == input.StorageThresholdJob ||
                    (this.StorageThresholdJob != null &&
                    this.StorageThresholdJob.Equals(input.StorageThresholdJob))
                ) && 
                (
                    this.StatusScanJob == input.StatusScanJob ||
                    (this.StatusScanJob != null &&
                    this.StatusScanJob.Equals(input.StatusScanJob))
                ) && 
                (
                    this.AutoLockJob == input.AutoLockJob ||
                    (this.AutoLockJob != null &&
                    this.AutoLockJob.Equals(input.AutoLockJob))
                ) && 
                (
                    this.RecertificationJob == input.RecertificationJob ||
                    (this.RecertificationJob != null &&
                    this.RecertificationJob.Equals(input.RecertificationJob))
                ) && 
                (
                    this.AutomaticImportJob == input.AutomaticImportJob ||
                    (this.AutomaticImportJob != null &&
                    this.AutomaticImportJob.Equals(input.AutomaticImportJob))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RenewalJob != null)
                    hashCode = hashCode * 59 + this.RenewalJob.GetHashCode();
                if (this.ContactElectionJob != null)
                    hashCode = hashCode * 59 + this.ContactElectionJob.GetHashCode();
                if (this.StorageThresholdJob != null)
                    hashCode = hashCode * 59 + this.StorageThresholdJob.GetHashCode();
                if (this.StatusScanJob != null)
                    hashCode = hashCode * 59 + this.StatusScanJob.GetHashCode();
                if (this.AutoLockJob != null)
                    hashCode = hashCode * 59 + this.AutoLockJob.GetHashCode();
                if (this.RecertificationJob != null)
                    hashCode = hashCode * 59 + this.RecertificationJob.GetHashCode();
                if (this.AutomaticImportJob != null)
                    hashCode = hashCode * 59 + this.AutomaticImportJob.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
