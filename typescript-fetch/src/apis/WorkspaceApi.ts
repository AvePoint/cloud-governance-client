// tslint:disable
/**
 * Cloud Governance Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ApiMyGroup,
    ApiMyGroupFromJSON,
    ApiMyGroupToJSON,
    AutoImportProfileRef,
    AutoImportProfileRefFromJSON,
    AutoImportProfileRefToJSON,
    ConfirmInformation,
    ConfirmInformationFromJSON,
    ConfirmInformationToJSON,
    CustomMetadata,
    CustomMetadataFromJSON,
    CustomMetadataToJSON,
    DistinctPageResult,
    DistinctPageResultFromJSON,
    DistinctPageResultToJSON,
    ExternalSharingOptions,
    ExternalSharingOptionsFromJSON,
    ExternalSharingOptionsToJSON,
    GroupRenewProfileRef,
    GroupRenewProfileRefFromJSON,
    GroupRenewProfileRefToJSON,
    MembershipRenewalItemModel,
    MembershipRenewalItemModelFromJSON,
    MembershipRenewalItemModelToJSON,
    MySite,
    MySiteFromJSON,
    MySiteToJSON,
    ObjectContactModel,
    ObjectContactModelFromJSON,
    ObjectContactModelToJSON,
    PermissionActionItem,
    PermissionActionItemFromJSON,
    PermissionActionItemToJSON,
    PermissionActionItemPageResult,
    PermissionActionItemPageResultFromJSON,
    PermissionActionItemPageResultToJSON,
    PermissionLevel,
    PermissionLevelFromJSON,
    PermissionLevelToJSON,
    RenewModel,
    RenewModelFromJSON,
    RenewModelToJSON,
    RenewProfileRef,
    RenewProfileRefFromJSON,
    RenewProfileRefToJSON,
    UserParam,
    UserParamFromJSON,
    UserParamToJSON,
    WorkspaceList,
    WorkspaceListFromJSON,
    WorkspaceListToJSON,
} from '../models';

export interface ConfirmGorupRequest {
    id: string;
    confirmInformation?: ConfirmInformation;
}

export interface ConfirmGorupWithUnknowPrimaryContactRequest {
    id: string;
}

export interface ConfirmGroupWithKnowningPrimaryContactRequest {
    id: string;
    userParam?: UserParam;
}

export interface ConfirmSiteRequest {
    id: string;
    confirmInformation?: ConfirmInformation;
}

export interface ConfirmSiteWitKnowingPrimaryContactRequest {
    id: string;
    userParam?: UserParam;
}

export interface ConfirmSiteWithUnknowPrimaryContactRequest {
    id: string;
}

export interface GetGroupAutoImportProfileRequest {
    id: string;
}

export interface GetGroupContactsRequest {
    id: string;
}

export interface GetGroupMembershipRenewalItemsRequest {
    id: string;
}

export interface GetGroupMetadataRenewalItemsRequest {
    id: string;
}

export interface GetGroupPermissionRenewalFiltersRequest {
    id: string;
    filter?: string;
    distinct?: string;
    top?: number;
    skip?: number;
}

export interface GetGroupPermissionRenewalFiltersForSPGroupRequest {
    id: string;
    groupid: string;
    filter?: string;
    distinct?: string;
    top?: number;
    skip?: number;
}

export interface GetGroupPermissionRenewalItemsRequest {
    id: string;
    filter?: string;
    orderby?: string;
    body?: object;
}

export interface GetGroupPermissionRenewalItemsForSPGroupRequest {
    id: string;
    groupid: string;
    filter?: string;
    orderby?: string;
    body?: object;
}

export interface GetGroupPermissionRenewalPermissionLevelsRequest {
    id: string;
}

export interface GetGroupRenewalProfileSettingsRequest {
    id: string;
}

export interface GetGroupSharingOptionsRequest {
    emailOrId?: string;
}

export interface GetMyGroupInformationRequest {
    id: string;
}

export interface GetMySiteInformationRequest {
    id: string;
}

export interface GetSiteAutoImportProfileRequest {
    id: string;
}

export interface GetSiteContactsRequest {
    id: string;
}

export interface GetSiteMetadataRequest {
    url: string;
}

export interface GetSiteMetadataRenewalItemsRequest {
    id: string;
}

export interface GetSitePermissionRenewalFiltersRequest {
    id: string;
    filter?: string;
    distinct?: string;
    top?: number;
    skip?: number;
}

export interface GetSitePermissionRenewalFiltersForSPGroupRequest {
    id: string;
    groupid: string;
    filter?: string;
    distinct?: string;
    top?: number;
    skip?: number;
}

export interface GetSitePermissionRenewalItemsRequest {
    id: string;
    filter?: string;
    orderby?: string;
    body?: object;
}

export interface GetSitePermissionRenewalItemsForSPGroupRequest {
    id: string;
    groupid: string;
    filter?: string;
    orderby?: string;
    body?: object;
}

export interface GetSitePermissionRenewalPermissionLevelsRequest {
    id: string;
}

export interface GetSiteRenewalProfileSettingsRequest {
    id: string;
}

export interface GetSiteSharingOptionsRequest {
    siteUrlOrId?: string;
}

export interface GetWorkspaceFiltersRequest {
    filter?: string;
    distinct?: string;
    top?: number;
    skip?: number;
}

export interface GetWorkspaceItemsRequest {
    filter?: string;
    orderby?: string;
    search?: string;
    top?: number;
    skip?: number;
}

export interface ReassignGroupRenewalTaskRequest {
    id: string;
    userid?: string;
}

export interface ReassignSiteRenewalTaskRequest {
    id: string;
    userid?: string;
}

export interface RejectGroupRenewalTaskRequest {
    id: string;
}

export interface RejectSiteRenewalTaskRequest {
    id: string;
}

export interface ResetChangeForSiteRenewalRequest {
    id: string;
}

export interface ResetChangesForGroupRenewalRequest {
    id: string;
}

export interface SaveGroupPermissionRenewalItemsRequest {
    id: string;
    permissionActionItem?: Array<PermissionActionItem>;
}

export interface SaveSitePermissionRenewalItemsRequest {
    id: string;
    permissionActionItem?: Array<PermissionActionItem>;
}

export interface SubmitGroupRenewalTaskRequest {
    id: string;
    renewModel?: RenewModel;
}

export interface SubmitGroupRenewalTaskForArchivingRequest {
    id: string;
}

export interface SubmitGroupRenewalTaskForDeletingRequest {
    id: string;
}

export interface SubmitSiteRenewalTaskRequest {
    id: string;
    renewModel?: RenewModel;
}

export interface SubmitSiteRenewalTaskForDeletingRequest {
    id: string;
}

export interface SubmitSiteRenewalTaskWithArchivingRequest {
    id: string;
}

/**
 * no description
 */
export class WorkspaceApi extends runtime.BaseAPI {

    /**
     * confirm auto imported group/teams information
     */
    async confirmGorupRaw(requestParameters: ConfirmGorupRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling confirmGorup.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/workspace/groups/{id}/confirm`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConfirmInformationToJSON(requestParameters.confirmInformation),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * confirm auto imported group/teams information
     */
    async confirmGorup(requestParameters: ConfirmGorupRequest): Promise<void> {
        await this.confirmGorupRaw(requestParameters);
    }

    /**
     * confirm auto imported group/teams by assigning task to administrator
     */
    async confirmGorupWithUnknowPrimaryContactRaw(requestParameters: ConfirmGorupWithUnknowPrimaryContactRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling confirmGorupWithUnknowPrimaryContact.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/workspace/groups/{id}/confirm/assigntoadmincontact`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * confirm auto imported group/teams by assigning task to administrator
     */
    async confirmGorupWithUnknowPrimaryContact(requestParameters: ConfirmGorupWithUnknowPrimaryContactRequest): Promise<void> {
        await this.confirmGorupWithUnknowPrimaryContactRaw(requestParameters);
    }

    /**
     * confirm auto imported group/teams by assigning task to the specified primary contact
     */
    async confirmGroupWithKnowningPrimaryContactRaw(requestParameters: ConfirmGroupWithKnowningPrimaryContactRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling confirmGroupWithKnowningPrimaryContact.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/workspace/groups/{id}/confirm/changeprimarycontact`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserParamToJSON(requestParameters.userParam),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * confirm auto imported group/teams by assigning task to the specified primary contact
     */
    async confirmGroupWithKnowningPrimaryContact(requestParameters: ConfirmGroupWithKnowningPrimaryContactRequest): Promise<void> {
        await this.confirmGroupWithKnowningPrimaryContactRaw(requestParameters);
    }

    /**
     * confirm auto imported site information
     */
    async confirmSiteRaw(requestParameters: ConfirmSiteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling confirmSite.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/workspace/sites/{id}/confirm`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConfirmInformationToJSON(requestParameters.confirmInformation),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * confirm auto imported site information
     */
    async confirmSite(requestParameters: ConfirmSiteRequest): Promise<void> {
        await this.confirmSiteRaw(requestParameters);
    }

    /**
     * confirm auto imported site by assigning task to the specified primary contact
     */
    async confirmSiteWitKnowingPrimaryContactRaw(requestParameters: ConfirmSiteWitKnowingPrimaryContactRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling confirmSiteWitKnowingPrimaryContact.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/workspace/sites/{id}/confirm/changeprimarycontact`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserParamToJSON(requestParameters.userParam),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * confirm auto imported site by assigning task to the specified primary contact
     */
    async confirmSiteWitKnowingPrimaryContact(requestParameters: ConfirmSiteWitKnowingPrimaryContactRequest): Promise<void> {
        await this.confirmSiteWitKnowingPrimaryContactRaw(requestParameters);
    }

    /**
     * confirm auto imported site by assigning task to administrator
     */
    async confirmSiteWithUnknowPrimaryContactRaw(requestParameters: ConfirmSiteWithUnknowPrimaryContactRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling confirmSiteWithUnknowPrimaryContact.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/workspace/sites/{id}/confirm/assigntoadmincontact`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * confirm auto imported site by assigning task to administrator
     */
    async confirmSiteWithUnknowPrimaryContact(requestParameters: ConfirmSiteWithUnknowPrimaryContactRequest): Promise<void> {
        await this.confirmSiteWithUnknowPrimaryContactRaw(requestParameters);
    }

    /**
     * get group/teams auto-imported profile information
     */
    async getGroupAutoImportProfileRaw(requestParameters: GetGroupAutoImportProfileRequest): Promise<runtime.ApiResponse<AutoImportProfileRef>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getGroupAutoImportProfile.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/workspace/groups/{id}/confirm/settings`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AutoImportProfileRefFromJSON(jsonValue));
    }

    /**
     * get group/teams auto-imported profile information
     */
    async getGroupAutoImportProfile(requestParameters: GetGroupAutoImportProfileRequest): Promise<AutoImportProfileRef> {
        const response = await this.getGroupAutoImportProfileRaw(requestParameters);
        return await response.value();
    }

    /**
     * get group/teams contacts
     */
    async getGroupContactsRaw(requestParameters: GetGroupContactsRequest): Promise<runtime.ApiResponse<ObjectContactModel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getGroupContacts.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/workspace/groups/{id}/contacts`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ObjectContactModelFromJSON(jsonValue));
    }

    /**
     * get group/teams contacts
     */
    async getGroupContacts(requestParameters: GetGroupContactsRequest): Promise<ObjectContactModel> {
        const response = await this.getGroupContactsRaw(requestParameters);
        return await response.value();
    }

    /**
     * get group/teams membership renewal items
     */
    async getGroupMembershipRenewalItemsRaw(requestParameters: GetGroupMembershipRenewalItemsRequest): Promise<runtime.ApiResponse<Array<MembershipRenewalItemModel>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getGroupMembershipRenewalItems.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/workspace/groups/{id}/renew/membership`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MembershipRenewalItemModelFromJSON));
    }

    /**
     * get group/teams membership renewal items
     */
    async getGroupMembershipRenewalItems(requestParameters: GetGroupMembershipRenewalItemsRequest): Promise<Array<MembershipRenewalItemModel>> {
        const response = await this.getGroupMembershipRenewalItemsRaw(requestParameters);
        return await response.value();
    }

    /**
     * get group/teams metadata renewal items
     */
    async getGroupMetadataRenewalItemsRaw(requestParameters: GetGroupMetadataRenewalItemsRequest): Promise<runtime.ApiResponse<Array<CustomMetadata>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getGroupMetadataRenewalItems.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/workspace/groups/{id}/renew/metadata`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CustomMetadataFromJSON));
    }

    /**
     * get group/teams metadata renewal items
     */
    async getGroupMetadataRenewalItems(requestParameters: GetGroupMetadataRenewalItemsRequest): Promise<Array<CustomMetadata>> {
        const response = await this.getGroupMetadataRenewalItemsRaw(requestParameters);
        return await response.value();
    }

    /**
     * get group/teams permission renewal report filters
     */
    async getGroupPermissionRenewalFiltersRaw(requestParameters: GetGroupPermissionRenewalFiltersRequest): Promise<runtime.ApiResponse<DistinctPageResult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getGroupPermissionRenewalFilters.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.distinct !== undefined) {
            queryParameters['distinct'] = requestParameters.distinct;
        }

        if (requestParameters.top !== undefined) {
            queryParameters['top'] = requestParameters.top;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/workspace/groups/{id}/renew/permission/filters`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DistinctPageResultFromJSON(jsonValue));
    }

    /**
     * get group/teams permission renewal report filters
     */
    async getGroupPermissionRenewalFilters(requestParameters: GetGroupPermissionRenewalFiltersRequest): Promise<DistinctPageResult> {
        const response = await this.getGroupPermissionRenewalFiltersRaw(requestParameters);
        return await response.value();
    }

    /**
     * get group/teams permission renewal sharePoint group report filters
     */
    async getGroupPermissionRenewalFiltersForSPGroupRaw(requestParameters: GetGroupPermissionRenewalFiltersForSPGroupRequest): Promise<runtime.ApiResponse<DistinctPageResult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getGroupPermissionRenewalFiltersForSPGroup.');
        }

        if (requestParameters.groupid === null || requestParameters.groupid === undefined) {
            throw new runtime.RequiredError('groupid','Required parameter requestParameters.groupid was null or undefined when calling getGroupPermissionRenewalFiltersForSPGroup.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.distinct !== undefined) {
            queryParameters['distinct'] = requestParameters.distinct;
        }

        if (requestParameters.top !== undefined) {
            queryParameters['top'] = requestParameters.top;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/workspace/groups/{id}/renew/permission/group/{groupid}/filters`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"groupid"}}`, encodeURIComponent(String(requestParameters.groupid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DistinctPageResultFromJSON(jsonValue));
    }

    /**
     * get group/teams permission renewal sharePoint group report filters
     */
    async getGroupPermissionRenewalFiltersForSPGroup(requestParameters: GetGroupPermissionRenewalFiltersForSPGroupRequest): Promise<DistinctPageResult> {
        const response = await this.getGroupPermissionRenewalFiltersForSPGroupRaw(requestParameters);
        return await response.value();
    }

    /**
     * get group/teams permission renewal items
     */
    async getGroupPermissionRenewalItemsRaw(requestParameters: GetGroupPermissionRenewalItemsRequest): Promise<runtime.ApiResponse<PermissionActionItemPageResult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getGroupPermissionRenewalItems.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.orderby !== undefined) {
            queryParameters['orderby'] = requestParameters.orderby;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/workspace/groups/{id}/renew/permissions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PermissionActionItemPageResultFromJSON(jsonValue));
    }

    /**
     * get group/teams permission renewal items
     */
    async getGroupPermissionRenewalItems(requestParameters: GetGroupPermissionRenewalItemsRequest): Promise<PermissionActionItemPageResult> {
        const response = await this.getGroupPermissionRenewalItemsRaw(requestParameters);
        return await response.value();
    }

    /**
     * get sharePoint group members of group/teams permission renewal item
     */
    async getGroupPermissionRenewalItemsForSPGroupRaw(requestParameters: GetGroupPermissionRenewalItemsForSPGroupRequest): Promise<runtime.ApiResponse<PermissionActionItemPageResult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getGroupPermissionRenewalItemsForSPGroup.');
        }

        if (requestParameters.groupid === null || requestParameters.groupid === undefined) {
            throw new runtime.RequiredError('groupid','Required parameter requestParameters.groupid was null or undefined when calling getGroupPermissionRenewalItemsForSPGroup.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.orderby !== undefined) {
            queryParameters['orderby'] = requestParameters.orderby;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/workspace/groups/{id}/renew/permissions/group/{groupid}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"groupid"}}`, encodeURIComponent(String(requestParameters.groupid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PermissionActionItemPageResultFromJSON(jsonValue));
    }

    /**
     * get sharePoint group members of group/teams permission renewal item
     */
    async getGroupPermissionRenewalItemsForSPGroup(requestParameters: GetGroupPermissionRenewalItemsForSPGroupRequest): Promise<PermissionActionItemPageResult> {
        const response = await this.getGroupPermissionRenewalItemsForSPGroupRaw(requestParameters);
        return await response.value();
    }

    /**
     * get group/teams permission level for permission renewal
     */
    async getGroupPermissionRenewalPermissionLevelsRaw(requestParameters: GetGroupPermissionRenewalPermissionLevelsRequest): Promise<runtime.ApiResponse<Array<PermissionLevel>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getGroupPermissionRenewalPermissionLevels.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/workspace/groups/{id}/renew/permissionlevels`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PermissionLevelFromJSON));
    }

    /**
     * get group/teams permission level for permission renewal
     */
    async getGroupPermissionRenewalPermissionLevels(requestParameters: GetGroupPermissionRenewalPermissionLevelsRequest): Promise<Array<PermissionLevel>> {
        const response = await this.getGroupPermissionRenewalPermissionLevelsRaw(requestParameters);
        return await response.value();
    }

    /**
     * get group/teams renewal settings
     */
    async getGroupRenewalProfileSettingsRaw(requestParameters: GetGroupRenewalProfileSettingsRequest): Promise<runtime.ApiResponse<GroupRenewProfileRef>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getGroupRenewalProfileSettings.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/workspace/groups/{id}/renew/settings`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupRenewProfileRefFromJSON(jsonValue));
    }

    /**
     * get group/teams renewal settings
     */
    async getGroupRenewalProfileSettings(requestParameters: GetGroupRenewalProfileSettingsRequest): Promise<GroupRenewProfileRef> {
        const response = await this.getGroupRenewalProfileSettingsRaw(requestParameters);
        return await response.value();
    }

    /**
     * get group sharing options
     */
    async getGroupSharingOptionsRaw(requestParameters: GetGroupSharingOptionsRequest): Promise<runtime.ApiResponse<ExternalSharingOptions>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.emailOrId !== undefined) {
            queryParameters['emailOrId'] = requestParameters.emailOrId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/workspace/groups/sharingoptions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ExternalSharingOptionsFromJSON(jsonValue));
    }

    /**
     * get group sharing options
     */
    async getGroupSharingOptions(requestParameters: GetGroupSharingOptionsRequest): Promise<ExternalSharingOptions> {
        const response = await this.getGroupSharingOptionsRaw(requestParameters);
        return await response.value();
    }

    /**
     * get O365 group/teams information
     */
    async getMyGroupInformationRaw(requestParameters: GetMyGroupInformationRequest): Promise<runtime.ApiResponse<ApiMyGroup>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getMyGroupInformation.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/workspace/groups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiMyGroupFromJSON(jsonValue));
    }

    /**
     * get O365 group/teams information
     */
    async getMyGroupInformation(requestParameters: GetMyGroupInformationRequest): Promise<ApiMyGroup> {
        const response = await this.getMyGroupInformationRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getMySiteInformationRaw(requestParameters: GetMySiteInformationRequest): Promise<runtime.ApiResponse<MySite>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getMySiteInformation.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/workspace/sites/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MySiteFromJSON(jsonValue));
    }

    /**
     */
    async getMySiteInformation(requestParameters: GetMySiteInformationRequest): Promise<MySite> {
        const response = await this.getMySiteInformationRaw(requestParameters);
        return await response.value();
    }

    /**
     * get site auto import settings
     */
    async getSiteAutoImportProfileRaw(requestParameters: GetSiteAutoImportProfileRequest): Promise<runtime.ApiResponse<AutoImportProfileRef>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSiteAutoImportProfile.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/workspace/sites/{id}/confirm/settings`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AutoImportProfileRefFromJSON(jsonValue));
    }

    /**
     * get site auto import settings
     */
    async getSiteAutoImportProfile(requestParameters: GetSiteAutoImportProfileRequest): Promise<AutoImportProfileRef> {
        const response = await this.getSiteAutoImportProfileRaw(requestParameters);
        return await response.value();
    }

    /**
     * get site contacts
     */
    async getSiteContactsRaw(requestParameters: GetSiteContactsRequest): Promise<runtime.ApiResponse<ObjectContactModel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSiteContacts.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/workspace/sites/{id}/contacts`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ObjectContactModelFromJSON(jsonValue));
    }

    /**
     * get site contacts
     */
    async getSiteContacts(requestParameters: GetSiteContactsRequest): Promise<ObjectContactModel> {
        const response = await this.getSiteContactsRaw(requestParameters);
        return await response.value();
    }

    /**
     * get site metadata
     */
    async getSiteMetadataRaw(requestParameters: GetSiteMetadataRequest): Promise<runtime.ApiResponse<Array<CustomMetadata>>> {
        if (requestParameters.url === null || requestParameters.url === undefined) {
            throw new runtime.RequiredError('url','Required parameter requestParameters.url was null or undefined when calling getSiteMetadata.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.url !== undefined) {
            queryParameters['url'] = requestParameters.url;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/workspace/sites/metadata`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CustomMetadataFromJSON));
    }

    /**
     * get site metadata
     */
    async getSiteMetadata(requestParameters: GetSiteMetadataRequest): Promise<Array<CustomMetadata>> {
        const response = await this.getSiteMetadataRaw(requestParameters);
        return await response.value();
    }

    /**
     * get site metadata renewal items
     */
    async getSiteMetadataRenewalItemsRaw(requestParameters: GetSiteMetadataRenewalItemsRequest): Promise<runtime.ApiResponse<Array<CustomMetadata>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSiteMetadataRenewalItems.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/workspace/sites/{id}/renew/metadata`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CustomMetadataFromJSON));
    }

    /**
     * get site metadata renewal items
     */
    async getSiteMetadataRenewalItems(requestParameters: GetSiteMetadataRenewalItemsRequest): Promise<Array<CustomMetadata>> {
        const response = await this.getSiteMetadataRenewalItemsRaw(requestParameters);
        return await response.value();
    }

    /**
     * get site permission renewal report filters
     */
    async getSitePermissionRenewalFiltersRaw(requestParameters: GetSitePermissionRenewalFiltersRequest): Promise<runtime.ApiResponse<DistinctPageResult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSitePermissionRenewalFilters.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.distinct !== undefined) {
            queryParameters['distinct'] = requestParameters.distinct;
        }

        if (requestParameters.top !== undefined) {
            queryParameters['top'] = requestParameters.top;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/workspace/sites/{id}/renew/permission/filters`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DistinctPageResultFromJSON(jsonValue));
    }

    /**
     * get site permission renewal report filters
     */
    async getSitePermissionRenewalFilters(requestParameters: GetSitePermissionRenewalFiltersRequest): Promise<DistinctPageResult> {
        const response = await this.getSitePermissionRenewalFiltersRaw(requestParameters);
        return await response.value();
    }

    /**
     * get site permission renewal sharePoint group report filters
     */
    async getSitePermissionRenewalFiltersForSPGroupRaw(requestParameters: GetSitePermissionRenewalFiltersForSPGroupRequest): Promise<runtime.ApiResponse<DistinctPageResult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSitePermissionRenewalFiltersForSPGroup.');
        }

        if (requestParameters.groupid === null || requestParameters.groupid === undefined) {
            throw new runtime.RequiredError('groupid','Required parameter requestParameters.groupid was null or undefined when calling getSitePermissionRenewalFiltersForSPGroup.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.distinct !== undefined) {
            queryParameters['distinct'] = requestParameters.distinct;
        }

        if (requestParameters.top !== undefined) {
            queryParameters['top'] = requestParameters.top;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/workspace/sites/{id}/renew/permission/group/{groupid}/filters`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"groupid"}}`, encodeURIComponent(String(requestParameters.groupid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DistinctPageResultFromJSON(jsonValue));
    }

    /**
     * get site permission renewal sharePoint group report filters
     */
    async getSitePermissionRenewalFiltersForSPGroup(requestParameters: GetSitePermissionRenewalFiltersForSPGroupRequest): Promise<DistinctPageResult> {
        const response = await this.getSitePermissionRenewalFiltersForSPGroupRaw(requestParameters);
        return await response.value();
    }

    /**
     * get site permission renewal items
     */
    async getSitePermissionRenewalItemsRaw(requestParameters: GetSitePermissionRenewalItemsRequest): Promise<runtime.ApiResponse<PermissionActionItemPageResult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSitePermissionRenewalItems.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.orderby !== undefined) {
            queryParameters['orderby'] = requestParameters.orderby;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/workspace/sites/{id}/renew/permissions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PermissionActionItemPageResultFromJSON(jsonValue));
    }

    /**
     * get site permission renewal items
     */
    async getSitePermissionRenewalItems(requestParameters: GetSitePermissionRenewalItemsRequest): Promise<PermissionActionItemPageResult> {
        const response = await this.getSitePermissionRenewalItemsRaw(requestParameters);
        return await response.value();
    }

    /**
     * get sharePoint group members of site permission renewal item
     */
    async getSitePermissionRenewalItemsForSPGroupRaw(requestParameters: GetSitePermissionRenewalItemsForSPGroupRequest): Promise<runtime.ApiResponse<PermissionActionItemPageResult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSitePermissionRenewalItemsForSPGroup.');
        }

        if (requestParameters.groupid === null || requestParameters.groupid === undefined) {
            throw new runtime.RequiredError('groupid','Required parameter requestParameters.groupid was null or undefined when calling getSitePermissionRenewalItemsForSPGroup.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.orderby !== undefined) {
            queryParameters['orderby'] = requestParameters.orderby;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/workspace/sites/{id}/renew/permissions/group/{groupid}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"groupid"}}`, encodeURIComponent(String(requestParameters.groupid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PermissionActionItemPageResultFromJSON(jsonValue));
    }

    /**
     * get sharePoint group members of site permission renewal item
     */
    async getSitePermissionRenewalItemsForSPGroup(requestParameters: GetSitePermissionRenewalItemsForSPGroupRequest): Promise<PermissionActionItemPageResult> {
        const response = await this.getSitePermissionRenewalItemsForSPGroupRaw(requestParameters);
        return await response.value();
    }

    /**
     * get site permission level for permission renewal
     */
    async getSitePermissionRenewalPermissionLevelsRaw(requestParameters: GetSitePermissionRenewalPermissionLevelsRequest): Promise<runtime.ApiResponse<Array<PermissionLevel>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSitePermissionRenewalPermissionLevels.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/workspace/sites/{id}/renew/permissionlevels`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PermissionLevelFromJSON));
    }

    /**
     * get site permission level for permission renewal
     */
    async getSitePermissionRenewalPermissionLevels(requestParameters: GetSitePermissionRenewalPermissionLevelsRequest): Promise<Array<PermissionLevel>> {
        const response = await this.getSitePermissionRenewalPermissionLevelsRaw(requestParameters);
        return await response.value();
    }

    /**
     * get site renewal settings
     */
    async getSiteRenewalProfileSettingsRaw(requestParameters: GetSiteRenewalProfileSettingsRequest): Promise<runtime.ApiResponse<RenewProfileRef>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSiteRenewalProfileSettings.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/workspace/sites/{id}/renew/settings`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RenewProfileRefFromJSON(jsonValue));
    }

    /**
     * get site renewal settings
     */
    async getSiteRenewalProfileSettings(requestParameters: GetSiteRenewalProfileSettingsRequest): Promise<RenewProfileRef> {
        const response = await this.getSiteRenewalProfileSettingsRaw(requestParameters);
        return await response.value();
    }

    /**
     * get site sharing options by site url or id
     */
    async getSiteSharingOptionsRaw(requestParameters: GetSiteSharingOptionsRequest): Promise<runtime.ApiResponse<ExternalSharingOptions>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.siteUrlOrId !== undefined) {
            queryParameters['siteUrlOrId'] = requestParameters.siteUrlOrId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/workspace/sites/sharingoptions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ExternalSharingOptionsFromJSON(jsonValue));
    }

    /**
     * get site sharing options by site url or id
     */
    async getSiteSharingOptions(requestParameters: GetSiteSharingOptionsRequest): Promise<ExternalSharingOptions> {
        const response = await this.getSiteSharingOptionsRaw(requestParameters);
        return await response.value();
    }

    /**
     * get my workspace filters
     */
    async getWorkspaceFiltersRaw(requestParameters: GetWorkspaceFiltersRequest): Promise<runtime.ApiResponse<DistinctPageResult>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.distinct !== undefined) {
            queryParameters['distinct'] = requestParameters.distinct;
        }

        if (requestParameters.top !== undefined) {
            queryParameters['top'] = requestParameters.top;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/workspace/my/filters`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DistinctPageResultFromJSON(jsonValue));
    }

    /**
     * get my workspace filters
     */
    async getWorkspaceFilters(requestParameters: GetWorkspaceFiltersRequest): Promise<DistinctPageResult> {
        const response = await this.getWorkspaceFiltersRaw(requestParameters);
        return await response.value();
    }

    /**
     * get my workspace items
     */
    async getWorkspaceItemsRaw(requestParameters: GetWorkspaceItemsRequest): Promise<runtime.ApiResponse<Array<WorkspaceList>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.orderby !== undefined) {
            queryParameters['orderby'] = requestParameters.orderby;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.top !== undefined) {
            queryParameters['top'] = requestParameters.top;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/workspace/my`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WorkspaceListFromJSON));
    }

    /**
     * get my workspace items
     */
    async getWorkspaceItems(requestParameters: GetWorkspaceItemsRequest): Promise<Array<WorkspaceList>> {
        const response = await this.getWorkspaceItemsRaw(requestParameters);
        return await response.value();
    }

    /**
     * reassign the group/teams renewal task
     */
    async reassignGroupRenewalTaskRaw(requestParameters: ReassignGroupRenewalTaskRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling reassignGroupRenewalTask.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.userid !== undefined) {
            queryParameters['userid'] = requestParameters.userid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/workspace/groups/{id}/renew/reassign`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * reassign the group/teams renewal task
     */
    async reassignGroupRenewalTask(requestParameters: ReassignGroupRenewalTaskRequest): Promise<void> {
        await this.reassignGroupRenewalTaskRaw(requestParameters);
    }

    /**
     * reassign the site renewal task
     */
    async reassignSiteRenewalTaskRaw(requestParameters: ReassignSiteRenewalTaskRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling reassignSiteRenewalTask.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.userid !== undefined) {
            queryParameters['userid'] = requestParameters.userid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/workspace/sites/{id}/renew/reassign`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * reassign the site renewal task
     */
    async reassignSiteRenewalTask(requestParameters: ReassignSiteRenewalTaskRequest): Promise<void> {
        await this.reassignSiteRenewalTaskRaw(requestParameters);
    }

    /**
     * reject the group/teams renewal task
     */
    async rejectGroupRenewalTaskRaw(requestParameters: RejectGroupRenewalTaskRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling rejectGroupRenewalTask.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/workspace/groups/{id}/renew/reject`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * reject the group/teams renewal task
     */
    async rejectGroupRenewalTask(requestParameters: RejectGroupRenewalTaskRequest): Promise<void> {
        await this.rejectGroupRenewalTaskRaw(requestParameters);
    }

    /**
     * reject the site renewal task
     */
    async rejectSiteRenewalTaskRaw(requestParameters: RejectSiteRenewalTaskRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling rejectSiteRenewalTask.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/workspace/sites/{id}/renew/reject`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * reject the site renewal task
     */
    async rejectSiteRenewalTask(requestParameters: RejectSiteRenewalTaskRequest): Promise<void> {
        await this.rejectSiteRenewalTaskRaw(requestParameters);
    }

    /**
     * reset your change
     */
    async resetChangeForSiteRenewalRaw(requestParameters: ResetChangeForSiteRenewalRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling resetChangeForSiteRenewal.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/workspace/sites/{id}/renew/reset`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * reset your change
     */
    async resetChangeForSiteRenewal(requestParameters: ResetChangeForSiteRenewalRequest): Promise<void> {
        await this.resetChangeForSiteRenewalRaw(requestParameters);
    }

    /**
     * reset your change
     */
    async resetChangesForGroupRenewalRaw(requestParameters: ResetChangesForGroupRenewalRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling resetChangesForGroupRenewal.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/workspace/groups/{id}/renew/reset`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * reset your change
     */
    async resetChangesForGroupRenewal(requestParameters: ResetChangesForGroupRenewalRequest): Promise<void> {
        await this.resetChangesForGroupRenewalRaw(requestParameters);
    }

    /**
     * save group/teams permission renewal items
     */
    async saveGroupPermissionRenewalItemsRaw(requestParameters: SaveGroupPermissionRenewalItemsRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling saveGroupPermissionRenewalItems.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/workspace/groups/{id}/renew/permissions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.permissionActionItem.map(PermissionActionItemToJSON),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * save group/teams permission renewal items
     */
    async saveGroupPermissionRenewalItems(requestParameters: SaveGroupPermissionRenewalItemsRequest): Promise<void> {
        await this.saveGroupPermissionRenewalItemsRaw(requestParameters);
    }

    /**
     * save site permission renewal items
     */
    async saveSitePermissionRenewalItemsRaw(requestParameters: SaveSitePermissionRenewalItemsRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling saveSitePermissionRenewalItems.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/workspace/sites/{id}/renew/permissions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.permissionActionItem.map(PermissionActionItemToJSON),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * save site permission renewal items
     */
    async saveSitePermissionRenewalItems(requestParameters: SaveSitePermissionRenewalItemsRequest): Promise<void> {
        await this.saveSitePermissionRenewalItemsRaw(requestParameters);
    }

    /**
     * submit the group/teams renewal task
     */
    async submitGroupRenewalTaskRaw(requestParameters: SubmitGroupRenewalTaskRequest): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling submitGroupRenewalTask.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/workspace/groups/{id}/renew/submit`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RenewModelToJSON(requestParameters.renewModel),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * submit the group/teams renewal task
     */
    async submitGroupRenewalTask(requestParameters: SubmitGroupRenewalTaskRequest): Promise<boolean> {
        const response = await this.submitGroupRenewalTaskRaw(requestParameters);
        return await response.value();
    }

    /**
     * submit group/teams renewal task with archive
     */
    async submitGroupRenewalTaskForArchivingRaw(requestParameters: SubmitGroupRenewalTaskForArchivingRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling submitGroupRenewalTaskForArchiving.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/workspace/groups/{id}/renew/archive`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * submit group/teams renewal task with archive
     */
    async submitGroupRenewalTaskForArchiving(requestParameters: SubmitGroupRenewalTaskForArchivingRequest): Promise<void> {
        await this.submitGroupRenewalTaskForArchivingRaw(requestParameters);
    }

    /**
     * submit group/teams renewal task with deletion
     */
    async submitGroupRenewalTaskForDeletingRaw(requestParameters: SubmitGroupRenewalTaskForDeletingRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling submitGroupRenewalTaskForDeleting.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/workspace/groups/{id}/renew/delete`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * submit group/teams renewal task with deletion
     */
    async submitGroupRenewalTaskForDeleting(requestParameters: SubmitGroupRenewalTaskForDeletingRequest): Promise<void> {
        await this.submitGroupRenewalTaskForDeletingRaw(requestParameters);
    }

    /**
     * submit the site renewal task
     */
    async submitSiteRenewalTaskRaw(requestParameters: SubmitSiteRenewalTaskRequest): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling submitSiteRenewalTask.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/workspace/sites/{id}/renew/submit`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RenewModelToJSON(requestParameters.renewModel),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * submit the site renewal task
     */
    async submitSiteRenewalTask(requestParameters: SubmitSiteRenewalTaskRequest): Promise<boolean> {
        const response = await this.submitSiteRenewalTaskRaw(requestParameters);
        return await response.value();
    }

    /**
     * submit site renewal task with deletion
     */
    async submitSiteRenewalTaskForDeletingRaw(requestParameters: SubmitSiteRenewalTaskForDeletingRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling submitSiteRenewalTaskForDeleting.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/workspace/sites/{id}/renew/delete`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * submit site renewal task with deletion
     */
    async submitSiteRenewalTaskForDeleting(requestParameters: SubmitSiteRenewalTaskForDeletingRequest): Promise<void> {
        await this.submitSiteRenewalTaskForDeletingRaw(requestParameters);
    }

    /**
     * approval site renewal task with archive
     */
    async submitSiteRenewalTaskWithArchivingRaw(requestParameters: SubmitSiteRenewalTaskWithArchivingRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling submitSiteRenewalTaskWithArchiving.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/workspace/sites/{id}/renew/archive`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * approval site renewal task with archive
     */
    async submitSiteRenewalTaskWithArchiving(requestParameters: SubmitSiteRenewalTaskWithArchivingRequest): Promise<void> {
        await this.submitSiteRenewalTaskWithArchivingRaw(requestParameters);
    }

}
