/**
 * Cloud Governance Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApiUser from './ApiUser';
import AssignBy from './AssignBy';
import GroupOwnerType from './GroupOwnerType';
import GroupUser from './GroupUser';
import PermissionLevel from './PermissionLevel';
import SharePointBuildInGroupType from './SharePointBuildInGroupType';

/**
 * The ServiceGroupWithPermissions model module.
 * @module model/ServiceGroupWithPermissions
 * @version 1.0
 */
class ServiceGroupWithPermissions {
    /**
     * Constructs a new <code>ServiceGroupWithPermissions</code>.
     * @alias module:model/ServiceGroupWithPermissions
     */
    constructor() { 
        
        ServiceGroupWithPermissions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ServiceGroupWithPermissions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServiceGroupWithPermissions} obj Optional instance to populate.
     * @return {module:model/ServiceGroupWithPermissions} The populated <code>ServiceGroupWithPermissions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServiceGroupWithPermissions();

            if (data.hasOwnProperty('usersAssignBy')) {
                obj['usersAssignBy'] = AssignBy.constructFromObject(data['usersAssignBy']);
            }
            if (data.hasOwnProperty('groupOwnerAssignBy')) {
                obj['groupOwnerAssignBy'] = AssignBy.constructFromObject(data['groupOwnerAssignBy']);
            }
            if (data.hasOwnProperty('allowChangePermissionLevel')) {
                obj['allowChangePermissionLevel'] = ApiClient.convertToType(data['allowChangePermissionLevel'], 'Boolean');
            }
            if (data.hasOwnProperty('removable')) {
                obj['removable'] = ApiClient.convertToType(data['removable'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('users')) {
                obj['users'] = ApiClient.convertToType(data['users'], [GroupUser]);
            }
            if (data.hasOwnProperty('permissionLevels')) {
                obj['permissionLevels'] = ApiClient.convertToType(data['permissionLevels'], [PermissionLevel]);
            }
            if (data.hasOwnProperty('groupOwner')) {
                obj['groupOwner'] = ApiUser.constructFromObject(data['groupOwner']);
            }
            if (data.hasOwnProperty('groupOwnerType')) {
                obj['groupOwnerType'] = GroupOwnerType.constructFromObject(data['groupOwnerType']);
            }
            if (data.hasOwnProperty('buildInGroupType')) {
                obj['buildInGroupType'] = SharePointBuildInGroupType.constructFromObject(data['buildInGroupType']);
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/AssignBy} usersAssignBy
 */
ServiceGroupWithPermissions.prototype['usersAssignBy'] = undefined;

/**
 * @member {module:model/AssignBy} groupOwnerAssignBy
 */
ServiceGroupWithPermissions.prototype['groupOwnerAssignBy'] = undefined;

/**
 * @member {Boolean} allowChangePermissionLevel
 */
ServiceGroupWithPermissions.prototype['allowChangePermissionLevel'] = undefined;

/**
 * @member {Boolean} removable
 */
ServiceGroupWithPermissions.prototype['removable'] = undefined;

/**
 * @member {String} name
 */
ServiceGroupWithPermissions.prototype['name'] = undefined;

/**
 * @member {String} description
 */
ServiceGroupWithPermissions.prototype['description'] = undefined;

/**
 * @member {Array.<module:model/GroupUser>} users
 */
ServiceGroupWithPermissions.prototype['users'] = undefined;

/**
 * @member {Array.<module:model/PermissionLevel>} permissionLevels
 */
ServiceGroupWithPermissions.prototype['permissionLevels'] = undefined;

/**
 * @member {module:model/ApiUser} groupOwner
 */
ServiceGroupWithPermissions.prototype['groupOwner'] = undefined;

/**
 * @member {module:model/GroupOwnerType} groupOwnerType
 */
ServiceGroupWithPermissions.prototype['groupOwnerType'] = undefined;

/**
 * @member {module:model/SharePointBuildInGroupType} buildInGroupType
 */
ServiceGroupWithPermissions.prototype['buildInGroupType'] = undefined;






export default ServiceGroupWithPermissions;

