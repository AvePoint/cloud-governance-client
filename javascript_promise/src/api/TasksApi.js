/**
 * Cloud Governance Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.2.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiRequest', 'model/ApiTask', 'model/ApiUser', 'model/ArchiveGroupRequest', 'model/ArchiveSiteRequest', 'model/ArchiveWebLifecycleRequest', 'model/AutoTaskArchiveRequest', 'model/AutoTaskChangePolicyRequest', 'model/AutoTaskDeleteRequest', 'model/AutoTaskExtendRequest', 'model/ChangeGroupPolicyRequest', 'model/ChangeGroupQuotaRequest', 'model/ChangeGroupSettingRequest', 'model/ChangeListSettingRequest', 'model/ChangePermissionRequest', 'model/ChangeSiteContactRequest', 'model/ChangeSitePolicyRequest', 'model/ChangeSiteQuotaRequest', 'model/ChangeSiteSettingRequest', 'model/ChangeWebContactRequest', 'model/ChangeWebSettingRequest', 'model/ClonePermissionReportProperty', 'model/ClonePermissionRequest', 'model/ClonePermissionSecuritySearchResultPageResult', 'model/CommentsParam', 'model/ContentMoveRequest', 'model/CreateGroupRequest', 'model/CreateListRequest', 'model/CreateSiteRequest', 'model/CreateWebRequest', 'model/CustomMetadata', 'model/DeleteGroupRequest', 'model/DeleteSiteRequest', 'model/DeleteWebLifecycleRequest', 'model/DistinctPageResult', 'model/ExtendGroupRequest', 'model/ExtendSiteRequest', 'model/GrantPermissionRequest', 'model/GroupPermissionActionItem', 'model/GroupPermissionActionItemPageResult', 'model/LockSiteRequest', 'model/ManagePermissionRequest', 'model/ManuallyArchiveRecordModel', 'model/ManuallyArchiveRecordModelPageResult', 'model/MembershipRecertificationItemPageResult', 'model/MembershipRecertificationReportProperties', 'model/MetadataRecertificationReportProperties', 'model/OwnershipRecertification', 'model/PermissionActionItem', 'model/PermissionActionItemPageResult', 'model/PermissionLevel', 'model/RecertificationReportProperties', 'model/RequestMetadata', 'model/RestoreGroupRequest', 'model/SecuritySearchResult', 'model/SecuritySearchResultPageResult', 'model/TaskList', 'model/TaskListPageResult', 'model/UnlockSiteRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiRequest'), require('../model/ApiTask'), require('../model/ApiUser'), require('../model/ArchiveGroupRequest'), require('../model/ArchiveSiteRequest'), require('../model/ArchiveWebLifecycleRequest'), require('../model/AutoTaskArchiveRequest'), require('../model/AutoTaskChangePolicyRequest'), require('../model/AutoTaskDeleteRequest'), require('../model/AutoTaskExtendRequest'), require('../model/ChangeGroupPolicyRequest'), require('../model/ChangeGroupQuotaRequest'), require('../model/ChangeGroupSettingRequest'), require('../model/ChangeListSettingRequest'), require('../model/ChangePermissionRequest'), require('../model/ChangeSiteContactRequest'), require('../model/ChangeSitePolicyRequest'), require('../model/ChangeSiteQuotaRequest'), require('../model/ChangeSiteSettingRequest'), require('../model/ChangeWebContactRequest'), require('../model/ChangeWebSettingRequest'), require('../model/ClonePermissionReportProperty'), require('../model/ClonePermissionRequest'), require('../model/ClonePermissionSecuritySearchResultPageResult'), require('../model/CommentsParam'), require('../model/ContentMoveRequest'), require('../model/CreateGroupRequest'), require('../model/CreateListRequest'), require('../model/CreateSiteRequest'), require('../model/CreateWebRequest'), require('../model/CustomMetadata'), require('../model/DeleteGroupRequest'), require('../model/DeleteSiteRequest'), require('../model/DeleteWebLifecycleRequest'), require('../model/DistinctPageResult'), require('../model/ExtendGroupRequest'), require('../model/ExtendSiteRequest'), require('../model/GrantPermissionRequest'), require('../model/GroupPermissionActionItem'), require('../model/GroupPermissionActionItemPageResult'), require('../model/LockSiteRequest'), require('../model/ManagePermissionRequest'), require('../model/ManuallyArchiveRecordModel'), require('../model/ManuallyArchiveRecordModelPageResult'), require('../model/MembershipRecertificationItemPageResult'), require('../model/MembershipRecertificationReportProperties'), require('../model/MetadataRecertificationReportProperties'), require('../model/OwnershipRecertification'), require('../model/PermissionActionItem'), require('../model/PermissionActionItemPageResult'), require('../model/PermissionLevel'), require('../model/RecertificationReportProperties'), require('../model/RequestMetadata'), require('../model/RestoreGroupRequest'), require('../model/SecuritySearchResult'), require('../model/SecuritySearchResultPageResult'), require('../model/TaskList'), require('../model/TaskListPageResult'), require('../model/UnlockSiteRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.CgClient) {
      root.CgClient = {};
    }
    root.CgClient.TasksApi = factory(root.CgClient.ApiClient, root.CgClient.ApiRequest, root.CgClient.ApiTask, root.CgClient.ApiUser, root.CgClient.ArchiveGroupRequest, root.CgClient.ArchiveSiteRequest, root.CgClient.ArchiveWebLifecycleRequest, root.CgClient.AutoTaskArchiveRequest, root.CgClient.AutoTaskChangePolicyRequest, root.CgClient.AutoTaskDeleteRequest, root.CgClient.AutoTaskExtendRequest, root.CgClient.ChangeGroupPolicyRequest, root.CgClient.ChangeGroupQuotaRequest, root.CgClient.ChangeGroupSettingRequest, root.CgClient.ChangeListSettingRequest, root.CgClient.ChangePermissionRequest, root.CgClient.ChangeSiteContactRequest, root.CgClient.ChangeSitePolicyRequest, root.CgClient.ChangeSiteQuotaRequest, root.CgClient.ChangeSiteSettingRequest, root.CgClient.ChangeWebContactRequest, root.CgClient.ChangeWebSettingRequest, root.CgClient.ClonePermissionReportProperty, root.CgClient.ClonePermissionRequest, root.CgClient.ClonePermissionSecuritySearchResultPageResult, root.CgClient.CommentsParam, root.CgClient.ContentMoveRequest, root.CgClient.CreateGroupRequest, root.CgClient.CreateListRequest, root.CgClient.CreateSiteRequest, root.CgClient.CreateWebRequest, root.CgClient.CustomMetadata, root.CgClient.DeleteGroupRequest, root.CgClient.DeleteSiteRequest, root.CgClient.DeleteWebLifecycleRequest, root.CgClient.DistinctPageResult, root.CgClient.ExtendGroupRequest, root.CgClient.ExtendSiteRequest, root.CgClient.GrantPermissionRequest, root.CgClient.GroupPermissionActionItem, root.CgClient.GroupPermissionActionItemPageResult, root.CgClient.LockSiteRequest, root.CgClient.ManagePermissionRequest, root.CgClient.ManuallyArchiveRecordModel, root.CgClient.ManuallyArchiveRecordModelPageResult, root.CgClient.MembershipRecertificationItemPageResult, root.CgClient.MembershipRecertificationReportProperties, root.CgClient.MetadataRecertificationReportProperties, root.CgClient.OwnershipRecertification, root.CgClient.PermissionActionItem, root.CgClient.PermissionActionItemPageResult, root.CgClient.PermissionLevel, root.CgClient.RecertificationReportProperties, root.CgClient.RequestMetadata, root.CgClient.RestoreGroupRequest, root.CgClient.SecuritySearchResult, root.CgClient.SecuritySearchResultPageResult, root.CgClient.TaskList, root.CgClient.TaskListPageResult, root.CgClient.UnlockSiteRequest);
  }
}(this, function(ApiClient, ApiRequest, ApiTask, ApiUser, ArchiveGroupRequest, ArchiveSiteRequest, ArchiveWebLifecycleRequest, AutoTaskArchiveRequest, AutoTaskChangePolicyRequest, AutoTaskDeleteRequest, AutoTaskExtendRequest, ChangeGroupPolicyRequest, ChangeGroupQuotaRequest, ChangeGroupSettingRequest, ChangeListSettingRequest, ChangePermissionRequest, ChangeSiteContactRequest, ChangeSitePolicyRequest, ChangeSiteQuotaRequest, ChangeSiteSettingRequest, ChangeWebContactRequest, ChangeWebSettingRequest, ClonePermissionReportProperty, ClonePermissionRequest, ClonePermissionSecuritySearchResultPageResult, CommentsParam, ContentMoveRequest, CreateGroupRequest, CreateListRequest, CreateSiteRequest, CreateWebRequest, CustomMetadata, DeleteGroupRequest, DeleteSiteRequest, DeleteWebLifecycleRequest, DistinctPageResult, ExtendGroupRequest, ExtendSiteRequest, GrantPermissionRequest, GroupPermissionActionItem, GroupPermissionActionItemPageResult, LockSiteRequest, ManagePermissionRequest, ManuallyArchiveRecordModel, ManuallyArchiveRecordModelPageResult, MembershipRecertificationItemPageResult, MembershipRecertificationReportProperties, MetadataRecertificationReportProperties, OwnershipRecertification, PermissionActionItem, PermissionActionItemPageResult, PermissionLevel, RecertificationReportProperties, RequestMetadata, RestoreGroupRequest, SecuritySearchResult, SecuritySearchResultPageResult, TaskList, TaskListPageResult, UnlockSiteRequest) {
  'use strict';

  /**
   * Tasks service.
   * @module api/TasksApi
   * @version 1.0
   */

  /**
   * Constructs a new TasksApi. 
   * @alias module:api/TasksApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * add members for group membership recertification
     * @param {String} id 
     * @param {Array.<module:model/ApiUser>} apiUser 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.addMembersForGroupMembershipRecertificationWithHttpInfo = function(id, apiUser) {
      var postBody = apiUser;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addMembersForGroupMembershipRecertification");
      }
      // verify the required parameter 'apiUser' is set
      if (apiUser === undefined || apiUser === null) {
        throw new Error("Missing the required parameter 'apiUser' when calling addMembersForGroupMembershipRecertification");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/group/recertification/membership/members', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * add members for group membership recertification
     * @param {String} id 
     * @param {Array.<module:model/ApiUser>} apiUser 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.addMembersForGroupMembershipRecertification = function(id, apiUser) {
      return this.addMembersForGroupMembershipRecertificationWithHttpInfo(id, apiUser)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * add owners for group membership recertification
     * @param {String} id 
     * @param {Array.<module:model/ApiUser>} apiUser 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.addOwnersForGroupMembershipRecertificationWithHttpInfo = function(id, apiUser) {
      var postBody = apiUser;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addOwnersForGroupMembershipRecertification");
      }
      // verify the required parameter 'apiUser' is set
      if (apiUser === undefined || apiUser === null) {
        throw new Error("Missing the required parameter 'apiUser' when calling addOwnersForGroupMembershipRecertification");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/group/recertification/membership/owners', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * add owners for group membership recertification
     * @param {String} id 
     * @param {Array.<module:model/ApiUser>} apiUser 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.addOwnersForGroupMembershipRecertification = function(id, apiUser) {
      return this.addOwnersForGroupMembershipRecertificationWithHttpInfo(id, apiUser)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * approve task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/CommentsParam} opts.commentsParam 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.approveTaskWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['commentsParam'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling approveTask");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/approve', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * approve task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/CommentsParam} opts.commentsParam 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.approveTask = function(id, opts) {
      return this.approveTaskWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * claim election task
     * @param {String} id 
     * @param {String} secondarycontact 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.claimElectionTaskWithHttpInfo = function(id, secondarycontact) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling claimElectionTask");
      }
      // verify the required parameter 'secondarycontact' is set
      if (secondarycontact === undefined || secondarycontact === null) {
        throw new Error("Missing the required parameter 'secondarycontact' when calling claimElectionTask");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'secondarycontact': secondarycontact,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/election/claim', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * claim election task
     * @param {String} id 
     * @param {String} secondarycontact 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.claimElectionTask = function(id, secondarycontact) {
      return this.claimElectionTaskWithHttpInfo(id, secondarycontact)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * claim site ownership recertification task
     * @param {String} id 
     * @param {String} secondarycontact 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.claimSiteOwnershipRecertificationTaskWithHttpInfo = function(id, secondarycontact) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling claimSiteOwnershipRecertificationTask");
      }
      // verify the required parameter 'secondarycontact' is set
      if (secondarycontact === undefined || secondarycontact === null) {
        throw new Error("Missing the required parameter 'secondarycontact' when calling claimSiteOwnershipRecertificationTask");
      }

      var pathParams = {
        'id': id,
        'secondarycontact': secondarycontact
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/site/recertification/ownership/claim/{secondarycontact}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * claim site ownership recertification task
     * @param {String} id 
     * @param {String} secondarycontact 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.claimSiteOwnershipRecertificationTask = function(id, secondarycontact) {
      return this.claimSiteOwnershipRecertificationTaskWithHttpInfo(id, secondarycontact)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * decline election task
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.declineElectionTaskWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling declineElectionTask");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/election/decline', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * decline election task
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.declineElectionTask = function(id) {
      return this.declineElectionTaskWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * decline site ownership recertification task
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.declineSiteOwnershipRecertificationTaskWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling declineSiteOwnershipRecertificationTask");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/site/recertification/ownership/decline', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * decline site ownership recertification task
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.declineSiteOwnershipRecertificationTask = function(id) {
      return this.declineSiteOwnershipRecertificationTaskWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * demote as members for group membership recertification
     * @param {String} id 
     * @param {Array.<module:model/ApiUser>} apiUser 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.demoteAsMembersForGroupMembershipRecertificationWithHttpInfo = function(id, apiUser) {
      var postBody = apiUser;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling demoteAsMembersForGroupMembershipRecertification");
      }
      // verify the required parameter 'apiUser' is set
      if (apiUser === undefined || apiUser === null) {
        throw new Error("Missing the required parameter 'apiUser' when calling demoteAsMembersForGroupMembershipRecertification");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/group/recertification/membership/demoteasmember', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * demote as members for group membership recertification
     * @param {String} id 
     * @param {Array.<module:model/ApiUser>} apiUser 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.demoteAsMembersForGroupMembershipRecertification = function(id, apiUser) {
      return this.demoteAsMembersForGroupMembershipRecertificationWithHttpInfo(id, apiUser)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * edit archive group request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ArchiveGroupRequest} opts.archiveGroupRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.editArchiveGroupRequestWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['archiveGroupRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editArchiveGroupRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/archivegroup', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * edit archive group request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ArchiveGroupRequest} opts.archiveGroupRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.editArchiveGroupRequest = function(id, opts) {
      return this.editArchiveGroupRequestWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * edit archive site request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ArchiveSiteRequest} opts.archiveSiteRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.editArchiveSiteRequestWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['archiveSiteRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editArchiveSiteRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/archivesite', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * edit archive site request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ArchiveSiteRequest} opts.archiveSiteRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.editArchiveSiteRequest = function(id, opts) {
      return this.editArchiveSiteRequestWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * edit archive web request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ArchiveWebLifecycleRequest} opts.archiveWebLifecycleRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.editArchiveWebRequestWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['archiveWebLifecycleRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editArchiveWebRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/archiveweb', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * edit archive web request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ArchiveWebLifecycleRequest} opts.archiveWebLifecycleRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.editArchiveWebRequest = function(id, opts) {
      return this.editArchiveWebRequestWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * edit change group policy request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeGroupPolicyRequest} opts.changeGroupPolicyRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.editChangeGroupPolicyRequestWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['changeGroupPolicyRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editChangeGroupPolicyRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/changegrouppolicy', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * edit change group policy request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeGroupPolicyRequest} opts.changeGroupPolicyRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.editChangeGroupPolicyRequest = function(id, opts) {
      return this.editChangeGroupPolicyRequestWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * edit change group quota request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeGroupQuotaRequest} opts.changeGroupQuotaRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.editChangeGroupQuotaRequestWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['changeGroupQuotaRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editChangeGroupQuotaRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/changegroupquota', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * edit change group quota request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeGroupQuotaRequest} opts.changeGroupQuotaRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.editChangeGroupQuotaRequest = function(id, opts) {
      return this.editChangeGroupQuotaRequestWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * edit create change group request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeGroupSettingRequest} opts.changeGroupSettingRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.editChangeGroupRequestWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['changeGroupSettingRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editChangeGroupRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/changegroup', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * edit create change group request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeGroupSettingRequest} opts.changeGroupSettingRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.editChangeGroupRequest = function(id, opts) {
      return this.editChangeGroupRequestWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * edit change list setting request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeListSettingRequest} opts.changeListSettingRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.editChangeListSettingRequestWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['changeListSettingRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editChangeListSettingRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/changelistsetting', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * edit change list setting request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeListSettingRequest} opts.changeListSettingRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.editChangeListSettingRequest = function(id, opts) {
      return this.editChangeListSettingRequestWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * edit change permission request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangePermissionRequest} opts.changePermissionRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.editChangePermissionRequestWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['changePermissionRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editChangePermissionRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/changepermission', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * edit change permission request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangePermissionRequest} opts.changePermissionRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.editChangePermissionRequest = function(id, opts) {
      return this.editChangePermissionRequestWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * edit change site administrator/contact request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeSiteContactRequest} opts.changeSiteContactRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.editChangeSiteContactRequestWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['changeSiteContactRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editChangeSiteContactRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/changesite/adminorcontact', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * edit change site administrator/contact request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeSiteContactRequest} opts.changeSiteContactRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.editChangeSiteContactRequest = function(id, opts) {
      return this.editChangeSiteContactRequestWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * edit change site policy request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeSitePolicyRequest} opts.changeSitePolicyRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.editChangeSitePolicyRequestWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['changeSitePolicyRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editChangeSitePolicyRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/changesitepolicy', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * edit change site policy request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeSitePolicyRequest} opts.changeSitePolicyRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.editChangeSitePolicyRequest = function(id, opts) {
      return this.editChangeSitePolicyRequestWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * edit change site quota request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeSiteQuotaRequest} opts.changeSiteQuotaRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.editChangeSiteQuotaRequestWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['changeSiteQuotaRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editChangeSiteQuotaRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/changesitequota', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * edit change site quota request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeSiteQuotaRequest} opts.changeSiteQuotaRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.editChangeSiteQuotaRequest = function(id, opts) {
      return this.editChangeSiteQuotaRequestWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * edit change site setting request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeSiteSettingRequest} opts.changeSiteSettingRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.editChangeSiteSettingRequestWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['changeSiteSettingRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editChangeSiteSettingRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/changesite/setting', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * edit change site setting request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeSiteSettingRequest} opts.changeSiteSettingRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.editChangeSiteSettingRequest = function(id, opts) {
      return this.editChangeSiteSettingRequestWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * edit change web contact request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeWebContactRequest} opts.changeWebContactRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.editChangeWebContactRequestWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['changeWebContactRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editChangeWebContactRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/changewebcontact', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * edit change web contact request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeWebContactRequest} opts.changeWebContactRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.editChangeWebContactRequest = function(id, opts) {
      return this.editChangeWebContactRequestWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * edit change web setting request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeWebSettingRequest} opts.changeWebSettingRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.editChangeWebSettingRequestWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['changeWebSettingRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editChangeWebSettingRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/changewebsettings', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * edit change web setting request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeWebSettingRequest} opts.changeWebSettingRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.editChangeWebSettingRequest = function(id, opts) {
      return this.editChangeWebSettingRequestWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * edit clone permission request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ClonePermissionRequest} opts.clonePermissionRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.editClonePermissionRequestWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['clonePermissionRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editClonePermissionRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/clonepermission', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * edit clone permission request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ClonePermissionRequest} opts.clonePermissionRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.editClonePermissionRequest = function(id, opts) {
      return this.editClonePermissionRequestWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * edit content move request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ContentMoveRequest} opts.contentMoveRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.editContentMoveRequestWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['contentMoveRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editContentMoveRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/contentmove', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * edit content move request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ContentMoveRequest} opts.contentMoveRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.editContentMoveRequest = function(id, opts) {
      return this.editContentMoveRequestWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * edit create site group request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateGroupRequest} opts.createGroupRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.editCreateGroupRequestWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['createGroupRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editCreateGroupRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/creategroup', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * edit create site group request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateGroupRequest} opts.createGroupRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.editCreateGroupRequest = function(id, opts) {
      return this.editCreateGroupRequestWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * edit create list request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateListRequest} opts.createListRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.editCreateListRequestWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['createListRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editCreateListRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/createlist', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * edit create list request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateListRequest} opts.createListRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.editCreateListRequest = function(id, opts) {
      return this.editCreateListRequestWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * edit create site request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateSiteRequest} opts.createSiteRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.editCreateSiteRequestWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['createSiteRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editCreateSiteRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/createsite', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * edit create site request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateSiteRequest} opts.createSiteRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.editCreateSiteRequest = function(id, opts) {
      return this.editCreateSiteRequestWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * edit create web request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateWebRequest} opts.createWebRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.editCreateWebRequestWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['createWebRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editCreateWebRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/createweb', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * edit create web request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateWebRequest} opts.createWebRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.editCreateWebRequest = function(id, opts) {
      return this.editCreateWebRequestWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * edit custom request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiRequest} opts.apiRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.editCustomRequestWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['apiRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editCustomRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/custom', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * edit custom request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiRequest} opts.apiRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.editCustomRequest = function(id, opts) {
      return this.editCustomRequestWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * edit delete change group request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/DeleteGroupRequest} opts.deleteGroupRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.editDeleteGroupRequestWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['deleteGroupRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editDeleteGroupRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/deletegroup', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * edit delete change group request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/DeleteGroupRequest} opts.deleteGroupRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.editDeleteGroupRequest = function(id, opts) {
      return this.editDeleteGroupRequestWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * edit delete site request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/DeleteSiteRequest} opts.deleteSiteRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.editDeleteSiteRequestWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['deleteSiteRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editDeleteSiteRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/deletesite', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * edit delete site request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/DeleteSiteRequest} opts.deleteSiteRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.editDeleteSiteRequest = function(id, opts) {
      return this.editDeleteSiteRequestWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * edit delete web request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/DeleteWebLifecycleRequest} opts.deleteWebLifecycleRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.editDeleteWebRequestWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['deleteWebLifecycleRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editDeleteWebRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/deleteweb', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * edit delete web request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/DeleteWebLifecycleRequest} opts.deleteWebLifecycleRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.editDeleteWebRequest = function(id, opts) {
      return this.editDeleteWebRequestWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * edit extend group request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ExtendGroupRequest} opts.extendGroupRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.editExtendGroupRequestWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['extendGroupRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editExtendGroupRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/extendgroup', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * edit extend group request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ExtendGroupRequest} opts.extendGroupRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.editExtendGroupRequest = function(id, opts) {
      return this.editExtendGroupRequestWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * edit extend site request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ExtendSiteRequest} opts.extendSiteRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.editExtendSiteRequestWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['extendSiteRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editExtendSiteRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/extendsite', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * edit extend site request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ExtendSiteRequest} opts.extendSiteRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.editExtendSiteRequest = function(id, opts) {
      return this.editExtendSiteRequestWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * edit grant permission request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/GrantPermissionRequest} opts.grantPermissionRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.editGrantPermissionRequestWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['grantPermissionRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editGrantPermissionRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/grantpermission', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * edit grant permission request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/GrantPermissionRequest} opts.grantPermissionRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.editGrantPermissionRequest = function(id, opts) {
      return this.editGrantPermissionRequestWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * edit lock site request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/LockSiteRequest} opts.lockSiteRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.editLockSiteRequestWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['lockSiteRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editLockSiteRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/locksite', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * edit lock site request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/LockSiteRequest} opts.lockSiteRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.editLockSiteRequest = function(id, opts) {
      return this.editLockSiteRequestWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * edit manage permission request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ManagePermissionRequest} opts.managePermissionRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.editManagePermissionRequestWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['managePermissionRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editManagePermissionRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/managepermission', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * edit manage permission request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ManagePermissionRequest} opts.managePermissionRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.editManagePermissionRequest = function(id, opts) {
      return this.editManagePermissionRequestWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * edit restore group request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/RestoreGroupRequest} opts.restoreGroupRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.editRestoreGroupRequestWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['restoreGroupRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editRestoreGroupRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/restoregroup', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * edit restore group request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/RestoreGroupRequest} opts.restoreGroupRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.editRestoreGroupRequest = function(id, opts) {
      return this.editRestoreGroupRequestWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * edit unlock site request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/UnlockSiteRequest} opts.unlockSiteRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.editUnLockSiteRequestWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['unlockSiteRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editUnLockSiteRequest");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/unlocksite', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * edit unlock site request in task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/UnlockSiteRequest} opts.unlockSiteRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.editUnLockSiteRequest = function(id, opts) {
      return this.editUnLockSiteRequestWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get change permission report
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.search Search for displayName
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PermissionActionItemPageResult} and HTTP response
     */
    this.getChangePermissionReportWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChangePermissionReport");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'filter': opts['filter'],
        'orderby': opts['orderby'],
        'search': opts['search'],
        'top': opts['top'],
        'skip': opts['skip'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = PermissionActionItemPageResult;
      return this.apiClient.callApi(
        '/tasks/changepermission/{id}/permission', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get change permission report
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.search Search for displayName
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PermissionActionItemPageResult}
     */
    this.getChangePermissionReport = function(id, opts) {
      return this.getChangePermissionReportWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get change permission report with specific version
     * @param {String} id 
     * @param {Number} version 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.search Search for displayName
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PermissionActionItemPageResult} and HTTP response
     */
    this.getChangePermissionReportByVersionWithHttpInfo = function(id, version, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChangePermissionReportByVersion");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getChangePermissionReportByVersion");
      }

      var pathParams = {
        'id': id,
        'version': version
      };
      var queryParams = {
        'filter': opts['filter'],
        'orderby': opts['orderby'],
        'search': opts['search'],
        'top': opts['top'],
        'skip': opts['skip'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = PermissionActionItemPageResult;
      return this.apiClient.callApi(
        '/tasks/changepermission/{id}/permission/{version}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get change permission report with specific version
     * @param {String} id 
     * @param {Number} version 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.search Search for displayName
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PermissionActionItemPageResult}
     */
    this.getChangePermissionReportByVersion = function(id, version, opts) {
      return this.getChangePermissionReportByVersionWithHttpInfo(id, version, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get change permission report filters
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DistinctPageResult} and HTTP response
     */
    this.getChangePermissionReportFiltersWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChangePermissionReportFilters");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'filter': opts['filter'],
        'distinct': opts['distinct'],
        'top': opts['top'],
        'skip': opts['skip'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = DistinctPageResult;
      return this.apiClient.callApi(
        '/tasks/changepermission/{id}/permission/filters', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get change permission report filters
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DistinctPageResult}
     */
    this.getChangePermissionReportFilters = function(id, opts) {
      return this.getChangePermissionReportFiltersWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get change permission report filters with specific version
     * @param {String} id 
     * @param {Number} version 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DistinctPageResult} and HTTP response
     */
    this.getChangePermissionReportFiltersByVersionWithHttpInfo = function(id, version, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChangePermissionReportFiltersByVersion");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getChangePermissionReportFiltersByVersion");
      }

      var pathParams = {
        'id': id,
        'version': version
      };
      var queryParams = {
        'filter': opts['filter'],
        'distinct': opts['distinct'],
        'top': opts['top'],
        'skip': opts['skip'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = DistinctPageResult;
      return this.apiClient.callApi(
        '/tasks/changepermission/{id}/permission/filters/{version}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get change permission report filters with specific version
     * @param {String} id 
     * @param {Number} version 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DistinctPageResult}
     */
    this.getChangePermissionReportFiltersByVersion = function(id, version, opts) {
      return this.getChangePermissionReportFiltersByVersionWithHttpInfo(id, version, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get change permission report filters for a sharepoint group
     * @param {String} id 
     * @param {String} groupid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DistinctPageResult} and HTTP response
     */
    this.getChangePermissionReportFiltersForSPGroupWithHttpInfo = function(id, groupid, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChangePermissionReportFiltersForSPGroup");
      }
      // verify the required parameter 'groupid' is set
      if (groupid === undefined || groupid === null) {
        throw new Error("Missing the required parameter 'groupid' when calling getChangePermissionReportFiltersForSPGroup");
      }

      var pathParams = {
        'id': id,
        'groupid': groupid
      };
      var queryParams = {
        'filter': opts['filter'],
        'distinct': opts['distinct'],
        'top': opts['top'],
        'skip': opts['skip'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = DistinctPageResult;
      return this.apiClient.callApi(
        '/tasks/changepermission/{id}/permission/group/{groupid}/filters', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get change permission report filters for a sharepoint group
     * @param {String} id 
     * @param {String} groupid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DistinctPageResult}
     */
    this.getChangePermissionReportFiltersForSPGroup = function(id, groupid, opts) {
      return this.getChangePermissionReportFiltersForSPGroupWithHttpInfo(id, groupid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get change permission report filters for a sharepoint group with specific version
     * @param {String} id 
     * @param {String} groupid 
     * @param {Number} version 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DistinctPageResult} and HTTP response
     */
    this.getChangePermissionReportFiltersForSPGroupByVersionWithHttpInfo = function(id, groupid, version, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChangePermissionReportFiltersForSPGroupByVersion");
      }
      // verify the required parameter 'groupid' is set
      if (groupid === undefined || groupid === null) {
        throw new Error("Missing the required parameter 'groupid' when calling getChangePermissionReportFiltersForSPGroupByVersion");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getChangePermissionReportFiltersForSPGroupByVersion");
      }

      var pathParams = {
        'id': id,
        'groupid': groupid,
        'version': version
      };
      var queryParams = {
        'filter': opts['filter'],
        'distinct': opts['distinct'],
        'top': opts['top'],
        'skip': opts['skip'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = DistinctPageResult;
      return this.apiClient.callApi(
        '/tasks/changepermission/{id}/permission/group/{groupid}/filters/{version}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get change permission report filters for a sharepoint group with specific version
     * @param {String} id 
     * @param {String} groupid 
     * @param {Number} version 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DistinctPageResult}
     */
    this.getChangePermissionReportFiltersForSPGroupByVersion = function(id, groupid, version, opts) {
      return this.getChangePermissionReportFiltersForSPGroupByVersionWithHttpInfo(id, groupid, version, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get change permission report for a sharepoint group
     * @param {String} id 
     * @param {String} groupid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.search Search for displayName
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PermissionActionItemPageResult} and HTTP response
     */
    this.getChangePermissionReportForSPGroupWithHttpInfo = function(id, groupid, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChangePermissionReportForSPGroup");
      }
      // verify the required parameter 'groupid' is set
      if (groupid === undefined || groupid === null) {
        throw new Error("Missing the required parameter 'groupid' when calling getChangePermissionReportForSPGroup");
      }

      var pathParams = {
        'id': id,
        'groupid': groupid
      };
      var queryParams = {
        'filter': opts['filter'],
        'orderby': opts['orderby'],
        'search': opts['search'],
        'top': opts['top'],
        'skip': opts['skip'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = PermissionActionItemPageResult;
      return this.apiClient.callApi(
        '/tasks/changepermission/{id}/permission/group/{groupid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get change permission report for a sharepoint group
     * @param {String} id 
     * @param {String} groupid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.search Search for displayName
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PermissionActionItemPageResult}
     */
    this.getChangePermissionReportForSPGroup = function(id, groupid, opts) {
      return this.getChangePermissionReportForSPGroupWithHttpInfo(id, groupid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get change permission report for a sharepoint group with specific version
     * @param {String} id 
     * @param {Number} version 
     * @param {String} groupid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.search Search for displayName
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PermissionActionItemPageResult} and HTTP response
     */
    this.getChangePermissionReportForSPGroupByVersionWithHttpInfo = function(id, version, groupid, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChangePermissionReportForSPGroupByVersion");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getChangePermissionReportForSPGroupByVersion");
      }
      // verify the required parameter 'groupid' is set
      if (groupid === undefined || groupid === null) {
        throw new Error("Missing the required parameter 'groupid' when calling getChangePermissionReportForSPGroupByVersion");
      }

      var pathParams = {
        'id': id,
        'version': version,
        'groupid': groupid
      };
      var queryParams = {
        'filter': opts['filter'],
        'orderby': opts['orderby'],
        'search': opts['search'],
        'top': opts['top'],
        'skip': opts['skip'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = PermissionActionItemPageResult;
      return this.apiClient.callApi(
        '/tasks/changepermission/{id}/permission/{version}/group/{groupid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get change permission report for a sharepoint group with specific version
     * @param {String} id 
     * @param {Number} version 
     * @param {String} groupid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.search Search for displayName
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PermissionActionItemPageResult}
     */
    this.getChangePermissionReportForSPGroupByVersion = function(id, version, groupid, opts) {
      return this.getChangePermissionReportForSPGroupByVersionWithHttpInfo(id, version, groupid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get change permission report permission levels
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PermissionLevel>} and HTTP response
     */
    this.getChangePermissionReportPermissionLevelsWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChangePermissionReportPermissionLevels");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = [PermissionLevel];
      return this.apiClient.callApi(
        '/tasks/changepermission/{id}/permissionlevels', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get change permission report permission levels
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PermissionLevel>}
     */
    this.getChangePermissionReportPermissionLevels = function(id) {
      return this.getChangePermissionReportPermissionLevelsWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get change permission report properties
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RecertificationReportProperties} and HTTP response
     */
    this.getChangePermissionReportPropertiesWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChangePermissionReportProperties");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = RecertificationReportProperties;
      return this.apiClient.callApi(
        '/tasks/changepermission/{id}/properties', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get change permission report properties
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RecertificationReportProperties}
     */
    this.getChangePermissionReportProperties = function(id) {
      return this.getChangePermissionReportPropertiesWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get clone permission report
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, displayName, identityName, objectUrl, objectTitle, objectType, accountType, sharePointGroup, permissionLevels, action
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, displayName, identityName, objectUrl, objectTitle, objectType, accountType, sharePointGroup, permissionLevels, action
     * @param {String} opts.search Search for 
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClonePermissionSecuritySearchResultPageResult} and HTTP response
     */
    this.getClonePermissionReportWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getClonePermissionReport");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'filter': opts['filter'],
        'orderby': opts['orderby'],
        'search': opts['search'],
        'top': opts['top'],
        'skip': opts['skip'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ClonePermissionSecuritySearchResultPageResult;
      return this.apiClient.callApi(
        '/tasks/clonepermission/{id}/permission', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get clone permission report
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, displayName, identityName, objectUrl, objectTitle, objectType, accountType, sharePointGroup, permissionLevels, action
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, displayName, identityName, objectUrl, objectTitle, objectType, accountType, sharePointGroup, permissionLevels, action
     * @param {String} opts.search Search for 
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClonePermissionSecuritySearchResultPageResult}
     */
    this.getClonePermissionReport = function(id, opts) {
      return this.getClonePermissionReportWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get clone permission report properties
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClonePermissionReportProperty} and HTTP response
     */
    this.getClonePermissionReportPropertiesWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getClonePermissionReportProperties");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ClonePermissionReportProperty;
      return this.apiClient.callApi(
        '/tasks/clonepermission/{id}/properties', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get clone permission report properties
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClonePermissionReportProperty}
     */
    this.getClonePermissionReportProperties = function(id) {
      return this.getClonePermissionReportPropertiesWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get manual archive report
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> rowKey, partitionKey, siteId, url, nodeType
     * @param {String} opts.orderby Order by one field, supported fields:<br/> rowKey, partitionKey, siteId, url, nodeType
     * @param {String} opts.search Search for url
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ManuallyArchiveRecordModelPageResult} and HTTP response
     */
    this.getGetManualArchiveReportWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGetManualArchiveReport");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'filter': opts['filter'],
        'orderby': opts['orderby'],
        'search': opts['search'],
        'top': opts['top'],
        'skip': opts['skip'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ManuallyArchiveRecordModelPageResult;
      return this.apiClient.callApi(
        '/tasks/{id}/manualarchive', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get manual archive report
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> rowKey, partitionKey, siteId, url, nodeType
     * @param {String} opts.orderby Order by one field, supported fields:<br/> rowKey, partitionKey, siteId, url, nodeType
     * @param {String} opts.search Search for url
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ManuallyArchiveRecordModelPageResult}
     */
    this.getGetManualArchiveReport = function(id, opts) {
      return this.getGetManualArchiveReportWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get manual archive report filters
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> rowKey, partitionKey, siteId, url, nodeType
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> rowKey, partitionKey, siteId, url, nodeType
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DistinctPageResult} and HTTP response
     */
    this.getGetManualArchiveReportFiltersWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGetManualArchiveReportFilters");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'filter': opts['filter'],
        'distinct': opts['distinct'],
        'top': opts['top'],
        'skip': opts['skip'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = DistinctPageResult;
      return this.apiClient.callApi(
        '/tasks/{id}/manualarchive/filters', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get manual archive report filters
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> rowKey, partitionKey, siteId, url, nodeType
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> rowKey, partitionKey, siteId, url, nodeType
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DistinctPageResult}
     */
    this.getGetManualArchiveReportFilters = function(id, opts) {
      return this.getGetManualArchiveReportFiltersWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get group membership recertification report
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType
     * @param {String} opts.search Search for user
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MembershipRecertificationItemPageResult} and HTTP response
     */
    this.getGroupMembershipRecertificationReportWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGroupMembershipRecertificationReport");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'filter': opts['filter'],
        'orderby': opts['orderby'],
        'search': opts['search'],
        'top': opts['top'],
        'skip': opts['skip'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = MembershipRecertificationItemPageResult;
      return this.apiClient.callApi(
        '/tasks/{id}/group/recertification/membership', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get group membership recertification report
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType
     * @param {String} opts.search Search for user
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MembershipRecertificationItemPageResult}
     */
    this.getGroupMembershipRecertificationReport = function(id, opts) {
      return this.getGroupMembershipRecertificationReportWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get group membership recertification report by version
     * @param {String} id 
     * @param {Number} version 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType
     * @param {String} opts.search Search for user
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MembershipRecertificationItemPageResult} and HTTP response
     */
    this.getGroupMembershipRecertificationReportByVersionWithHttpInfo = function(id, version, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGroupMembershipRecertificationReportByVersion");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getGroupMembershipRecertificationReportByVersion");
      }

      var pathParams = {
        'id': id,
        'version': version
      };
      var queryParams = {
        'filter': opts['filter'],
        'orderby': opts['orderby'],
        'search': opts['search'],
        'top': opts['top'],
        'skip': opts['skip'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = MembershipRecertificationItemPageResult;
      return this.apiClient.callApi(
        '/tasks/{id}/group/recertification/membership/{version}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get group membership recertification report by version
     * @param {String} id 
     * @param {Number} version 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType
     * @param {String} opts.search Search for user
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MembershipRecertificationItemPageResult}
     */
    this.getGroupMembershipRecertificationReportByVersion = function(id, version, opts) {
      return this.getGroupMembershipRecertificationReportByVersionWithHttpInfo(id, version, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get group membership recertification report filters
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DistinctPageResult} and HTTP response
     */
    this.getGroupMembershipRecertificationReportFiltersWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGroupMembershipRecertificationReportFilters");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'filter': opts['filter'],
        'distinct': opts['distinct'],
        'top': opts['top'],
        'skip': opts['skip'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = DistinctPageResult;
      return this.apiClient.callApi(
        '/tasks/{id}/group/recertification/membership/filters', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get group membership recertification report filters
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DistinctPageResult}
     */
    this.getGroupMembershipRecertificationReportFilters = function(id, opts) {
      return this.getGroupMembershipRecertificationReportFiltersWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get group membership recertification report filters by version
     * @param {String} id 
     * @param {Number} version 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DistinctPageResult} and HTTP response
     */
    this.getGroupMembershipRecertificationReportFiltersByVersionWithHttpInfo = function(id, version, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGroupMembershipRecertificationReportFiltersByVersion");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getGroupMembershipRecertificationReportFiltersByVersion");
      }

      var pathParams = {
        'id': id,
        'version': version
      };
      var queryParams = {
        'filter': opts['filter'],
        'distinct': opts['distinct'],
        'top': opts['top'],
        'skip': opts['skip'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = DistinctPageResult;
      return this.apiClient.callApi(
        '/tasks/{id}/group/recertification/membership/filters/{version}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get group membership recertification report filters by version
     * @param {String} id 
     * @param {Number} version 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> id, instanceId, type, taskId, action, user, userDisplayName, membershipType, accessType
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DistinctPageResult}
     */
    this.getGroupMembershipRecertificationReportFiltersByVersion = function(id, version, opts) {
      return this.getGroupMembershipRecertificationReportFiltersByVersionWithHttpInfo(id, version, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get group membership recertification report properties
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MembershipRecertificationReportProperties} and HTTP response
     */
    this.getGroupMembershipRecertificationReportPropertiesWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGroupMembershipRecertificationReportProperties");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = MembershipRecertificationReportProperties;
      return this.apiClient.callApi(
        '/tasks/{id}/group/recertification/membership/properties', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get group membership recertification report properties
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MembershipRecertificationReportProperties}
     */
    this.getGroupMembershipRecertificationReportProperties = function(id) {
      return this.getGroupMembershipRecertificationReportPropertiesWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get group permission recertification report
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType
     * @param {String} opts.search Search for displayName
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GroupPermissionActionItemPageResult} and HTTP response
     */
    this.getGroupPermissionRecertificationReportWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGroupPermissionRecertificationReport");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'filter': opts['filter'],
        'orderby': opts['orderby'],
        'search': opts['search'],
        'top': opts['top'],
        'skip': opts['skip'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = GroupPermissionActionItemPageResult;
      return this.apiClient.callApi(
        '/tasks/{id}/group/recertification/permission', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get group permission recertification report
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType
     * @param {String} opts.search Search for displayName
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GroupPermissionActionItemPageResult}
     */
    this.getGroupPermissionRecertificationReport = function(id, opts) {
      return this.getGroupPermissionRecertificationReportWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get group permission recertification report by version
     * @param {String} id 
     * @param {Number} version 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType
     * @param {String} opts.search Search for displayName
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GroupPermissionActionItemPageResult} and HTTP response
     */
    this.getGroupPermissionRecertificationReportByVersionWithHttpInfo = function(id, version, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGroupPermissionRecertificationReportByVersion");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getGroupPermissionRecertificationReportByVersion");
      }

      var pathParams = {
        'id': id,
        'version': version
      };
      var queryParams = {
        'filter': opts['filter'],
        'orderby': opts['orderby'],
        'search': opts['search'],
        'top': opts['top'],
        'skip': opts['skip'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = GroupPermissionActionItemPageResult;
      return this.apiClient.callApi(
        '/tasks/{id}/group/recertification/permission/{version}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get group permission recertification report by version
     * @param {String} id 
     * @param {Number} version 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType
     * @param {String} opts.search Search for displayName
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GroupPermissionActionItemPageResult}
     */
    this.getGroupPermissionRecertificationReportByVersion = function(id, version, opts) {
      return this.getGroupPermissionRecertificationReportByVersionWithHttpInfo(id, version, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get group permission recertification report filters
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DistinctPageResult} and HTTP response
     */
    this.getGroupPermissionRecertificationReportFiltersWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGroupPermissionRecertificationReportFilters");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'filter': opts['filter'],
        'distinct': opts['distinct'],
        'top': opts['top'],
        'skip': opts['skip'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = DistinctPageResult;
      return this.apiClient.callApi(
        '/tasks/{id}/group/recertification/permission/filters', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get group permission recertification report filters
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DistinctPageResult}
     */
    this.getGroupPermissionRecertificationReportFilters = function(id, opts) {
      return this.getGroupPermissionRecertificationReportFiltersWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get group permission recertification report filters for sharepoint group
     * @param {String} id 
     * @param {String} groupid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DistinctPageResult} and HTTP response
     */
    this.getGroupPermissionRecertificationReportFiltersForSPGroupWithHttpInfo = function(id, groupid, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGroupPermissionRecertificationReportFiltersForSPGroup");
      }
      // verify the required parameter 'groupid' is set
      if (groupid === undefined || groupid === null) {
        throw new Error("Missing the required parameter 'groupid' when calling getGroupPermissionRecertificationReportFiltersForSPGroup");
      }

      var pathParams = {
        'id': id,
        'groupid': groupid
      };
      var queryParams = {
        'filter': opts['filter'],
        'distinct': opts['distinct'],
        'top': opts['top'],
        'skip': opts['skip'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = DistinctPageResult;
      return this.apiClient.callApi(
        '/tasks/{id}/group/recertification/permission/group/{groupid}/filters', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get group permission recertification report filters for sharepoint group
     * @param {String} id 
     * @param {String} groupid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DistinctPageResult}
     */
    this.getGroupPermissionRecertificationReportFiltersForSPGroup = function(id, groupid, opts) {
      return this.getGroupPermissionRecertificationReportFiltersForSPGroupWithHttpInfo(id, groupid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get group permission recertification report for sharepoint group
     * @param {String} id 
     * @param {String} groupid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType
     * @param {String} opts.search Search for displayName
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GroupPermissionActionItemPageResult} and HTTP response
     */
    this.getGroupPermissionRecertificationReportForSPGroupWithHttpInfo = function(id, groupid, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGroupPermissionRecertificationReportForSPGroup");
      }
      // verify the required parameter 'groupid' is set
      if (groupid === undefined || groupid === null) {
        throw new Error("Missing the required parameter 'groupid' when calling getGroupPermissionRecertificationReportForSPGroup");
      }

      var pathParams = {
        'id': id,
        'groupid': groupid
      };
      var queryParams = {
        'filter': opts['filter'],
        'orderby': opts['orderby'],
        'search': opts['search'],
        'top': opts['top'],
        'skip': opts['skip'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = GroupPermissionActionItemPageResult;
      return this.apiClient.callApi(
        '/tasks/{id}/group/recertification/permission/group/{groupid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get group permission recertification report for sharepoint group
     * @param {String} id 
     * @param {String} groupid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, instanceId, type, taskId, displayName, identityName, permissionLevel, titleName, path, sharePointGroup, parentId, idInSharepoint, level, accountType, accessType
     * @param {String} opts.search Search for displayName
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GroupPermissionActionItemPageResult}
     */
    this.getGroupPermissionRecertificationReportForSPGroup = function(id, groupid, opts) {
      return this.getGroupPermissionRecertificationReportForSPGroupWithHttpInfo(id, groupid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get group permission recertification report properties
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RecertificationReportProperties} and HTTP response
     */
    this.getGroupPermissionRecertificationReportPropertiesWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGroupPermissionRecertificationReportProperties");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = RecertificationReportProperties;
      return this.apiClient.callApi(
        '/tasks/{id}/group/recertification/permission/properties', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get group permission recertification report properties
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RecertificationReportProperties}
     */
    this.getGroupPermissionRecertificationReportProperties = function(id) {
      return this.getGroupPermissionRecertificationReportPropertiesWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get my task filters
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.isconfirmtask  (default to false)
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, title, requester, requestTicketNumber, requesterDisplayName, dueDate, serviceType, createdTime, taskType, status
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> id, title, requester, requestTicketNumber, requesterDisplayName, dueDate, serviceType, createdTime, taskType, status
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DistinctPageResult} and HTTP response
     */
    this.getMyTaskFiltersWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
        'isconfirmtask': opts['isconfirmtask'],
        'filter': opts['filter'],
        'distinct': opts['distinct'],
        'top': opts['top'],
        'skip': opts['skip'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = DistinctPageResult;
      return this.apiClient.callApi(
        '/tasks/my/filters', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get my task filters
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.isconfirmtask  (default to false)
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, title, requester, requestTicketNumber, requesterDisplayName, dueDate, serviceType, createdTime, taskType, status
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> id, title, requester, requestTicketNumber, requesterDisplayName, dueDate, serviceType, createdTime, taskType, status
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DistinctPageResult}
     */
    this.getMyTaskFilters = function(opts) {
      return this.getMyTaskFiltersWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get my tasks
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.isconfirmtask  (default to false)
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, title, requester, requestTicketNumber, requesterDisplayName, dueDate, serviceType, createdTime, taskType, status
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, title, requester, requestTicketNumber, requesterDisplayName, dueDate, serviceType, createdTime, taskType, status
     * @param {String} opts.search Search for title
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TaskListPageResult} and HTTP response
     */
    this.getMyTasksWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
        'isconfirmtask': opts['isconfirmtask'],
        'filter': opts['filter'],
        'orderby': opts['orderby'],
        'search': opts['search'],
        'top': opts['top'],
        'skip': opts['skip'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = TaskListPageResult;
      return this.apiClient.callApi(
        '/tasks/my', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get my tasks
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.isconfirmtask  (default to false)
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, title, requester, requestTicketNumber, requesterDisplayName, dueDate, serviceType, createdTime, taskType, status
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, title, requester, requestTicketNumber, requesterDisplayName, dueDate, serviceType, createdTime, taskType, status
     * @param {String} opts.search Search for title
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TaskListPageResult}
     */
    this.getMyTasks = function(opts) {
      return this.getMyTasksWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get remove permission report
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, displayName, identityName, objectUrl, objectTitle, objectType, accountType, sharePointGroup, permissionLevels, action
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, displayName, identityName, objectUrl, objectTitle, objectType, accountType, sharePointGroup, permissionLevels, action
     * @param {String} opts.search Search for 
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SecuritySearchResultPageResult} and HTTP response
     */
    this.getRemovePermissionReportWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRemovePermissionReport");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'filter': opts['filter'],
        'orderby': opts['orderby'],
        'search': opts['search'],
        'top': opts['top'],
        'skip': opts['skip'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = SecuritySearchResultPageResult;
      return this.apiClient.callApi(
        '/tasks/removepermission/{id}/permission', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get remove permission report
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, displayName, identityName, objectUrl, objectTitle, objectType, accountType, sharePointGroup, permissionLevels, action
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, displayName, identityName, objectUrl, objectTitle, objectType, accountType, sharePointGroup, permissionLevels, action
     * @param {String} opts.search Search for 
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SecuritySearchResultPageResult}
     */
    this.getRemovePermissionReport = function(id, opts) {
      return this.getRemovePermissionReportWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get remove permission report properties
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RecertificationReportProperties} and HTTP response
     */
    this.getRemovePermissionReportPropertiesWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRemovePermissionReportProperties");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = RecertificationReportProperties;
      return this.apiClient.callApi(
        '/tasks/removepermission/{id}/properties', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get remove permission report properties
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RecertificationReportProperties}
     */
    this.getRemovePermissionReportProperties = function(id) {
      return this.getRemovePermissionReportPropertiesWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get site metadata recertification metadata
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/CustomMetadata>} and HTTP response
     */
    this.getSiteMetadataRecertificationReportWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSiteMetadataRecertificationReport");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = [CustomMetadata];
      return this.apiClient.callApi(
        '/tasks/{id}/site/recertification/metadata', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get site metadata recertification metadata
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/CustomMetadata>}
     */
    this.getSiteMetadataRecertificationReport = function(id) {
      return this.getSiteMetadataRecertificationReportWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get site metadata recertification report properties
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MetadataRecertificationReportProperties} and HTTP response
     */
    this.getSiteMetadataRecertificationReportPropertiesWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSiteMetadataRecertificationReportProperties");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = MetadataRecertificationReportProperties;
      return this.apiClient.callApi(
        '/tasks/{id}/site/recertification/metadata/properties', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get site metadata recertification report properties
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MetadataRecertificationReportProperties}
     */
    this.getSiteMetadataRecertificationReportProperties = function(id) {
      return this.getSiteMetadataRecertificationReportPropertiesWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get site ownership recertification report properties
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RecertificationReportProperties} and HTTP response
     */
    this.getSiteOwnershipRecertificationReportPropertiesWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSiteOwnershipRecertificationReportProperties");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = RecertificationReportProperties;
      return this.apiClient.callApi(
        '/tasks/{id}/site/recertification/ownership/properties', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get site ownership recertification report properties
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RecertificationReportProperties}
     */
    this.getSiteOwnershipRecertificationReportProperties = function(id) {
      return this.getSiteOwnershipRecertificationReportPropertiesWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get site permission recertification permission filters
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DistinctPageResult} and HTTP response
     */
    this.getSitePermissionRecertificatioPermissionFiltersWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSitePermissionRecertificatioPermissionFilters");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'filter': opts['filter'],
        'distinct': opts['distinct'],
        'top': opts['top'],
        'skip': opts['skip'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = DistinctPageResult;
      return this.apiClient.callApi(
        '/tasks/{id}/site/recertification/permission/filters', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get site permission recertification permission filters
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DistinctPageResult}
     */
    this.getSitePermissionRecertificatioPermissionFilters = function(id, opts) {
      return this.getSitePermissionRecertificatioPermissionFiltersWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get site permission recertification permission filters with specific version
     * @param {String} id 
     * @param {Number} version 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DistinctPageResult} and HTTP response
     */
    this.getSitePermissionRecertificatioReportFiltersByVersionWithHttpInfo = function(id, version, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSitePermissionRecertificatioReportFiltersByVersion");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getSitePermissionRecertificatioReportFiltersByVersion");
      }

      var pathParams = {
        'id': id,
        'version': version
      };
      var queryParams = {
        'filter': opts['filter'],
        'distinct': opts['distinct'],
        'top': opts['top'],
        'skip': opts['skip'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = DistinctPageResult;
      return this.apiClient.callApi(
        '/tasks/{id}/site/recertification/permission/filters/{version}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get site permission recertification permission filters with specific version
     * @param {String} id 
     * @param {Number} version 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DistinctPageResult}
     */
    this.getSitePermissionRecertificatioReportFiltersByVersion = function(id, version, opts) {
      return this.getSitePermissionRecertificatioReportFiltersByVersionWithHttpInfo(id, version, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} id 
     * @param {String} groupid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DistinctPageResult} and HTTP response
     */
    this.getSitePermissionRecertificatioReportFiltersForSPGroupWithHttpInfo = function(id, groupid, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSitePermissionRecertificatioReportFiltersForSPGroup");
      }
      // verify the required parameter 'groupid' is set
      if (groupid === undefined || groupid === null) {
        throw new Error("Missing the required parameter 'groupid' when calling getSitePermissionRecertificatioReportFiltersForSPGroup");
      }

      var pathParams = {
        'id': id,
        'groupid': groupid
      };
      var queryParams = {
        'filter': opts['filter'],
        'distinct': opts['distinct'],
        'top': opts['top'],
        'skip': opts['skip'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = DistinctPageResult;
      return this.apiClient.callApi(
        '/tasks/{id}/site/recertification/permission/group/{groupid}/filters', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} id 
     * @param {String} groupid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DistinctPageResult}
     */
    this.getSitePermissionRecertificatioReportFiltersForSPGroup = function(id, groupid, opts) {
      return this.getSitePermissionRecertificatioReportFiltersForSPGroupWithHttpInfo(id, groupid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} id 
     * @param {String} groupid 
     * @param {Number} version 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DistinctPageResult} and HTTP response
     */
    this.getSitePermissionRecertificatioReportFiltersForSPGroupByVersionWithHttpInfo = function(id, groupid, version, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSitePermissionRecertificatioReportFiltersForSPGroupByVersion");
      }
      // verify the required parameter 'groupid' is set
      if (groupid === undefined || groupid === null) {
        throw new Error("Missing the required parameter 'groupid' when calling getSitePermissionRecertificatioReportFiltersForSPGroupByVersion");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getSitePermissionRecertificatioReportFiltersForSPGroupByVersion");
      }

      var pathParams = {
        'id': id,
        'groupid': groupid,
        'version': version
      };
      var queryParams = {
        'filter': opts['filter'],
        'distinct': opts['distinct'],
        'top': opts['top'],
        'skip': opts['skip'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = DistinctPageResult;
      return this.apiClient.callApi(
        '/tasks/{id}/site/recertification/permission/group/{groupid}/filters/{version}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} id 
     * @param {String} groupid 
     * @param {Number} version 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.distinct Get the unique values for one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DistinctPageResult}
     */
    this.getSitePermissionRecertificatioReportFiltersForSPGroupByVersion = function(id, groupid, version, opts) {
      return this.getSitePermissionRecertificatioReportFiltersForSPGroupByVersionWithHttpInfo(id, groupid, version, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get site permission recertification permission levels
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PermissionLevel>} and HTTP response
     */
    this.getSitePermissionRecertificationPermissionLevelsWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSitePermissionRecertificationPermissionLevels");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = [PermissionLevel];
      return this.apiClient.callApi(
        '/tasks/{id}/recertification/permissionlevels', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get site permission recertification permission levels
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PermissionLevel>}
     */
    this.getSitePermissionRecertificationPermissionLevels = function(id) {
      return this.getSitePermissionRecertificationPermissionLevelsWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get site permission recertification report
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.search Search for displayName
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PermissionActionItemPageResult} and HTTP response
     */
    this.getSitePermissionRecertificationReportWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSitePermissionRecertificationReport");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'filter': opts['filter'],
        'orderby': opts['orderby'],
        'search': opts['search'],
        'top': opts['top'],
        'skip': opts['skip'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = PermissionActionItemPageResult;
      return this.apiClient.callApi(
        '/tasks/{id}/site/recertification/permission', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get site permission recertification report
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.search Search for displayName
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PermissionActionItemPageResult}
     */
    this.getSitePermissionRecertificationReport = function(id, opts) {
      return this.getSitePermissionRecertificationReportWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get site permission recertification report by specific version
     * @param {String} id 
     * @param {Number} version 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.search Search for displayName
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PermissionActionItemPageResult} and HTTP response
     */
    this.getSitePermissionRecertificationReportByVersionWithHttpInfo = function(id, version, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSitePermissionRecertificationReportByVersion");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getSitePermissionRecertificationReportByVersion");
      }

      var pathParams = {
        'id': id,
        'version': version
      };
      var queryParams = {
        'filter': opts['filter'],
        'orderby': opts['orderby'],
        'search': opts['search'],
        'top': opts['top'],
        'skip': opts['skip'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = PermissionActionItemPageResult;
      return this.apiClient.callApi(
        '/tasks/{id}/site/recertification/permission/{version}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get site permission recertification report by specific version
     * @param {String} id 
     * @param {Number} version 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.search Search for displayName
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PermissionActionItemPageResult}
     */
    this.getSitePermissionRecertificationReportByVersion = function(id, version, opts) {
      return this.getSitePermissionRecertificationReportByVersionWithHttpInfo(id, version, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get site permission recertification group permission items
     * @param {String} id 
     * @param {String} groupid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.search Search for displayName
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PermissionActionItemPageResult} and HTTP response
     */
    this.getSitePermissionRecertificationReportForSPGroupWithHttpInfo = function(id, groupid, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSitePermissionRecertificationReportForSPGroup");
      }
      // verify the required parameter 'groupid' is set
      if (groupid === undefined || groupid === null) {
        throw new Error("Missing the required parameter 'groupid' when calling getSitePermissionRecertificationReportForSPGroup");
      }

      var pathParams = {
        'id': id,
        'groupid': groupid
      };
      var queryParams = {
        'filter': opts['filter'],
        'orderby': opts['orderby'],
        'search': opts['search'],
        'top': opts['top'],
        'skip': opts['skip'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = PermissionActionItemPageResult;
      return this.apiClient.callApi(
        '/tasks/{id}/site/recertification/permission/group/{groupid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get site permission recertification group permission items
     * @param {String} id 
     * @param {String} groupid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.search Search for displayName
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PermissionActionItemPageResult}
     */
    this.getSitePermissionRecertificationReportForSPGroup = function(id, groupid, opts) {
      return this.getSitePermissionRecertificationReportForSPGroupWithHttpInfo(id, groupid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get site permission recertification group permission items with specific version with specific version
     * @param {String} id 
     * @param {Number} version 
     * @param {String} groupid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.search Search for displayName
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PermissionActionItemPageResult} and HTTP response
     */
    this.getSitePermissionRecertificationReportForSPGroupByVersionWithHttpInfo = function(id, version, groupid, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSitePermissionRecertificationReportForSPGroupByVersion");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getSitePermissionRecertificationReportForSPGroupByVersion");
      }
      // verify the required parameter 'groupid' is set
      if (groupid === undefined || groupid === null) {
        throw new Error("Missing the required parameter 'groupid' when calling getSitePermissionRecertificationReportForSPGroupByVersion");
      }

      var pathParams = {
        'id': id,
        'version': version,
        'groupid': groupid
      };
      var queryParams = {
        'filter': opts['filter'],
        'orderby': opts['orderby'],
        'search': opts['search'],
        'top': opts['top'],
        'skip': opts['skip'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = PermissionActionItemPageResult;
      return this.apiClient.callApi(
        '/tasks/{id}/site/recertification/permission/{version}/group/{groupid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get site permission recertification group permission items with specific version with specific version
     * @param {String} id 
     * @param {Number} version 
     * @param {String} groupid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Use **eq**(equal) or **ne**(not equal) to filter the results (e.g. field1 eq 'value1' and field2 ne 'value2'), supported fields :<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.orderby Order by one field, supported fields:<br/> id, idInSharepoint, accountType, displayName, level, memberOf, path, permissionLevel, sharePointGroup, titleName, userOrGroup, memberId, parentId, parentAccountType, actionType, accessType, isSiteAdministrator
     * @param {String} opts.search Search for displayName
     * @param {Number} opts.top  Define the number of records you want to return, max value is 200, default value is 200
     * @param {Number} opts.skip  Define the number of records you want to skip, default value is 0
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PermissionActionItemPageResult}
     */
    this.getSitePermissionRecertificationReportForSPGroupByVersion = function(id, version, groupid, opts) {
      return this.getSitePermissionRecertificationReportForSPGroupByVersionWithHttpInfo(id, version, groupid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get site permission recertification report properties
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RecertificationReportProperties} and HTTP response
     */
    this.getSitePermissionRecertificationReportPropertiesWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSitePermissionRecertificationReportProperties");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = RecertificationReportProperties;
      return this.apiClient.callApi(
        '/tasks/{id}/site/recertification/permission/properties', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get site permission recertification report properties
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RecertificationReportProperties}
     */
    this.getSitePermissionRecertificationReportProperties = function(id) {
      return this.getSitePermissionRecertificationReportPropertiesWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get task by batch id
     * @param {String} batchid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TaskList} and HTTP response
     */
    this.getTaskByBatchIdWithHttpInfo = function(batchid) {
      var postBody = null;
      // verify the required parameter 'batchid' is set
      if (batchid === undefined || batchid === null) {
        throw new Error("Missing the required parameter 'batchid' when calling getTaskByBatchId");
      }

      var pathParams = {
        'batchid': batchid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = TaskList;
      return this.apiClient.callApi(
        '/tasks/my/{batchid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get task by batch id
     * @param {String} batchid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TaskList}
     */
    this.getTaskByBatchId = function(batchid) {
      return this.getTaskByBatchIdWithHttpInfo(batchid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get my task by id
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiTask} and HTTP response
     */
    this.getTaskByIdWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTaskById");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ApiTask;
      return this.apiClient.callApi(
        '/tasks/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get my task by id
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiTask}
     */
    this.getTaskById = function(id) {
      return this.getTaskByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * promote as owners for group membership recertification
     * @param {String} id 
     * @param {Array.<module:model/ApiUser>} apiUser 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.promoteAsOwnersForGroupMembershipRecertificationWithHttpInfo = function(id, apiUser) {
      var postBody = apiUser;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling promoteAsOwnersForGroupMembershipRecertification");
      }
      // verify the required parameter 'apiUser' is set
      if (apiUser === undefined || apiUser === null) {
        throw new Error("Missing the required parameter 'apiUser' when calling promoteAsOwnersForGroupMembershipRecertification");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/group/recertification/membership/promoteasowner', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * promote as owners for group membership recertification
     * @param {String} id 
     * @param {Array.<module:model/ApiUser>} apiUser 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.promoteAsOwnersForGroupMembershipRecertification = function(id, apiUser) {
      return this.promoteAsOwnersForGroupMembershipRecertificationWithHttpInfo(id, apiUser)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * reassign task
     * @param {String} id 
     * @param {String} user 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.reassignTaskWithHttpInfo = function(id, user) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reassignTask");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling reassignTask");
      }

      var pathParams = {
        'id': id,
        'user': user
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/reassignto/{user}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * reassign task
     * @param {String} id 
     * @param {String} user 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.reassignTask = function(id, user) {
      return this.reassignTaskWithHttpInfo(id, user)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * reject task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/CommentsParam} opts.commentsParam 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.rejectTaskWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['commentsParam'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling rejectTask");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/reject', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * reject task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/CommentsParam} opts.commentsParam 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.rejectTask = function(id, opts) {
      return this.rejectTaskWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * remove users for group membership recertification
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.removeUsersForGroupMembershipRecertificationWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['requestBody'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeUsersForGroupMembershipRecertification");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/group/recertification/membership/removeuser', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * remove users for group membership recertification
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.removeUsersForGroupMembershipRecertification = function(id, opts) {
      return this.removeUsersForGroupMembershipRecertificationWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * save all changes for change permission task
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.reseAllChangesForChangePermissionTaskWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reseAllChangesForChangePermissionTask");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/changepermission/{id}/resetallchange', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * save all changes for change permission task
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.reseAllChangesForChangePermissionTask = function(id) {
      return this.reseAllChangesForChangePermissionTaskWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * reset all changes for site/group recertification task
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.resetAllChangesForRecertificationTaskWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling resetAllChangesForRecertificationTask");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/recertification/resetallchange', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * reset all changes for site/group recertification task
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.resetAllChangesForRecertificationTask = function(id) {
      return this.resetAllChangesForRecertificationTaskWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * save my changes for change permission task
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.resetMyChangesForChangePermissionTaskWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling resetMyChangesForChangePermissionTask");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/changepermission/{id}/resetmychange', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * save my changes for change permission task
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.resetMyChangesForChangePermissionTask = function(id) {
      return this.resetMyChangesForChangePermissionTaskWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * reset my changes for site/group recertification task
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.resetMyChangesForRecertificationTaskWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling resetMyChangesForRecertificationTask");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/recertification/resetmychange', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * reset my changes for site/group recertification task
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.resetMyChangesForRecertificationTask = function(id) {
      return this.resetMyChangesForRecertificationTaskWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * retry error task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/CommentsParam} opts.commentsParam 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.retryErrorTaskWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['commentsParam'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling retryErrorTask");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/retry', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * retry error task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/CommentsParam} opts.commentsParam 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.retryErrorTask = function(id, opts) {
      return this.retryErrorTaskWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * save change permission actions
     * @param {String} id 
     * @param {Array.<module:model/PermissionActionItem>} permissionActionItem 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.saveChangePermissionActionsWithHttpInfo = function(id, permissionActionItem) {
      var postBody = permissionActionItem;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling saveChangePermissionActions");
      }
      // verify the required parameter 'permissionActionItem' is set
      if (permissionActionItem === undefined || permissionActionItem === null) {
        throw new Error("Missing the required parameter 'permissionActionItem' when calling saveChangePermissionActions");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/changepermission/{id}/permission', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * save change permission actions
     * @param {String} id 
     * @param {Array.<module:model/PermissionActionItem>} permissionActionItem 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.saveChangePermissionActions = function(id, permissionActionItem) {
      return this.saveChangePermissionActionsWithHttpInfo(id, permissionActionItem)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Save clone permission report
     * @param {String} id 
     * @param {Array.<module:model/SecuritySearchResult>} securitySearchResult 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.saveClonePermissionReportWithHttpInfo = function(id, securitySearchResult) {
      var postBody = securitySearchResult;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling saveClonePermissionReport");
      }
      // verify the required parameter 'securitySearchResult' is set
      if (securitySearchResult === undefined || securitySearchResult === null) {
        throw new Error("Missing the required parameter 'securitySearchResult' when calling saveClonePermissionReport");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/clonepermission/{id}/permission', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Save clone permission report
     * @param {String} id 
     * @param {Array.<module:model/SecuritySearchResult>} securitySearchResult 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.saveClonePermissionReport = function(id, securitySearchResult) {
      return this.saveClonePermissionReportWithHttpInfo(id, securitySearchResult)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * save manual archive report
     * @param {String} id 
     * @param {Array.<module:model/ManuallyArchiveRecordModel>} manuallyArchiveRecordModel 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.saveGetManualArchiveReportWithHttpInfo = function(id, manuallyArchiveRecordModel) {
      var postBody = manuallyArchiveRecordModel;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling saveGetManualArchiveReport");
      }
      // verify the required parameter 'manuallyArchiveRecordModel' is set
      if (manuallyArchiveRecordModel === undefined || manuallyArchiveRecordModel === null) {
        throw new Error("Missing the required parameter 'manuallyArchiveRecordModel' when calling saveGetManualArchiveReport");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/manualarchive', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * save manual archive report
     * @param {String} id 
     * @param {Array.<module:model/ManuallyArchiveRecordModel>} manuallyArchiveRecordModel 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.saveGetManualArchiveReport = function(id, manuallyArchiveRecordModel) {
      return this.saveGetManualArchiveReportWithHttpInfo(id, manuallyArchiveRecordModel)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * save group permission recertification results
     * @param {String} id 
     * @param {Array.<module:model/GroupPermissionActionItem>} groupPermissionActionItem 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.saveGroupPermissionRecertificationResultsWithHttpInfo = function(id, groupPermissionActionItem) {
      var postBody = groupPermissionActionItem;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling saveGroupPermissionRecertificationResults");
      }
      // verify the required parameter 'groupPermissionActionItem' is set
      if (groupPermissionActionItem === undefined || groupPermissionActionItem === null) {
        throw new Error("Missing the required parameter 'groupPermissionActionItem' when calling saveGroupPermissionRecertificationResults");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/group/recertification/permission', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * save group permission recertification results
     * @param {String} id 
     * @param {Array.<module:model/GroupPermissionActionItem>} groupPermissionActionItem 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.saveGroupPermissionRecertificationResults = function(id, groupPermissionActionItem) {
      return this.saveGroupPermissionRecertificationResultsWithHttpInfo(id, groupPermissionActionItem)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * save remove permission report
     * @param {String} id 
     * @param {Array.<module:model/SecuritySearchResult>} securitySearchResult 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.saveRemovePermissionReportWithHttpInfo = function(id, securitySearchResult) {
      var postBody = securitySearchResult;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling saveRemovePermissionReport");
      }
      // verify the required parameter 'securitySearchResult' is set
      if (securitySearchResult === undefined || securitySearchResult === null) {
        throw new Error("Missing the required parameter 'securitySearchResult' when calling saveRemovePermissionReport");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/removepermission/{id}/permission', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * save remove permission report
     * @param {String} id 
     * @param {Array.<module:model/SecuritySearchResult>} securitySearchResult 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.saveRemovePermissionReport = function(id, securitySearchResult) {
      return this.saveRemovePermissionReportWithHttpInfo(id, securitySearchResult)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * save site metadata recertification metadata
     * @param {String} id 
     * @param {Array.<module:model/RequestMetadata>} requestMetadata 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.saveSiteMetadataRecertificationResultWithHttpInfo = function(id, requestMetadata) {
      var postBody = requestMetadata;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling saveSiteMetadataRecertificationResult");
      }
      // verify the required parameter 'requestMetadata' is set
      if (requestMetadata === undefined || requestMetadata === null) {
        throw new Error("Missing the required parameter 'requestMetadata' when calling saveSiteMetadataRecertificationResult");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/site/recertification/metadata', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * save site metadata recertification metadata
     * @param {String} id 
     * @param {Array.<module:model/RequestMetadata>} requestMetadata 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.saveSiteMetadataRecertificationResult = function(id, requestMetadata) {
      return this.saveSiteMetadataRecertificationResultWithHttpInfo(id, requestMetadata)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * save site permission recertification permissions
     * @param {String} id 
     * @param {Array.<module:model/PermissionActionItem>} permissionActionItem 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.saveSitePermissionRecertificationResultWithHttpInfo = function(id, permissionActionItem) {
      var postBody = permissionActionItem;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling saveSitePermissionRecertificationResult");
      }
      // verify the required parameter 'permissionActionItem' is set
      if (permissionActionItem === undefined || permissionActionItem === null) {
        throw new Error("Missing the required parameter 'permissionActionItem' when calling saveSitePermissionRecertificationResult");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/site/recertification/permission', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * save site permission recertification permissions
     * @param {String} id 
     * @param {Array.<module:model/PermissionActionItem>} permissionActionItem 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.saveSitePermissionRecertificationResult = function(id, permissionActionItem) {
      return this.saveSitePermissionRecertificationResultWithHttpInfo(id, permissionActionItem)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * skip error task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/CommentsParam} opts.commentsParam 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.skipErrorTaskWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['commentsParam'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling skipErrorTask");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/skip', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * skip error task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/CommentsParam} opts.commentsParam 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.skipErrorTask = function(id, opts) {
      return this.skipErrorTaskWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * specify primary and secondary contact when primary contact is deactived
     * @param {String} id 
     * @param {String} primarycontact 
     * @param {String} secondarycontact 
     * @param {Object} opts Optional parameters
     * @param {String} opts.primarycontactemail 
     * @param {String} opts.secodnarycontactemail 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.specifyPrimaryAndSecondaryContactWhenPrimaryContactIsDeactivedWithHttpInfo = function(id, primarycontact, secondarycontact, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling specifyPrimaryAndSecondaryContactWhenPrimaryContactIsDeactived");
      }
      // verify the required parameter 'primarycontact' is set
      if (primarycontact === undefined || primarycontact === null) {
        throw new Error("Missing the required parameter 'primarycontact' when calling specifyPrimaryAndSecondaryContactWhenPrimaryContactIsDeactived");
      }
      // verify the required parameter 'secondarycontact' is set
      if (secondarycontact === undefined || secondarycontact === null) {
        throw new Error("Missing the required parameter 'secondarycontact' when calling specifyPrimaryAndSecondaryContactWhenPrimaryContactIsDeactived");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'primarycontact': primarycontact,
        'secondarycontact': secondarycontact,
        'primarycontactemail': opts['primarycontactemail'],
        'secodnarycontactemail': opts['secodnarycontactemail'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/election/specify/contacts', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * specify primary and secondary contact when primary contact is deactived
     * @param {String} id 
     * @param {String} primarycontact 
     * @param {String} secondarycontact 
     * @param {Object} opts Optional parameters
     * @param {String} opts.primarycontactemail 
     * @param {String} opts.secodnarycontactemail 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.specifyPrimaryAndSecondaryContactWhenPrimaryContactIsDeactived = function(id, primarycontact, secondarycontact, opts) {
      return this.specifyPrimaryAndSecondaryContactWhenPrimaryContactIsDeactivedWithHttpInfo(id, primarycontact, secondarycontact, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * specify secondary contact when secondary contact is deactived
     * @param {String} id 
     * @param {String} secondarycontact 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.specifySecondaryContactWhenSecondaryContactIsDeactivedWithHttpInfo = function(id, secondarycontact) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling specifySecondaryContactWhenSecondaryContactIsDeactived");
      }
      // verify the required parameter 'secondarycontact' is set
      if (secondarycontact === undefined || secondarycontact === null) {
        throw new Error("Missing the required parameter 'secondarycontact' when calling specifySecondaryContactWhenSecondaryContactIsDeactived");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'secondarycontact': secondarycontact,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/election/specify/secondarycontact', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * specify secondary contact when secondary contact is deactived
     * @param {String} id 
     * @param {String} secondarycontact 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.specifySecondaryContactWhenSecondaryContactIsDeactived = function(id, secondarycontact) {
      return this.specifySecondaryContactWhenSecondaryContactIsDeactivedWithHttpInfo(id, secondarycontact)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * submit archive group auto task
     * @param {Object} opts Optional parameters
     * @param {module:model/AutoTaskArchiveRequest} opts.autoTaskArchiveRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.submitArchiveGroupAutoTaskWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['autoTaskArchiveRequest'];

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/archivegroup', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * submit archive group auto task
     * @param {Object} opts Optional parameters
     * @param {module:model/AutoTaskArchiveRequest} opts.autoTaskArchiveRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.submitArchiveGroupAutoTask = function(opts) {
      return this.submitArchiveGroupAutoTaskWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * submit site archive auto task
     * @param {Object} opts Optional parameters
     * @param {module:model/AutoTaskArchiveRequest} opts.autoTaskArchiveRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.submitArchiveSiteAutoTaskWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['autoTaskArchiveRequest'];

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/archivesite', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * submit site archive auto task
     * @param {Object} opts Optional parameters
     * @param {module:model/AutoTaskArchiveRequest} opts.autoTaskArchiveRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.submitArchiveSiteAutoTask = function(opts) {
      return this.submitArchiveSiteAutoTaskWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * submit site policy change auto task
     * @param {Object} opts Optional parameters
     * @param {module:model/AutoTaskChangePolicyRequest} opts.autoTaskChangePolicyRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.submitChangeSitePolicyAutoTaskWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['autoTaskChangePolicyRequest'];

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/changesitepolicy', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * submit site policy change auto task
     * @param {Object} opts Optional parameters
     * @param {module:model/AutoTaskChangePolicyRequest} opts.autoTaskChangePolicyRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.submitChangeSitePolicyAutoTask = function(opts) {
      return this.submitChangeSitePolicyAutoTaskWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * submit group continue access auto task
     * @param {Object} opts Optional parameters
     * @param {String} opts.id 
     * @param {module:model/CommentsParam} opts.commentsParam 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.submitContinueAccessGroupAutoTaskWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['commentsParam'];

      var pathParams = {
      };
      var queryParams = {
        'id': opts['id'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/continueaccessgroup', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * submit group continue access auto task
     * @param {Object} opts Optional parameters
     * @param {String} opts.id 
     * @param {module:model/CommentsParam} opts.commentsParam 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.submitContinueAccessGroupAutoTask = function(opts) {
      return this.submitContinueAccessGroupAutoTaskWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * submit site continue access auto task
     * @param {Object} opts Optional parameters
     * @param {String} opts.id 
     * @param {module:model/CommentsParam} opts.commentsParam 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.submitContinueAccessSiteAutoTaskWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['commentsParam'];

      var pathParams = {
      };
      var queryParams = {
        'id': opts['id'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/continueaccesssite', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * submit site continue access auto task
     * @param {Object} opts Optional parameters
     * @param {String} opts.id 
     * @param {module:model/CommentsParam} opts.commentsParam 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.submitContinueAccessSiteAutoTask = function(opts) {
      return this.submitContinueAccessSiteAutoTaskWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * submit delete group auto task
     * @param {Object} opts Optional parameters
     * @param {module:model/AutoTaskDeleteRequest} opts.autoTaskDeleteRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.submitDeleteGroupAutoTaskWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['autoTaskDeleteRequest'];

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/deletegroup', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * submit delete group auto task
     * @param {Object} opts Optional parameters
     * @param {module:model/AutoTaskDeleteRequest} opts.autoTaskDeleteRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.submitDeleteGroupAutoTask = function(opts) {
      return this.submitDeleteGroupAutoTaskWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * submit site delete auto task
     * @param {Object} opts Optional parameters
     * @param {module:model/AutoTaskDeleteRequest} opts.autoTaskDeleteRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.submitDeleteSiteAutoTaskWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['autoTaskDeleteRequest'];

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/deletesite', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * submit site delete auto task
     * @param {Object} opts Optional parameters
     * @param {module:model/AutoTaskDeleteRequest} opts.autoTaskDeleteRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.submitDeleteSiteAutoTask = function(opts) {
      return this.submitDeleteSiteAutoTaskWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * submit extend group auto task
     * @param {Object} opts Optional parameters
     * @param {module:model/AutoTaskExtendRequest} opts.autoTaskExtendRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.submitExtendGroupAutoTaskWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['autoTaskExtendRequest'];

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/extendgroup', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * submit extend group auto task
     * @param {Object} opts Optional parameters
     * @param {module:model/AutoTaskExtendRequest} opts.autoTaskExtendRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.submitExtendGroupAutoTask = function(opts) {
      return this.submitExtendGroupAutoTaskWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * submit site extend auto task
     * @param {Object} opts Optional parameters
     * @param {module:model/AutoTaskExtendRequest} opts.autoTaskExtendRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.submitExtendSiteAutoTaskWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['autoTaskExtendRequest'];

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/extendsite', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * submit site extend auto task
     * @param {Object} opts Optional parameters
     * @param {module:model/AutoTaskExtendRequest} opts.autoTaskExtendRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.submitExtendSiteAutoTask = function(opts) {
      return this.submitExtendSiteAutoTaskWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * submit site/group recertification task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/CommentsParam} opts.commentsParam 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.submitRecertificationTaskWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['commentsParam'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling submitRecertificationTask");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/tasks/{id}/submit', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * submit site/group recertification task
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/CommentsParam} opts.commentsParam 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.submitRecertificationTask = function(id, opts) {
      return this.submitRecertificationTaskWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * view site ownership recertification task
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OwnershipRecertification} and HTTP response
     */
    this.viewSiteOwnershipRecertificationTaskWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling viewSiteOwnershipRecertificationTask");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ClientId', 'ClientSecret', 'UserPrincipalName'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = OwnershipRecertification;
      return this.apiClient.callApi(
        '/tasks/{id}/site/recertification/ownership', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * view site ownership recertification task
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/OwnershipRecertification}
     */
    this.viewSiteOwnershipRecertificationTask = function(id) {
      return this.viewSiteOwnershipRecertificationTaskWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
